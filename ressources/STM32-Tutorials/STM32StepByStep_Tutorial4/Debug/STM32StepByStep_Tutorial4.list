
STM32StepByStep_Tutorial4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080083c0  080083c0  000093c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008480  08008480  0000a100  2**0
                  CONTENTS
  4 .ARM          00000008  08008480  08008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008488  08008488  0000a100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008488  08008488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800848c  0800848c  0000948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08008490  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  20000100  08008590  0000a100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08008590  0000a804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b895  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c6  00000000  00000000  000259c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00028c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001227  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e2eb  00000000  00000000  0002b61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1f3  00000000  00000000  0005990a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e901  00000000  00000000  00075afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001943fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  00194444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0019ae04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000100 	.word	0x20000100
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080083a8 	.word	0x080083a8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000104 	.word	0x20000104
 80001fc:	080083a8 	.word	0x080083a8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96a 	b.w	8000954 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	460c      	mov	r4, r1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d14e      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a4:	4694      	mov	ip, r2
 80006a6:	458c      	cmp	ip, r1
 80006a8:	4686      	mov	lr, r0
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	d962      	bls.n	8000776 <__udivmoddi4+0xde>
 80006b0:	b14a      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b2:	f1c2 0320 	rsb	r3, r2, #32
 80006b6:	4091      	lsls	r1, r2
 80006b8:	fa20 f303 	lsr.w	r3, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	4319      	orrs	r1, r3
 80006c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ca:	fa1f f68c 	uxth.w	r6, ip
 80006ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006d6:	fb07 1114 	mls	r1, r7, r4, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb04 f106 	mul.w	r1, r4, r6
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ee:	f080 8112 	bcs.w	8000916 <__udivmoddi4+0x27e>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 810f 	bls.w	8000916 <__udivmoddi4+0x27e>
 80006f8:	3c02      	subs	r4, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a59      	subs	r1, r3, r1
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb1 f0f7 	udiv	r0, r1, r7
 8000706:	fb07 1110 	mls	r1, r7, r0, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb00 f606 	mul.w	r6, r0, r6
 8000712:	429e      	cmp	r6, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x94>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 31ff 	add.w	r1, r0, #4294967295
 800071e:	f080 80fc 	bcs.w	800091a <__udivmoddi4+0x282>
 8000722:	429e      	cmp	r6, r3
 8000724:	f240 80f9 	bls.w	800091a <__udivmoddi4+0x282>
 8000728:	4463      	add	r3, ip
 800072a:	3802      	subs	r0, #2
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000732:	2100      	movs	r1, #0
 8000734:	b11d      	cbz	r5, 800073e <__udivmoddi4+0xa6>
 8000736:	40d3      	lsrs	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e9c5 3200 	strd	r3, r2, [r5]
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d905      	bls.n	8000752 <__udivmoddi4+0xba>
 8000746:	b10d      	cbz	r5, 800074c <__udivmoddi4+0xb4>
 8000748:	e9c5 0100 	strd	r0, r1, [r5]
 800074c:	2100      	movs	r1, #0
 800074e:	4608      	mov	r0, r1
 8000750:	e7f5      	b.n	800073e <__udivmoddi4+0xa6>
 8000752:	fab3 f183 	clz	r1, r3
 8000756:	2900      	cmp	r1, #0
 8000758:	d146      	bne.n	80007e8 <__udivmoddi4+0x150>
 800075a:	42a3      	cmp	r3, r4
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xcc>
 800075e:	4290      	cmp	r0, r2
 8000760:	f0c0 80f0 	bcc.w	8000944 <__udivmoddi4+0x2ac>
 8000764:	1a86      	subs	r6, r0, r2
 8000766:	eb64 0303 	sbc.w	r3, r4, r3
 800076a:	2001      	movs	r0, #1
 800076c:	2d00      	cmp	r5, #0
 800076e:	d0e6      	beq.n	800073e <__udivmoddi4+0xa6>
 8000770:	e9c5 6300 	strd	r6, r3, [r5]
 8000774:	e7e3      	b.n	800073e <__udivmoddi4+0xa6>
 8000776:	2a00      	cmp	r2, #0
 8000778:	f040 8090 	bne.w	800089c <__udivmoddi4+0x204>
 800077c:	eba1 040c 	sub.w	r4, r1, ip
 8000780:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000784:	fa1f f78c 	uxth.w	r7, ip
 8000788:	2101      	movs	r1, #1
 800078a:	fbb4 f6f8 	udiv	r6, r4, r8
 800078e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000792:	fb08 4416 	mls	r4, r8, r6, r4
 8000796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079a:	fb07 f006 	mul.w	r0, r7, r6
 800079e:	4298      	cmp	r0, r3
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x11c>
 80007a2:	eb1c 0303 	adds.w	r3, ip, r3
 80007a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x11a>
 80007ac:	4298      	cmp	r0, r3
 80007ae:	f200 80cd 	bhi.w	800094c <__udivmoddi4+0x2b4>
 80007b2:	4626      	mov	r6, r4
 80007b4:	1a1c      	subs	r4, r3, r0
 80007b6:	fa1f f38e 	uxth.w	r3, lr
 80007ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80007be:	fb08 4410 	mls	r4, r8, r0, r4
 80007c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007c6:	fb00 f707 	mul.w	r7, r0, r7
 80007ca:	429f      	cmp	r7, r3
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x148>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x146>
 80007d8:	429f      	cmp	r7, r3
 80007da:	f200 80b0 	bhi.w	800093e <__udivmoddi4+0x2a6>
 80007de:	4620      	mov	r0, r4
 80007e0:	1bdb      	subs	r3, r3, r7
 80007e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e6:	e7a5      	b.n	8000734 <__udivmoddi4+0x9c>
 80007e8:	f1c1 0620 	rsb	r6, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 f706 	lsr.w	r7, r2, r6
 80007f2:	431f      	orrs	r7, r3
 80007f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007f8:	fa04 f301 	lsl.w	r3, r4, r1
 80007fc:	ea43 030c 	orr.w	r3, r3, ip
 8000800:	40f4      	lsrs	r4, r6
 8000802:	fa00 f801 	lsl.w	r8, r0, r1
 8000806:	0c38      	lsrs	r0, r7, #16
 8000808:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800080c:	fbb4 fef0 	udiv	lr, r4, r0
 8000810:	fa1f fc87 	uxth.w	ip, r7
 8000814:	fb00 441e 	mls	r4, r0, lr, r4
 8000818:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081c:	fb0e f90c 	mul.w	r9, lr, ip
 8000820:	45a1      	cmp	r9, r4
 8000822:	fa02 f201 	lsl.w	r2, r2, r1
 8000826:	d90a      	bls.n	800083e <__udivmoddi4+0x1a6>
 8000828:	193c      	adds	r4, r7, r4
 800082a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800082e:	f080 8084 	bcs.w	800093a <__udivmoddi4+0x2a2>
 8000832:	45a1      	cmp	r9, r4
 8000834:	f240 8081 	bls.w	800093a <__udivmoddi4+0x2a2>
 8000838:	f1ae 0e02 	sub.w	lr, lr, #2
 800083c:	443c      	add	r4, r7
 800083e:	eba4 0409 	sub.w	r4, r4, r9
 8000842:	fa1f f983 	uxth.w	r9, r3
 8000846:	fbb4 f3f0 	udiv	r3, r4, r0
 800084a:	fb00 4413 	mls	r4, r0, r3, r4
 800084e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000852:	fb03 fc0c 	mul.w	ip, r3, ip
 8000856:	45a4      	cmp	ip, r4
 8000858:	d907      	bls.n	800086a <__udivmoddi4+0x1d2>
 800085a:	193c      	adds	r4, r7, r4
 800085c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000860:	d267      	bcs.n	8000932 <__udivmoddi4+0x29a>
 8000862:	45a4      	cmp	ip, r4
 8000864:	d965      	bls.n	8000932 <__udivmoddi4+0x29a>
 8000866:	3b02      	subs	r3, #2
 8000868:	443c      	add	r4, r7
 800086a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800086e:	fba0 9302 	umull	r9, r3, r0, r2
 8000872:	eba4 040c 	sub.w	r4, r4, ip
 8000876:	429c      	cmp	r4, r3
 8000878:	46ce      	mov	lr, r9
 800087a:	469c      	mov	ip, r3
 800087c:	d351      	bcc.n	8000922 <__udivmoddi4+0x28a>
 800087e:	d04e      	beq.n	800091e <__udivmoddi4+0x286>
 8000880:	b155      	cbz	r5, 8000898 <__udivmoddi4+0x200>
 8000882:	ebb8 030e 	subs.w	r3, r8, lr
 8000886:	eb64 040c 	sbc.w	r4, r4, ip
 800088a:	fa04 f606 	lsl.w	r6, r4, r6
 800088e:	40cb      	lsrs	r3, r1
 8000890:	431e      	orrs	r6, r3
 8000892:	40cc      	lsrs	r4, r1
 8000894:	e9c5 6400 	strd	r6, r4, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	e750      	b.n	800073e <__udivmoddi4+0xa6>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f103 	lsr.w	r1, r0, r3
 80008a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ac:	4094      	lsls	r4, r2
 80008ae:	430c      	orrs	r4, r1
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b8:	fa1f f78c 	uxth.w	r7, ip
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3110 	mls	r1, r8, r0, r3
 80008c4:	0c23      	lsrs	r3, r4, #16
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f107 	mul.w	r1, r0, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x24c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008da:	d22c      	bcs.n	8000936 <__udivmoddi4+0x29e>
 80008dc:	4299      	cmp	r1, r3
 80008de:	d92a      	bls.n	8000936 <__udivmoddi4+0x29e>
 80008e0:	3802      	subs	r0, #2
 80008e2:	4463      	add	r3, ip
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008ec:	fb08 3311 	mls	r3, r8, r1, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb01 f307 	mul.w	r3, r1, r7
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x276>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f101 36ff 	add.w	r6, r1, #4294967295
 8000904:	d213      	bcs.n	800092e <__udivmoddi4+0x296>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d911      	bls.n	800092e <__udivmoddi4+0x296>
 800090a:	3902      	subs	r1, #2
 800090c:	4464      	add	r4, ip
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000914:	e739      	b.n	800078a <__udivmoddi4+0xf2>
 8000916:	4604      	mov	r4, r0
 8000918:	e6f0      	b.n	80006fc <__udivmoddi4+0x64>
 800091a:	4608      	mov	r0, r1
 800091c:	e706      	b.n	800072c <__udivmoddi4+0x94>
 800091e:	45c8      	cmp	r8, r9
 8000920:	d2ae      	bcs.n	8000880 <__udivmoddi4+0x1e8>
 8000922:	ebb9 0e02 	subs.w	lr, r9, r2
 8000926:	eb63 0c07 	sbc.w	ip, r3, r7
 800092a:	3801      	subs	r0, #1
 800092c:	e7a8      	b.n	8000880 <__udivmoddi4+0x1e8>
 800092e:	4631      	mov	r1, r6
 8000930:	e7ed      	b.n	800090e <__udivmoddi4+0x276>
 8000932:	4603      	mov	r3, r0
 8000934:	e799      	b.n	800086a <__udivmoddi4+0x1d2>
 8000936:	4630      	mov	r0, r6
 8000938:	e7d4      	b.n	80008e4 <__udivmoddi4+0x24c>
 800093a:	46d6      	mov	lr, sl
 800093c:	e77f      	b.n	800083e <__udivmoddi4+0x1a6>
 800093e:	4463      	add	r3, ip
 8000940:	3802      	subs	r0, #2
 8000942:	e74d      	b.n	80007e0 <__udivmoddi4+0x148>
 8000944:	4606      	mov	r6, r0
 8000946:	4623      	mov	r3, r4
 8000948:	4608      	mov	r0, r1
 800094a:	e70f      	b.n	800076c <__udivmoddi4+0xd4>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	e730      	b.n	80007b4 <__udivmoddi4+0x11c>
 8000952:	bf00      	nop

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f001 fc3d 	bl	80021dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f88b 	bl	8000a7c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000966:	f000 f8eb 	bl	8000b40 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 fc41 	bl	80011f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800096e:	f000 f917 	bl	8000ba0 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000972:	f000 f979 	bl	8000c68 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000976:	f000 f9af 	bl	8000cd8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800097a:	f000 f9ed 	bl	8000d58 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800097e:	f000 fa2b 	bl	8000dd8 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000982:	f000 fa7f 	bl	8000e84 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000986:	f000 fabb 	bl	8000f00 <MX_SPI3_Init>
  MX_UART4_Init();
 800098a:	f000 faf7 	bl	8000f7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 800098e:	f000 fb41 	bl	8001014 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000992:	f000 fb8b 	bl	80010ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000996:	f000 fbd7 	bl	8001148 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800099a:	f000 fc21 	bl	80011e0 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	2230      	movs	r2, #48	@ 0x30
 80009a4:	492d      	ldr	r1, [pc, #180]	@ (8000a5c <main+0x104>)
 80009a6:	482e      	ldr	r0, [pc, #184]	@ (8000a60 <main+0x108>)
 80009a8:	f006 f963 	bl	8006c72 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80009ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b0:	222f      	movs	r2, #47	@ 0x2f
 80009b2:	492c      	ldr	r1, [pc, #176]	@ (8000a64 <main+0x10c>)
 80009b4:	482a      	ldr	r0, [pc, #168]	@ (8000a60 <main+0x108>)
 80009b6:	f006 f95c 	bl	8006c72 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 80009ba:	f001 fb31 	bl	8002020 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	2231      	movs	r2, #49	@ 0x31
 80009c4:	4928      	ldr	r1, [pc, #160]	@ (8000a68 <main+0x110>)
 80009c6:	4826      	ldr	r0, [pc, #152]	@ (8000a60 <main+0x108>)
 80009c8:	f006 f953 	bl	8006c72 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    temp_value = BSP_TSENSOR_ReadTemp();
 80009cc:	f001 fb44 	bl	8002058 <BSP_TSENSOR_ReadTemp>
 80009d0:	eef0 7a40 	vmov.f32	s15, s0
 80009d4:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <main+0x114>)
 80009d6:	edc3 7a00 	vstr	s15, [r3]
    int tmpInt1 = temp_value;
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <main+0x114>)
 80009dc:	edd3 7a00 	vldr	s15, [r3]
 80009e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e4:	ee17 3a90 	vmov	r3, s15
 80009e8:	60fb      	str	r3, [r7, #12]
    float tmpFrac = temp_value - tmpInt1;
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <main+0x114>)
 80009ec:	ed93 7a00 	vldr	s14, [r3]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fe:	edc7 7a02 	vstr	s15, [r7, #8]
    int tmpInt2 = trunc(tmpFrac * 100);
 8000a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a06:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000a70 <main+0x118>
 8000a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a0e:	ee17 0a90 	vmov	r0, s15
 8000a12:	f7ff fda9 	bl	8000568 <__aeabi_f2d>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	ec43 2b10 	vmov	d0, r2, r3
 8000a1e:	f007 fc89 	bl	8008334 <trunc>
 8000a22:	ec53 2b10 	vmov	r2, r3, d0
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f7ff fdf5 	bl	8000618 <__aeabi_d2iz>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	607b      	str	r3, [r7, #4]
    snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <main+0x11c>)
 8000a3a:	2164      	movs	r1, #100	@ 0x64
 8000a3c:	480e      	ldr	r0, [pc, #56]	@ (8000a78 <main+0x120>)
 8000a3e:	f006 ffc5 	bl	80079cc <sniprintf>
    HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	2264      	movs	r2, #100	@ 0x64
 8000a48:	490b      	ldr	r1, [pc, #44]	@ (8000a78 <main+0x120>)
 8000a4a:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <main+0x108>)
 8000a4c:	f006 f911 	bl	8006c72 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a54:	f001 fc36 	bl	80022c4 <HAL_Delay>
  {
 8000a58:	bf00      	nop
 8000a5a:	e7b7      	b.n	80009cc <main+0x74>
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000410 	.word	0x20000410
 8000a64:	20000030 	.word	0x20000030
 8000a68:	20000060 	.word	0x20000060
 8000a6c:	200005cc 	.word	0x200005cc
 8000a70:	42c80000 	.word	0x42c80000
 8000a74:	080083c0 	.word	0x080083c0
 8000a78:	200005d0 	.word	0x200005d0

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b096      	sub	sp, #88	@ 0x58
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2244      	movs	r2, #68	@ 0x44
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f006 ffd2 	bl	8007a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f004 fb50 	bl	8005144 <HAL_PWREx_ControlVoltageScaling>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000aaa:	f000 fce3 	bl	8001474 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aae:	f004 fb19 	bl	80050e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ab2:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <SystemClock_Config+0xc0>)
 8000ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ab8:	4a20      	ldr	r2, [pc, #128]	@ (8000b3c <SystemClock_Config+0xc0>)
 8000aba:	f023 0318 	bic.w	r3, r3, #24
 8000abe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aca:	2301      	movs	r3, #1
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad2:	2360      	movs	r3, #96	@ 0x60
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ada:	2301      	movs	r3, #1
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ae2:	233c      	movs	r3, #60	@ 0x3c
 8000ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fbc8 	bl	800528c <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b02:	f000 fcb7 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 ffce 	bl	8005ac0 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b2a:	f000 fca3 	bl	8001474 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b2e:	f005 fdb5 	bl	800669c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b32:	bf00      	nop
 8000b34:	3758      	adds	r7, #88	@ 0x58
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0a6      	sub	sp, #152	@ 0x98
 8000b44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2294      	movs	r2, #148	@ 0x94
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 ff71 	bl	8007a34 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000b52:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000b60:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000b64:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b66:	2301      	movs	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000b6e:	2318      	movs	r3, #24
 8000b70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000b7e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000b82:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4618      	mov	r0, r3
 8000b88:	f005 fa58 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b92:	f000 fc6f 	bl	8001474 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3798      	adds	r7, #152	@ 0x98
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <MX_ADC1_Init+0xc0>)
 8000bba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c16:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000c18:	f001 fd18 	bl	800264c <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c22:	f000 fc27 	bl	8001474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_ADC1_Init+0xc4>)
 8000c28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c32:	237f      	movs	r3, #127	@ 0x7f
 8000c34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2304      	movs	r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <MX_ADC1_Init+0xbc>)
 8000c44:	f001 fe48 	bl	80028d8 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c4e:	f000 fc11 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000011c 	.word	0x2000011c
 8000c60:	50040000 	.word	0x50040000
 8000c64:	04300002 	.word	0x04300002

08000c68 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c6e:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <MX_DFSDM1_Init+0x6c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_DFSDM1_Init+0x68>)
 8000cbc:	f002 fb1a 	bl	80032f4 <HAL_DFSDM_ChannelInit>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000cc6:	f000 fbd5 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000184 	.word	0x20000184
 8000cd4:	40016040 	.word	0x40016040

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <MX_I2C1_Init+0x78>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <MX_I2C1_Init+0x7c>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d14:	f002 feb9 	bl	8003a8a <HAL_I2C_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1e:	f000 fba9 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d26:	f003 fc6b 	bl	8004600 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fba0 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d34:	2100      	movs	r1, #0
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_I2C1_Init+0x74>)
 8000d38:	f003 fcad 	bl	8004696 <HAL_I2CEx_ConfigDigitalFilter>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fb97 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001bc 	.word	0x200001bc
 8000d50:	40005400 	.word	0x40005400
 8000d54:	307075b1 	.word	0x307075b1

08000d58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <MX_I2C2_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <MX_I2C2_Init+0x7c>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000d94:	f002 fe79 	bl	8003a8a <HAL_I2C_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d9e:	f000 fb69 	bl	8001474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000da6:	f003 fc2b 	bl	8004600 <HAL_I2CEx_ConfigAnalogFilter>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000db0:	f000 fb60 	bl	8001474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_I2C2_Init+0x74>)
 8000db8:	f003 fc6d 	bl	8004696 <HAL_I2CEx_ConfigDigitalFilter>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 fb57 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000210 	.word	0x20000210
 8000dd0:	40005800 	.word	0x40005800
 8000dd4:	307075b1 	.word	0x307075b1

08000dd8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000dee:	4a24      	ldr	r2, [pc, #144]	@ (8000e80 <MX_OCTOSPI1_Init+0xa8>)
 8000df0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e04:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e08:	2220      	movs	r2, #32
 8000e0a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e38:	2208      	movs	r2, #8
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e3e:	f003 fc77 	bl	8004730 <HAL_OSPI_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000e48:	f000 fb14 	bl	8001474 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000e54:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000e58:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_OCTOSPI1_Init+0xa4>)
 8000e64:	f003 fd1e 	bl	80048a4 <HAL_OSPIM_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000e6e:	f000 fb01 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000264 	.word	0x20000264
 8000e80:	a0001000 	.word	0xa0001000

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <MX_SPI1_Init+0x78>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000e90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000e9e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ea2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_SPI1_Init+0x74>)
 8000ee4:	f005 fdd2 	bl	8006a8c <HAL_SPI_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eee:	f000 fac1 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200002b4 	.word	0x200002b4
 8000efc:	40013000 	.word	0x40013000

08000f00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <MX_SPI3_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f1a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f4e:	2207      	movs	r2, #7
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_SPI3_Init+0x74>)
 8000f60:	f005 fd94 	bl	8006a8c <HAL_SPI_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fa83 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000318 	.word	0x20000318
 8000f78:	40003c00 	.word	0x40003c00

08000f7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f80:	4b22      	ldr	r3, [pc, #136]	@ (800100c <MX_UART4_Init+0x90>)
 8000f82:	4a23      	ldr	r2, [pc, #140]	@ (8001010 <MX_UART4_Init+0x94>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f86:	4b21      	ldr	r3, [pc, #132]	@ (800100c <MX_UART4_Init+0x90>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <MX_UART4_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MX_UART4_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <MX_UART4_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_UART4_Init+0x90>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <MX_UART4_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_UART4_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_UART4_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <MX_UART4_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_UART4_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fc4:	4811      	ldr	r0, [pc, #68]	@ (800100c <MX_UART4_Init+0x90>)
 8000fc6:	f005 fe04 	bl	8006bd2 <HAL_UART_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fd0:	f000 fa50 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480d      	ldr	r0, [pc, #52]	@ (800100c <MX_UART4_Init+0x90>)
 8000fd8:	f006 fc2e 	bl	8007838 <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fe2:	f000 fa47 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4808      	ldr	r0, [pc, #32]	@ (800100c <MX_UART4_Init+0x90>)
 8000fea:	f006 fc63 	bl	80078b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ff4:	f000 fa3e 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <MX_UART4_Init+0x90>)
 8000ffa:	f006 fbe4 	bl	80077c6 <HAL_UARTEx_DisableFifoMode>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001004:	f000 fa36 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000037c 	.word	0x2000037c
 8001010:	40004c00 	.word	0x40004c00

08001014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 800101a:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <MX_USART1_UART_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b19      	ldr	r3, [pc, #100]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001056:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800105c:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 800105e:	f005 fdb8 	bl	8006bd2 <HAL_UART_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001068:	f000 fa04 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001070:	f006 fbe2 	bl	8007838 <HAL_UARTEx_SetTxFifoThreshold>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800107a:	f000 f9fb 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001082:	f006 fc17 	bl	80078b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 f9f2 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_USART1_UART_Init+0x90>)
 8001092:	f006 fb98 	bl	80077c6 <HAL_UARTEx_DisableFifoMode>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800109c:	f000 f9ea 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000410 	.word	0x20000410
 80010a8:	40013800 	.word	0x40013800

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010b2:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <MX_USART2_UART_Init+0x98>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b22      	ldr	r3, [pc, #136]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80010dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4812      	ldr	r0, [pc, #72]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 80010f8:	f005 fd6b 	bl	8006bd2 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001102:	f000 f9b7 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	480d      	ldr	r0, [pc, #52]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 800110a:	f006 fb95 	bl	8007838 <HAL_UARTEx_SetTxFifoThreshold>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001114:	f000 f9ae 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 800111c:	f006 fbca 	bl	80078b4 <HAL_UARTEx_SetRxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001126:	f000 f9a5 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_USART2_UART_Init+0x94>)
 800112c:	f006 fb4b 	bl	80077c6 <HAL_UARTEx_DisableFifoMode>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001136:	f000 f99d 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004a4 	.word	0x200004a4
 8001144:	40004400 	.word	0x40004400

08001148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <MX_USART3_UART_Init+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001190:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 8001192:	f005 fd1e 	bl	8006bd2 <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 f96a 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 80011a4:	f006 fb48 	bl	8007838 <HAL_UARTEx_SetTxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 f961 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 80011b6:	f006 fb7d 	bl	80078b4 <HAL_UARTEx_SetRxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f000 f958 	bl	8001474 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f006 fafe 	bl	80077c6 <HAL_UARTEx_DisableFifoMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f950 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000538 	.word	0x20000538
 80011dc:	40004800 	.word	0x40004800

080011e0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b96      	ldr	r3, [pc, #600]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4a95      	ldr	r2, [pc, #596]	@ (8001460 <MX_GPIO_Init+0x270>)
 800120c:	f043 0310 	orr.w	r3, r3, #16
 8001210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001212:	4b93      	ldr	r3, [pc, #588]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b90      	ldr	r3, [pc, #576]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	4a8f      	ldr	r2, [pc, #572]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122a:	4b8d      	ldr	r3, [pc, #564]	@ (8001460 <MX_GPIO_Init+0x270>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	4b8a      	ldr	r3, [pc, #552]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a89      	ldr	r2, [pc, #548]	@ (8001460 <MX_GPIO_Init+0x270>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b87      	ldr	r3, [pc, #540]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b84      	ldr	r3, [pc, #528]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a83      	ldr	r2, [pc, #524]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b81      	ldr	r3, [pc, #516]	@ (8001460 <MX_GPIO_Init+0x270>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b7e      	ldr	r3, [pc, #504]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a7d      	ldr	r2, [pc, #500]	@ (8001460 <MX_GPIO_Init+0x270>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b7b      	ldr	r3, [pc, #492]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b78      	ldr	r3, [pc, #480]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a77      	ldr	r2, [pc, #476]	@ (8001460 <MX_GPIO_Init+0x270>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <MX_GPIO_Init+0x270>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f240 1105 	movw	r1, #261	@ 0x105
 800129c:	4871      	ldr	r0, [pc, #452]	@ (8001464 <MX_GPIO_Init+0x274>)
 800129e:	f002 fbb9 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80012a2:	2200      	movs	r2, #0
 80012a4:	f248 111c 	movw	r1, #33052	@ 0x811c
 80012a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ac:	f002 fbb2 	bl	8003a14 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80012b0:	2200      	movs	r2, #0
 80012b2:	f24f 0134 	movw	r1, #61492	@ 0xf034
 80012b6:	486c      	ldr	r0, [pc, #432]	@ (8001468 <MX_GPIO_Init+0x278>)
 80012b8:	f002 fbac 	bl	8003a14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f242 0183 	movw	r1, #8323	@ 0x2083
 80012c2:	486a      	ldr	r0, [pc, #424]	@ (800146c <MX_GPIO_Init+0x27c>)
 80012c4:	f002 fba6 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80012ce:	4868      	ldr	r0, [pc, #416]	@ (8001470 <MX_GPIO_Init+0x280>)
 80012d0:	f002 fba0 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80012d4:	f240 1305 	movw	r3, #261	@ 0x105
 80012d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	485d      	ldr	r0, [pc, #372]	@ (8001464 <MX_GPIO_Init+0x274>)
 80012ee:	f002 f90d 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80012f2:	237a      	movs	r3, #122	@ 0x7a
 80012f4:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4857      	ldr	r0, [pc, #348]	@ (8001464 <MX_GPIO_Init+0x274>)
 8001308:	f002 f900 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800130c:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4853      	ldr	r0, [pc, #332]	@ (8001470 <MX_GPIO_Init+0x280>)
 8001324:	f002 f8f2 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001328:	f248 131c 	movw	r3, #33052	@ 0x811c
 800132c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f002 f8e2 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4842      	ldr	r0, [pc, #264]	@ (8001468 <MX_GPIO_Init+0x278>)
 800135e:	f002 f8d5 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001372:	2302      	movs	r3, #2
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	483a      	ldr	r0, [pc, #232]	@ (8001468 <MX_GPIO_Init+0x278>)
 800137e:	f002 f8c5 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001382:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001386:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4833      	ldr	r0, [pc, #204]	@ (8001468 <MX_GPIO_Init+0x278>)
 800139c:	f002 f8b6 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80013a0:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 80013a4:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	482d      	ldr	r0, [pc, #180]	@ (800146c <MX_GPIO_Init+0x27c>)
 80013b8:	f002 f8a8 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80013bc:	f242 0383 	movw	r3, #8323	@ 0x2083
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4825      	ldr	r0, [pc, #148]	@ (800146c <MX_GPIO_Init+0x27c>)
 80013d6:	f002 f899 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80013da:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	481f      	ldr	r0, [pc, #124]	@ (8001470 <MX_GPIO_Init+0x280>)
 80013f4:	f002 f88a 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f002 f87c 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001414:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001426:	230a      	movs	r3, #10
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001434:	f002 f86a 	bl	800350c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2017      	movs	r0, #23
 800143e:	f001 ff22 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001442:	2017      	movs	r0, #23
 8001444:	f001 ff3b 	bl	80032be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f001 ff1a 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001452:	2028      	movs	r0, #40	@ 0x28
 8001454:	f001 ff33 	bl	80032be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	@ 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	48001000 	.word	0x48001000
 8001468:	48000400 	.word	0x48000400
 800146c:	48000c00 	.word	0x48000c00
 8001470:	48000800 	.word	0x48000800

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <HAL_MspInit+0x44>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_MspInit+0x44>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6613      	str	r3, [r2, #96]	@ 0x60
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_MspInit+0x44>)
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x44>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x44>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a15      	ldr	r2, [pc, #84]	@ (800153c <HAL_ADC_MspInit+0x74>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d123      	bne.n	8001532 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 80014f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_ADC_MspInit+0x78>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800151a:	233f      	movs	r3, #63	@ 0x3f
 800151c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151e:	230b      	movs	r3, #11
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_ADC_MspInit+0x7c>)
 800152e:	f001 ffed 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	@ 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	50040000 	.word	0x50040000
 8001540:	40021000 	.word	0x40021000
 8001544:	48000800 	.word	0x48000800

08001548 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ae      	sub	sp, #184	@ 0xb8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2294      	movs	r2, #148	@ 0x94
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f006 fa63 	bl	8007a34 <memset>
  if(DFSDM1_Init == 0)
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d142      	bne.n	80015fc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001576:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800157a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4618      	mov	r0, r3
 8001588:	f004 fd58 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001592:	f7ff ff6f 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	4a1b      	ldr	r2, [pc, #108]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800159c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a15      	ldr	r2, [pc, #84]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80015c6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80015ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015e0:	2306      	movs	r3, #6
 80015e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	@ (800160c <HAL_DFSDM_ChannelMspInit+0xc4>)
 80015ee:	f001 ff8d 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a02      	ldr	r2, [pc, #8]	@ (8001604 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80015fa:	6013      	str	r3, [r2, #0]
  }

}
 80015fc:	bf00      	nop
 80015fe:	37b8      	adds	r7, #184	@ 0xb8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000634 	.word	0x20000634
 8001608:	40021000 	.word	0x40021000
 800160c:	48001000 	.word	0x48001000

08001610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0b0      	sub	sp, #192	@ 0xc0
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2294      	movs	r2, #148	@ 0x94
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f006 f9ff 	bl	8007a34 <memset>
  if(hi2c->Instance==I2C1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <HAL_I2C_MspInit+0x134>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d13c      	bne.n	80016ba <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001640:	2340      	movs	r3, #64	@ 0x40
 8001642:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001644:	2300      	movs	r3, #0
 8001646:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	4618      	mov	r0, r3
 800164e:	f004 fcf5 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001658:	f7ff ff0c 	bl	8001474 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b3a      	ldr	r3, [pc, #232]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a39      	ldr	r2, [pc, #228]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b37      	ldr	r3, [pc, #220]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001674:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001682:	2301      	movs	r3, #1
 8001684:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168e:	2304      	movs	r3, #4
 8001690:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001698:	4619      	mov	r1, r3
 800169a:	482c      	ldr	r0, [pc, #176]	@ (800174c <HAL_I2C_MspInit+0x13c>)
 800169c:	f001 ff36 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ac:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016b8:	e040      	b.n	800173c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a24      	ldr	r2, [pc, #144]	@ (8001750 <HAL_I2C_MspInit+0x140>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d13b      	bne.n	800173c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fcb3 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016dc:	f7ff feca 	bl	8001474 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	4a18      	ldr	r2, [pc, #96]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80016f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001706:	2301      	movs	r3, #1
 8001708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001712:	2304      	movs	r3, #4
 8001714:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800171c:	4619      	mov	r1, r3
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <HAL_I2C_MspInit+0x13c>)
 8001720:	f001 fef4 	bl	800350c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 800172a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_I2C_MspInit+0x138>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
}
 800173c:	bf00      	nop
 800173e:	37c0      	adds	r7, #192	@ 0xc0
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40005400 	.word	0x40005400
 8001748:	40021000 	.word	0x40021000
 800174c:	48000400 	.word	0x48000400
 8001750:	40005800 	.word	0x40005800

08001754 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <HAL_I2C_MspDeInit+0x68>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d110      	bne.n	8001788 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_I2C_MspDeInit+0x6c>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a15      	ldr	r2, [pc, #84]	@ (80017c0 <HAL_I2C_MspDeInit+0x6c>)
 800176c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001772:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001776:	4813      	ldr	r0, [pc, #76]	@ (80017c4 <HAL_I2C_MspDeInit+0x70>)
 8001778:	f002 f85a 	bl	8003830 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 800177c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001780:	4810      	ldr	r0, [pc, #64]	@ (80017c4 <HAL_I2C_MspDeInit+0x70>)
 8001782:	f002 f855 	bl	8003830 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001786:	e014      	b.n	80017b2 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_I2C_MspDeInit+0x74>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10f      	bne.n	80017b2 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_I2C_MspDeInit+0x6c>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_I2C_MspDeInit+0x6c>)
 8001798:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800179c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800179e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017a2:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <HAL_I2C_MspDeInit+0x70>)
 80017a4:	f002 f844 	bl	8003830 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80017a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <HAL_I2C_MspDeInit+0x70>)
 80017ae:	f002 f83f 	bl	8003830 <HAL_GPIO_DeInit>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	40005800 	.word	0x40005800

080017cc <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0b0      	sub	sp, #192	@ 0xc0
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	2294      	movs	r2, #148	@ 0x94
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 f921 	bl	8007a34 <memset>
  if(hospi->Instance==OCTOSPI1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a28      	ldr	r2, [pc, #160]	@ (8001898 <HAL_OSPI_MspInit+0xcc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d149      	bne.n	8001890 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80017fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001800:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fc15 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001818:	f7ff fe2c 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800181c:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	4a1e      	ldr	r2, [pc, #120]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 8001822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001828:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 8001836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001838:	4a18      	ldr	r2, [pc, #96]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183e:	6513      	str	r3, [r2, #80]	@ 0x50
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 8001842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_OSPI_MspInit+0xd0>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001864:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800187e:	230a      	movs	r3, #10
 8001880:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001884:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <HAL_OSPI_MspInit+0xd4>)
 800188c:	f001 fe3e 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001890:	bf00      	nop
 8001892:	37c0      	adds	r7, #192	@ 0xc0
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	a0001000 	.word	0xa0001000
 800189c:	40021000 	.word	0x40021000
 80018a0:	48001000 	.word	0x48001000

080018a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	@ 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001980 <HAL_SPI_MspInit+0xdc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d129      	bne.n	800191a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a28      	ldr	r2, [pc, #160]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80018f6:	23e0      	movs	r3, #224	@ 0xe0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001906:	2305      	movs	r3, #5
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f001 fdfa 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001918:	e02d      	b.n	8001976 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1a      	ldr	r2, [pc, #104]	@ (8001988 <HAL_SPI_MspInit+0xe4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d128      	bne.n	8001976 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 800192a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001940:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_SPI_MspInit+0xe0>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001954:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001966:	2306      	movs	r3, #6
 8001968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <HAL_SPI_MspInit+0xe8>)
 8001972:	f001 fdcb 	bl	800350c <HAL_GPIO_Init>
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013000 	.word	0x40013000
 8001984:	40021000 	.word	0x40021000
 8001988:	40003c00 	.word	0x40003c00
 800198c:	48000800 	.word	0x48000800

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0b4      	sub	sp, #208	@ 0xd0
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ac:	2294      	movs	r2, #148	@ 0x94
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f006 f83f 	bl	8007a34 <memset>
  if(huart->Instance==UART4)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a83      	ldr	r2, [pc, #524]	@ (8001bc8 <HAL_UART_MspInit+0x238>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d13c      	bne.n	8001a3a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019c0:	2308      	movs	r3, #8
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fb35 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019d8:	f7ff fd4c 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019dc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	4a7a      	ldr	r2, [pc, #488]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 80019e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e8:	4b78      	ldr	r3, [pc, #480]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b75      	ldr	r3, [pc, #468]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	4a74      	ldr	r2, [pc, #464]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a00:	4b72      	ldr	r3, [pc, #456]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a24:	2308      	movs	r3, #8
 8001a26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a34:	f001 fd6a 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a38:	e0c2      	b.n	8001bc0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a64      	ldr	r2, [pc, #400]	@ (8001bd0 <HAL_UART_MspInit+0x240>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d13b      	bne.n	8001abc <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 faf3 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001a5c:	f7ff fd0a 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a60:	4b5a      	ldr	r3, [pc, #360]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a64:	4a59      	ldr	r2, [pc, #356]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a6c:	4b57      	ldr	r3, [pc, #348]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b54      	ldr	r3, [pc, #336]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	4a53      	ldr	r2, [pc, #332]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a84:	4b51      	ldr	r3, [pc, #324]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a90:	23c0      	movs	r3, #192	@ 0xc0
 8001a92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4847      	ldr	r0, [pc, #284]	@ (8001bd4 <HAL_UART_MspInit+0x244>)
 8001ab6:	f001 fd29 	bl	800350c <HAL_GPIO_Init>
}
 8001aba:	e081      	b.n	8001bc0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a45      	ldr	r2, [pc, #276]	@ (8001bd8 <HAL_UART_MspInit+0x248>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d13b      	bne.n	8001b3e <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fab2 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001ade:	f7ff fcc9 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	4a39      	ldr	r2, [pc, #228]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	4a33      	ldr	r2, [pc, #204]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b06:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001b12:	2378      	movs	r3, #120	@ 0x78
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001b34:	4619      	mov	r1, r3
 8001b36:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <HAL_UART_MspInit+0x24c>)
 8001b38:	f001 fce8 	bl	800350c <HAL_GPIO_Init>
}
 8001b3c:	e040      	b.n	8001bc0 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <HAL_UART_MspInit+0x250>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d13b      	bne.n	8001bc0 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fa71 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001b60:	f7ff fc88 	bl	8001474 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b68:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b70:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b88:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_UART_MspInit+0x23c>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001b94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <HAL_UART_MspInit+0x24c>)
 8001bbc:	f001 fca6 	bl	800350c <HAL_GPIO_Init>
}
 8001bc0:	bf00      	nop
 8001bc2:	37d0      	adds	r7, #208	@ 0xd0
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40004c00 	.word	0x40004c00
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	40004800 	.word	0x40004800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3a:	f000 fb23 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001c46:	2020      	movs	r0, #32
 8001c48:	f001 fefc 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001c4c:	2040      	movs	r0, #64	@ 0x40
 8001c4e:	f001 fef9 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001c52:	2080      	movs	r0, #128	@ 0x80
 8001c54:	f001 fef6 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001c58:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c5c:	f001 fef2 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001c68:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c6c:	f001 feea 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001c70:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c74:	f001 fee6 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001c78:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001c7c:	f001 fee2 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001c80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c84:	f001 fede 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001c88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c8c:	f001 feda 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001c90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c94:	f001 fed6 	bl	8003a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f005 feba 	bl	8007a44 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200a0000 	.word	0x200a0000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	20000638 	.word	0x20000638
 8001d04:	20000808 	.word	0x20000808

08001d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <SystemInit+0x20>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d12:	4a05      	ldr	r2, [pc, #20]	@ (8001d28 <SystemInit+0x20>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d30:	f7ff ffea 	bl	8001d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	@ (8001d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <LoopForever+0xe>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d78 <LoopForever+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f005 fe79 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5e:	f7fe fdfb 	bl	8000958 <main>

08001d62 <LoopForever>:

LoopForever:
    b LoopForever
 8001d62:	e7fe      	b.n	8001d62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d64:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d6c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001d70:	08008490 	.word	0x08008490
  ldr r2, =_sbss
 8001d74:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001d78:	20000804 	.word	0x20000804

08001d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC1_IRQHandler>
	...

08001d80 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001da0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001da4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001db2:	2304      	movs	r3, #4
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481b      	ldr	r0, [pc, #108]	@ (8001e2c <I2Cx_MspInit+0xac>)
 8001dbe:	f001 fba5 	bl	800350c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4818      	ldr	r0, [pc, #96]	@ (8001e2c <I2Cx_MspInit+0xac>)
 8001dca:	f001 fb9f 	bl	800350c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001dd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dda:	4b13      	ldr	r3, [pc, #76]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dea:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001dec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001df0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <I2Cx_MspInit+0xa8>)
 8001df8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001dfc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	210f      	movs	r1, #15
 8001e02:	2021      	movs	r0, #33	@ 0x21
 8001e04:	f001 fa3f 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001e08:	2021      	movs	r0, #33	@ 0x21
 8001e0a:	f001 fa58 	bl	80032be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	210f      	movs	r1, #15
 8001e12:	2022      	movs	r0, #34	@ 0x22
 8001e14:	f001 fa37 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001e18:	2022      	movs	r0, #34	@ 0x22
 8001e1a:	f001 fa50 	bl	80032be <HAL_NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	48000400 	.word	0x48000400

08001e30 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a12      	ldr	r2, [pc, #72]	@ (8001e84 <I2Cx_Init+0x54>)
 8001e3c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a11      	ldr	r2, [pc, #68]	@ (8001e88 <I2Cx_Init+0x58>)
 8001e42:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff89 	bl	8001d80 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f001 fe0b 	bl	8003a8a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001e74:	2100      	movs	r1, #0
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f002 fbc2 	bl	8004600 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005800 	.word	0x40005800
 8001e88:	00702681 	.word	0x00702681

08001e8c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	72fb      	strb	r3, [r7, #11]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	813b      	strh	r3, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	b299      	uxth	r1, r3
 8001eae:	88f8      	ldrh	r0, [r7, #6]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	9302      	str	r3, [sp, #8]
 8001eb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 ffc0 	bl	8003e48 <HAL_I2C_Mem_Read>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f832 	bl	8001f40 <I2Cx_Error>
  }
  return status;
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b08a      	sub	sp, #40	@ 0x28
 8001eea:	af04      	add	r7, sp, #16
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	72fb      	strb	r3, [r7, #11]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	813b      	strh	r3, [r7, #8]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	b299      	uxth	r1, r3
 8001f08:	88f8      	ldrh	r0, [r7, #6]
 8001f0a:	893a      	ldrh	r2, [r7, #8]
 8001f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f001 fe7f 	bl	8003c20 <HAL_I2C_Mem_Write>
 8001f22:	4603      	mov	r3, r0
 8001f24:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f805 	bl	8001f40 <I2Cx_Error>
  }
  return status;
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 fe37 	bl	8003bc0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff6c 	bl	8001e30 <I2Cx_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <SENSOR_IO_Init+0x10>)
 8001f66:	f7ff ff63 	bl	8001e30 <I2Cx_Init>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000063c 	.word	0x2000063c

08001f74 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	71bb      	strb	r3, [r7, #6]
 8001f82:	4613      	mov	r3, r2
 8001f84:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	79f9      	ldrb	r1, [r7, #7]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	1d7b      	adds	r3, r7, #5
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <SENSOR_IO_Write+0x30>)
 8001f98:	f7ff ffa5 	bl	8001ee6 <I2Cx_WriteMultiple>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000063c 	.word	0x2000063c

08001fa8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	79f9      	ldrb	r1, [r7, #7]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	f107 030f 	add.w	r3, r7, #15
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <SENSOR_IO_Read+0x38>)
 8001fd0:	f7ff ff5c 	bl	8001e8c <I2Cx_ReadMultiple>

  return read_value;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000063c 	.word	0x2000063c

08001fe4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	603a      	str	r2, [r7, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	71bb      	strb	r3, [r7, #6]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	79f9      	ldrb	r1, [r7, #7]
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2301      	movs	r3, #1
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <SENSOR_IO_ReadMultiple+0x38>)
 800200c:	f7ff ff3e 	bl	8001e8c <I2Cx_ReadMultiple>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000063c 	.word	0x2000063c

08002020 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <BSP_TSENSOR_Init+0x30>)
 800202c:	4a09      	ldr	r2, [pc, #36]	@ (8002054 <BSP_TSENSOR_Init+0x34>)
 800202e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002030:	f7ff ff96 	bl	8001f60 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <BSP_TSENSOR_Init+0x30>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2100      	movs	r1, #0
 800203c:	20be      	movs	r0, #190	@ 0xbe
 800203e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002044:	79fb      	ldrb	r3, [r7, #7]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000690 	.word	0x20000690
 8002054:	20000098 	.word	0x20000098

08002058 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <BSP_TSENSOR_ReadTemp+0x18>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	20be      	movs	r0, #190	@ 0xbe
 8002064:	4798      	blx	r3
 8002066:	eef0 7a40 	vmov.f32	s15, s0
}
 800206a:	eeb0 0a67 	vmov.f32	s0, s15
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000690 	.word	0x20000690

08002074 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2120      	movs	r1, #32
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff8e 	bl	8001fa8 <SENSOR_IO_Read>
 800208c:	4603      	mov	r3, r0
 800208e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020b6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	2120      	movs	r1, #32
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff57 	bl	8001f74 <SENSOR_IO_Write>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b088      	sub	sp, #32
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	b2d8      	uxtb	r0, r3
 80020dc:	f107 0208 	add.w	r2, r7, #8
 80020e0:	2302      	movs	r3, #2
 80020e2:	21b2      	movs	r1, #178	@ 0xb2
 80020e4:	f7ff ff7e 	bl	8001fe4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2135      	movs	r1, #53	@ 0x35
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff5a 	bl	8001fa8 <SENSOR_IO_Read>
 80020f4:	4603      	mov	r3, r0
 80020f6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002102:	b21a      	sxth	r2, r3
 8002104:	7a3b      	ldrb	r3, [r7, #8]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	019b      	lsls	r3, r3, #6
 8002110:	b21b      	sxth	r3, r3
 8002112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002116:	b21a      	sxth	r2, r3
 8002118:	7a7b      	ldrb	r3, [r7, #9]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002120:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002124:	10db      	asrs	r3, r3, #3
 8002126:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002128:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800212c:	10db      	asrs	r3, r3, #3
 800212e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	f107 0208 	add.w	r2, r7, #8
 8002138:	2304      	movs	r3, #4
 800213a:	21bc      	movs	r1, #188	@ 0xbc
 800213c:	f7ff ff52 	bl	8001fe4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002140:	7a7b      	ldrb	r3, [r7, #9]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	b21a      	sxth	r2, r3
 8002146:	7a3b      	ldrb	r3, [r7, #8]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21a      	sxth	r2, r3
 8002154:	7abb      	ldrb	r3, [r7, #10]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	b2d8      	uxtb	r0, r3
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2302      	movs	r3, #2
 8002166:	21aa      	movs	r1, #170	@ 0xaa
 8002168:	f7ff ff3c 	bl	8001fe4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800216c:	7a7b      	ldrb	r3, [r7, #9]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	b21a      	sxth	r2, r3
 8002172:	7a3b      	ldrb	r3, [r7, #8]
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800217a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800217e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800218c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002190:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80021a2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80021a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	ee07 3a90 	vmov	s15, r3
}
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f001 f842 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ec:	2000      	movs	r0, #0
 80021ee:	f000 f80d 	bl	800220c <HAL_InitTick>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	e001      	b.n	8002202 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021fe:	f7ff f93f 	bl	8001480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002202:	79fb      	ldrb	r3, [r7, #7]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <HAL_InitTick+0x6c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d023      	beq.n	8002268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002220:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_InitTick+0x70>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <HAL_InitTick+0x6c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f001 f84f 	bl	80032da <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d809      	bhi.n	800225c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f001 f819 	bl	8003286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002254:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <HAL_InitTick+0x74>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e007      	b.n	800226c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e004      	b.n	800226c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e001      	b.n	800226c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200000ac 	.word	0x200000ac
 800227c:	20000094 	.word	0x20000094
 8002280:	200000a8 	.word	0x200000a8

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200000ac 	.word	0x200000ac
 80022a8:	20000694 	.word	0x20000694

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000694 	.word	0x20000694

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200000ac 	.word	0x200000ac

0800230c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3360      	adds	r3, #96	@ 0x60
 8002386:	461a      	mov	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <LL_ADC_SetOffset+0x44>)
 8002396:	4013      	ands	r3, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	03fff000 	.word	0x03fff000

080023bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3360      	adds	r3, #96	@ 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3360      	adds	r3, #96	@ 0x60
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	431a      	orrs	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002412:	bf00      	nop
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	615a      	str	r2, [r3, #20]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3330      	adds	r3, #48	@ 0x30
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	4413      	add	r3, r2
 8002462:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	211f      	movs	r1, #31
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	f003 011f 	and.w	r1, r3, #31
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	431a      	orrs	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3314      	adds	r3, #20
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	0e5b      	lsrs	r3, r3, #25
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	0d1b      	lsrs	r3, r3, #20
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2107      	movs	r1, #7
 80024ca:	fa01 f303 	lsl.w	r3, r1, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	0d1b      	lsrs	r3, r3, #20
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0318 	and.w	r3, r3, #24
 8002516:	4908      	ldr	r1, [pc, #32]	@ (8002538 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002518:	40d9      	lsrs	r1, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	400b      	ands	r3, r1
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	0007ffff 	.word	0x0007ffff

0800253c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800254c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6093      	str	r3, [r2, #8]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002574:	d101      	bne.n	800257a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800259c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025c4:	d101      	bne.n	80025ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <LL_ADC_IsEnabled+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_ADC_IsEnabled+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d101      	bne.n	8002616 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b08      	cmp	r3, #8
 8002636:	d101      	bne.n	800263c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e129      	b.n	80028ba <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002670:	2b00      	cmp	r3, #0
 8002672:	d109      	bne.n	8002688 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe ff27 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff67 	bl	8002560 <LL_ADC_IsDeepPowerDownEnabled>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d004      	beq.n	80026a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff4d 	bl	800253c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff82 	bl	80025b0 <LL_ADC_IsInternalRegulatorEnabled>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff66 	bl	8002588 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026bc:	4b81      	ldr	r3, [pc, #516]	@ (80028c4 <HAL_ADC_Init+0x278>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	4a81      	ldr	r2, [pc, #516]	@ (80028c8 <HAL_ADC_Init+0x27c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff64 	bl	80025b0 <LL_ADC_IsInternalRegulatorEnabled>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff75 	bl	80025fe <LL_ADC_REG_IsConversionOngoing>
 8002714:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80c2 	bne.w	80028a8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80be 	bne.w	80028a8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff49 	bl	80025d8 <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274c:	485f      	ldr	r0, [pc, #380]	@ (80028cc <HAL_ADC_Init+0x280>)
 800274e:	f7ff ff43 	bl	80025d8 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d105      	bne.n	8002764 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4619      	mov	r1, r3
 800275e:	485c      	ldr	r0, [pc, #368]	@ (80028d0 <HAL_ADC_Init+0x284>)
 8002760:	f7ff fdd4 	bl	800230c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e5b      	ldrb	r3, [r3, #25]
 8002768:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800276e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002774:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800277a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002782:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d106      	bne.n	80027a0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	3b01      	subs	r3, #1
 8002798:	045b      	lsls	r3, r3, #17
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <HAL_ADC_Init+0x288>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff25 	bl	8002624 <LL_ADC_INJ_IsConversionOngoing>
 80027da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d140      	bne.n	8002864 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d13d      	bne.n	8002864 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7e1b      	ldrb	r3, [r3, #24]
 80027f0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027f2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800280a:	f023 0306 	bic.w	r3, r3, #6
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	430b      	orrs	r3, r1
 8002816:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800281e:	2b01      	cmp	r3, #1
 8002820:	d118      	bne.n	8002854 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d10c      	bne.n	8002886 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f023 010f 	bic.w	r1, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	1e5a      	subs	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
 8002884:	e007      	b.n	8002896 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020f 	bic.w	r2, r2, #15
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80028a6:	e007      	b.n	80028b8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f043 0210 	orr.w	r2, r3, #16
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000094 	.word	0x20000094
 80028c8:	053e2d63 	.word	0x053e2d63
 80028cc:	50040000 	.word	0x50040000
 80028d0:	50040300 	.word	0x50040300
 80028d4:	fff0c007 	.word	0xfff0c007

080028d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0b6      	sub	sp, #216	@ 0xd8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x22>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e3d5      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x7ce>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fe79 	bl	80025fe <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 83ba 	bne.w	8003088 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b02      	subs	r3, #2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d81b      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x8e>
 800292e:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_ADC_ConfigChannel+0x5c>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294d 	.word	0x0800294d
 800293c:	08002955 	.word	0x08002955
 8002940:	0800295d 	.word	0x0800295d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002944:	230c      	movs	r3, #12
 8002946:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800294a:	e010      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800294c:	2312      	movs	r3, #18
 800294e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002952:	e00c      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002954:	2318      	movs	r3, #24
 8002956:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800295a:	e008      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800295c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002966:	2306      	movs	r3, #6
 8002968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800296c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800297c:	f7ff fd62 	bl	8002444 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fe3a 	bl	80025fe <LL_ADC_REG_IsConversionOngoing>
 800298a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fe46 	bl	8002624 <LL_ADC_INJ_IsConversionOngoing>
 8002998:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 81bf 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 81ba 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029b8:	d10f      	bne.n	80029da <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7ff fd69 	bl	800249c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fd23 	bl	800241e <LL_ADC_SetSamplingTimeCommonConfig>
 80029d8:	e00e      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7ff fd58 	bl	800249c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fd13 	bl	800241e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	08db      	lsrs	r3, r3, #3
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00a      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2a:	f7ff fca3 	bl	8002374 <LL_ADC_SetOffset>
 8002a2e:	e179      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fcc0 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x184>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fcb5 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 021f 	and.w	r2, r3, #31
 8002a5a:	e01e      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x1c2>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fcaa 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e004      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x1da>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0e9b      	lsrs	r3, r3, #26
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	e018      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x20c>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e004      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fc79 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fc5d 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x24a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fc52 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	0e9b      	lsrs	r3, r3, #26
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	e01e      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x288>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fc47 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b50:	2320      	movs	r3, #32
 8002b52:	e004      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x2a0>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	e018      	b.n	8002baa <HAL_ADC_ConfigChannel+0x2d2>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e004      	b.n	8002baa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d106      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fc16 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fbfa 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x310>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fbef 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 021f 	and.w	r2, r3, #31
 8002be6:	e01e      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x34e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fbe4 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c16:	2320      	movs	r3, #32
 8002c18:	e004      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x366>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	e014      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x390>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e004      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d106      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fbb7 	bl	80023e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2103      	movs	r1, #3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fb9b 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x3ce>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2103      	movs	r1, #3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fb90 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 021f 	and.w	r2, r3, #31
 8002ca4:	e017      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x3fe>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2103      	movs	r1, #3
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fb85 	bl	80023bc <LL_ADC_GetOffsetChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x416>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	e011      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x43a>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002cfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e003      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d106      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fb62 	bl	80023e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc55 	bl	80025d8 <LL_ADC_IsEnabled>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f040 813f 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f7ff fbd6 	bl	80024f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002f88 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f040 8130 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x4a4>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	bf94      	ite	ls
 8002d74:	2301      	movls	r3, #1
 8002d76:	2300      	movhi	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e019      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x4d8>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d94:	2320      	movs	r3, #32
 8002d96:	e003      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	bf94      	ite	ls
 8002daa:	2301      	movls	r3, #1
 8002dac:	2300      	movhi	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d079      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x4f8>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	069b      	lsls	r3, r3, #26
 8002dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dce:	e015      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x524>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	069b      	lsls	r3, r3, #26
 8002df8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x544>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	e017      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x574>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4c:	ea42 0103 	orr.w	r1, r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x59a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	051b      	lsls	r3, r3, #20
 8002e70:	e018      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x5cc>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e003      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	fab3 f383 	clz	r3, r3
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	e080      	b.n	8002faa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x5ec>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0e9b      	lsrs	r3, r3, #26
 8002eba:	3301      	adds	r3, #1
 8002ebc:	069b      	lsls	r3, r3, #26
 8002ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec2:	e015      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x618>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x638>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	e017      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x668>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	ea42 0103 	orr.w	r1, r2, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10d      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x694>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	3b1e      	subs	r3, #30
 8002f64:	051b      	lsls	r3, r3, #20
 8002f66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	e01d      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x6d0>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	60fb      	str	r3, [r7, #12]
  return result;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e005      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x6bc>
 8002f88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b1e      	subs	r3, #30
 8002fa2:	051b      	lsls	r3, r3, #20
 8002fa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7ff fa74 	bl	800249c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d06c      	beq.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fc0:	483c      	ldr	r0, [pc, #240]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fc2:	f7ff f9c9 	bl	8002358 <LL_ADC_GetCommonPathInternalCh>
 8002fc6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	@ (80030b8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d127      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d121      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <HAL_ADC_ConfigChannel+0x7e4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d157      	bne.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	482f      	ldr	r0, [pc, #188]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ff6:	f7ff f99c 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ffa:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	4a30      	ldr	r2, [pc, #192]	@ (80030c4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003014:	e002      	b.n	800301c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003022:	e03a      	b.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <HAL_ADC_ConfigChannel+0x7f0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d113      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800302e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003032:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10d      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1f      	ldr	r2, [pc, #124]	@ (80030bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d12a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003044:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003048:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800304c:	4619      	mov	r1, r3
 800304e:	4819      	ldr	r0, [pc, #100]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003050:	f7ff f96f 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003054:	e021      	b.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <HAL_ADC_ConfigChannel+0x7f4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d11c      	bne.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d116      	bne.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a12      	ldr	r2, [pc, #72]	@ (80030bc <HAL_ADC_ConfigChannel+0x7e4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d111      	bne.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800307a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800307e:	4619      	mov	r1, r3
 8003080:	480c      	ldr	r0, [pc, #48]	@ (80030b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003082:	f7ff f956 	bl	8002332 <LL_ADC_SetCommonPathInternalCh>
 8003086:	e008      	b.n	800309a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80030a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	37d8      	adds	r7, #216	@ 0xd8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	80080000 	.word	0x80080000
 80030b4:	50040300 	.word	0x50040300
 80030b8:	c7520000 	.word	0xc7520000
 80030bc:	50040000 	.word	0x50040000
 80030c0:	20000094 	.word	0x20000094
 80030c4:	053e2d63 	.word	0x053e2d63
 80030c8:	cb840000 	.word	0xcb840000
 80030cc:	80000001 	.word	0x80000001

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	@ (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	@ (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	@ (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	@ (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff29 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003298:	f7ff ff3e 	bl	8003118 <__NVIC_GetPriorityGrouping>
 800329c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6978      	ldr	r0, [r7, #20]
 80032a4:	f7ff ff8e 	bl	80031c4 <NVIC_EncodePriority>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff5d 	bl	8003170 <__NVIC_SetPriority>
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff31 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ffa2 	bl	800322c <SysTick_Config>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0ac      	b.n	8003460 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f8b2 	bl	8003474 <DFSDM_GetChannelFromInstance>
 8003310:	4603      	mov	r3, r0
 8003312:	4a55      	ldr	r2, [pc, #340]	@ (8003468 <HAL_DFSDM_ChannelInit+0x174>)
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e09f      	b.n	8003460 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fe f911 	bl	8001548 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003326:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_DFSDM_ChannelInit+0x178>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	4a4f      	ldr	r2, [pc, #316]	@ (800346c <HAL_DFSDM_ChannelInit+0x178>)
 800332e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003330:	4b4e      	ldr	r3, [pc, #312]	@ (800346c <HAL_DFSDM_ChannelInit+0x178>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d125      	bne.n	8003384 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003338:	4b4d      	ldr	r3, [pc, #308]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a4c      	ldr	r2, [pc, #304]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 800333e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003342:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003344:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4948      	ldr	r1, [pc, #288]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a46      	ldr	r2, [pc, #280]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 8003358:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800335c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	791b      	ldrb	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d108      	bne.n	8003378 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003366:	4b42      	ldr	r3, [pc, #264]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	3b01      	subs	r3, #1
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	493f      	ldr	r1, [pc, #252]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003378:	4b3d      	ldr	r3, [pc, #244]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3c      	ldr	r2, [pc, #240]	@ (8003470 <HAL_DFSDM_ChannelInit+0x17c>)
 800337e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003382:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003392:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033a2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033a8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 020f 	bic.w	r2, r2, #15
 80033c0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80033e8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 0207 	and.w	r2, r2, #7
 8003414:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003440:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f810 	bl	8003474 <DFSDM_GetChannelFromInstance>
 8003454:	4602      	mov	r2, r0
 8003456:	4904      	ldr	r1, [pc, #16]	@ (8003468 <HAL_DFSDM_ChannelInit+0x174>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000069c 	.word	0x2000069c
 800346c:	20000698 	.word	0x20000698
 8003470:	40016000 	.word	0x40016000

08003474 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e02b      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <DFSDM_GetChannelFromInstance+0x80>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d102      	bne.n	8003498 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003492:	2301      	movs	r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e024      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <DFSDM_GetChannelFromInstance+0x84>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d102      	bne.n	80034a6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80034a0:	2302      	movs	r3, #2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e01d      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <DFSDM_GetChannelFromInstance+0x88>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d102      	bne.n	80034b4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80034ae:	2304      	movs	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e016      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a12      	ldr	r2, [pc, #72]	@ (8003500 <DFSDM_GetChannelFromInstance+0x8c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80034bc:	2305      	movs	r3, #5
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e00f      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003504 <DFSDM_GetChannelFromInstance+0x90>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d102      	bne.n	80034d0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034ca:	2306      	movs	r3, #6
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e008      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <DFSDM_GetChannelFromInstance+0x94>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80034d8:	2307      	movs	r3, #7
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e001      	b.n	80034e2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034de:	2303      	movs	r3, #3
 80034e0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	40016000 	.word	0x40016000
 80034f4:	40016020 	.word	0x40016020
 80034f8:	40016040 	.word	0x40016040
 80034fc:	40016080 	.word	0x40016080
 8003500:	400160a0 	.word	0x400160a0
 8003504:	400160c0 	.word	0x400160c0
 8003508:	400160e0 	.word	0x400160e0

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e166      	b.n	80037ea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8158 	beq.w	80037e4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d005      	beq.n	800354c <HAL_GPIO_Init+0x40>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d130      	bne.n	80035ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0201 	and.w	r2, r3, #1
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d017      	beq.n	80035ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	6939      	ldr	r1, [r7, #16]
 800363a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0203 	and.w	r2, r3, #3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80b2 	beq.w	80037e4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003680:	4b61      	ldr	r3, [pc, #388]	@ (8003808 <HAL_GPIO_Init+0x2fc>)
 8003682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003684:	4a60      	ldr	r2, [pc, #384]	@ (8003808 <HAL_GPIO_Init+0x2fc>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6613      	str	r3, [r2, #96]	@ 0x60
 800368c:	4b5e      	ldr	r3, [pc, #376]	@ (8003808 <HAL_GPIO_Init+0x2fc>)
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003698:	4a5c      	ldr	r2, [pc, #368]	@ (800380c <HAL_GPIO_Init+0x300>)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036c2:	d02b      	beq.n	800371c <HAL_GPIO_Init+0x210>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a52      	ldr	r2, [pc, #328]	@ (8003810 <HAL_GPIO_Init+0x304>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d025      	beq.n	8003718 <HAL_GPIO_Init+0x20c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a51      	ldr	r2, [pc, #324]	@ (8003814 <HAL_GPIO_Init+0x308>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d01f      	beq.n	8003714 <HAL_GPIO_Init+0x208>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a50      	ldr	r2, [pc, #320]	@ (8003818 <HAL_GPIO_Init+0x30c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d019      	beq.n	8003710 <HAL_GPIO_Init+0x204>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a4f      	ldr	r2, [pc, #316]	@ (800381c <HAL_GPIO_Init+0x310>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_GPIO_Init+0x200>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003820 <HAL_GPIO_Init+0x314>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00d      	beq.n	8003708 <HAL_GPIO_Init+0x1fc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003824 <HAL_GPIO_Init+0x318>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <HAL_GPIO_Init+0x1f8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a4c      	ldr	r2, [pc, #304]	@ (8003828 <HAL_GPIO_Init+0x31c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_GPIO_Init+0x1f4>
 80036fc:	2307      	movs	r3, #7
 80036fe:	e00e      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003700:	2308      	movs	r3, #8
 8003702:	e00c      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003704:	2306      	movs	r3, #6
 8003706:	e00a      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003708:	2305      	movs	r3, #5
 800370a:	e008      	b.n	800371e <HAL_GPIO_Init+0x212>
 800370c:	2304      	movs	r3, #4
 800370e:	e006      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003710:	2303      	movs	r3, #3
 8003712:	e004      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003714:	2302      	movs	r3, #2
 8003716:	e002      	b.n	800371e <HAL_GPIO_Init+0x212>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_GPIO_Init+0x212>
 800371c:	2300      	movs	r3, #0
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	f002 0203 	and.w	r2, r2, #3
 8003724:	0092      	lsls	r2, r2, #2
 8003726:	4093      	lsls	r3, r2
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800372e:	4937      	ldr	r1, [pc, #220]	@ (800380c <HAL_GPIO_Init+0x300>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800373c:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_GPIO_Init+0x320>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003760:	4a32      	ldr	r2, [pc, #200]	@ (800382c <HAL_GPIO_Init+0x320>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003766:	4b31      	ldr	r3, [pc, #196]	@ (800382c <HAL_GPIO_Init+0x320>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800378a:	4a28      	ldr	r2, [pc, #160]	@ (800382c <HAL_GPIO_Init+0x320>)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003790:	4b26      	ldr	r3, [pc, #152]	@ (800382c <HAL_GPIO_Init+0x320>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037b4:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <HAL_GPIO_Init+0x320>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037ba:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <HAL_GPIO_Init+0x320>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037de:	4a13      	ldr	r2, [pc, #76]	@ (800382c <HAL_GPIO_Init+0x320>)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f ae91 	bne.w	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40021000 	.word	0x40021000
 800380c:	40010000 	.word	0x40010000
 8003810:	48000400 	.word	0x48000400
 8003814:	48000800 	.word	0x48000800
 8003818:	48000c00 	.word	0x48000c00
 800381c:	48001000 	.word	0x48001000
 8003820:	48001400 	.word	0x48001400
 8003824:	48001800 	.word	0x48001800
 8003828:	48001c00 	.word	0x48001c00
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800383e:	e0c9      	b.n	80039d4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003840:	2201      	movs	r2, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80bc 	beq.w	80039ce <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003856:	4a66      	ldr	r2, [pc, #408]	@ (80039f0 <HAL_GPIO_DeInit+0x1c0>)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800387e:	d02b      	beq.n	80038d8 <HAL_GPIO_DeInit+0xa8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a5c      	ldr	r2, [pc, #368]	@ (80039f4 <HAL_GPIO_DeInit+0x1c4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d025      	beq.n	80038d4 <HAL_GPIO_DeInit+0xa4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a5b      	ldr	r2, [pc, #364]	@ (80039f8 <HAL_GPIO_DeInit+0x1c8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01f      	beq.n	80038d0 <HAL_GPIO_DeInit+0xa0>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a5a      	ldr	r2, [pc, #360]	@ (80039fc <HAL_GPIO_DeInit+0x1cc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d019      	beq.n	80038cc <HAL_GPIO_DeInit+0x9c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a59      	ldr	r2, [pc, #356]	@ (8003a00 <HAL_GPIO_DeInit+0x1d0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <HAL_GPIO_DeInit+0x98>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a58      	ldr	r2, [pc, #352]	@ (8003a04 <HAL_GPIO_DeInit+0x1d4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00d      	beq.n	80038c4 <HAL_GPIO_DeInit+0x94>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a57      	ldr	r2, [pc, #348]	@ (8003a08 <HAL_GPIO_DeInit+0x1d8>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <HAL_GPIO_DeInit+0x90>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a56      	ldr	r2, [pc, #344]	@ (8003a0c <HAL_GPIO_DeInit+0x1dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_GPIO_DeInit+0x8c>
 80038b8:	2307      	movs	r3, #7
 80038ba:	e00e      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038bc:	2308      	movs	r3, #8
 80038be:	e00c      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038c0:	2306      	movs	r3, #6
 80038c2:	e00a      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038c4:	2305      	movs	r3, #5
 80038c6:	e008      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038c8:	2304      	movs	r3, #4
 80038ca:	e006      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038cc:	2303      	movs	r3, #3
 80038ce:	e004      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e002      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <HAL_GPIO_DeInit+0xaa>
 80038d8:	2300      	movs	r3, #0
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	f002 0203 	and.w	r2, r2, #3
 80038e0:	0092      	lsls	r2, r2, #2
 80038e2:	4093      	lsls	r3, r2
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d132      	bne.n	8003950 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4947      	ldr	r1, [pc, #284]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80038f8:	4b45      	ldr	r3, [pc, #276]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	4943      	ldr	r1, [pc, #268]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 8003902:	4013      	ands	r3, r2
 8003904:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003906:	4b42      	ldr	r3, [pc, #264]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	4940      	ldr	r1, [pc, #256]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 8003910:	4013      	ands	r3, r2
 8003912:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003914:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	493c      	ldr	r1, [pc, #240]	@ (8003a10 <HAL_GPIO_DeInit+0x1e0>)
 800391e:	4013      	ands	r3, r2
 8003920:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	220f      	movs	r2, #15
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003932:	4a2f      	ldr	r2, [pc, #188]	@ (80039f0 <HAL_GPIO_DeInit+0x1c0>)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	43da      	mvns	r2, r3
 8003942:	482b      	ldr	r0, [pc, #172]	@ (80039f0 <HAL_GPIO_DeInit+0x1c0>)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	400a      	ands	r2, r1
 800394a:	3302      	adds	r3, #2
 800394c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	2103      	movs	r1, #3
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	08d2      	lsrs	r2, r2, #3
 8003984:	4019      	ands	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3208      	adds	r2, #8
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	2103      	movs	r1, #3
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	2101      	movs	r1, #1
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2103      	movs	r1, #3
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	401a      	ands	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3301      	adds	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f af2f 	bne.w	8003840 <HAL_GPIO_DeInit+0x10>
  }
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40010000 	.word	0x40010000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	48000800 	.word	0x48000800
 80039fc:	48000c00 	.word	0x48000c00
 8003a00:	48001000 	.word	0x48001000
 8003a04:	48001400 	.word	0x48001400
 8003a08:	48001800 	.word	0x48001800
 8003a0c:	48001c00 	.word	0x48001c00
 8003a10:	40010400 	.word	0x40010400

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5a:	4a05      	ldr	r2, [pc, #20]	@ (8003a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f806 	bl	8003a74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010400 	.word	0x40010400

08003a74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e08d      	b.n	8003bb8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fd fdad 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2224      	movs	r2, #36	@ 0x24
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ada:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b00:	609a      	str	r2, [r3, #8]
 8003b02:	e006      	b.n	8003b12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d108      	bne.n	8003b2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e007      	b.n	8003b3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69d9      	ldr	r1, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e021      	b.n	8003c16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	@ 0x24
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fdb2 	bl	8001754 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	817b      	strh	r3, [r7, #10]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	f040 80f9 	bne.w	8003e3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x34>
 8003c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0ed      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_Mem_Write+0x4e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0e6      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c76:	f7fe fb19 	bl	80022ac <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2319      	movs	r3, #25
 8003c82:	2201      	movs	r2, #1
 8003c84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fac3 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0d1      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2221      	movs	r2, #33	@ 0x21
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2240      	movs	r2, #64	@ 0x40
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cc0:	88f8      	ldrh	r0, [r7, #6]
 8003cc2:	893a      	ldrh	r2, [r7, #8]
 8003cc4:	8979      	ldrh	r1, [r7, #10]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4603      	mov	r3, r0
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f9d3 	bl	800407c <I2C_RequestMemoryWrite>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0a9      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2bff      	cmp	r3, #255	@ 0xff
 8003cf0:	d90e      	bls.n	8003d10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	@ 0xff
 8003cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	8979      	ldrh	r1, [r7, #10]
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fc47 	bl	800459c <I2C_TransferConfig>
 8003d0e:	e00f      	b.n	8003d30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8979      	ldrh	r1, [r7, #10]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fc36 	bl	800459c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fac6 	bl	80042c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e07b      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d034      	beq.n	8003de8 <HAL_I2C_Mem_Write+0x1c8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d130      	bne.n	8003de8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2180      	movs	r1, #128	@ 0x80
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fa3f 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e04d      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2bff      	cmp	r3, #255	@ 0xff
 8003da8:	d90e      	bls.n	8003dc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	22ff      	movs	r2, #255	@ 0xff
 8003dae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	8979      	ldrh	r1, [r7, #10]
 8003db8:	2300      	movs	r3, #0
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 fbeb 	bl	800459c <I2C_TransferConfig>
 8003dc6:	e00f      	b.n	8003de8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	8979      	ldrh	r1, [r7, #10]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fbda 	bl	800459c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d19e      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 faac 	bl	8004354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01a      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_I2C_Mem_Write+0x224>)
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	fe00e800 	.word	0xfe00e800

08003e48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	4608      	mov	r0, r1
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	4603      	mov	r3, r0
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	813b      	strh	r3, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	f040 80fd 	bne.w	800406a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x34>
 8003e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0f1      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x4e>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0ea      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e9e:	f7fe fa05 	bl	80022ac <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2319      	movs	r3, #25
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f9af 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0d5      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2222      	movs	r2, #34	@ 0x22
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	@ 0x40
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ee8:	88f8      	ldrh	r0, [r7, #6]
 8003eea:	893a      	ldrh	r2, [r7, #8]
 8003eec:	8979      	ldrh	r1, [r7, #10]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f913 	bl	8004124 <I2C_RequestMemoryRead>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0ad      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2bff      	cmp	r3, #255	@ 0xff
 8003f18:	d90e      	bls.n	8003f38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	4b52      	ldr	r3, [pc, #328]	@ (8004074 <HAL_I2C_Mem_Read+0x22c>)
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fb33 	bl	800459c <I2C_TransferConfig>
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <HAL_I2C_Mem_Read+0x22c>)
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fb22 	bl	800459c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2104      	movs	r1, #4
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f956 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07c      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d034      	beq.n	8004018 <HAL_I2C_Mem_Read+0x1d0>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d130      	bne.n	8004018 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2180      	movs	r1, #128	@ 0x80
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f927 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e04d      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2bff      	cmp	r3, #255	@ 0xff
 8003fd8:	d90e      	bls.n	8003ff8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	8979      	ldrh	r1, [r7, #10]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fad3 	bl	800459c <I2C_TransferConfig>
 8003ff6:	e00f      	b.n	8004018 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	b2da      	uxtb	r2, r3
 8004008:	8979      	ldrh	r1, [r7, #10]
 800400a:	2300      	movs	r3, #0
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 fac2 	bl	800459c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d19a      	bne.n	8003f58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f994 	bl	8004354 <I2C_WaitOnSTOPFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e01a      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <HAL_I2C_Mem_Read+0x230>)
 800404a:	400b      	ands	r3, r1
 800404c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	80002400 	.word	0x80002400
 8004078:	fe00e800 	.word	0xfe00e800

0800407c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af02      	add	r7, sp, #8
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4603      	mov	r3, r0
 800408c:	817b      	strh	r3, [r7, #10]
 800408e:	460b      	mov	r3, r1
 8004090:	813b      	strh	r3, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	8979      	ldrh	r1, [r7, #10]
 800409c:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <I2C_RequestMemoryWrite+0xa4>)
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fa79 	bl	800459c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f909 	bl	80042c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e02c      	b.n	8004118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040c4:	893b      	ldrh	r3, [r7, #8]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80040ce:	e015      	b.n	80040fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040d0:	893b      	ldrh	r3, [r7, #8]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8ef 	bl	80042c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e012      	b.n	8004118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040f2:	893b      	ldrh	r3, [r7, #8]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	@ 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f884 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	80002000 	.word	0x80002000

08004124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	4b20      	ldr	r3, [pc, #128]	@ (80041c8 <I2C_RequestMemoryRead+0xa4>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fa26 	bl	800459c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f8b6 	bl	80042c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e02c      	b.n	80041be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d105      	bne.n	8004176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800416a:	893b      	ldrh	r3, [r7, #8]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	629a      	str	r2, [r3, #40]	@ 0x28
 8004174:	e015      	b.n	80041a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	b29b      	uxth	r3, r3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f89c 	bl	80042c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e012      	b.n	80041be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2140      	movs	r1, #64	@ 0x40
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f831 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	80002000 	.word	0x80002000

080041cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d103      	bne.n	80041ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d007      	beq.n	8004208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	619a      	str	r2, [r3, #24]
  }
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004224:	e03b      	b.n	800429e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	6839      	ldr	r1, [r7, #0]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8d6 	bl	80043dc <I2C_IsErrorOccurred>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e041      	b.n	80042be <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d02d      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe f833 	bl	80022ac <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d122      	bne.n	800429e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	d113      	bne.n	800429e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e00f      	b.n	80042be <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0b4      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042d2:	e033      	b.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f87f 	bl	80043dc <I2C_IsErrorOccurred>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e031      	b.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d025      	beq.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd ffdc 	bl	80022ac <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11a      	bne.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d013      	beq.n	800433c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d1c4      	bne.n	80042d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004360:	e02f      	b.n	80043c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f838 	bl	80043dc <I2C_IsErrorOccurred>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e02d      	b.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fd ff99 	bl	80022ac <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11a      	bne.n	80043c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b20      	cmp	r3, #32
 8004398:	d013      	beq.n	80043c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e007      	b.n	80043d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d1c8      	bne.n	8004362 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	@ 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	d068      	beq.n	80044da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2210      	movs	r2, #16
 800440e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004410:	e049      	b.n	80044a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d045      	beq.n	80044a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7fd ff47 	bl	80022ac <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_IsErrorOccurred+0x54>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d13a      	bne.n	80044a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004442:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004452:	d121      	bne.n	8004498 <I2C_IsErrorOccurred+0xbc>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800445a:	d01d      	beq.n	8004498 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b20      	cmp	r3, #32
 8004460:	d01a      	beq.n	8004498 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004470:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004472:	f7fd ff1b 	bl	80022ac <HAL_GetTick>
 8004476:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004478:	e00e      	b.n	8004498 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800447a:	f7fd ff17 	bl	80022ac <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b19      	cmp	r3, #25
 8004486:	d907      	bls.n	8004498 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	f043 0320 	orr.w	r3, r3, #32
 800448e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004496:	e006      	b.n	80044a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0320 	and.w	r3, r3, #32
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	d1e9      	bne.n	800447a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d003      	beq.n	80044bc <I2C_IsErrorOccurred+0xe0>
 80044b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0aa      	beq.n	8004412 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d103      	bne.n	80044cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2220      	movs	r2, #32
 80044ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f043 0308 	orr.w	r3, r3, #8
 8004514:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800451e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f043 0302 	orr.w	r3, r3, #2
 8004536:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01c      	beq.n	800458a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fe3b 	bl	80041cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <I2C_IsErrorOccurred+0x1bc>)
 8004562:	400b      	ands	r3, r1
 8004564:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800458a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800458e:	4618      	mov	r0, r3
 8004590:	3728      	adds	r7, #40	@ 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	fe00e800 	.word	0xfe00e800

0800459c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	817b      	strh	r3, [r7, #10]
 80045aa:	4613      	mov	r3, r2
 80045ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045b4:	7a7b      	ldrb	r3, [r7, #9]
 80045b6:	041b      	lsls	r3, r3, #16
 80045b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	0d5b      	lsrs	r3, r3, #21
 80045d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <I2C_TransferConfig+0x60>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	43db      	mvns	r3, r3
 80045e0:	ea02 0103 	and.w	r1, r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	03ff63ff 	.word	0x03ff63ff

08004600 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b20      	cmp	r3, #32
 8004614:	d138      	bne.n	8004688 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004620:	2302      	movs	r3, #2
 8004622:	e032      	b.n	800468a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	@ 0x24
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0201 	bic.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004652:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6819      	ldr	r1, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e000      	b.n	800468a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004688:	2302      	movs	r3, #2
  }
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d139      	bne.n	8004720 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e033      	b.n	8004722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2224      	movs	r2, #36	@ 0x24
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800471c:	2300      	movs	r3, #0
 800471e:	e000      	b.n	8004722 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004720:	2302      	movs	r3, #2
  }
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af02      	add	r7, sp, #8
 8004736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7fd fdb6 	bl	80022ac <HAL_GetTick>
 8004740:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	e092      	b.n	8004874 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 808b 	bne.w	8004874 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd f834 	bl	80017cc <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004764:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f88b 	bl	8004884 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	4b42      	ldr	r3, [pc, #264]	@ (8004880 <HAL_OSPI_Init+0x150>)
 8004776:	4013      	ands	r3, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	68d1      	ldr	r1, [r2, #12]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6912      	ldr	r2, [r2, #16]
 8004780:	3a01      	subs	r2, #1
 8004782:	0412      	lsls	r2, r2, #16
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6952      	ldr	r2, [r2, #20]
 800478a:	3a01      	subs	r2, #1
 800478c:	0212      	lsls	r2, r2, #8
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	69d2      	ldr	r2, [r2, #28]
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	0412      	lsls	r2, r2, #16
 80047ae:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	021a      	lsls	r2, r3, #8
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2120      	movs	r1, #32
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fb9c 	bl	8004f14 <OSPI_WaitFlagStateUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d146      	bne.n	8004874 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800481c:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d107      	bne.n	800485c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0202 	orr.w	r2, r2, #2
 800485a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004864:	d103      	bne.n	800486e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	645a      	str	r2, [r3, #68]	@ 0x44
 800486c:	e002      	b.n	8004874 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2202      	movs	r2, #2
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	f8e0f8f4 	.word	0xf8e0f8f4

08004884 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b092      	sub	sp, #72	@ 0x48
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a08      	ldr	r2, [pc, #32]	@ (80048e4 <HAL_OSPIM_Config+0x40>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d105      	bne.n	80048d2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80048d0:	e004      	b.n	80048dc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80048d2:	2301      	movs	r3, #1
 80048d4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80048e2:	e01f      	b.n	8004924 <HAL_OSPIM_Config+0x80>
 80048e4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80048e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048ec:	3301      	adds	r3, #1
 80048ee:	b2d8      	uxtb	r0, r3
 80048f0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80048f4:	f107 0114 	add.w	r1, r7, #20
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	4619      	mov	r1, r3
 8004904:	f000 fb3e 	bl	8004f84 <OSPIM_GetConfig>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2208      	movs	r2, #8
 8004918:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800491a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800491e:	3301      	adds	r3, #1
 8004920:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004924:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004928:	2b01      	cmp	r3, #1
 800492a:	d9dd      	bls.n	80048e8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800492c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 82e3 	bne.w	8004efc <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004936:	4bc5      	ldr	r3, [pc, #788]	@ (8004c4c <HAL_OSPIM_Config+0x3a8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004942:	4bc2      	ldr	r3, [pc, #776]	@ (8004c4c <HAL_OSPIM_Config+0x3a8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4ac1      	ldr	r2, [pc, #772]	@ (8004c4c <HAL_OSPIM_Config+0x3a8>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800494e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800495a:	4bbd      	ldr	r3, [pc, #756]	@ (8004c50 <HAL_OSPIM_Config+0x3ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004966:	4bba      	ldr	r3, [pc, #744]	@ (8004c50 <HAL_OSPIM_Config+0x3ac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4ab9      	ldr	r2, [pc, #740]	@ (8004c50 <HAL_OSPIM_Config+0x3ac>)
 800496c:	f023 0301 	bic.w	r3, r3, #1
 8004970:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004972:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800497e:	49b5      	ldr	r1, [pc, #724]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3348      	adds	r3, #72	@ 0x48
 800498c:	443b      	add	r3, r7
 800498e:	3b2c      	subs	r3, #44	@ 0x2c
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	48ae      	ldr	r0, [pc, #696]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 800499c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	3348      	adds	r3, #72	@ 0x48
 80049a8:	443b      	add	r3, r7
 80049aa:	3b2c      	subs	r3, #44	@ 0x2c
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4403      	add	r3, r0
 80049b8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80049ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	3348      	adds	r3, #72	@ 0x48
 80049c6:	443b      	add	r3, r7
 80049c8:	3b34      	subs	r3, #52	@ 0x34
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a1 	beq.w	8004b14 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80049d2:	49a0      	ldr	r1, [pc, #640]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 80049d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	3348      	adds	r3, #72	@ 0x48
 80049e0:	443b      	add	r3, r7
 80049e2:	3b34      	subs	r3, #52	@ 0x34
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	4899      	ldr	r0, [pc, #612]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 80049f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	3348      	adds	r3, #72	@ 0x48
 80049fc:	443b      	add	r3, r7
 80049fe:	3b34      	subs	r3, #52	@ 0x34
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f021 0201 	bic.w	r2, r1, #1
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4403      	add	r3, r0
 8004a0c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	3348      	adds	r3, #72	@ 0x48
 8004a1a:	443b      	add	r3, r7
 8004a1c:	3b30      	subs	r3, #48	@ 0x30
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01d      	beq.n	8004a60 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004a24:	498b      	ldr	r1, [pc, #556]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004a26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3348      	adds	r3, #72	@ 0x48
 8004a32:	443b      	add	r3, r7
 8004a34:	3b30      	subs	r3, #48	@ 0x30
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	4884      	ldr	r0, [pc, #528]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004a42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3348      	adds	r3, #72	@ 0x48
 8004a4e:	443b      	add	r3, r7
 8004a50:	3b30      	subs	r3, #48	@ 0x30
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	f021 0210 	bic.w	r2, r1, #16
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4403      	add	r3, r0
 8004a5e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3348      	adds	r3, #72	@ 0x48
 8004a6c:	443b      	add	r3, r7
 8004a6e:	3b28      	subs	r3, #40	@ 0x28
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d021      	beq.n	8004aba <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004a76:	4977      	ldr	r1, [pc, #476]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	3348      	adds	r3, #72	@ 0x48
 8004a84:	443b      	add	r3, r7
 8004a86:	3b28      	subs	r3, #40	@ 0x28
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	486f      	ldr	r0, [pc, #444]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	3348      	adds	r3, #72	@ 0x48
 8004aa4:	443b      	add	r3, r7
 8004aa6:	3b28      	subs	r3, #40	@ 0x28
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004aba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	3348      	adds	r3, #72	@ 0x48
 8004ac6:	443b      	add	r3, r7
 8004ac8:	3b24      	subs	r3, #36	@ 0x24
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d021      	beq.n	8004b14 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004ad0:	4960      	ldr	r1, [pc, #384]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	3348      	adds	r3, #72	@ 0x48
 8004ade:	443b      	add	r3, r7
 8004ae0:	3b24      	subs	r3, #36	@ 0x24
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	4858      	ldr	r0, [pc, #352]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	3348      	adds	r3, #72	@ 0x48
 8004afe:	443b      	add	r3, r7
 8004b00:	3b24      	subs	r3, #36	@ 0x24
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4403      	add	r3, r0
 8004b12:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6819      	ldr	r1, [r3, #0]
 8004b18:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3348      	adds	r3, #72	@ 0x48
 8004b26:	443b      	add	r3, r7
 8004b28:	3b34      	subs	r3, #52	@ 0x34
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	d03c      	beq.n	8004baa <HAL_OSPIM_Config+0x306>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6899      	ldr	r1, [r3, #8]
 8004b34:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	3348      	adds	r3, #72	@ 0x48
 8004b42:	443b      	add	r3, r7
 8004b44:	3b2c      	subs	r3, #44	@ 0x2c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4299      	cmp	r1, r3
 8004b4a:	d02e      	beq.n	8004baa <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3348      	adds	r3, #72	@ 0x48
 8004b5e:	443b      	add	r3, r7
 8004b60:	3b30      	subs	r3, #48	@ 0x30
 8004b62:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d103      	bne.n	8004b70 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11c      	bne.n	8004baa <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	68d9      	ldr	r1, [r3, #12]
 8004b74:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3348      	adds	r3, #72	@ 0x48
 8004b82:	443b      	add	r3, r7
 8004b84:	3b28      	subs	r3, #40	@ 0x28
 8004b86:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004b88:	4299      	cmp	r1, r3
 8004b8a:	d00e      	beq.n	8004baa <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6919      	ldr	r1, [r3, #16]
 8004b90:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	3348      	adds	r3, #72	@ 0x48
 8004b9e:	443b      	add	r3, r7
 8004ba0:	3b24      	subs	r3, #36	@ 0x24
 8004ba2:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	f040 80d4 	bne.w	8004d52 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004baa:	492a      	ldr	r1, [pc, #168]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004bac:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	3348      	adds	r3, #72	@ 0x48
 8004bba:	443b      	add	r3, r7
 8004bbc:	3b34      	subs	r3, #52	@ 0x34
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	4822      	ldr	r0, [pc, #136]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004bca:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	3348      	adds	r3, #72	@ 0x48
 8004bd8:	443b      	add	r3, r7
 8004bda:	3b34      	subs	r3, #52	@ 0x34
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	f021 0201 	bic.w	r2, r1, #1
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4403      	add	r3, r0
 8004be8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004bea:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3348      	adds	r3, #72	@ 0x48
 8004bf8:	443b      	add	r3, r7
 8004bfa:	3b30      	subs	r3, #48	@ 0x30
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01f      	beq.n	8004c42 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004c02:	4914      	ldr	r1, [pc, #80]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004c04:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3348      	adds	r3, #72	@ 0x48
 8004c12:	443b      	add	r3, r7
 8004c14:	3b30      	subs	r3, #48	@ 0x30
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	480c      	ldr	r0, [pc, #48]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004c22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	3348      	adds	r3, #72	@ 0x48
 8004c30:	443b      	add	r3, r7
 8004c32:	3b30      	subs	r3, #48	@ 0x30
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f021 0210 	bic.w	r2, r1, #16
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4403      	add	r3, r0
 8004c40:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004c42:	4904      	ldr	r1, [pc, #16]	@ (8004c54 <HAL_OSPIM_Config+0x3b0>)
 8004c44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c48:	e006      	b.n	8004c58 <HAL_OSPIM_Config+0x3b4>
 8004c4a:	bf00      	nop
 8004c4c:	a0001000 	.word	0xa0001000
 8004c50:	a0001400 	.word	0xa0001400
 8004c54:	50061c00 	.word	0x50061c00
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	3348      	adds	r3, #72	@ 0x48
 8004c62:	443b      	add	r3, r7
 8004c64:	3b2c      	subs	r3, #44	@ 0x2c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	48a5      	ldr	r0, [pc, #660]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004c72:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	3348      	adds	r3, #72	@ 0x48
 8004c80:	443b      	add	r3, r7
 8004c82:	3b2c      	subs	r3, #44	@ 0x2c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4403      	add	r3, r0
 8004c90:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004c92:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	3348      	adds	r3, #72	@ 0x48
 8004ca0:	443b      	add	r3, r7
 8004ca2:	3b28      	subs	r3, #40	@ 0x28
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d023      	beq.n	8004cf2 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004caa:	4997      	ldr	r1, [pc, #604]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004cac:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	3348      	adds	r3, #72	@ 0x48
 8004cba:	443b      	add	r3, r7
 8004cbc:	3b28      	subs	r3, #40	@ 0x28
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	488e      	ldr	r0, [pc, #568]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004cce:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	3348      	adds	r3, #72	@ 0x48
 8004cdc:	443b      	add	r3, r7
 8004cde:	3b28      	subs	r3, #40	@ 0x28
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4403      	add	r3, r0
 8004cf0:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004cf2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	3348      	adds	r3, #72	@ 0x48
 8004d00:	443b      	add	r3, r7
 8004d02:	3b24      	subs	r3, #36	@ 0x24
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d023      	beq.n	8004d52 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004d0a:	497f      	ldr	r1, [pc, #508]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d0c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3348      	adds	r3, #72	@ 0x48
 8004d1a:	443b      	add	r3, r7
 8004d1c:	3b24      	subs	r3, #36	@ 0x24
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	6859      	ldr	r1, [r3, #4]
 8004d2c:	4876      	ldr	r0, [pc, #472]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d2e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3348      	adds	r3, #72	@ 0x48
 8004d3c:	443b      	add	r3, r7
 8004d3e:	3b24      	subs	r3, #36	@ 0x24
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4403      	add	r3, r0
 8004d50:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004d52:	4a6d      	ldr	r2, [pc, #436]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d66:	025b      	lsls	r3, r3, #9
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	4967      	ldr	r1, [pc, #412]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004d7c:	4a62      	ldr	r2, [pc, #392]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 0203 	bic.w	r2, r3, #3
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	431a      	orrs	r2, r3
 8004d94:	495c      	ldr	r1, [pc, #368]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004dae:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc2:	015b      	lsls	r3, r3, #5
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	4950      	ldr	r1, [pc, #320]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	f042 0210 	orr.w	r2, r2, #16
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d019      	beq.n	8004e18 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004de4:	4a48      	ldr	r2, [pc, #288]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfc:	049b      	lsls	r3, r3, #18
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	4941      	ldr	r1, [pc, #260]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	e01c      	b.n	8004e52 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d018      	beq.n	8004e52 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e20:	4a39      	ldr	r2, [pc, #228]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e38:	069b      	lsls	r3, r3, #26
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	4932      	ldr	r1, [pc, #200]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d019      	beq.n	8004e92 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e76:	049b      	lsls	r3, r3, #18
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	4923      	ldr	r1, [pc, #140]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	605a      	str	r2, [r3, #4]
 8004e90:	e01c      	b.n	8004ecc <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d018      	beq.n	8004ecc <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8004eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb2:	069b      	lsls	r3, r3, #26
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	4914      	ldr	r1, [pc, #80]	@ (8004f08 <HAL_OSPIM_Config+0x664>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004ecc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <HAL_OSPIM_Config+0x668>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0b      	ldr	r2, [pc, #44]	@ (8004f0c <HAL_OSPIM_Config+0x668>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004ee4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004ef0:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_OSPIM_Config+0x66c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a06      	ldr	r2, [pc, #24]	@ (8004f10 <HAL_OSPIM_Config+0x66c>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004efc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3748      	adds	r7, #72	@ 0x48
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	50061c00 	.word	0x50061c00
 8004f0c:	a0001000 	.word	0xa0001000
 8004f10:	a0001400 	.word	0xa0001400

08004f14 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f24:	e01a      	b.n	8004f5c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d016      	beq.n	8004f5c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fd f9bd 	bl	80022ac <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f4a:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	f043 0201 	orr.w	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e00e      	b.n	8004f7a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1d6      	bne.n	8004f26 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <OSPIM_GetConfig+0x26>
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d802      	bhi.n	8004faa <OSPIM_GetConfig+0x26>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
 8004fae:	e08e      	b.n	80050ce <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d101      	bne.n	8004fd8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004fd4:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <OSPIM_GetConfig+0x158>)
 8004fd6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e074      	b.n	80050c8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004fde:	4a40      	ldr	r2, [pc, #256]	@ (80050e0 <OSPIM_GetConfig+0x15c>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4053      	eors	r3, r2
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4053      	eors	r3, r2
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4053      	eors	r3, r2
 800503a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d018      	beq.n	8005086 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4053      	eors	r3, r2
 800505a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d111      	bne.n	8005086 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e005      	b.n	8005086 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3301      	adds	r3, #1
 800507e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d018      	beq.n	80050c2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4053      	eors	r3, r2
 8005096:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d111      	bne.n	80050c2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	611a      	str	r2, [r3, #16]
 80050b4:	e005      	b.n	80050c2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3301      	adds	r3, #1
 80050ba:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d987      	bls.n	8004fde <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	04040222 	.word	0x04040222
 80050e0:	50061c00 	.word	0x50061c00

080050e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e8:	4b05      	ldr	r3, [pc, #20]	@ (8005100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a04      	ldr	r2, [pc, #16]	@ (8005100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40007000 	.word	0x40007000

08005104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005108:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <HAL_PWREx_GetVoltageRange+0x3c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005114:	d102      	bne.n	800511c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800511a:	e00b      	b.n	8005134 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800511c:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <HAL_PWREx_GetVoltageRange+0x3c>)
 800511e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512a:	d102      	bne.n	8005132 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800512c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005130:	e000      	b.n	8005134 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005132:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40007000 	.word	0x40007000

08005144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d141      	bne.n	80051d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005152:	4b4b      	ldr	r3, [pc, #300]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800515e:	d131      	bne.n	80051c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005160:	4b47      	ldr	r3, [pc, #284]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005166:	4a46      	ldr	r2, [pc, #280]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005170:	4b43      	ldr	r3, [pc, #268]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005178:	4a41      	ldr	r2, [pc, #260]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800517e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005180:	4b40      	ldr	r3, [pc, #256]	@ (8005284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2232      	movs	r2, #50	@ 0x32
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	4a3f      	ldr	r2, [pc, #252]	@ (8005288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800518c:	fba2 2303 	umull	r2, r3, r2, r3
 8005190:	0c9b      	lsrs	r3, r3, #18
 8005192:	3301      	adds	r3, #1
 8005194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005196:	e002      	b.n	800519e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800519e:	4b38      	ldr	r3, [pc, #224]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051aa:	d102      	bne.n	80051b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f2      	bne.n	8005198 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051b2:	4b33      	ldr	r3, [pc, #204]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051be:	d158      	bne.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e057      	b.n	8005274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051d4:	e04d      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051dc:	d141      	bne.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051de:	4b28      	ldr	r3, [pc, #160]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ea:	d131      	bne.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051ec:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f2:	4a23      	ldr	r2, [pc, #140]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051fc:	4b20      	ldr	r3, [pc, #128]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005204:	4a1e      	ldr	r2, [pc, #120]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005206:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800520a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800520c:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2232      	movs	r2, #50	@ 0x32
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	4a1c      	ldr	r2, [pc, #112]	@ (8005288 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0c9b      	lsrs	r3, r3, #18
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005222:	e002      	b.n	800522a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b01      	subs	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800522a:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005236:	d102      	bne.n	800523e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f2      	bne.n	8005224 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800523e:	4b10      	ldr	r3, [pc, #64]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524a:	d112      	bne.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e011      	b.n	8005274 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005256:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005260:	e007      	b.n	8005272 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005262:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800526a:	4a05      	ldr	r2, [pc, #20]	@ (8005280 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005270:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40007000 	.word	0x40007000
 8005284:	20000094 	.word	0x20000094
 8005288:	431bde83 	.word	0x431bde83

0800528c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f000 bc08 	b.w	8005ab0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a0:	4b96      	ldr	r3, [pc, #600]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052aa:	4b94      	ldr	r3, [pc, #592]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80e4 	beq.w	800548a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_RCC_OscConfig+0x4c>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	f040 808b 	bne.w	80053e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 8087 	bne.w	80053e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052d8:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_RCC_OscConfig+0x64>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e3df      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	4b81      	ldr	r3, [pc, #516]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_RCC_OscConfig+0x7e>
 8005300:	4b7e      	ldr	r3, [pc, #504]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005308:	e005      	b.n	8005316 <HAL_RCC_OscConfig+0x8a>
 800530a:	4b7c      	ldr	r3, [pc, #496]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005316:	4293      	cmp	r3, r2
 8005318:	d223      	bcs.n	8005362 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fdcc 	bl	8005ebc <RCC_SetFlashLatencyFromMSIRange>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e3c0      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800532e:	4b73      	ldr	r3, [pc, #460]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a72      	ldr	r2, [pc, #456]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005334:	f043 0308 	orr.w	r3, r3, #8
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	4b70      	ldr	r3, [pc, #448]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	496d      	ldr	r1, [pc, #436]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800534c:	4b6b      	ldr	r3, [pc, #428]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	4968      	ldr	r1, [pc, #416]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
 8005360:	e025      	b.n	80053ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005362:	4b66      	ldr	r3, [pc, #408]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a65      	ldr	r2, [pc, #404]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005368:	f043 0308 	orr.w	r3, r3, #8
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b63      	ldr	r3, [pc, #396]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4960      	ldr	r1, [pc, #384]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005380:	4b5e      	ldr	r3, [pc, #376]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	495b      	ldr	r1, [pc, #364]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005390:	4313      	orrs	r3, r2
 8005392:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fd8c 	bl	8005ebc <RCC_SetFlashLatencyFromMSIRange>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e380      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053ae:	f000 fcc1 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 80053b2:	4602      	mov	r2, r0
 80053b4:	4b51      	ldr	r3, [pc, #324]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	4950      	ldr	r1, [pc, #320]	@ (8005500 <HAL_RCC_OscConfig+0x274>)
 80053c0:	5ccb      	ldrb	r3, [r1, r3]
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005504 <HAL_RCC_OscConfig+0x278>)
 80053cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005508 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc ff1a 	bl	800220c <HAL_InitTick>
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d052      	beq.n	8005488 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	e364      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d032      	beq.n	8005454 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053ee:	4b43      	ldr	r3, [pc, #268]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a42      	ldr	r2, [pc, #264]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053fa:	f7fc ff57 	bl	80022ac <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005402:	f7fc ff53 	bl	80022ac <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b02      	cmp	r3, #2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e34d      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005414:	4b39      	ldr	r3, [pc, #228]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f0      	beq.n	8005402 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005420:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a35      	ldr	r2, [pc, #212]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b33      	ldr	r3, [pc, #204]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	4930      	ldr	r1, [pc, #192]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543e:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	492b      	ldr	r1, [pc, #172]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
 8005452:	e01a      	b.n	800548a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005454:	4b29      	ldr	r3, [pc, #164]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a28      	ldr	r2, [pc, #160]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800545a:	f023 0301 	bic.w	r3, r3, #1
 800545e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005460:	f7fc ff24 	bl	80022ac <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005468:	f7fc ff20 	bl	80022ac <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e31a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x1dc>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d073      	beq.n	800557e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_OscConfig+0x21c>
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b0c      	cmp	r3, #12
 80054a0:	d10e      	bne.n	80054c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	4b14      	ldr	r3, [pc, #80]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d063      	beq.n	800557c <HAL_RCC_OscConfig+0x2f0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d15f      	bne.n	800557c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e2f7      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_OscConfig+0x24c>
 80054ca:	4b0c      	ldr	r3, [pc, #48]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0b      	ldr	r2, [pc, #44]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e025      	b.n	8005524 <HAL_RCC_OscConfig+0x298>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e0:	d114      	bne.n	800550c <HAL_RCC_OscConfig+0x280>
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a05      	ldr	r2, [pc, #20]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b03      	ldr	r3, [pc, #12]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a02      	ldr	r2, [pc, #8]	@ (80054fc <HAL_RCC_OscConfig+0x270>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e013      	b.n	8005524 <HAL_RCC_OscConfig+0x298>
 80054fc:	40021000 	.word	0x40021000
 8005500:	080083dc 	.word	0x080083dc
 8005504:	20000094 	.word	0x20000094
 8005508:	200000a8 	.word	0x200000a8
 800550c:	4ba0      	ldr	r3, [pc, #640]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a9f      	ldr	r2, [pc, #636]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b9d      	ldr	r3, [pc, #628]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a9c      	ldr	r2, [pc, #624]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fc febe 	bl	80022ac <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc feba 	bl	80022ac <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	@ 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e2b4      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005546:	4b92      	ldr	r3, [pc, #584]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0x2a8>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc feaa 	bl	80022ac <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800555c:	f7fc fea6 	bl	80022ac <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	@ 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e2a0      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800556e:	4b88      	ldr	r3, [pc, #544]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x2d0>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d060      	beq.n	800564c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b04      	cmp	r3, #4
 800558e:	d005      	beq.n	800559c <HAL_RCC_OscConfig+0x310>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b0c      	cmp	r3, #12
 8005594:	d119      	bne.n	80055ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d116      	bne.n	80055ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559c:	4b7c      	ldr	r3, [pc, #496]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_OscConfig+0x328>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e27d      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b4:	4b76      	ldr	r3, [pc, #472]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	4973      	ldr	r1, [pc, #460]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c8:	e040      	b.n	800564c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d023      	beq.n	800561a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d2:	4b6f      	ldr	r3, [pc, #444]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a6e      	ldr	r2, [pc, #440]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055de:	f7fc fe65 	bl	80022ac <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e6:	f7fc fe61 	bl	80022ac <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e25b      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f8:	4b65      	ldr	r3, [pc, #404]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005604:	4b62      	ldr	r3, [pc, #392]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	495f      	ldr	r1, [pc, #380]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005614:	4313      	orrs	r3, r2
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	e018      	b.n	800564c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561a:	4b5d      	ldr	r3, [pc, #372]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5c      	ldr	r2, [pc, #368]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc fe41 	bl	80022ac <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800562e:	f7fc fe3d 	bl	80022ac <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e237      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005640:	4b53      	ldr	r3, [pc, #332]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1f0      	bne.n	800562e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b00      	cmp	r3, #0
 8005656:	d03c      	beq.n	80056d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01c      	beq.n	800569a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005660:	4b4b      	ldr	r3, [pc, #300]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005666:	4a4a      	ldr	r2, [pc, #296]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc fe1c 	bl	80022ac <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005678:	f7fc fe18 	bl	80022ac <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e212      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800568c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ef      	beq.n	8005678 <HAL_RCC_OscConfig+0x3ec>
 8005698:	e01b      	b.n	80056d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800569a:	4b3d      	ldr	r3, [pc, #244]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800569c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056aa:	f7fc fdff 	bl	80022ac <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b2:	f7fc fdfb 	bl	80022ac <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e1f5      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056c4:	4b32      	ldr	r3, [pc, #200]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ef      	bne.n	80056b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80a6 	beq.w	800582c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056e0:	2300      	movs	r3, #0
 80056e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056e4:	4b2a      	ldr	r3, [pc, #168]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056f0:	4b27      	ldr	r3, [pc, #156]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f4:	4a26      	ldr	r2, [pc, #152]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fc:	4b24      	ldr	r3, [pc, #144]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 80056fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800570c:	4b21      	ldr	r3, [pc, #132]	@ (8005794 <HAL_RCC_OscConfig+0x508>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d118      	bne.n	800574a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005718:	4b1e      	ldr	r3, [pc, #120]	@ (8005794 <HAL_RCC_OscConfig+0x508>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1d      	ldr	r2, [pc, #116]	@ (8005794 <HAL_RCC_OscConfig+0x508>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005724:	f7fc fdc2 	bl	80022ac <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fc fdbe 	bl	80022ac <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1b8      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800573e:	4b15      	ldr	r3, [pc, #84]	@ (8005794 <HAL_RCC_OscConfig+0x508>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d108      	bne.n	8005764 <HAL_RCC_OscConfig+0x4d8>
 8005752:	4b0f      	ldr	r3, [pc, #60]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005758:	4a0d      	ldr	r2, [pc, #52]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005762:	e029      	b.n	80057b8 <HAL_RCC_OscConfig+0x52c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b05      	cmp	r3, #5
 800576a:	d115      	bne.n	8005798 <HAL_RCC_OscConfig+0x50c>
 800576c:	4b08      	ldr	r3, [pc, #32]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005772:	4a07      	ldr	r2, [pc, #28]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	4a03      	ldr	r2, [pc, #12]	@ (8005790 <HAL_RCC_OscConfig+0x504>)
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800578c:	e014      	b.n	80057b8 <HAL_RCC_OscConfig+0x52c>
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	40007000 	.word	0x40007000
 8005798:	4b9d      	ldr	r3, [pc, #628]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	4a9c      	ldr	r2, [pc, #624]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80057a8:	4b99      	ldr	r3, [pc, #612]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ae:	4a98      	ldr	r2, [pc, #608]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80057b0:	f023 0304 	bic.w	r3, r3, #4
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d016      	beq.n	80057ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c0:	f7fc fd74 	bl	80022ac <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c6:	e00a      	b.n	80057de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c8:	f7fc fd70 	bl	80022ac <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e168      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	4b8c      	ldr	r3, [pc, #560]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ed      	beq.n	80057c8 <HAL_RCC_OscConfig+0x53c>
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fc fd5d 	bl	80022ac <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f4:	e00a      	b.n	800580c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f6:	f7fc fd59 	bl	80022ac <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005804:	4293      	cmp	r3, r2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e151      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800580c:	4b80      	ldr	r3, [pc, #512]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ed      	bne.n	80057f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800581a:	7ffb      	ldrb	r3, [r7, #31]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d105      	bne.n	800582c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005820:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005824:	4a7a      	ldr	r2, [pc, #488]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800582a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d03c      	beq.n	80058b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005840:	4b73      	ldr	r3, [pc, #460]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005846:	4a72      	ldr	r2, [pc, #456]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fc fd2c 	bl	80022ac <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005858:	f7fc fd28 	bl	80022ac <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e122      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800586a:	4b69      	ldr	r3, [pc, #420]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800586c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ef      	beq.n	8005858 <HAL_RCC_OscConfig+0x5cc>
 8005878:	e01b      	b.n	80058b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800587a:	4b65      	ldr	r3, [pc, #404]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800587c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005880:	4a63      	ldr	r2, [pc, #396]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800588a:	f7fc fd0f 	bl	80022ac <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005892:	f7fc fd0b 	bl	80022ac <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e105      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80058a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80058a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1ef      	bne.n	8005892 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80f9 	beq.w	8005aae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	f040 80cf 	bne.w	8005a64 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80058c6:	4b52      	ldr	r3, [pc, #328]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f003 0203 	and.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d12c      	bne.n	8005934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	3b01      	subs	r3, #1
 80058e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d123      	bne.n	8005934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d11b      	bne.n	8005934 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005906:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d113      	bne.n	8005934 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	3b01      	subs	r3, #1
 800591a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d109      	bne.n	8005934 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	3b01      	subs	r3, #1
 800592e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d071      	beq.n	8005a18 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d068      	beq.n	8005a0c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800593a:	4b35      	ldr	r3, [pc, #212]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d105      	bne.n	8005952 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005946:	4b32      	ldr	r3, [pc, #200]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0ac      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005956:	4b2e      	ldr	r3, [pc, #184]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800595c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005960:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005962:	f7fc fca3 	bl	80022ac <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596a:	f7fc fc9f 	bl	80022ac <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e099      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597c:	4b24      	ldr	r3, [pc, #144]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005988:	4b21      	ldr	r3, [pc, #132]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	4b21      	ldr	r3, [pc, #132]	@ (8005a14 <HAL_RCC_OscConfig+0x788>)
 800598e:	4013      	ands	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005998:	3a01      	subs	r2, #1
 800599a:	0112      	lsls	r2, r2, #4
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80059a2:	0212      	lsls	r2, r2, #8
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059aa:	0852      	lsrs	r2, r2, #1
 80059ac:	3a01      	subs	r2, #1
 80059ae:	0552      	lsls	r2, r2, #21
 80059b0:	4311      	orrs	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059b6:	0852      	lsrs	r2, r2, #1
 80059b8:	3a01      	subs	r2, #1
 80059ba:	0652      	lsls	r2, r2, #25
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059c2:	06d2      	lsls	r2, r2, #27
 80059c4:	430a      	orrs	r2, r1
 80059c6:	4912      	ldr	r1, [pc, #72]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80059cc:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 80059de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80059e4:	f7fc fc62 	bl	80022ac <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fc fc5e 	bl	80022ac <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e058      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fe:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <HAL_RCC_OscConfig+0x784>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a0a:	e050      	b.n	8005aae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e04f      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
 8005a10:	40021000 	.word	0x40021000
 8005a14:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a18:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d144      	bne.n	8005aae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005a24:	4b24      	ldr	r3, [pc, #144]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a23      	ldr	r2, [pc, #140]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a30:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a20      	ldr	r2, [pc, #128]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a3c:	f7fc fc36 	bl	80022ac <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc fc32 	bl	80022ac <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e02c      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a56:	4b18      	ldr	r3, [pc, #96]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x7b8>
 8005a62:	e024      	b.n	8005aae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d01f      	beq.n	8005aaa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b13      	ldr	r3, [pc, #76]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fc fc19 	bl	80022ac <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7e:	f7fc fc15 	bl	80022ac <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e00f      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a90:	4b09      	ldr	r3, [pc, #36]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f0      	bne.n	8005a7e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	4905      	ldr	r1, [pc, #20]	@ (8005ab8 <HAL_RCC_OscConfig+0x82c>)
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCC_OscConfig+0x830>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60cb      	str	r3, [r1, #12]
 8005aa8:	e001      	b.n	8005aae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3720      	adds	r7, #32
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	feeefffc 	.word	0xfeeefffc

08005ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e11d      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b90      	ldr	r3, [pc, #576]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d910      	bls.n	8005b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 020f 	bic.w	r2, r3, #15
 8005aee:	498b      	ldr	r1, [pc, #556]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b89      	ldr	r3, [pc, #548]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e105      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d010      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	4b81      	ldr	r3, [pc, #516]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d908      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b24:	4b7e      	ldr	r3, [pc, #504]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	497b      	ldr	r1, [pc, #492]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d079      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d11e      	bne.n	8005b88 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4a:	4b75      	ldr	r3, [pc, #468]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0dc      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005b5a:	f000 fa09 	bl	8005f70 <RCC_GetSysClockFreqFromPLLSource>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4a70      	ldr	r2, [pc, #448]	@ (8005d24 <HAL_RCC_ClockConfig+0x264>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d946      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b66:	4b6e      	ldr	r3, [pc, #440]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d140      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b72:	4b6b      	ldr	r3, [pc, #428]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7a:	4a69      	ldr	r2, [pc, #420]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e035      	b.n	8005bf4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b90:	4b63      	ldr	r3, [pc, #396]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d115      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0b9      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0ad      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb8:	4b59      	ldr	r3, [pc, #356]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0a5      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005bc8:	f000 f8b4 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4a55      	ldr	r2, [pc, #340]	@ (8005d24 <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d90f      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005bd4:	4b52      	ldr	r3, [pc, #328]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005be0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005be8:	4a4d      	ldr	r2, [pc, #308]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bf0:	2380      	movs	r3, #128	@ 0x80
 8005bf2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4947      	ldr	r1, [pc, #284]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c06:	f7fc fb51 	bl	80022ac <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c0e:	f7fc fb4d 	bl	80022ac <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e077      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c24:	4b3e      	ldr	r3, [pc, #248]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 020c 	and.w	r2, r3, #12
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d1eb      	bne.n	8005c0e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b80      	cmp	r3, #128	@ 0x80
 8005c3a:	d105      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c3c:	4b38      	ldr	r3, [pc, #224]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a37      	ldr	r2, [pc, #220]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c46:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	4b31      	ldr	r3, [pc, #196]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d208      	bcs.n	8005c76 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c64:	4b2e      	ldr	r3, [pc, #184]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	492b      	ldr	r1, [pc, #172]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c76:	4b29      	ldr	r3, [pc, #164]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d210      	bcs.n	8005ca6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c84:	4b25      	ldr	r3, [pc, #148]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f023 020f 	bic.w	r2, r3, #15
 8005c8c:	4923      	ldr	r1, [pc, #140]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c94:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <HAL_RCC_ClockConfig+0x25c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d001      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e036      	b.n	8005d14 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4918      	ldr	r1, [pc, #96]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d009      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cd0:	4b13      	ldr	r3, [pc, #76]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4910      	ldr	r1, [pc, #64]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ce4:	f000 f826 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <HAL_RCC_ClockConfig+0x260>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	091b      	lsrs	r3, r3, #4
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	490c      	ldr	r1, [pc, #48]	@ (8005d28 <HAL_RCC_ClockConfig+0x268>)
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	4a0a      	ldr	r2, [pc, #40]	@ (8005d2c <HAL_RCC_ClockConfig+0x26c>)
 8005d02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d04:	4b0a      	ldr	r3, [pc, #40]	@ (8005d30 <HAL_RCC_ClockConfig+0x270>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fc fa7f 	bl	800220c <HAL_InitTick>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40022000 	.word	0x40022000
 8005d20:	40021000 	.word	0x40021000
 8005d24:	04c4b400 	.word	0x04c4b400
 8005d28:	080083dc 	.word	0x080083dc
 8005d2c:	20000094 	.word	0x20000094
 8005d30:	200000a8 	.word	0x200000a8

08005d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d42:	4b3e      	ldr	r3, [pc, #248]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x34>
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d121      	bne.n	8005da6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d11e      	bne.n	8005da6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d68:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d74:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d7a:	0a1b      	lsrs	r3, r3, #8
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e005      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d84:	4b2d      	ldr	r3, [pc, #180]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005d90:	4a2b      	ldr	r2, [pc, #172]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10d      	bne.n	8005dbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005da4:	e00a      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d102      	bne.n	8005db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dac:	4b25      	ldr	r3, [pc, #148]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	e004      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005db8:	4b23      	ldr	r3, [pc, #140]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d134      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d003      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0xa6>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0xac>
 8005dd8:	e005      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005dda:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ddc:	617b      	str	r3, [r7, #20]
      break;
 8005dde:	e005      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005de0:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8005de2:	617b      	str	r3, [r7, #20]
      break;
 8005de4:	e002      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	617b      	str	r3, [r7, #20]
      break;
 8005dea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dec:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	3301      	adds	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	fb03 f202 	mul.w	r2, r3, r2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	0e5b      	lsrs	r3, r3, #25
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3724      	adds	r7, #36	@ 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	080083f4 	.word	0x080083f4
 8005e44:	00f42400 	.word	0x00f42400
 8005e48:	007a1200 	.word	0x007a1200

08005e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b03      	ldr	r3, [pc, #12]	@ (8005e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	20000094 	.word	0x20000094

08005e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e68:	f7ff fff0 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4904      	ldr	r1, [pc, #16]	@ (8005e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	080083ec 	.word	0x080083ec

08005e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e94:	f7ff ffda 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	0adb      	lsrs	r3, r3, #11
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4904      	ldr	r1, [pc, #16]	@ (8005eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	080083ec 	.word	0x080083ec

08005ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ec8:	4b27      	ldr	r3, [pc, #156]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ed4:	f7ff f916 	bl	8005104 <HAL_PWREx_GetVoltageRange>
 8005ed8:	6178      	str	r0, [r7, #20]
 8005eda:	e014      	b.n	8005f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005edc:	4b22      	ldr	r3, [pc, #136]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee0:	4a21      	ldr	r2, [pc, #132]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005ef4:	f7ff f906 	bl	8005104 <HAL_PWREx_GetVoltageRange>
 8005ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005efa:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efe:	4a1a      	ldr	r2, [pc, #104]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d10b      	bne.n	8005f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b80      	cmp	r3, #128	@ 0x80
 8005f12:	d913      	bls.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f18:	d902      	bls.n	8005f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	e00d      	b.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f20:	2301      	movs	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e00a      	b.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f2a:	d902      	bls.n	8005f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	e004      	b.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b70      	cmp	r3, #112	@ 0x70
 8005f36:	d101      	bne.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f38:	2301      	movs	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 020f 	bic.w	r2, r3, #15
 8005f44:	4909      	ldr	r1, [pc, #36]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f4c:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40022000 	.word	0x40022000

08005f70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f76:	4b2d      	ldr	r3, [pc, #180]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d00b      	beq.n	8005f9e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d825      	bhi.n	8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d008      	beq.n	8005fa4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d11f      	bne.n	8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f98:	4b25      	ldr	r3, [pc, #148]	@ (8006030 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f9a:	613b      	str	r3, [r7, #16]
    break;
 8005f9c:	e01f      	b.n	8005fde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f9e:	4b25      	ldr	r3, [pc, #148]	@ (8006034 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005fa0:	613b      	str	r3, [r7, #16]
    break;
 8005fa2:	e01c      	b.n	8005fde <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fb6:	0a1b      	lsrs	r3, r3, #8
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e005      	b.n	8005fcc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8006038 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd4:	613b      	str	r3, [r7, #16]
    break;
 8005fd6:	e002      	b.n	8005fde <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	613b      	str	r3, [r7, #16]
    break;
 8005fdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fde:	4b13      	ldr	r3, [pc, #76]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fec:	4b0f      	ldr	r3, [pc, #60]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	0a1b      	lsrs	r3, r3, #8
 8005ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	fb03 f202 	mul.w	r2, r3, r2
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006004:	4b09      	ldr	r3, [pc, #36]	@ (800602c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0e5b      	lsrs	r3, r3, #25
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	3301      	adds	r3, #1
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800601e:	683b      	ldr	r3, [r7, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40021000 	.word	0x40021000
 8006030:	00f42400 	.word	0x00f42400
 8006034:	007a1200 	.word	0x007a1200
 8006038:	080083f4 	.word	0x080083f4

0800603c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006044:	2300      	movs	r3, #0
 8006046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006048:	2300      	movs	r3, #0
 800604a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006054:	2b00      	cmp	r3, #0
 8006056:	d040      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800605c:	2b80      	cmp	r3, #128	@ 0x80
 800605e:	d02a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006060:	2b80      	cmp	r3, #128	@ 0x80
 8006062:	d825      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006064:	2b60      	cmp	r3, #96	@ 0x60
 8006066:	d026      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006068:	2b60      	cmp	r3, #96	@ 0x60
 800606a:	d821      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800606c:	2b40      	cmp	r3, #64	@ 0x40
 800606e:	d006      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d81d      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d009      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006078:	2b20      	cmp	r3, #32
 800607a:	d010      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800607c:	e018      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800607e:	4b89      	ldr	r3, [pc, #548]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	4a88      	ldr	r2, [pc, #544]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006088:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800608a:	e015      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3304      	adds	r3, #4
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb12 	bl	80066bc <RCCEx_PLLSAI1_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800609c:	e00c      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3320      	adds	r3, #32
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fbfd 	bl	80068a4 <RCCEx_PLLSAI2_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80060ae:	e003      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	74fb      	strb	r3, [r7, #19]
      break;
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80060b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b8:	7cfb      	ldrb	r3, [r7, #19]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060be:	4b79      	ldr	r3, [pc, #484]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060c4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060cc:	4975      	ldr	r1, [pc, #468]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80060d4:	e001      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d047      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ee:	d030      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060f4:	d82a      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80060f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060fa:	d02a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80060fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006100:	d824      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006102:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006106:	d008      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610c:	d81e      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006116:	d010      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006118:	e018      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800611a:	4b62      	ldr	r3, [pc, #392]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	4a61      	ldr	r2, [pc, #388]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006124:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006126:	e015      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fac4 	bl	80066bc <RCCEx_PLLSAI1_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006138:	e00c      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3320      	adds	r3, #32
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fbaf 	bl	80068a4 <RCCEx_PLLSAI2_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	74fb      	strb	r3, [r7, #19]
      break;
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800615a:	4b52      	ldr	r3, [pc, #328]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006168:	494e      	ldr	r1, [pc, #312]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800616a:	4313      	orrs	r3, r2
 800616c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006170:	e001      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	7cfb      	ldrb	r3, [r7, #19]
 8006174:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 809f 	beq.w	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006184:	2300      	movs	r3, #0
 8006186:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006188:	4b46      	ldr	r3, [pc, #280]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619e:	4b41      	ldr	r3, [pc, #260]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a2:	4a40      	ldr	r2, [pc, #256]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80061aa:	4b3e      	ldr	r3, [pc, #248]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b2:	60bb      	str	r3, [r7, #8]
 80061b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b6:	2301      	movs	r3, #1
 80061b8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ba:	4b3b      	ldr	r3, [pc, #236]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3a      	ldr	r2, [pc, #232]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061c6:	f7fc f871 	bl	80022ac <HAL_GetTick>
 80061ca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061cc:	e009      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ce:	f7fc f86d 	bl	80022ac <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d902      	bls.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	74fb      	strb	r3, [r7, #19]
        break;
 80061e0:	e005      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0ef      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d15b      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061f4:	4b2b      	ldr	r3, [pc, #172]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061fe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01f      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	429a      	cmp	r2, r3
 8006210:	d019      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006212:	4b24      	ldr	r3, [pc, #144]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006224:	4a1f      	ldr	r2, [pc, #124]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800622e:	4b1d      	ldr	r3, [pc, #116]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006234:	4a1b      	ldr	r2, [pc, #108]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800623e:	4a19      	ldr	r2, [pc, #100]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d016      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fc f82c 	bl	80022ac <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006256:	e00b      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fc f828 	bl	80022ac <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d902      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	74fb      	strb	r3, [r7, #19]
            break;
 800626e:	e006      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ec      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006284:	4b07      	ldr	r3, [pc, #28]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800628a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006294:	4903      	ldr	r1, [pc, #12]	@ (80062a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006296:	4313      	orrs	r3, r2
 8006298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800629c:	e008      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800629e:	7cfb      	ldrb	r3, [r7, #19]
 80062a0:	74bb      	strb	r3, [r7, #18]
 80062a2:	e005      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ac:	7cfb      	ldrb	r3, [r7, #19]
 80062ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062b0:	7c7b      	ldrb	r3, [r7, #17]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d105      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b6:	4ba0      	ldr	r3, [pc, #640]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ba:	4a9f      	ldr	r2, [pc, #636]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f023 0203 	bic.w	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062dc:	4996      	ldr	r1, [pc, #600]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062f0:	4b91      	ldr	r3, [pc, #580]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f6:	f023 020c 	bic.w	r2, r3, #12
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	498e      	ldr	r1, [pc, #568]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006312:	4b89      	ldr	r3, [pc, #548]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006318:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006320:	4985      	ldr	r1, [pc, #532]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006334:	4b80      	ldr	r3, [pc, #512]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006342:	497d      	ldr	r1, [pc, #500]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006356:	4b78      	ldr	r3, [pc, #480]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006364:	4974      	ldr	r1, [pc, #464]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006378:	4b6f      	ldr	r3, [pc, #444]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006386:	496c      	ldr	r1, [pc, #432]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800639a:	4b67      	ldr	r3, [pc, #412]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a8:	4963      	ldr	r1, [pc, #396]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ca:	495b      	ldr	r1, [pc, #364]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063de:	4b56      	ldr	r3, [pc, #344]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	4952      	ldr	r1, [pc, #328]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006400:	4b4d      	ldr	r3, [pc, #308]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640e:	494a      	ldr	r1, [pc, #296]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006422:	4b45      	ldr	r3, [pc, #276]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006430:	4941      	ldr	r1, [pc, #260]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006444:	4b3c      	ldr	r3, [pc, #240]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800644a:	f023 0203 	bic.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006452:	4939      	ldr	r1, [pc, #228]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d028      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006466:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006474:	4930      	ldr	r1, [pc, #192]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006486:	4b2c      	ldr	r3, [pc, #176]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	4a2b      	ldr	r2, [pc, #172]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006490:	60d3      	str	r3, [r2, #12]
 8006492:	e011      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800649c:	d10c      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3304      	adds	r3, #4
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 f909 	bl	80066bc <RCCEx_PLLSAI1_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80064b4:	7cfb      	ldrb	r3, [r7, #19]
 80064b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d04d      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064cc:	d108      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80064ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064d4:	4a18      	ldr	r2, [pc, #96]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80064de:	e012      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80064e0:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064e6:	4a14      	ldr	r2, [pc, #80]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80064f0:	4b11      	ldr	r3, [pc, #68]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064fe:	490e      	ldr	r1, [pc, #56]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800650a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800650e:	d106      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a08      	ldr	r2, [pc, #32]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800651a:	60d3      	str	r3, [r2, #12]
 800651c:	e020      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006526:	d109      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006528:	4b03      	ldr	r3, [pc, #12]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a02      	ldr	r2, [pc, #8]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800652e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006532:	60d3      	str	r3, [r2, #12]
 8006534:	e014      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006544:	d10c      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	2101      	movs	r1, #1
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f8b5 	bl	80066bc <RCCEx_PLLSAI1_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d028      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800656c:	4b4a      	ldr	r3, [pc, #296]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006572:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800657a:	4947      	ldr	r1, [pc, #284]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657c:	4313      	orrs	r3, r2
 800657e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658c:	4b42      	ldr	r3, [pc, #264]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4a41      	ldr	r2, [pc, #260]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006596:	60d3      	str	r3, [r2, #12]
 8006598:	e011      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800659e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a2:	d10c      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f886 	bl	80066bc <RCCEx_PLLSAI1_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065b4:	7cfb      	ldrb	r3, [r7, #19]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d01e      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065ca:	4b33      	ldr	r3, [pc, #204]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065da:	492f      	ldr	r1, [pc, #188]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3304      	adds	r3, #4
 80065f2:	2102      	movs	r1, #2
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f861 	bl	80066bc <RCCEx_PLLSAI1_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fe:	7cfb      	ldrb	r3, [r7, #19]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006614:	4b20      	ldr	r3, [pc, #128]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661a:	f023 0204 	bic.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006624:	491c      	ldr	r1, [pc, #112]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00b      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006638:	4b17      	ldr	r3, [pc, #92]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800663a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800663e:	f023 0218 	bic.w	r2, r3, #24
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006648:	4913      	ldr	r1, [pc, #76]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800665c:	4b0e      	ldr	r3, [pc, #56]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800665e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800666c:	490a      	ldr	r1, [pc, #40]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800667a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800667e:	d105      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	4a04      	ldr	r2, [pc, #16]	@ (8006698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800668a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800668c:	7cbb      	ldrb	r3, [r7, #18]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000

0800669c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80066a0:	4b05      	ldr	r3, [pc, #20]	@ (80066b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a04      	ldr	r2, [pc, #16]	@ (80066b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40021000 	.word	0x40021000

080066bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ca:	4b72      	ldr	r3, [pc, #456]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00e      	beq.n	80066f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0203 	and.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d103      	bne.n	80066ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
       ||
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d142      	bne.n	8006774 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	e03f      	b.n	8006774 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d018      	beq.n	800672e <RCCEx_PLLSAI1_Config+0x72>
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d825      	bhi.n	800674c <RCCEx_PLLSAI1_Config+0x90>
 8006700:	2b01      	cmp	r3, #1
 8006702:	d002      	beq.n	800670a <RCCEx_PLLSAI1_Config+0x4e>
 8006704:	2b02      	cmp	r3, #2
 8006706:	d009      	beq.n	800671c <RCCEx_PLLSAI1_Config+0x60>
 8006708:	e020      	b.n	800674c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800670a:	4b62      	ldr	r3, [pc, #392]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d11d      	bne.n	8006752 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800671a:	e01a      	b.n	8006752 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800671c:	4b5d      	ldr	r3, [pc, #372]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006724:	2b00      	cmp	r3, #0
 8006726:	d116      	bne.n	8006756 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800672c:	e013      	b.n	8006756 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800672e:	4b59      	ldr	r3, [pc, #356]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10f      	bne.n	800675a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800673a:	4b56      	ldr	r3, [pc, #344]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800674a:	e006      	b.n	800675a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e004      	b.n	800675c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800675a:	bf00      	nop
    }

    if(status == HAL_OK)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d108      	bne.n	8006774 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006762:	4b4c      	ldr	r3, [pc, #304]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f023 0203 	bic.w	r2, r3, #3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4949      	ldr	r1, [pc, #292]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 8086 	bne.w	8006888 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800677c:	4b45      	ldr	r3, [pc, #276]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a44      	ldr	r2, [pc, #272]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006782:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006788:	f7fb fd90 	bl	80022ac <HAL_GetTick>
 800678c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800678e:	e009      	b.n	80067a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006790:	f7fb fd8c 	bl	80022ac <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d902      	bls.n	80067a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
        break;
 80067a2:	e005      	b.n	80067b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1ef      	bne.n	8006790 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d168      	bne.n	8006888 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d113      	bne.n	80067e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067bc:	4b35      	ldr	r3, [pc, #212]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	4b35      	ldr	r3, [pc, #212]	@ (8006898 <RCCEx_PLLSAI1_Config+0x1dc>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6892      	ldr	r2, [r2, #8]
 80067c8:	0211      	lsls	r1, r2, #8
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68d2      	ldr	r2, [r2, #12]
 80067ce:	06d2      	lsls	r2, r2, #27
 80067d0:	4311      	orrs	r1, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6852      	ldr	r2, [r2, #4]
 80067d6:	3a01      	subs	r2, #1
 80067d8:	0112      	lsls	r2, r2, #4
 80067da:	430a      	orrs	r2, r1
 80067dc:	492d      	ldr	r1, [pc, #180]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	610b      	str	r3, [r1, #16]
 80067e2:	e02d      	b.n	8006840 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d115      	bne.n	8006816 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	4b2b      	ldr	r3, [pc, #172]	@ (800689c <RCCEx_PLLSAI1_Config+0x1e0>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6892      	ldr	r2, [r2, #8]
 80067f6:	0211      	lsls	r1, r2, #8
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6912      	ldr	r2, [r2, #16]
 80067fc:	0852      	lsrs	r2, r2, #1
 80067fe:	3a01      	subs	r2, #1
 8006800:	0552      	lsls	r2, r2, #21
 8006802:	4311      	orrs	r1, r2
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	3a01      	subs	r2, #1
 800680a:	0112      	lsls	r2, r2, #4
 800680c:	430a      	orrs	r2, r1
 800680e:	4921      	ldr	r1, [pc, #132]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006810:	4313      	orrs	r3, r2
 8006812:	610b      	str	r3, [r1, #16]
 8006814:	e014      	b.n	8006840 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006816:	4b1f      	ldr	r3, [pc, #124]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006818:	691a      	ldr	r2, [r3, #16]
 800681a:	4b21      	ldr	r3, [pc, #132]	@ (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6892      	ldr	r2, [r2, #8]
 8006822:	0211      	lsls	r1, r2, #8
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6952      	ldr	r2, [r2, #20]
 8006828:	0852      	lsrs	r2, r2, #1
 800682a:	3a01      	subs	r2, #1
 800682c:	0652      	lsls	r2, r2, #25
 800682e:	4311      	orrs	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6852      	ldr	r2, [r2, #4]
 8006834:	3a01      	subs	r2, #1
 8006836:	0112      	lsls	r2, r2, #4
 8006838:	430a      	orrs	r2, r1
 800683a:	4916      	ldr	r1, [pc, #88]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800683c:	4313      	orrs	r3, r2
 800683e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006840:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a13      	ldr	r2, [pc, #76]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800684a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684c:	f7fb fd2e 	bl	80022ac <HAL_GetTick>
 8006850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006852:	e009      	b.n	8006868 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006854:	f7fb fd2a 	bl	80022ac <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d902      	bls.n	8006868 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	73fb      	strb	r3, [r7, #15]
          break;
 8006866:	e005      	b.n	8006874 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006868:	4b0a      	ldr	r3, [pc, #40]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0ef      	beq.n	8006854 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800687a:	4b06      	ldr	r3, [pc, #24]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	4904      	ldr	r1, [pc, #16]	@ (8006894 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006884:	4313      	orrs	r3, r2
 8006886:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	40021000 	.word	0x40021000
 8006898:	07ff800f 	.word	0x07ff800f
 800689c:	ff9f800f 	.word	0xff9f800f
 80068a0:	f9ff800f 	.word	0xf9ff800f

080068a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068b2:	4b72      	ldr	r3, [pc, #456]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068be:	4b6f      	ldr	r3, [pc, #444]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d103      	bne.n	80068d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
       ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d142      	bne.n	800695c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e03f      	b.n	800695c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d018      	beq.n	8006916 <RCCEx_PLLSAI2_Config+0x72>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d825      	bhi.n	8006934 <RCCEx_PLLSAI2_Config+0x90>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d002      	beq.n	80068f2 <RCCEx_PLLSAI2_Config+0x4e>
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d009      	beq.n	8006904 <RCCEx_PLLSAI2_Config+0x60>
 80068f0:	e020      	b.n	8006934 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068f2:	4b62      	ldr	r3, [pc, #392]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11d      	bne.n	800693a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006902:	e01a      	b.n	800693a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006904:	4b5d      	ldr	r3, [pc, #372]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d116      	bne.n	800693e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006914:	e013      	b.n	800693e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006916:	4b59      	ldr	r3, [pc, #356]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006922:	4b56      	ldr	r3, [pc, #344]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006932:	e006      	b.n	8006942 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
      break;
 8006938:	e004      	b.n	8006944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006942:	bf00      	nop
    }

    if(status == HAL_OK)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d108      	bne.n	800695c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800694a:	4b4c      	ldr	r3, [pc, #304]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4949      	ldr	r1, [pc, #292]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 8086 	bne.w	8006a70 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006964:	4b45      	ldr	r3, [pc, #276]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a44      	ldr	r2, [pc, #272]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800696a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800696e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006970:	f7fb fc9c 	bl	80022ac <HAL_GetTick>
 8006974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006976:	e009      	b.n	800698c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006978:	f7fb fc98 	bl	80022ac <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	73fb      	strb	r3, [r7, #15]
        break;
 800698a:	e005      	b.n	8006998 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800698c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ef      	bne.n	8006978 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d168      	bne.n	8006a70 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d113      	bne.n	80069cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069a4:	4b35      	ldr	r3, [pc, #212]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	4b35      	ldr	r3, [pc, #212]	@ (8006a80 <RCCEx_PLLSAI2_Config+0x1dc>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6892      	ldr	r2, [r2, #8]
 80069b0:	0211      	lsls	r1, r2, #8
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68d2      	ldr	r2, [r2, #12]
 80069b6:	06d2      	lsls	r2, r2, #27
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6852      	ldr	r2, [r2, #4]
 80069be:	3a01      	subs	r2, #1
 80069c0:	0112      	lsls	r2, r2, #4
 80069c2:	430a      	orrs	r2, r1
 80069c4:	492d      	ldr	r1, [pc, #180]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	614b      	str	r3, [r1, #20]
 80069ca:	e02d      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d115      	bne.n	80069fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069d2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a84 <RCCEx_PLLSAI2_Config+0x1e0>)
 80069d8:	4013      	ands	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6892      	ldr	r2, [r2, #8]
 80069de:	0211      	lsls	r1, r2, #8
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6912      	ldr	r2, [r2, #16]
 80069e4:	0852      	lsrs	r2, r2, #1
 80069e6:	3a01      	subs	r2, #1
 80069e8:	0552      	lsls	r2, r2, #21
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6852      	ldr	r2, [r2, #4]
 80069f0:	3a01      	subs	r2, #1
 80069f2:	0112      	lsls	r2, r2, #4
 80069f4:	430a      	orrs	r2, r1
 80069f6:	4921      	ldr	r1, [pc, #132]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	614b      	str	r3, [r1, #20]
 80069fc:	e014      	b.n	8006a28 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069fe:	4b1f      	ldr	r3, [pc, #124]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	4b21      	ldr	r3, [pc, #132]	@ (8006a88 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6892      	ldr	r2, [r2, #8]
 8006a0a:	0211      	lsls	r1, r2, #8
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6952      	ldr	r2, [r2, #20]
 8006a10:	0852      	lsrs	r2, r2, #1
 8006a12:	3a01      	subs	r2, #1
 8006a14:	0652      	lsls	r2, r2, #25
 8006a16:	4311      	orrs	r1, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6852      	ldr	r2, [r2, #4]
 8006a1c:	3a01      	subs	r2, #1
 8006a1e:	0112      	lsls	r2, r2, #4
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4916      	ldr	r1, [pc, #88]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a28:	4b14      	ldr	r3, [pc, #80]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a13      	ldr	r2, [pc, #76]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fb fc3a 	bl	80022ac <HAL_GetTick>
 8006a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a3a:	e009      	b.n	8006a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a3c:	f7fb fc36 	bl	80022ac <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d902      	bls.n	8006a50 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a4e:	e005      	b.n	8006a5c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a50:	4b0a      	ldr	r3, [pc, #40]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0ef      	beq.n	8006a3c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a62:	4b06      	ldr	r3, [pc, #24]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	4904      	ldr	r1, [pc, #16]	@ (8006a7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	07ff800f 	.word	0x07ff800f
 8006a84:	ff9f800f 	.word	0xff9f800f
 8006a88:	f9ff800f 	.word	0xf9ff800f

08006a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e095      	b.n	8006bca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d108      	bne.n	8006ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aae:	d009      	beq.n	8006ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	61da      	str	r2, [r3, #28]
 8006ab6:	e005      	b.n	8006ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d106      	bne.n	8006ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa fee0 	bl	80018a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006afa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b04:	d902      	bls.n	8006b0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	e002      	b.n	8006b12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006b1a:	d007      	beq.n	8006b2c <HAL_SPI_Init+0xa0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b24:	d002      	beq.n	8006b2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	ea42 0103 	orr.w	r1, r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	0c1b      	lsrs	r3, r3, #16
 8006b88:	f003 0204 	and.w	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ba8:	ea42 0103 	orr.w	r1, r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e042      	b.n	8006c6a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa feca 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2224      	movs	r2, #36	@ 0x24
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fbb3 	bl	8007388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f8b4 	bl	8006d90 <UART_SetConfig>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e01b      	b.n	8006c6a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0201 	orr.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc32 	bl	80074cc <UART_CheckIdleState>
 8006c68:	4603      	mov	r3, r0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b08a      	sub	sp, #40	@ 0x28
 8006c76:	af02      	add	r7, sp, #8
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	603b      	str	r3, [r7, #0]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d17b      	bne.n	8006d84 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Transmit+0x26>
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e074      	b.n	8006d86 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2221      	movs	r2, #33	@ 0x21
 8006ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cac:	f7fb fafe 	bl	80022ac <HAL_GetTick>
 8006cb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	88fa      	ldrh	r2, [r7, #6]
 8006cb6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	88fa      	ldrh	r2, [r7, #6]
 8006cbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cca:	d108      	bne.n	8006cde <HAL_UART_Transmit+0x6c>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e003      	b.n	8006ce6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce6:	e030      	b.n	8006d4a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2180      	movs	r1, #128	@ 0x80
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fc94 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e03d      	b.n	8006d86 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	881a      	ldrh	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d1c:	b292      	uxth	r2, r2
 8006d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	3302      	adds	r3, #2
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	e007      	b.n	8006d38 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c8      	bne.n	8006ce8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2140      	movs	r1, #64	@ 0x40
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fc5d 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e006      	b.n	8006d86 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e000      	b.n	8006d86 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
  }
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d94:	b08c      	sub	sp, #48	@ 0x30
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4baa      	ldr	r3, [pc, #680]	@ (8007068 <UART_SetConfig+0x2d8>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a9f      	ldr	r2, [pc, #636]	@ (800706c <UART_SetConfig+0x2dc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006e06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	f023 010f 	bic.w	r1, r3, #15
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a90      	ldr	r2, [pc, #576]	@ (8007070 <UART_SetConfig+0x2e0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d125      	bne.n	8006e80 <UART_SetConfig+0xf0>
 8006e34:	4b8f      	ldr	r3, [pc, #572]	@ (8007074 <UART_SetConfig+0x2e4>)
 8006e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e3a:	f003 0303 	and.w	r3, r3, #3
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d81a      	bhi.n	8006e78 <UART_SetConfig+0xe8>
 8006e42:	a201      	add	r2, pc, #4	@ (adr r2, 8006e48 <UART_SetConfig+0xb8>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e69 	.word	0x08006e69
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5e:	e116      	b.n	800708e <UART_SetConfig+0x2fe>
 8006e60:	2302      	movs	r3, #2
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e66:	e112      	b.n	800708e <UART_SetConfig+0x2fe>
 8006e68:	2304      	movs	r3, #4
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e10e      	b.n	800708e <UART_SetConfig+0x2fe>
 8006e70:	2308      	movs	r3, #8
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e10a      	b.n	800708e <UART_SetConfig+0x2fe>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e7e:	e106      	b.n	800708e <UART_SetConfig+0x2fe>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a7c      	ldr	r2, [pc, #496]	@ (8007078 <UART_SetConfig+0x2e8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d138      	bne.n	8006efc <UART_SetConfig+0x16c>
 8006e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8007074 <UART_SetConfig+0x2e4>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e90:	f003 030c 	and.w	r3, r3, #12
 8006e94:	2b0c      	cmp	r3, #12
 8006e96:	d82d      	bhi.n	8006ef4 <UART_SetConfig+0x164>
 8006e98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x110>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006ed5 	.word	0x08006ed5
 8006ea4:	08006ef5 	.word	0x08006ef5
 8006ea8:	08006ef5 	.word	0x08006ef5
 8006eac:	08006ef5 	.word	0x08006ef5
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006ef5 	.word	0x08006ef5
 8006eb8:	08006ef5 	.word	0x08006ef5
 8006ebc:	08006ef5 	.word	0x08006ef5
 8006ec0:	08006edd 	.word	0x08006edd
 8006ec4:	08006ef5 	.word	0x08006ef5
 8006ec8:	08006ef5 	.word	0x08006ef5
 8006ecc:	08006ef5 	.word	0x08006ef5
 8006ed0:	08006eed 	.word	0x08006eed
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eda:	e0d8      	b.n	800708e <UART_SetConfig+0x2fe>
 8006edc:	2302      	movs	r3, #2
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee2:	e0d4      	b.n	800708e <UART_SetConfig+0x2fe>
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e0d0      	b.n	800708e <UART_SetConfig+0x2fe>
 8006eec:	2308      	movs	r3, #8
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e0cc      	b.n	800708e <UART_SetConfig+0x2fe>
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e0c8      	b.n	800708e <UART_SetConfig+0x2fe>
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a5e      	ldr	r2, [pc, #376]	@ (800707c <UART_SetConfig+0x2ec>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d125      	bne.n	8006f52 <UART_SetConfig+0x1c2>
 8006f06:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <UART_SetConfig+0x2e4>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f10:	2b30      	cmp	r3, #48	@ 0x30
 8006f12:	d016      	beq.n	8006f42 <UART_SetConfig+0x1b2>
 8006f14:	2b30      	cmp	r3, #48	@ 0x30
 8006f16:	d818      	bhi.n	8006f4a <UART_SetConfig+0x1ba>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d00a      	beq.n	8006f32 <UART_SetConfig+0x1a2>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d814      	bhi.n	8006f4a <UART_SetConfig+0x1ba>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <UART_SetConfig+0x19a>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d008      	beq.n	8006f3a <UART_SetConfig+0x1aa>
 8006f28:	e00f      	b.n	8006f4a <UART_SetConfig+0x1ba>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f30:	e0ad      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f32:	2302      	movs	r3, #2
 8006f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f38:	e0a9      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f3a:	2304      	movs	r3, #4
 8006f3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f40:	e0a5      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f42:	2308      	movs	r3, #8
 8006f44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f48:	e0a1      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f50:	e09d      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a4a      	ldr	r2, [pc, #296]	@ (8007080 <UART_SetConfig+0x2f0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d125      	bne.n	8006fa8 <UART_SetConfig+0x218>
 8006f5c:	4b45      	ldr	r3, [pc, #276]	@ (8007074 <UART_SetConfig+0x2e4>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f68:	d016      	beq.n	8006f98 <UART_SetConfig+0x208>
 8006f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f6c:	d818      	bhi.n	8006fa0 <UART_SetConfig+0x210>
 8006f6e:	2b80      	cmp	r3, #128	@ 0x80
 8006f70:	d00a      	beq.n	8006f88 <UART_SetConfig+0x1f8>
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d814      	bhi.n	8006fa0 <UART_SetConfig+0x210>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <UART_SetConfig+0x1f0>
 8006f7a:	2b40      	cmp	r3, #64	@ 0x40
 8006f7c:	d008      	beq.n	8006f90 <UART_SetConfig+0x200>
 8006f7e:	e00f      	b.n	8006fa0 <UART_SetConfig+0x210>
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f86:	e082      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f88:	2302      	movs	r3, #2
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8e:	e07e      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f90:	2304      	movs	r3, #4
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e07a      	b.n	800708e <UART_SetConfig+0x2fe>
 8006f98:	2308      	movs	r3, #8
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e076      	b.n	800708e <UART_SetConfig+0x2fe>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e072      	b.n	800708e <UART_SetConfig+0x2fe>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a35      	ldr	r2, [pc, #212]	@ (8007084 <UART_SetConfig+0x2f4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d12a      	bne.n	8007008 <UART_SetConfig+0x278>
 8006fb2:	4b30      	ldr	r3, [pc, #192]	@ (8007074 <UART_SetConfig+0x2e4>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc0:	d01a      	beq.n	8006ff8 <UART_SetConfig+0x268>
 8006fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc6:	d81b      	bhi.n	8007000 <UART_SetConfig+0x270>
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fcc:	d00c      	beq.n	8006fe8 <UART_SetConfig+0x258>
 8006fce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fd2:	d815      	bhi.n	8007000 <UART_SetConfig+0x270>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <UART_SetConfig+0x250>
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fdc:	d008      	beq.n	8006ff0 <UART_SetConfig+0x260>
 8006fde:	e00f      	b.n	8007000 <UART_SetConfig+0x270>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe6:	e052      	b.n	800708e <UART_SetConfig+0x2fe>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fee:	e04e      	b.n	800708e <UART_SetConfig+0x2fe>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e04a      	b.n	800708e <UART_SetConfig+0x2fe>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e046      	b.n	800708e <UART_SetConfig+0x2fe>
 8007000:	2310      	movs	r3, #16
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e042      	b.n	800708e <UART_SetConfig+0x2fe>
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	@ (800706c <UART_SetConfig+0x2dc>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d13a      	bne.n	8007088 <UART_SetConfig+0x2f8>
 8007012:	4b18      	ldr	r3, [pc, #96]	@ (8007074 <UART_SetConfig+0x2e4>)
 8007014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007018:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800701c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007020:	d01a      	beq.n	8007058 <UART_SetConfig+0x2c8>
 8007022:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007026:	d81b      	bhi.n	8007060 <UART_SetConfig+0x2d0>
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800702c:	d00c      	beq.n	8007048 <UART_SetConfig+0x2b8>
 800702e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007032:	d815      	bhi.n	8007060 <UART_SetConfig+0x2d0>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <UART_SetConfig+0x2b0>
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703c:	d008      	beq.n	8007050 <UART_SetConfig+0x2c0>
 800703e:	e00f      	b.n	8007060 <UART_SetConfig+0x2d0>
 8007040:	2300      	movs	r3, #0
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e022      	b.n	800708e <UART_SetConfig+0x2fe>
 8007048:	2302      	movs	r3, #2
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e01e      	b.n	800708e <UART_SetConfig+0x2fe>
 8007050:	2304      	movs	r3, #4
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e01a      	b.n	800708e <UART_SetConfig+0x2fe>
 8007058:	2308      	movs	r3, #8
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e016      	b.n	800708e <UART_SetConfig+0x2fe>
 8007060:	2310      	movs	r3, #16
 8007062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007066:	e012      	b.n	800708e <UART_SetConfig+0x2fe>
 8007068:	cfff69f3 	.word	0xcfff69f3
 800706c:	40008000 	.word	0x40008000
 8007070:	40013800 	.word	0x40013800
 8007074:	40021000 	.word	0x40021000
 8007078:	40004400 	.word	0x40004400
 800707c:	40004800 	.word	0x40004800
 8007080:	40004c00 	.word	0x40004c00
 8007084:	40005000 	.word	0x40005000
 8007088:	2310      	movs	r3, #16
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4aae      	ldr	r2, [pc, #696]	@ (800734c <UART_SetConfig+0x5bc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	f040 8097 	bne.w	80071c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800709a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d823      	bhi.n	80070ea <UART_SetConfig+0x35a>
 80070a2:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <UART_SetConfig+0x318>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070eb 	.word	0x080070eb
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070eb 	.word	0x080070eb
 80070b8:	080070db 	.word	0x080070db
 80070bc:	080070eb 	.word	0x080070eb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070eb 	.word	0x080070eb
 80070c8:	080070e3 	.word	0x080070e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fe feca 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 80070d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070d2:	e010      	b.n	80070f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d4:	4b9e      	ldr	r3, [pc, #632]	@ (8007350 <UART_SetConfig+0x5c0>)
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070d8:	e00d      	b.n	80070f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070da:	f7fe fe2b 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 80070de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070e0:	e009      	b.n	80070f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070e8:	e005      	b.n	80070f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8130 	beq.w	800735e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	4a94      	ldr	r2, [pc, #592]	@ (8007354 <UART_SetConfig+0x5c4>)
 8007104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007108:	461a      	mov	r2, r3
 800710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007110:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4413      	add	r3, r2
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d305      	bcc.n	800712e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	429a      	cmp	r2, r3
 800712c:	d903      	bls.n	8007136 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007134:	e113      	b.n	800735e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007138:	2200      	movs	r2, #0
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	60fa      	str	r2, [r7, #12]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007142:	4a84      	ldr	r2, [pc, #528]	@ (8007354 <UART_SetConfig+0x5c4>)
 8007144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007148:	b29b      	uxth	r3, r3
 800714a:	2200      	movs	r2, #0
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007154:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007158:	f7f9 fa86 	bl	8000668 <__aeabi_uldivmod>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4610      	mov	r0, r2
 8007162:	4619      	mov	r1, r3
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	020b      	lsls	r3, r1, #8
 800716e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007172:	0202      	lsls	r2, r0, #8
 8007174:	6979      	ldr	r1, [r7, #20]
 8007176:	6849      	ldr	r1, [r1, #4]
 8007178:	0849      	lsrs	r1, r1, #1
 800717a:	2000      	movs	r0, #0
 800717c:	460c      	mov	r4, r1
 800717e:	4605      	mov	r5, r0
 8007180:	eb12 0804 	adds.w	r8, r2, r4
 8007184:	eb43 0905 	adc.w	r9, r3, r5
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	469a      	mov	sl, r3
 8007190:	4693      	mov	fp, r2
 8007192:	4652      	mov	r2, sl
 8007194:	465b      	mov	r3, fp
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 fa65 	bl	8000668 <__aeabi_uldivmod>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4613      	mov	r3, r2
 80071a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ac:	d308      	bcc.n	80071c0 <UART_SetConfig+0x430>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071b4:	d204      	bcs.n	80071c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a3a      	ldr	r2, [r7, #32]
 80071bc:	60da      	str	r2, [r3, #12]
 80071be:	e0ce      	b.n	800735e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071c6:	e0ca      	b.n	800735e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d0:	d166      	bne.n	80072a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80071d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d827      	bhi.n	800722a <UART_SetConfig+0x49a>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x450>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800720d 	.word	0x0800720d
 80071e8:	08007215 	.word	0x08007215
 80071ec:	0800722b 	.word	0x0800722b
 80071f0:	0800721b 	.word	0x0800721b
 80071f4:	0800722b 	.word	0x0800722b
 80071f8:	0800722b 	.word	0x0800722b
 80071fc:	0800722b 	.word	0x0800722b
 8007200:	08007223 	.word	0x08007223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fe fe2e 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800720a:	e014      	b.n	8007236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7fe fe40 	bl	8005e90 <HAL_RCC_GetPCLK2Freq>
 8007210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007212:	e010      	b.n	8007236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007214:	4b4e      	ldr	r3, [pc, #312]	@ (8007350 <UART_SetConfig+0x5c0>)
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007218:	e00d      	b.n	8007236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800721a:	f7fe fd8b 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 800721e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007220:	e009      	b.n	8007236 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007228:	e005      	b.n	8007236 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8090 	beq.w	800735e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	4a44      	ldr	r2, [pc, #272]	@ (8007354 <UART_SetConfig+0x5c4>)
 8007244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007248:	461a      	mov	r2, r3
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007250:	005a      	lsls	r2, r3, #1
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	441a      	add	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	2b0f      	cmp	r3, #15
 8007268:	d916      	bls.n	8007298 <UART_SetConfig+0x508>
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007270:	d212      	bcs.n	8007298 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f023 030f 	bic.w	r3, r3, #15
 800727a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	b29a      	uxth	r2, r3
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	4313      	orrs	r3, r2
 800728c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	8bfa      	ldrh	r2, [r7, #30]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	e062      	b.n	800735e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800729e:	e05e      	b.n	800735e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d828      	bhi.n	80072fa <UART_SetConfig+0x56a>
 80072a8:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <UART_SetConfig+0x520>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072dd 	.word	0x080072dd
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	080072fb 	.word	0x080072fb
 80072c0:	080072eb 	.word	0x080072eb
 80072c4:	080072fb 	.word	0x080072fb
 80072c8:	080072fb 	.word	0x080072fb
 80072cc:	080072fb 	.word	0x080072fb
 80072d0:	080072f3 	.word	0x080072f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d4:	f7fe fdc6 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
 80072d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072da:	e014      	b.n	8007306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072dc:	f7fe fdd8 	bl	8005e90 <HAL_RCC_GetPCLK2Freq>
 80072e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072e2:	e010      	b.n	8007306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007350 <UART_SetConfig+0x5c0>)
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072e8:	e00d      	b.n	8007306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ea:	f7fe fd23 	bl	8005d34 <HAL_RCC_GetSysClockFreq>
 80072ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072f0:	e009      	b.n	8007306 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072f8:	e005      	b.n	8007306 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007304:	bf00      	nop
    }

    if (pclk != 0U)
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d028      	beq.n	800735e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	4a10      	ldr	r2, [pc, #64]	@ (8007354 <UART_SetConfig+0x5c4>)
 8007312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007316:	461a      	mov	r2, r3
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	fbb3 f2f2 	udiv	r2, r3, r2
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	441a      	add	r2, r3
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d910      	bls.n	8007358 <UART_SetConfig+0x5c8>
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733c:	d20c      	bcs.n	8007358 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	b29a      	uxth	r2, r3
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60da      	str	r2, [r3, #12]
 8007348:	e009      	b.n	800735e <UART_SetConfig+0x5ce>
 800734a:	bf00      	nop
 800734c:	40008000 	.word	0x40008000
 8007350:	00f42400 	.word	0x00f42400
 8007354:	08008424 	.word	0x08008424
      }
      else
      {
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2201      	movs	r2, #1
 8007362:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2201      	movs	r2, #1
 800736a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2200      	movs	r2, #0
 8007372:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2200      	movs	r2, #0
 8007378:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800737a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800737e:	4618      	mov	r0, r3
 8007380:	3730      	adds	r7, #48	@ 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007394:	f003 0308 	and.w	r3, r3, #8
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741c:	f003 0310 	and.w	r3, r3, #16
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01a      	beq.n	800749e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007486:	d10a      	bne.n	800749e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	605a      	str	r2, [r3, #4]
  }
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b098      	sub	sp, #96	@ 0x60
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074dc:	f7fa fee6 	bl	80022ac <HAL_GetTick>
 80074e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d12f      	bne.n	8007550 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f8:	2200      	movs	r2, #0
 80074fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f88e 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d022      	beq.n	8007550 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800751e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007528:	647b      	str	r3, [r7, #68]	@ 0x44
 800752a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800752e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e6      	bne.n	800750a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e063      	b.n	8007618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b04      	cmp	r3, #4
 800755c:	d149      	bne.n	80075f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800755e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007566:	2200      	movs	r2, #0
 8007568:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f857 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d03c      	beq.n	80075f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	623b      	str	r3, [r7, #32]
   return(result);
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800758c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007596:	633b      	str	r3, [r7, #48]	@ 0x30
 8007598:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800759c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e6      	bne.n	8007578 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3308      	adds	r3, #8
 80075b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ca:	61fa      	str	r2, [r7, #28]
 80075cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	69b9      	ldr	r1, [r7, #24]
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	617b      	str	r3, [r7, #20]
   return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e5      	bne.n	80075aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e012      	b.n	8007618 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3758      	adds	r7, #88	@ 0x58
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007630:	e04f      	b.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d04b      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800763a:	f7fa fe37 	bl	80022ac <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	429a      	cmp	r2, r3
 8007648:	d302      	bcc.n	8007650 <UART_WaitOnFlagUntilTimeout+0x30>
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e04e      	b.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d037      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b80      	cmp	r3, #128	@ 0x80
 8007666:	d034      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b40      	cmp	r3, #64	@ 0x40
 800766c:	d031      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b08      	cmp	r3, #8
 800767a:	d110      	bne.n	800769e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2208      	movs	r2, #8
 8007682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f838 	bl	80076fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2208      	movs	r2, #8
 800768e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e029      	b.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076ac:	d111      	bne.n	80076d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f81e 	bl	80076fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e00f      	b.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4013      	ands	r3, r2
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	429a      	cmp	r2, r3
 80076e0:	bf0c      	ite	eq
 80076e2:	2301      	moveq	r3, #1
 80076e4:	2300      	movne	r3, #0
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d0a0      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b095      	sub	sp, #84	@ 0x54
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770a:	e853 3f00 	ldrex	r3, [r3]
 800770e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007720:	643b      	str	r3, [r7, #64]	@ 0x40
 8007722:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007726:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007728:	e841 2300 	strex	r3, r2, [r1]
 800772c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e6      	bne.n	8007702 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	61fb      	str	r3, [r7, #28]
   return(result);
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800775e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e3      	bne.n	8007734 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d118      	bne.n	80077a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	60bb      	str	r3, [r7, #8]
   return(result);
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f023 0310 	bic.w	r3, r3, #16
 8007788:	647b      	str	r3, [r7, #68]	@ 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6979      	ldr	r1, [r7, #20]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	613b      	str	r3, [r7, #16]
   return(result);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e6      	bne.n	8007774 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80077ba:	bf00      	nop
 80077bc:	3754      	adds	r7, #84	@ 0x54
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_UARTEx_DisableFifoMode+0x16>
 80077d8:	2302      	movs	r3, #2
 80077da:	e027      	b.n	800782c <HAL_UARTEx_DisableFifoMode+0x66>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2224      	movs	r2, #36	@ 0x24
 80077e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800780a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800784c:	2302      	movs	r3, #2
 800784e:	e02d      	b.n	80078ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	@ 0x24
 800785c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f84f 	bl	8007930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d101      	bne.n	80078cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078c8:	2302      	movs	r3, #2
 80078ca:	e02d      	b.n	8007928 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2224      	movs	r2, #36	@ 0x24
 80078d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f811 	bl	8007930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800793c:	2b00      	cmp	r3, #0
 800793e:	d108      	bne.n	8007952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007950:	e031      	b.n	80079b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007952:	2308      	movs	r3, #8
 8007954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007956:	2308      	movs	r3, #8
 8007958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	0e5b      	lsrs	r3, r3, #25
 8007962:	b2db      	uxtb	r3, r3
 8007964:	f003 0307 	and.w	r3, r3, #7
 8007968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	0f5b      	lsrs	r3, r3, #29
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	7b3a      	ldrb	r2, [r7, #12]
 800797e:	4911      	ldr	r1, [pc, #68]	@ (80079c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007980:	5c8a      	ldrb	r2, [r1, r2]
 8007982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007986:	7b3a      	ldrb	r2, [r7, #12]
 8007988:	490f      	ldr	r1, [pc, #60]	@ (80079c8 <UARTEx_SetNbDataToProcess+0x98>)
 800798a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800798c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	7b7a      	ldrb	r2, [r7, #13]
 800799c:	4909      	ldr	r1, [pc, #36]	@ (80079c4 <UARTEx_SetNbDataToProcess+0x94>)
 800799e:	5c8a      	ldrb	r2, [r1, r2]
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	4908      	ldr	r1, [pc, #32]	@ (80079c8 <UARTEx_SetNbDataToProcess+0x98>)
 80079a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079b6:	bf00      	nop
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	0800843c 	.word	0x0800843c
 80079c8:	08008444 	.word	0x08008444

080079cc <sniprintf>:
 80079cc:	b40c      	push	{r2, r3}
 80079ce:	b530      	push	{r4, r5, lr}
 80079d0:	4b17      	ldr	r3, [pc, #92]	@ (8007a30 <sniprintf+0x64>)
 80079d2:	1e0c      	subs	r4, r1, #0
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	b09d      	sub	sp, #116	@ 0x74
 80079d8:	da08      	bge.n	80079ec <sniprintf+0x20>
 80079da:	238b      	movs	r3, #139	@ 0x8b
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	b01d      	add	sp, #116	@ 0x74
 80079e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e8:	b002      	add	sp, #8
 80079ea:	4770      	bx	lr
 80079ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80079f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079f4:	bf14      	ite	ne
 80079f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079fa:	4623      	moveq	r3, r4
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	9307      	str	r3, [sp, #28]
 8007a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	9006      	str	r0, [sp, #24]
 8007a08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007a0e:	ab21      	add	r3, sp, #132	@ 0x84
 8007a10:	a902      	add	r1, sp, #8
 8007a12:	4628      	mov	r0, r5
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	f000 f9a3 	bl	8007d60 <_svfiprintf_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	bfbc      	itt	lt
 8007a1e:	238b      	movlt	r3, #139	@ 0x8b
 8007a20:	602b      	strlt	r3, [r5, #0]
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	d0dd      	beq.n	80079e2 <sniprintf+0x16>
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e7d9      	b.n	80079e2 <sniprintf+0x16>
 8007a2e:	bf00      	nop
 8007a30:	200000b0 	.word	0x200000b0

08007a34 <memset>:
 8007a34:	4402      	add	r2, r0
 8007a36:	4603      	mov	r3, r0
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memset+0xa>
 8007a3c:	4770      	bx	lr
 8007a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a42:	e7f9      	b.n	8007a38 <memset+0x4>

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	@ (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	200000b0 	.word	0x200000b0

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4d0d      	ldr	r5, [pc, #52]	@ (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	@ (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4d0b      	ldr	r5, [pc, #44]	@ (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	@ (8007a94 <__libc_init_array+0x44>)
 8007a64:	f000 fca0 	bl	80083a8 <_init>
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08008488 	.word	0x08008488
 8007a8c:	08008488 	.word	0x08008488
 8007a90:	08008488 	.word	0x08008488
 8007a94:	0800848c 	.word	0x0800848c

08007a98 <__retarget_lock_acquire_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_release_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <memcpy>:
 8007a9c:	440a      	add	r2, r1
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007aa4:	d100      	bne.n	8007aa8 <memcpy+0xc>
 8007aa6:	4770      	bx	lr
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	d1f9      	bne.n	8007aaa <memcpy+0xe>
 8007ab6:	bd10      	pop	{r4, pc}

08007ab8 <_free_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4605      	mov	r5, r0
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d041      	beq.n	8007b44 <_free_r+0x8c>
 8007ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac4:	1f0c      	subs	r4, r1, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bfb8      	it	lt
 8007aca:	18e4      	addlt	r4, r4, r3
 8007acc:	f000 f8e0 	bl	8007c90 <__malloc_lock>
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <_free_r+0x90>)
 8007ad2:	6813      	ldr	r3, [r2, #0]
 8007ad4:	b933      	cbnz	r3, 8007ae4 <_free_r+0x2c>
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	6014      	str	r4, [r2, #0]
 8007ada:	4628      	mov	r0, r5
 8007adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae0:	f000 b8dc 	b.w	8007c9c <__malloc_unlock>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d908      	bls.n	8007afa <_free_r+0x42>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	1821      	adds	r1, r4, r0
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf01      	itttt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	1809      	addeq	r1, r1, r0
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	e7ed      	b.n	8007ad6 <_free_r+0x1e>
 8007afa:	461a      	mov	r2, r3
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b10b      	cbz	r3, 8007b04 <_free_r+0x4c>
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	d9fa      	bls.n	8007afa <_free_r+0x42>
 8007b04:	6811      	ldr	r1, [r2, #0]
 8007b06:	1850      	adds	r0, r2, r1
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d10b      	bne.n	8007b24 <_free_r+0x6c>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	4401      	add	r1, r0
 8007b10:	1850      	adds	r0, r2, r1
 8007b12:	4283      	cmp	r3, r0
 8007b14:	6011      	str	r1, [r2, #0]
 8007b16:	d1e0      	bne.n	8007ada <_free_r+0x22>
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	6053      	str	r3, [r2, #4]
 8007b1e:	4408      	add	r0, r1
 8007b20:	6010      	str	r0, [r2, #0]
 8007b22:	e7da      	b.n	8007ada <_free_r+0x22>
 8007b24:	d902      	bls.n	8007b2c <_free_r+0x74>
 8007b26:	230c      	movs	r3, #12
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	e7d6      	b.n	8007ada <_free_r+0x22>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	1821      	adds	r1, r4, r0
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf04      	itt	eq
 8007b34:	6819      	ldreq	r1, [r3, #0]
 8007b36:	685b      	ldreq	r3, [r3, #4]
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	bf04      	itt	eq
 8007b3c:	1809      	addeq	r1, r1, r0
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	6054      	str	r4, [r2, #4]
 8007b42:	e7ca      	b.n	8007ada <_free_r+0x22>
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	20000800 	.word	0x20000800

08007b4c <sbrk_aligned>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b8c <sbrk_aligned+0x40>)
 8007b50:	460c      	mov	r4, r1
 8007b52:	6831      	ldr	r1, [r6, #0]
 8007b54:	4605      	mov	r5, r0
 8007b56:	b911      	cbnz	r1, 8007b5e <sbrk_aligned+0x12>
 8007b58:	f000 fba6 	bl	80082a8 <_sbrk_r>
 8007b5c:	6030      	str	r0, [r6, #0]
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 fba1 	bl	80082a8 <_sbrk_r>
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	d103      	bne.n	8007b72 <sbrk_aligned+0x26>
 8007b6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b6e:	4620      	mov	r0, r4
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
 8007b72:	1cc4      	adds	r4, r0, #3
 8007b74:	f024 0403 	bic.w	r4, r4, #3
 8007b78:	42a0      	cmp	r0, r4
 8007b7a:	d0f8      	beq.n	8007b6e <sbrk_aligned+0x22>
 8007b7c:	1a21      	subs	r1, r4, r0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f000 fb92 	bl	80082a8 <_sbrk_r>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d1f2      	bne.n	8007b6e <sbrk_aligned+0x22>
 8007b88:	e7ef      	b.n	8007b6a <sbrk_aligned+0x1e>
 8007b8a:	bf00      	nop
 8007b8c:	200007fc 	.word	0x200007fc

08007b90 <_malloc_r>:
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	1ccd      	adds	r5, r1, #3
 8007b96:	f025 0503 	bic.w	r5, r5, #3
 8007b9a:	3508      	adds	r5, #8
 8007b9c:	2d0c      	cmp	r5, #12
 8007b9e:	bf38      	it	cc
 8007ba0:	250c      	movcc	r5, #12
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	4606      	mov	r6, r0
 8007ba6:	db01      	blt.n	8007bac <_malloc_r+0x1c>
 8007ba8:	42a9      	cmp	r1, r5
 8007baa:	d904      	bls.n	8007bb6 <_malloc_r+0x26>
 8007bac:	230c      	movs	r3, #12
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c8c <_malloc_r+0xfc>
 8007bba:	f000 f869 	bl	8007c90 <__malloc_lock>
 8007bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	bb44      	cbnz	r4, 8007c18 <_malloc_r+0x88>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f7ff ffbf 	bl	8007b4c <sbrk_aligned>
 8007bce:	1c43      	adds	r3, r0, #1
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	d158      	bne.n	8007c86 <_malloc_r+0xf6>
 8007bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8007bd8:	4627      	mov	r7, r4
 8007bda:	2f00      	cmp	r7, #0
 8007bdc:	d143      	bne.n	8007c66 <_malloc_r+0xd6>
 8007bde:	2c00      	cmp	r4, #0
 8007be0:	d04b      	beq.n	8007c7a <_malloc_r+0xea>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	4639      	mov	r1, r7
 8007be6:	4630      	mov	r0, r6
 8007be8:	eb04 0903 	add.w	r9, r4, r3
 8007bec:	f000 fb5c 	bl	80082a8 <_sbrk_r>
 8007bf0:	4581      	cmp	r9, r0
 8007bf2:	d142      	bne.n	8007c7a <_malloc_r+0xea>
 8007bf4:	6821      	ldr	r1, [r4, #0]
 8007bf6:	1a6d      	subs	r5, r5, r1
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	f7ff ffa6 	bl	8007b4c <sbrk_aligned>
 8007c00:	3001      	adds	r0, #1
 8007c02:	d03a      	beq.n	8007c7a <_malloc_r+0xea>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	442b      	add	r3, r5
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	bb62      	cbnz	r2, 8007c6c <_malloc_r+0xdc>
 8007c12:	f8c8 7000 	str.w	r7, [r8]
 8007c16:	e00f      	b.n	8007c38 <_malloc_r+0xa8>
 8007c18:	6822      	ldr	r2, [r4, #0]
 8007c1a:	1b52      	subs	r2, r2, r5
 8007c1c:	d420      	bmi.n	8007c60 <_malloc_r+0xd0>
 8007c1e:	2a0b      	cmp	r2, #11
 8007c20:	d917      	bls.n	8007c52 <_malloc_r+0xc2>
 8007c22:	1961      	adds	r1, r4, r5
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	6025      	str	r5, [r4, #0]
 8007c28:	bf18      	it	ne
 8007c2a:	6059      	strne	r1, [r3, #4]
 8007c2c:	6863      	ldr	r3, [r4, #4]
 8007c2e:	bf08      	it	eq
 8007c30:	f8c8 1000 	streq.w	r1, [r8]
 8007c34:	5162      	str	r2, [r4, r5]
 8007c36:	604b      	str	r3, [r1, #4]
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f000 f82f 	bl	8007c9c <__malloc_unlock>
 8007c3e:	f104 000b 	add.w	r0, r4, #11
 8007c42:	1d23      	adds	r3, r4, #4
 8007c44:	f020 0007 	bic.w	r0, r0, #7
 8007c48:	1ac2      	subs	r2, r0, r3
 8007c4a:	bf1c      	itt	ne
 8007c4c:	1a1b      	subne	r3, r3, r0
 8007c4e:	50a3      	strne	r3, [r4, r2]
 8007c50:	e7af      	b.n	8007bb2 <_malloc_r+0x22>
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	bf0c      	ite	eq
 8007c58:	f8c8 2000 	streq.w	r2, [r8]
 8007c5c:	605a      	strne	r2, [r3, #4]
 8007c5e:	e7eb      	b.n	8007c38 <_malloc_r+0xa8>
 8007c60:	4623      	mov	r3, r4
 8007c62:	6864      	ldr	r4, [r4, #4]
 8007c64:	e7ae      	b.n	8007bc4 <_malloc_r+0x34>
 8007c66:	463c      	mov	r4, r7
 8007c68:	687f      	ldr	r7, [r7, #4]
 8007c6a:	e7b6      	b.n	8007bda <_malloc_r+0x4a>
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	42a3      	cmp	r3, r4
 8007c72:	d1fb      	bne.n	8007c6c <_malloc_r+0xdc>
 8007c74:	2300      	movs	r3, #0
 8007c76:	6053      	str	r3, [r2, #4]
 8007c78:	e7de      	b.n	8007c38 <_malloc_r+0xa8>
 8007c7a:	230c      	movs	r3, #12
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f80c 	bl	8007c9c <__malloc_unlock>
 8007c84:	e794      	b.n	8007bb0 <_malloc_r+0x20>
 8007c86:	6005      	str	r5, [r0, #0]
 8007c88:	e7d6      	b.n	8007c38 <_malloc_r+0xa8>
 8007c8a:	bf00      	nop
 8007c8c:	20000800 	.word	0x20000800

08007c90 <__malloc_lock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	@ (8007c98 <__malloc_lock+0x8>)
 8007c92:	f7ff bf01 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 8007c96:	bf00      	nop
 8007c98:	200007f8 	.word	0x200007f8

08007c9c <__malloc_unlock>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	@ (8007ca4 <__malloc_unlock+0x8>)
 8007c9e:	f7ff befc 	b.w	8007a9a <__retarget_lock_release_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	200007f8 	.word	0x200007f8

08007ca8 <__ssputs_r>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	688e      	ldr	r6, [r1, #8]
 8007cae:	461f      	mov	r7, r3
 8007cb0:	42be      	cmp	r6, r7
 8007cb2:	680b      	ldr	r3, [r1, #0]
 8007cb4:	4682      	mov	sl, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4690      	mov	r8, r2
 8007cba:	d82d      	bhi.n	8007d18 <__ssputs_r+0x70>
 8007cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cc4:	d026      	beq.n	8007d14 <__ssputs_r+0x6c>
 8007cc6:	6965      	ldr	r5, [r4, #20]
 8007cc8:	6909      	ldr	r1, [r1, #16]
 8007cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cce:	eba3 0901 	sub.w	r9, r3, r1
 8007cd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cd6:	1c7b      	adds	r3, r7, #1
 8007cd8:	444b      	add	r3, r9
 8007cda:	106d      	asrs	r5, r5, #1
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	bf38      	it	cc
 8007ce0:	461d      	movcc	r5, r3
 8007ce2:	0553      	lsls	r3, r2, #21
 8007ce4:	d527      	bpl.n	8007d36 <__ssputs_r+0x8e>
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7ff ff52 	bl	8007b90 <_malloc_r>
 8007cec:	4606      	mov	r6, r0
 8007cee:	b360      	cbz	r0, 8007d4a <__ssputs_r+0xa2>
 8007cf0:	6921      	ldr	r1, [r4, #16]
 8007cf2:	464a      	mov	r2, r9
 8007cf4:	f7ff fed2 	bl	8007a9c <memcpy>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d02:	81a3      	strh	r3, [r4, #12]
 8007d04:	6126      	str	r6, [r4, #16]
 8007d06:	6165      	str	r5, [r4, #20]
 8007d08:	444e      	add	r6, r9
 8007d0a:	eba5 0509 	sub.w	r5, r5, r9
 8007d0e:	6026      	str	r6, [r4, #0]
 8007d10:	60a5      	str	r5, [r4, #8]
 8007d12:	463e      	mov	r6, r7
 8007d14:	42be      	cmp	r6, r7
 8007d16:	d900      	bls.n	8007d1a <__ssputs_r+0x72>
 8007d18:	463e      	mov	r6, r7
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	4641      	mov	r1, r8
 8007d20:	f000 faa8 	bl	8008274 <memmove>
 8007d24:	68a3      	ldr	r3, [r4, #8]
 8007d26:	1b9b      	subs	r3, r3, r6
 8007d28:	60a3      	str	r3, [r4, #8]
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	4433      	add	r3, r6
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	2000      	movs	r0, #0
 8007d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d36:	462a      	mov	r2, r5
 8007d38:	f000 fac6 	bl	80082c8 <_realloc_r>
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d1e0      	bne.n	8007d04 <__ssputs_r+0x5c>
 8007d42:	6921      	ldr	r1, [r4, #16]
 8007d44:	4650      	mov	r0, sl
 8007d46:	f7ff feb7 	bl	8007ab8 <_free_r>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	f8ca 3000 	str.w	r3, [sl]
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	e7e9      	b.n	8007d32 <__ssputs_r+0x8a>
	...

08007d60 <_svfiprintf_r>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	4698      	mov	r8, r3
 8007d66:	898b      	ldrh	r3, [r1, #12]
 8007d68:	061b      	lsls	r3, r3, #24
 8007d6a:	b09d      	sub	sp, #116	@ 0x74
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	460d      	mov	r5, r1
 8007d70:	4614      	mov	r4, r2
 8007d72:	d510      	bpl.n	8007d96 <_svfiprintf_r+0x36>
 8007d74:	690b      	ldr	r3, [r1, #16]
 8007d76:	b973      	cbnz	r3, 8007d96 <_svfiprintf_r+0x36>
 8007d78:	2140      	movs	r1, #64	@ 0x40
 8007d7a:	f7ff ff09 	bl	8007b90 <_malloc_r>
 8007d7e:	6028      	str	r0, [r5, #0]
 8007d80:	6128      	str	r0, [r5, #16]
 8007d82:	b930      	cbnz	r0, 8007d92 <_svfiprintf_r+0x32>
 8007d84:	230c      	movs	r3, #12
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8c:	b01d      	add	sp, #116	@ 0x74
 8007d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d92:	2340      	movs	r3, #64	@ 0x40
 8007d94:	616b      	str	r3, [r5, #20]
 8007d96:	2300      	movs	r3, #0
 8007d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d9a:	2320      	movs	r3, #32
 8007d9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da4:	2330      	movs	r3, #48	@ 0x30
 8007da6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f44 <_svfiprintf_r+0x1e4>
 8007daa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dae:	f04f 0901 	mov.w	r9, #1
 8007db2:	4623      	mov	r3, r4
 8007db4:	469a      	mov	sl, r3
 8007db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dba:	b10a      	cbz	r2, 8007dc0 <_svfiprintf_r+0x60>
 8007dbc:	2a25      	cmp	r2, #37	@ 0x25
 8007dbe:	d1f9      	bne.n	8007db4 <_svfiprintf_r+0x54>
 8007dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc4:	d00b      	beq.n	8007dde <_svfiprintf_r+0x7e>
 8007dc6:	465b      	mov	r3, fp
 8007dc8:	4622      	mov	r2, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff ff6b 	bl	8007ca8 <__ssputs_r>
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f000 80a7 	beq.w	8007f26 <_svfiprintf_r+0x1c6>
 8007dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dda:	445a      	add	r2, fp
 8007ddc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dde:	f89a 3000 	ldrb.w	r3, [sl]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 809f 	beq.w	8007f26 <_svfiprintf_r+0x1c6>
 8007de8:	2300      	movs	r3, #0
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295
 8007dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df2:	f10a 0a01 	add.w	sl, sl, #1
 8007df6:	9304      	str	r3, [sp, #16]
 8007df8:	9307      	str	r3, [sp, #28]
 8007dfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e00:	4654      	mov	r4, sl
 8007e02:	2205      	movs	r2, #5
 8007e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e08:	484e      	ldr	r0, [pc, #312]	@ (8007f44 <_svfiprintf_r+0x1e4>)
 8007e0a:	f7f8 f9f9 	bl	8000200 <memchr>
 8007e0e:	9a04      	ldr	r2, [sp, #16]
 8007e10:	b9d8      	cbnz	r0, 8007e4a <_svfiprintf_r+0xea>
 8007e12:	06d0      	lsls	r0, r2, #27
 8007e14:	bf44      	itt	mi
 8007e16:	2320      	movmi	r3, #32
 8007e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e1c:	0711      	lsls	r1, r2, #28
 8007e1e:	bf44      	itt	mi
 8007e20:	232b      	movmi	r3, #43	@ 0x2b
 8007e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e26:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e2c:	d015      	beq.n	8007e5a <_svfiprintf_r+0xfa>
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	4654      	mov	r4, sl
 8007e32:	2000      	movs	r0, #0
 8007e34:	f04f 0c0a 	mov.w	ip, #10
 8007e38:	4621      	mov	r1, r4
 8007e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e3e:	3b30      	subs	r3, #48	@ 0x30
 8007e40:	2b09      	cmp	r3, #9
 8007e42:	d94b      	bls.n	8007edc <_svfiprintf_r+0x17c>
 8007e44:	b1b0      	cbz	r0, 8007e74 <_svfiprintf_r+0x114>
 8007e46:	9207      	str	r2, [sp, #28]
 8007e48:	e014      	b.n	8007e74 <_svfiprintf_r+0x114>
 8007e4a:	eba0 0308 	sub.w	r3, r0, r8
 8007e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	9304      	str	r3, [sp, #16]
 8007e56:	46a2      	mov	sl, r4
 8007e58:	e7d2      	b.n	8007e00 <_svfiprintf_r+0xa0>
 8007e5a:	9b03      	ldr	r3, [sp, #12]
 8007e5c:	1d19      	adds	r1, r3, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	9103      	str	r1, [sp, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bfbb      	ittet	lt
 8007e66:	425b      	neglt	r3, r3
 8007e68:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6c:	9307      	strge	r3, [sp, #28]
 8007e6e:	9307      	strlt	r3, [sp, #28]
 8007e70:	bfb8      	it	lt
 8007e72:	9204      	strlt	r2, [sp, #16]
 8007e74:	7823      	ldrb	r3, [r4, #0]
 8007e76:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e78:	d10a      	bne.n	8007e90 <_svfiprintf_r+0x130>
 8007e7a:	7863      	ldrb	r3, [r4, #1]
 8007e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e7e:	d132      	bne.n	8007ee6 <_svfiprintf_r+0x186>
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	1d1a      	adds	r2, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	9203      	str	r2, [sp, #12]
 8007e88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e8c:	3402      	adds	r4, #2
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f54 <_svfiprintf_r+0x1f4>
 8007e94:	7821      	ldrb	r1, [r4, #0]
 8007e96:	2203      	movs	r2, #3
 8007e98:	4650      	mov	r0, sl
 8007e9a:	f7f8 f9b1 	bl	8000200 <memchr>
 8007e9e:	b138      	cbz	r0, 8007eb0 <_svfiprintf_r+0x150>
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	eba0 000a 	sub.w	r0, r0, sl
 8007ea6:	2240      	movs	r2, #64	@ 0x40
 8007ea8:	4082      	lsls	r2, r0
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	3401      	adds	r4, #1
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb4:	4824      	ldr	r0, [pc, #144]	@ (8007f48 <_svfiprintf_r+0x1e8>)
 8007eb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eba:	2206      	movs	r2, #6
 8007ebc:	f7f8 f9a0 	bl	8000200 <memchr>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d036      	beq.n	8007f32 <_svfiprintf_r+0x1d2>
 8007ec4:	4b21      	ldr	r3, [pc, #132]	@ (8007f4c <_svfiprintf_r+0x1ec>)
 8007ec6:	bb1b      	cbnz	r3, 8007f10 <_svfiprintf_r+0x1b0>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	3307      	adds	r3, #7
 8007ecc:	f023 0307 	bic.w	r3, r3, #7
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	9303      	str	r3, [sp, #12]
 8007ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed6:	4433      	add	r3, r6
 8007ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eda:	e76a      	b.n	8007db2 <_svfiprintf_r+0x52>
 8007edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	e7a8      	b.n	8007e38 <_svfiprintf_r+0xd8>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	3401      	adds	r4, #1
 8007eea:	9305      	str	r3, [sp, #20]
 8007eec:	4619      	mov	r1, r3
 8007eee:	f04f 0c0a 	mov.w	ip, #10
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ef8:	3a30      	subs	r2, #48	@ 0x30
 8007efa:	2a09      	cmp	r2, #9
 8007efc:	d903      	bls.n	8007f06 <_svfiprintf_r+0x1a6>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0c6      	beq.n	8007e90 <_svfiprintf_r+0x130>
 8007f02:	9105      	str	r1, [sp, #20]
 8007f04:	e7c4      	b.n	8007e90 <_svfiprintf_r+0x130>
 8007f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e7f0      	b.n	8007ef2 <_svfiprintf_r+0x192>
 8007f10:	ab03      	add	r3, sp, #12
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	462a      	mov	r2, r5
 8007f16:	4b0e      	ldr	r3, [pc, #56]	@ (8007f50 <_svfiprintf_r+0x1f0>)
 8007f18:	a904      	add	r1, sp, #16
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f3af 8000 	nop.w
 8007f20:	1c42      	adds	r2, r0, #1
 8007f22:	4606      	mov	r6, r0
 8007f24:	d1d6      	bne.n	8007ed4 <_svfiprintf_r+0x174>
 8007f26:	89ab      	ldrh	r3, [r5, #12]
 8007f28:	065b      	lsls	r3, r3, #25
 8007f2a:	f53f af2d 	bmi.w	8007d88 <_svfiprintf_r+0x28>
 8007f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f30:	e72c      	b.n	8007d8c <_svfiprintf_r+0x2c>
 8007f32:	ab03      	add	r3, sp, #12
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	462a      	mov	r2, r5
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <_svfiprintf_r+0x1f0>)
 8007f3a:	a904      	add	r1, sp, #16
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f000 f879 	bl	8008034 <_printf_i>
 8007f42:	e7ed      	b.n	8007f20 <_svfiprintf_r+0x1c0>
 8007f44:	0800844c 	.word	0x0800844c
 8007f48:	08008456 	.word	0x08008456
 8007f4c:	00000000 	.word	0x00000000
 8007f50:	08007ca9 	.word	0x08007ca9
 8007f54:	08008452 	.word	0x08008452

08007f58 <_printf_common>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	4698      	mov	r8, r3
 8007f60:	688a      	ldr	r2, [r1, #8]
 8007f62:	690b      	ldr	r3, [r1, #16]
 8007f64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfb8      	it	lt
 8007f6c:	4613      	movlt	r3, r2
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f74:	4607      	mov	r7, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	b10a      	cbz	r2, 8007f7e <_printf_common+0x26>
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	0699      	lsls	r1, r3, #26
 8007f82:	bf42      	ittt	mi
 8007f84:	6833      	ldrmi	r3, [r6, #0]
 8007f86:	3302      	addmi	r3, #2
 8007f88:	6033      	strmi	r3, [r6, #0]
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	f015 0506 	ands.w	r5, r5, #6
 8007f90:	d106      	bne.n	8007fa0 <_printf_common+0x48>
 8007f92:	f104 0a19 	add.w	sl, r4, #25
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	6832      	ldr	r2, [r6, #0]
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dc26      	bgt.n	8007fee <_printf_common+0x96>
 8007fa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fa4:	6822      	ldr	r2, [r4, #0]
 8007fa6:	3b00      	subs	r3, #0
 8007fa8:	bf18      	it	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	0692      	lsls	r2, r2, #26
 8007fae:	d42b      	bmi.n	8008008 <_printf_common+0xb0>
 8007fb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fb4:	4641      	mov	r1, r8
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	47c8      	blx	r9
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d01e      	beq.n	8007ffc <_printf_common+0xa4>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	6922      	ldr	r2, [r4, #16]
 8007fc2:	f003 0306 	and.w	r3, r3, #6
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	bf02      	ittt	eq
 8007fca:	68e5      	ldreq	r5, [r4, #12]
 8007fcc:	6833      	ldreq	r3, [r6, #0]
 8007fce:	1aed      	subeq	r5, r5, r3
 8007fd0:	68a3      	ldr	r3, [r4, #8]
 8007fd2:	bf0c      	ite	eq
 8007fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd8:	2500      	movne	r5, #0
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	bfc4      	itt	gt
 8007fde:	1a9b      	subgt	r3, r3, r2
 8007fe0:	18ed      	addgt	r5, r5, r3
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	341a      	adds	r4, #26
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	d11a      	bne.n	8008020 <_printf_common+0xc8>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e008      	b.n	8008000 <_printf_common+0xa8>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	47c8      	blx	r9
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d103      	bne.n	8008004 <_printf_common+0xac>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	3501      	adds	r5, #1
 8008006:	e7c6      	b.n	8007f96 <_printf_common+0x3e>
 8008008:	18e1      	adds	r1, r4, r3
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	2030      	movs	r0, #48	@ 0x30
 800800e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008012:	4422      	add	r2, r4
 8008014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800801c:	3302      	adds	r3, #2
 800801e:	e7c7      	b.n	8007fb0 <_printf_common+0x58>
 8008020:	2301      	movs	r3, #1
 8008022:	4622      	mov	r2, r4
 8008024:	4641      	mov	r1, r8
 8008026:	4638      	mov	r0, r7
 8008028:	47c8      	blx	r9
 800802a:	3001      	adds	r0, #1
 800802c:	d0e6      	beq.n	8007ffc <_printf_common+0xa4>
 800802e:	3601      	adds	r6, #1
 8008030:	e7d9      	b.n	8007fe6 <_printf_common+0x8e>
	...

08008034 <_printf_i>:
 8008034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	7e0f      	ldrb	r7, [r1, #24]
 800803a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800803c:	2f78      	cmp	r7, #120	@ 0x78
 800803e:	4691      	mov	r9, r2
 8008040:	4680      	mov	r8, r0
 8008042:	460c      	mov	r4, r1
 8008044:	469a      	mov	sl, r3
 8008046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800804a:	d807      	bhi.n	800805c <_printf_i+0x28>
 800804c:	2f62      	cmp	r7, #98	@ 0x62
 800804e:	d80a      	bhi.n	8008066 <_printf_i+0x32>
 8008050:	2f00      	cmp	r7, #0
 8008052:	f000 80d2 	beq.w	80081fa <_printf_i+0x1c6>
 8008056:	2f58      	cmp	r7, #88	@ 0x58
 8008058:	f000 80b9 	beq.w	80081ce <_printf_i+0x19a>
 800805c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008064:	e03a      	b.n	80080dc <_printf_i+0xa8>
 8008066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800806a:	2b15      	cmp	r3, #21
 800806c:	d8f6      	bhi.n	800805c <_printf_i+0x28>
 800806e:	a101      	add	r1, pc, #4	@ (adr r1, 8008074 <_printf_i+0x40>)
 8008070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080e1 	.word	0x080080e1
 800807c:	0800805d 	.word	0x0800805d
 8008080:	0800805d 	.word	0x0800805d
 8008084:	0800805d 	.word	0x0800805d
 8008088:	0800805d 	.word	0x0800805d
 800808c:	080080e1 	.word	0x080080e1
 8008090:	0800805d 	.word	0x0800805d
 8008094:	0800805d 	.word	0x0800805d
 8008098:	0800805d 	.word	0x0800805d
 800809c:	0800805d 	.word	0x0800805d
 80080a0:	080081e1 	.word	0x080081e1
 80080a4:	0800810b 	.word	0x0800810b
 80080a8:	0800819b 	.word	0x0800819b
 80080ac:	0800805d 	.word	0x0800805d
 80080b0:	0800805d 	.word	0x0800805d
 80080b4:	08008203 	.word	0x08008203
 80080b8:	0800805d 	.word	0x0800805d
 80080bc:	0800810b 	.word	0x0800810b
 80080c0:	0800805d 	.word	0x0800805d
 80080c4:	0800805d 	.word	0x0800805d
 80080c8:	080081a3 	.word	0x080081a3
 80080cc:	6833      	ldr	r3, [r6, #0]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6032      	str	r2, [r6, #0]
 80080d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080dc:	2301      	movs	r3, #1
 80080de:	e09d      	b.n	800821c <_printf_i+0x1e8>
 80080e0:	6833      	ldr	r3, [r6, #0]
 80080e2:	6820      	ldr	r0, [r4, #0]
 80080e4:	1d19      	adds	r1, r3, #4
 80080e6:	6031      	str	r1, [r6, #0]
 80080e8:	0606      	lsls	r6, r0, #24
 80080ea:	d501      	bpl.n	80080f0 <_printf_i+0xbc>
 80080ec:	681d      	ldr	r5, [r3, #0]
 80080ee:	e003      	b.n	80080f8 <_printf_i+0xc4>
 80080f0:	0645      	lsls	r5, r0, #25
 80080f2:	d5fb      	bpl.n	80080ec <_printf_i+0xb8>
 80080f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	da03      	bge.n	8008104 <_printf_i+0xd0>
 80080fc:	232d      	movs	r3, #45	@ 0x2d
 80080fe:	426d      	negs	r5, r5
 8008100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008104:	4859      	ldr	r0, [pc, #356]	@ (800826c <_printf_i+0x238>)
 8008106:	230a      	movs	r3, #10
 8008108:	e011      	b.n	800812e <_printf_i+0xfa>
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	6833      	ldr	r3, [r6, #0]
 800810e:	0608      	lsls	r0, r1, #24
 8008110:	f853 5b04 	ldr.w	r5, [r3], #4
 8008114:	d402      	bmi.n	800811c <_printf_i+0xe8>
 8008116:	0649      	lsls	r1, r1, #25
 8008118:	bf48      	it	mi
 800811a:	b2ad      	uxthmi	r5, r5
 800811c:	2f6f      	cmp	r7, #111	@ 0x6f
 800811e:	4853      	ldr	r0, [pc, #332]	@ (800826c <_printf_i+0x238>)
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	bf14      	ite	ne
 8008124:	230a      	movne	r3, #10
 8008126:	2308      	moveq	r3, #8
 8008128:	2100      	movs	r1, #0
 800812a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800812e:	6866      	ldr	r6, [r4, #4]
 8008130:	60a6      	str	r6, [r4, #8]
 8008132:	2e00      	cmp	r6, #0
 8008134:	bfa2      	ittt	ge
 8008136:	6821      	ldrge	r1, [r4, #0]
 8008138:	f021 0104 	bicge.w	r1, r1, #4
 800813c:	6021      	strge	r1, [r4, #0]
 800813e:	b90d      	cbnz	r5, 8008144 <_printf_i+0x110>
 8008140:	2e00      	cmp	r6, #0
 8008142:	d04b      	beq.n	80081dc <_printf_i+0x1a8>
 8008144:	4616      	mov	r6, r2
 8008146:	fbb5 f1f3 	udiv	r1, r5, r3
 800814a:	fb03 5711 	mls	r7, r3, r1, r5
 800814e:	5dc7      	ldrb	r7, [r0, r7]
 8008150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008154:	462f      	mov	r7, r5
 8008156:	42bb      	cmp	r3, r7
 8008158:	460d      	mov	r5, r1
 800815a:	d9f4      	bls.n	8008146 <_printf_i+0x112>
 800815c:	2b08      	cmp	r3, #8
 800815e:	d10b      	bne.n	8008178 <_printf_i+0x144>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07df      	lsls	r7, r3, #31
 8008164:	d508      	bpl.n	8008178 <_printf_i+0x144>
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	6861      	ldr	r1, [r4, #4]
 800816a:	4299      	cmp	r1, r3
 800816c:	bfde      	ittt	le
 800816e:	2330      	movle	r3, #48	@ 0x30
 8008170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008178:	1b92      	subs	r2, r2, r6
 800817a:	6122      	str	r2, [r4, #16]
 800817c:	f8cd a000 	str.w	sl, [sp]
 8008180:	464b      	mov	r3, r9
 8008182:	aa03      	add	r2, sp, #12
 8008184:	4621      	mov	r1, r4
 8008186:	4640      	mov	r0, r8
 8008188:	f7ff fee6 	bl	8007f58 <_printf_common>
 800818c:	3001      	adds	r0, #1
 800818e:	d14a      	bne.n	8008226 <_printf_i+0x1f2>
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	b004      	add	sp, #16
 8008196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	f043 0320 	orr.w	r3, r3, #32
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	4833      	ldr	r0, [pc, #204]	@ (8008270 <_printf_i+0x23c>)
 80081a4:	2778      	movs	r7, #120	@ 0x78
 80081a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	6831      	ldr	r1, [r6, #0]
 80081ae:	061f      	lsls	r7, r3, #24
 80081b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80081b4:	d402      	bmi.n	80081bc <_printf_i+0x188>
 80081b6:	065f      	lsls	r7, r3, #25
 80081b8:	bf48      	it	mi
 80081ba:	b2ad      	uxthmi	r5, r5
 80081bc:	6031      	str	r1, [r6, #0]
 80081be:	07d9      	lsls	r1, r3, #31
 80081c0:	bf44      	itt	mi
 80081c2:	f043 0320 	orrmi.w	r3, r3, #32
 80081c6:	6023      	strmi	r3, [r4, #0]
 80081c8:	b11d      	cbz	r5, 80081d2 <_printf_i+0x19e>
 80081ca:	2310      	movs	r3, #16
 80081cc:	e7ac      	b.n	8008128 <_printf_i+0xf4>
 80081ce:	4827      	ldr	r0, [pc, #156]	@ (800826c <_printf_i+0x238>)
 80081d0:	e7e9      	b.n	80081a6 <_printf_i+0x172>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f023 0320 	bic.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	e7f6      	b.n	80081ca <_printf_i+0x196>
 80081dc:	4616      	mov	r6, r2
 80081de:	e7bd      	b.n	800815c <_printf_i+0x128>
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	6825      	ldr	r5, [r4, #0]
 80081e4:	6961      	ldr	r1, [r4, #20]
 80081e6:	1d18      	adds	r0, r3, #4
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	062e      	lsls	r6, r5, #24
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	d501      	bpl.n	80081f4 <_printf_i+0x1c0>
 80081f0:	6019      	str	r1, [r3, #0]
 80081f2:	e002      	b.n	80081fa <_printf_i+0x1c6>
 80081f4:	0668      	lsls	r0, r5, #25
 80081f6:	d5fb      	bpl.n	80081f0 <_printf_i+0x1bc>
 80081f8:	8019      	strh	r1, [r3, #0]
 80081fa:	2300      	movs	r3, #0
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	4616      	mov	r6, r2
 8008200:	e7bc      	b.n	800817c <_printf_i+0x148>
 8008202:	6833      	ldr	r3, [r6, #0]
 8008204:	1d1a      	adds	r2, r3, #4
 8008206:	6032      	str	r2, [r6, #0]
 8008208:	681e      	ldr	r6, [r3, #0]
 800820a:	6862      	ldr	r2, [r4, #4]
 800820c:	2100      	movs	r1, #0
 800820e:	4630      	mov	r0, r6
 8008210:	f7f7 fff6 	bl	8000200 <memchr>
 8008214:	b108      	cbz	r0, 800821a <_printf_i+0x1e6>
 8008216:	1b80      	subs	r0, r0, r6
 8008218:	6060      	str	r0, [r4, #4]
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	6123      	str	r3, [r4, #16]
 800821e:	2300      	movs	r3, #0
 8008220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008224:	e7aa      	b.n	800817c <_printf_i+0x148>
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	4632      	mov	r2, r6
 800822a:	4649      	mov	r1, r9
 800822c:	4640      	mov	r0, r8
 800822e:	47d0      	blx	sl
 8008230:	3001      	adds	r0, #1
 8008232:	d0ad      	beq.n	8008190 <_printf_i+0x15c>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	079b      	lsls	r3, r3, #30
 8008238:	d413      	bmi.n	8008262 <_printf_i+0x22e>
 800823a:	68e0      	ldr	r0, [r4, #12]
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	4298      	cmp	r0, r3
 8008240:	bfb8      	it	lt
 8008242:	4618      	movlt	r0, r3
 8008244:	e7a6      	b.n	8008194 <_printf_i+0x160>
 8008246:	2301      	movs	r3, #1
 8008248:	4632      	mov	r2, r6
 800824a:	4649      	mov	r1, r9
 800824c:	4640      	mov	r0, r8
 800824e:	47d0      	blx	sl
 8008250:	3001      	adds	r0, #1
 8008252:	d09d      	beq.n	8008190 <_printf_i+0x15c>
 8008254:	3501      	adds	r5, #1
 8008256:	68e3      	ldr	r3, [r4, #12]
 8008258:	9903      	ldr	r1, [sp, #12]
 800825a:	1a5b      	subs	r3, r3, r1
 800825c:	42ab      	cmp	r3, r5
 800825e:	dcf2      	bgt.n	8008246 <_printf_i+0x212>
 8008260:	e7eb      	b.n	800823a <_printf_i+0x206>
 8008262:	2500      	movs	r5, #0
 8008264:	f104 0619 	add.w	r6, r4, #25
 8008268:	e7f5      	b.n	8008256 <_printf_i+0x222>
 800826a:	bf00      	nop
 800826c:	0800845d 	.word	0x0800845d
 8008270:	0800846e 	.word	0x0800846e

08008274 <memmove>:
 8008274:	4288      	cmp	r0, r1
 8008276:	b510      	push	{r4, lr}
 8008278:	eb01 0402 	add.w	r4, r1, r2
 800827c:	d902      	bls.n	8008284 <memmove+0x10>
 800827e:	4284      	cmp	r4, r0
 8008280:	4623      	mov	r3, r4
 8008282:	d807      	bhi.n	8008294 <memmove+0x20>
 8008284:	1e43      	subs	r3, r0, #1
 8008286:	42a1      	cmp	r1, r4
 8008288:	d008      	beq.n	800829c <memmove+0x28>
 800828a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800828e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008292:	e7f8      	b.n	8008286 <memmove+0x12>
 8008294:	4402      	add	r2, r0
 8008296:	4601      	mov	r1, r0
 8008298:	428a      	cmp	r2, r1
 800829a:	d100      	bne.n	800829e <memmove+0x2a>
 800829c:	bd10      	pop	{r4, pc}
 800829e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082a6:	e7f7      	b.n	8008298 <memmove+0x24>

080082a8 <_sbrk_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	@ (80082c4 <_sbrk_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f9 fcf2 	bl	8001c9c <_sbrk>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_sbrk_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_sbrk_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	200007f4 	.word	0x200007f4

080082c8 <_realloc_r>:
 80082c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082cc:	4680      	mov	r8, r0
 80082ce:	4615      	mov	r5, r2
 80082d0:	460c      	mov	r4, r1
 80082d2:	b921      	cbnz	r1, 80082de <_realloc_r+0x16>
 80082d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	4611      	mov	r1, r2
 80082da:	f7ff bc59 	b.w	8007b90 <_malloc_r>
 80082de:	b92a      	cbnz	r2, 80082ec <_realloc_r+0x24>
 80082e0:	f7ff fbea 	bl	8007ab8 <_free_r>
 80082e4:	2400      	movs	r4, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ec:	f000 f81a 	bl	8008324 <_malloc_usable_size_r>
 80082f0:	4285      	cmp	r5, r0
 80082f2:	4606      	mov	r6, r0
 80082f4:	d802      	bhi.n	80082fc <_realloc_r+0x34>
 80082f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80082fa:	d8f4      	bhi.n	80082e6 <_realloc_r+0x1e>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4640      	mov	r0, r8
 8008300:	f7ff fc46 	bl	8007b90 <_malloc_r>
 8008304:	4607      	mov	r7, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d0ec      	beq.n	80082e4 <_realloc_r+0x1c>
 800830a:	42b5      	cmp	r5, r6
 800830c:	462a      	mov	r2, r5
 800830e:	4621      	mov	r1, r4
 8008310:	bf28      	it	cs
 8008312:	4632      	movcs	r2, r6
 8008314:	f7ff fbc2 	bl	8007a9c <memcpy>
 8008318:	4621      	mov	r1, r4
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fbcc 	bl	8007ab8 <_free_r>
 8008320:	463c      	mov	r4, r7
 8008322:	e7e0      	b.n	80082e6 <_realloc_r+0x1e>

08008324 <_malloc_usable_size_r>:
 8008324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008328:	1f18      	subs	r0, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfbc      	itt	lt
 800832e:	580b      	ldrlt	r3, [r1, r0]
 8008330:	18c0      	addlt	r0, r0, r3
 8008332:	4770      	bx	lr

08008334 <trunc>:
 8008334:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8008338:	ec5c bb10 	vmov	fp, ip, d0
 800833c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8008340:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8008344:	2913      	cmp	r1, #19
 8008346:	4664      	mov	r4, ip
 8008348:	dc14      	bgt.n	8008374 <trunc+0x40>
 800834a:	2900      	cmp	r1, #0
 800834c:	bfa4      	itt	ge
 800834e:	4b15      	ldrge	r3, [pc, #84]	@ (80083a4 <trunc+0x70>)
 8008350:	fa43 f101 	asrge.w	r1, r3, r1
 8008354:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8008358:	bfad      	iteet	ge
 800835a:	4021      	andge	r1, r4
 800835c:	2200      	movlt	r2, #0
 800835e:	4603      	movlt	r3, r0
 8008360:	2200      	movge	r2, #0
 8008362:	bfa8      	it	ge
 8008364:	ea41 0300 	orrge.w	r3, r1, r0
 8008368:	4693      	mov	fp, r2
 800836a:	469c      	mov	ip, r3
 800836c:	ec4c bb10 	vmov	d0, fp, ip
 8008370:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8008374:	2933      	cmp	r1, #51	@ 0x33
 8008376:	dd0b      	ble.n	8008390 <trunc+0x5c>
 8008378:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800837c:	d1f6      	bne.n	800836c <trunc+0x38>
 800837e:	465a      	mov	r2, fp
 8008380:	4663      	mov	r3, ip
 8008382:	4658      	mov	r0, fp
 8008384:	4621      	mov	r1, r4
 8008386:	f7f7 ff91 	bl	80002ac <__adddf3>
 800838a:	4683      	mov	fp, r0
 800838c:	468c      	mov	ip, r1
 800838e:	e7ed      	b.n	800836c <trunc+0x38>
 8008390:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	40c3      	lsrs	r3, r0
 800839a:	ea2b 0603 	bic.w	r6, fp, r3
 800839e:	46b3      	mov	fp, r6
 80083a0:	46a4      	mov	ip, r4
 80083a2:	e7e3      	b.n	800836c <trunc+0x38>
 80083a4:	fff00000 	.word	0xfff00000

080083a8 <_init>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr

080083b4 <_fini>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr
