
class3_testingBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006084  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062b0  080062b0  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080062b0  080062b0  000072b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062b8  080062b8  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062bc  080062bc  000072bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080062c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  080062cc  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080062cc  00008504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001919d  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c37  00000000  00000000  000211d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00023e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010f7  00000000  00000000  000253d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d57c  00000000  00000000  000264c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ded  00000000  00000000  00053a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c66f  00000000  00000000  0006d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189e9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  00189ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0018fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006228 	.word	0x08006228

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006228 	.word	0x08006228

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 f939 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81e 	bl	8000534 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004f8:	f000 f87e 	bl	80005f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fbd4 	bl	8000ca8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000504:	f000 f90c 	bl	8000720 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000508:	f000 f942 	bl	8000790 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f980 	bl	8000810 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000510:	f000 f9be 	bl	8000890 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000514:	f000 fa12 	bl	800093c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000518:	f000 fa4e 	bl	80009b8 <MX_SPI3_Init>
  MX_UART4_Init();
 800051c:	f000 fa8a 	bl	8000a34 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fad4 	bl	8000acc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb1e 	bl	8000b64 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000528:	f000 fb6a 	bl	8000c00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800052c:	f000 fbb4 	bl	8000c98 <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <main+0x44>

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b096      	sub	sp, #88	@ 0x58
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2244      	movs	r2, #68	@ 0x44
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 fe44 	bl	80061d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000556:	2000      	movs	r0, #0
 8000558:	f003 fa84 	bl	8003a64 <HAL_PWREx_ControlVoltageScaling>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000562:	f000 fcf1 	bl	8000f48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000566:	f003 fa4d 	bl	8003a04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800056a:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <SystemClock_Config+0xc0>)
 800056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000570:	4a20      	ldr	r2, [pc, #128]	@ (80005f4 <SystemClock_Config+0xc0>)
 8000572:	f023 0318 	bic.w	r3, r3, #24
 8000576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800057a:	2314      	movs	r3, #20
 800057c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800058a:	2360      	movs	r3, #96	@ 0x60
 800058c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000592:	2301      	movs	r3, #1
 8000594:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800059a:	233c      	movs	r3, #60	@ 0x3c
 800059c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fafc 	bl	8003bac <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ba:	f000 fcc5 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 ff02 	bl	80043e0 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005e2:	f000 fcb1 	bl	8000f48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e6:	f004 fce9 	bl	8004fbc <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	@ 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a6      	sub	sp, #152	@ 0x98
 80005fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2294      	movs	r2, #148	@ 0x94
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f005 fde3 	bl	80061d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800060a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000610:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000618:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800061c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000626:	2318      	movs	r3, #24
 8000628:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000636:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 800063a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f004 f98c 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800064a:	f000 fc7d 	bl	8000f48 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3798      	adds	r7, #152	@ 0x98
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066e:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <MX_ADC1_Init+0xbc>)
 8000670:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <MX_ADC1_Init+0xc0>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000674:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_ADC1_Init+0xbc>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <MX_ADC1_Init+0xbc>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <MX_ADC1_Init+0xbc>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_ADC1_Init+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_ADC1_Init+0xbc>)
 800068e:	2204      	movs	r2, #4
 8000690:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_ADC1_Init+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_ADC1_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ce:	4811      	ldr	r0, [pc, #68]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006d0:	f001 fa5e 	bl	8001b90 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006da:	f000 fc35 	bl	8000f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_ADC1_Init+0xc4>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	@ 0x7f
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_ADC1_Init+0xbc>)
 80006fc:	f001 fb8e 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000706:	f000 fc1f 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000028 	.word	0x20000028
 8000718:	50040000 	.word	0x50040000
 800071c:	04300002 	.word	0x04300002

08000720 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000726:	4a19      	ldr	r2, [pc, #100]	@ (800078c <MX_DFSDM1_Init+0x6c>)
 8000728:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 800072c:	2201      	movs	r2, #1
 800072e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000738:	2202      	movs	r2, #2
 800073a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000756:	2204      	movs	r2, #4
 8000758:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000762:	2201      	movs	r2, #1
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_DFSDM1_Init+0x68>)
 8000774:	f002 f860 	bl	8002838 <HAL_DFSDM_ChannelInit>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800077e:	f000 fbe3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000090 	.word	0x20000090
 800078c:	40016040 	.word	0x40016040

08000790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_I2C1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	@ (8000808 <MX_I2C1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_I2C1_Init+0x74>)
 800079c:	4a1b      	ldr	r2, [pc, #108]	@ (800080c <MX_I2C1_Init+0x7c>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ca:	480e      	ldr	r0, [pc, #56]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007cc:	f002 fb0d 	bl	8002dea <HAL_I2C_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d6:	f000 fbb7 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007de:	f002 fb9f 	bl	8002f20 <HAL_I2CEx_ConfigAnalogFilter>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 fbae 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_I2C1_Init+0x74>)
 80007f0:	f002 fbe1 	bl	8002fb6 <HAL_I2CEx_ConfigDigitalFilter>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fba5 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000c8 	.word	0x200000c8
 8000808:	40005400 	.word	0x40005400
 800080c:	307075b1 	.word	0x307075b1

08000810 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_I2C2_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_I2C2_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_I2C2_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_I2C2_Init+0x74>)
 800084c:	f002 facd 	bl	8002dea <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 fb77 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <MX_I2C2_Init+0x74>)
 800085e:	f002 fb5f 	bl	8002f20 <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 fb6e 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_I2C2_Init+0x74>)
 8000870:	f002 fba1 	bl	8002fb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 fb65 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000011c 	.word	0x2000011c
 8000888:	40005800 	.word	0x40005800
 800088c:	307075b1 	.word	0x307075b1

08000890 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008a4:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008a6:	4a24      	ldr	r2, [pc, #144]	@ (8000938 <MX_OCTOSPI1_Init+0xa8>)
 80008a8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008aa:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80008bc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008be:	4b1d      	ldr	r3, [pc, #116]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008c0:	2220      	movs	r2, #32
 80008c2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008d8:	2201      	movs	r2, #1
 80008da:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008f0:	2208      	movs	r2, #8
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80008f4:	480f      	ldr	r0, [pc, #60]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 80008f6:	f002 fbab 	bl	8003050 <HAL_OSPI_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000900:	f000 fb22 	bl	8000f48 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800090c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000910:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <MX_OCTOSPI1_Init+0xa4>)
 800091c:	f002 fc52 	bl	80031c4 <HAL_OSPIM_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000926:	f000 fb0f 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000170 	.word	0x20000170
 8000938:	a0001000 	.word	0xa0001000

0800093c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	@ (80009b4 <MX_SPI1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000948:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800094c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000956:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800095a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_SPI1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_SPI1_Init+0x74>)
 800096a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800096e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000972:	2208      	movs	r2, #8
 8000974:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_SPI1_Init+0x74>)
 800098a:	2207      	movs	r2, #7
 800098c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_SPI1_Init+0x74>)
 8000996:	2208      	movs	r2, #8
 8000998:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_SPI1_Init+0x74>)
 800099c:	f004 fd06 	bl	80053ac <HAL_SPI_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 facf 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200001c0 	.word	0x200001c0
 80009b4:	40013000 	.word	0x40013000

080009b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_SPI3_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009d2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_SPI3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_SPI3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_SPI3_Init+0x74>)
 8000a06:	2207      	movs	r2, #7
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_SPI3_Init+0x74>)
 8000a12:	2208      	movs	r2, #8
 8000a14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_SPI3_Init+0x74>)
 8000a18:	f004 fcc8 	bl	80053ac <HAL_SPI_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f000 fa91 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000224 	.word	0x20000224
 8000a30:	40003c00 	.word	0x40003c00

08000a34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <MX_UART4_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a7e:	f004 fd38 	bl	80054f2 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 fa5e 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000a90:	f005 fad4 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 fa55 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000aa2:	f005 fb09 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 fa4c 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_UART4_Init+0x90>)
 8000ab2:	f005 fa8a 	bl	8005fca <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 fa44 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000288 	.word	0x20000288
 8000ac8:	40004c00 	.word	0x40004c00

08000acc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <MX_USART1_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b16:	f004 fcec 	bl	80054f2 <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 fa12 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b28:	f005 fa88 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 fa09 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b3a:	f005 fabd 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 fa00 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b4a:	f005 fa3e 	bl	8005fca <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f9f8 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000031c 	.word	0x2000031c
 8000b60:	40013800 	.word	0x40013800

08000b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b6a:	4a24      	ldr	r2, [pc, #144]	@ (8000bfc <MX_USART2_UART_Init+0x98>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b90:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b94:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4812      	ldr	r0, [pc, #72]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000bb0:	f004 fc9f 	bl	80054f2 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000bba:	f000 f9c5 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	480d      	ldr	r0, [pc, #52]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000bc2:	f005 fa3b 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000bcc:	f000 f9bc 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000bd4:	f005 fa70 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000bde:	f000 f9b3 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART2_UART_Init+0x94>)
 8000be4:	f005 f9f1 	bl	8005fca <HAL_UARTEx_DisableFifoMode>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000bee:	f000 f9ab 	bl	8000f48 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  extern UART_HandleTypeDef huart2;

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200003b0 	.word	0x200003b0
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c06:	4a23      	ldr	r2, [pc, #140]	@ (8000c94 <MX_USART3_UART_Init+0x94>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c48:	4811      	ldr	r0, [pc, #68]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c4a:	f004 fc52 	bl	80054f2 <HAL_UART_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c54:	f000 f978 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c5c:	f005 f9ee 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c66:	f000 f96f 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c6e:	f005 fa23 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c78:	f000 f966 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_USART3_UART_Init+0x90>)
 8000c7e:	f005 f9a4 	bl	8005fca <HAL_UARTEx_DisableFifoMode>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c88:	f000 f95e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000444 	.word	0x20000444
 8000c94:	40004800 	.word	0x40004800

08000c98 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	@ 0x30
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	4b9d      	ldr	r3, [pc, #628]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc2:	4a9c      	ldr	r2, [pc, #624]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cca:	4b9a      	ldr	r3, [pc, #616]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b97      	ldr	r3, [pc, #604]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a96      	ldr	r2, [pc, #600]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b94      	ldr	r3, [pc, #592]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b91      	ldr	r3, [pc, #580]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a90      	ldr	r2, [pc, #576]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b8b      	ldr	r3, [pc, #556]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0a:	4a8a      	ldr	r2, [pc, #552]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d12:	4b88      	ldr	r3, [pc, #544]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b85      	ldr	r3, [pc, #532]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a84      	ldr	r2, [pc, #528]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b82      	ldr	r3, [pc, #520]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b7f      	ldr	r3, [pc, #508]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b7c      	ldr	r3, [pc, #496]	@ (8000f34 <MX_GPIO_Init+0x28c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f240 1105 	movw	r1, #261	@ 0x105
 8000d54:	4878      	ldr	r0, [pc, #480]	@ (8000f38 <MX_GPIO_Init+0x290>)
 8000d56:	f002 f80d 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f248 111c 	movw	r1, #33052	@ 0x811c
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d64:	f002 f806 	bl	8002d74 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f24f 0134 	movw	r1, #61492	@ 0xf034
 8000d6e:	4873      	ldr	r0, [pc, #460]	@ (8000f3c <MX_GPIO_Init+0x294>)
 8000d70:	f002 f800 	bl	8002d74 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f242 0183 	movw	r1, #8323	@ 0x2083
 8000d7a:	4871      	ldr	r0, [pc, #452]	@ (8000f40 <MX_GPIO_Init+0x298>)
 8000d7c:	f001 fffa 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000d86:	486f      	ldr	r0, [pc, #444]	@ (8000f44 <MX_GPIO_Init+0x29c>)
 8000d88:	f001 fff4 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d8c:	f240 1305 	movw	r3, #261	@ 0x105
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4864      	ldr	r0, [pc, #400]	@ (8000f38 <MX_GPIO_Init+0x290>)
 8000da6:	f001 fe53 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000daa:	237a      	movs	r3, #122	@ 0x7a
 8000dac:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	485e      	ldr	r0, [pc, #376]	@ (8000f38 <MX_GPIO_Init+0x290>)
 8000dc0:	f001 fe46 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	485a      	ldr	r0, [pc, #360]	@ (8000f44 <MX_GPIO_Init+0x29c>)
 8000dda:	f001 fe39 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000dde:	f248 131c 	movw	r3, #33052	@ 0x811c
 8000de2:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f001 fe29 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	484a      	ldr	r0, [pc, #296]	@ (8000f3c <MX_GPIO_Init+0x294>)
 8000e14:	f001 fe1c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4842      	ldr	r0, [pc, #264]	@ (8000f3c <MX_GPIO_Init+0x294>)
 8000e34:	f001 fe0c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e38:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000e3c:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	483a      	ldr	r0, [pc, #232]	@ (8000f3c <MX_GPIO_Init+0x294>)
 8000e52:	f001 fdfd 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8000e56:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8000e5a:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4834      	ldr	r0, [pc, #208]	@ (8000f40 <MX_GPIO_Init+0x298>)
 8000e6e:	f001 fdef 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000e72:	f242 0383 	movw	r3, #8323	@ 0x2083
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482d      	ldr	r0, [pc, #180]	@ (8000f40 <MX_GPIO_Init+0x298>)
 8000e8c:	f001 fde0 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e90:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <MX_GPIO_Init+0x29c>)
 8000eaa:	f001 fdd1 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000eae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481f      	ldr	r0, [pc, #124]	@ (8000f44 <MX_GPIO_Init+0x29c>)
 8000ec6:	f001 fdc3 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee2:	f001 fdb5 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000ee6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f06:	f001 fda3 	bl	8002a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2017      	movs	r0, #23
 8000f10:	f001 fc5b 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f14:	2017      	movs	r0, #23
 8000f16:	f001 fc74 	bl	8002802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2028      	movs	r0, #40	@ 0x28
 8000f20:	f001 fc53 	bl	80027ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f24:	2028      	movs	r0, #40	@ 0x28
 8000f26:	f001 fc6c 	bl	8002802 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3730      	adds	r7, #48	@ 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48001000 	.word	0x48001000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000c00 	.word	0x48000c00
 8000f44:	48000800 	.word	0x48000800

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f66:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	4a08      	ldr	r2, [pc, #32]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a15      	ldr	r2, [pc, #84]	@ (8001010 <HAL_ADC_MspInit+0x74>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d123      	bne.n	8001006 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a14      	ldr	r2, [pc, #80]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_ADC_MspInit+0x78>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000fee:	233f      	movs	r3, #63	@ 0x3f
 8000ff0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ff2:	230b      	movs	r3, #11
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_ADC_MspInit+0x7c>)
 8001002:	f001 fd25 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	@ 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	50040000 	.word	0x50040000
 8001014:	40021000 	.word	0x40021000
 8001018:	48000800 	.word	0x48000800

0800101c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ae      	sub	sp, #184	@ 0xb8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2294      	movs	r2, #148	@ 0x94
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f005 f8c7 	bl	80061d0 <memset>
  if(DFSDM1_Init == 0)
 8001042:	4b25      	ldr	r3, [pc, #148]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d142      	bne.n	80010d0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800104a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fc7e 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001066:	f7ff ff6f 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	4a1b      	ldr	r2, [pc, #108]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001070:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001074:	6613      	str	r3, [r2, #96]	@ 0x60
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800109a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800109e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010b4:	2306      	movs	r3, #6
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010be:	4619      	mov	r1, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	@ (80010e0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80010c2:	f001 fcc5 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a02      	ldr	r2, [pc, #8]	@ (80010d8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010ce:	6013      	str	r3, [r2, #0]
  }

}
 80010d0:	bf00      	nop
 80010d2:	37b8      	adds	r7, #184	@ 0xb8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200004d8 	.word	0x200004d8
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48001000 	.word	0x48001000

080010e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0b0      	sub	sp, #192	@ 0xc0
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2294      	movs	r2, #148	@ 0x94
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f005 f863 	bl	80061d0 <memset>
  if(hi2c->Instance==I2C1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a42      	ldr	r2, [pc, #264]	@ (8001218 <HAL_I2C_MspInit+0x134>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d13c      	bne.n	800118e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001114:	2340      	movs	r3, #64	@ 0x40
 8001116:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001118:	2300      	movs	r3, #0
 800111a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fc1b 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800112c:	f7ff ff0c 	bl	8000f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <HAL_I2C_MspInit+0x138>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	4a39      	ldr	r2, [pc, #228]	@ (800121c <HAL_I2C_MspInit+0x138>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113c:	4b37      	ldr	r3, [pc, #220]	@ (800121c <HAL_I2C_MspInit+0x138>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001148:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800114c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001162:	2304      	movs	r3, #4
 8001164:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800116c:	4619      	mov	r1, r3
 800116e:	482c      	ldr	r0, [pc, #176]	@ (8001220 <HAL_I2C_MspInit+0x13c>)
 8001170:	f001 fc6e 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001174:	4b29      	ldr	r3, [pc, #164]	@ (800121c <HAL_I2C_MspInit+0x138>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	4a28      	ldr	r2, [pc, #160]	@ (800121c <HAL_I2C_MspInit+0x138>)
 800117a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800117e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <HAL_I2C_MspInit+0x138>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800118c:	e040      	b.n	8001210 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a24      	ldr	r2, [pc, #144]	@ (8001224 <HAL_I2C_MspInit+0x140>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d13b      	bne.n	8001210 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fbd9 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80011b0:	f7ff feca 	bl	8000f48 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_I2C_MspInit+0x138>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a18      	ldr	r2, [pc, #96]	@ (800121c <HAL_I2C_MspInit+0x138>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_I2C_MspInit+0x138>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011f0:	4619      	mov	r1, r3
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <HAL_I2C_MspInit+0x13c>)
 80011f4:	f001 fc2c 	bl	8002a50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_I2C_MspInit+0x138>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_I2C_MspInit+0x138>)
 80011fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001202:	6593      	str	r3, [r2, #88]	@ 0x58
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_I2C_MspInit+0x138>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
}
 8001210:	bf00      	nop
 8001212:	37c0      	adds	r7, #192	@ 0xc0
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40005400 	.word	0x40005400
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	40005800 	.word	0x40005800

08001228 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0b0      	sub	sp, #192	@ 0xc0
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	2294      	movs	r2, #148	@ 0x94
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f004 ffc1 	bl	80061d0 <memset>
  if(hospi->Instance==OCTOSPI1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a28      	ldr	r2, [pc, #160]	@ (80012f4 <HAL_OSPI_MspInit+0xcc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d149      	bne.n	80012ec <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800125c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fb77 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001274:	f7ff fe68 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a1e      	ldr	r2, [pc, #120]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 800127e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 8001292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001294:	4a18      	ldr	r2, [pc, #96]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129a:	6513      	str	r3, [r2, #80]	@ 0x50
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 800129e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_OSPI_MspInit+0xd0>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80012c0:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80012c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012da:	230a      	movs	r3, #10
 80012dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	@ (80012fc <HAL_OSPI_MspInit+0xd4>)
 80012e8:	f001 fbb2 	bl	8002a50 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80012ec:	bf00      	nop
 80012ee:	37c0      	adds	r7, #192	@ 0xc0
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	a0001000 	.word	0xa0001000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48001000 	.word	0x48001000

08001300 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <HAL_SPI_MspInit+0xdc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d129      	bne.n	8001376 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001326:	4a2e      	ldr	r2, [pc, #184]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001328:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800132c:	6613      	str	r3, [r2, #96]	@ 0x60
 800132e:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001352:	23e0      	movs	r3, #224	@ 0xe0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001362:	2305      	movs	r3, #5
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f001 fb6e 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001374:	e02d      	b.n	80013d2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <HAL_SPI_MspInit+0xe4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d128      	bne.n	80013d2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	4a16      	ldr	r2, [pc, #88]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 8001386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800138a:	6593      	str	r3, [r2, #88]	@ 0x58
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_SPI_MspInit+0xe0>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80013b0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c2:	2306      	movs	r3, #6
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <HAL_SPI_MspInit+0xe8>)
 80013ce:	f001 fb3f 	bl	8002a50 <HAL_GPIO_Init>
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	@ 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40013000 	.word	0x40013000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40003c00 	.word	0x40003c00
 80013e8:	48000800 	.word	0x48000800

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0b4      	sub	sp, #208	@ 0xd0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001408:	2294      	movs	r2, #148	@ 0x94
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fedf 	bl	80061d0 <memset>
  if(huart->Instance==UART4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a83      	ldr	r2, [pc, #524]	@ (8001624 <HAL_UART_MspInit+0x238>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13c      	bne.n	8001496 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800141c:	2308      	movs	r3, #8
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fa97 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fd88 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001438:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a7a      	ldr	r2, [pc, #488]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 800143e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b78      	ldr	r3, [pc, #480]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b75      	ldr	r3, [pc, #468]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a74      	ldr	r2, [pc, #464]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b72      	ldr	r3, [pc, #456]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001480:	2308      	movs	r3, #8
 8001482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f001 fade 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001494:	e0c2      	b.n	800161c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a64      	ldr	r2, [pc, #400]	@ (800162c <HAL_UART_MspInit+0x240>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13b      	bne.n	8001518 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a4:	2300      	movs	r3, #0
 80014a6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fa55 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014b8:	f7ff fd46 	bl	8000f48 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80014bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c0:	4a59      	ldr	r2, [pc, #356]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014c8:	4b57      	ldr	r3, [pc, #348]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b54      	ldr	r3, [pc, #336]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	4a53      	ldr	r2, [pc, #332]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e0:	4b51      	ldr	r3, [pc, #324]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014ec:	23c0      	movs	r3, #192	@ 0xc0
 80014ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001504:	2307      	movs	r3, #7
 8001506:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800150e:	4619      	mov	r1, r3
 8001510:	4847      	ldr	r0, [pc, #284]	@ (8001630 <HAL_UART_MspInit+0x244>)
 8001512:	f001 fa9d 	bl	8002a50 <HAL_GPIO_Init>
}
 8001516:	e081      	b.n	800161c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a45      	ldr	r2, [pc, #276]	@ (8001634 <HAL_UART_MspInit+0x248>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d13b      	bne.n	800159a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fa14 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800153a:	f7ff fd05 	bl	8000f48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	4a39      	ldr	r2, [pc, #228]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001548:	6593      	str	r3, [r2, #88]	@ 0x58
 800154a:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b31      	ldr	r3, [pc, #196]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800156e:	2378      	movs	r3, #120	@ 0x78
 8001570:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001590:	4619      	mov	r1, r3
 8001592:	4829      	ldr	r0, [pc, #164]	@ (8001638 <HAL_UART_MspInit+0x24c>)
 8001594:	f001 fa5c 	bl	8002a50 <HAL_GPIO_Init>
}
 8001598:	e040      	b.n	800161c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a27      	ldr	r2, [pc, #156]	@ (800163c <HAL_UART_MspInit+0x250>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13b      	bne.n	800161c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a4:	2304      	movs	r3, #4
 80015a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 f9d3 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80015bc:	f7ff fcc4 	bl	8000f48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_UART_MspInit+0x23c>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80015f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160a:	2307      	movs	r3, #7
 800160c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001610:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001614:	4619      	mov	r1, r3
 8001616:	4808      	ldr	r0, [pc, #32]	@ (8001638 <HAL_UART_MspInit+0x24c>)
 8001618:	f001 fa1a 	bl	8002a50 <HAL_GPIO_Init>
}
 800161c:	bf00      	nop
 800161e:	37d0      	adds	r7, #208	@ 0xd0
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004c00 	.word	0x40004c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40013800 	.word	0x40013800
 8001630:	48000400 	.word	0x48000400
 8001634:	40004400 	.word	0x40004400
 8001638:	48000c00 	.word	0x48000c00
 800163c:	40004800 	.word	0x40004800

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001696:	f000 f8bb 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}

0800169e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80016a2:	2020      	movs	r0, #32
 80016a4:	f001 fb7e 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80016a8:	2040      	movs	r0, #64	@ 0x40
 80016aa:	f001 fb7b 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80016ae:	2080      	movs	r0, #128	@ 0x80
 80016b0:	f001 fb78 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80016b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016b8:	f001 fb74 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80016c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016c8:	f001 fb6c 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80016cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80016d0:	f001 fb68 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80016d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016d8:	f001 fb64 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80016dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016e0:	f001 fb60 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80016e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80016e8:	f001 fb5c 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f004 fd4d 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001746:	f7fe fed1 	bl	80004ec <main>

0800174a <LoopForever>:

LoopForever:
    b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800174c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001758:	080062c0 	.word	0x080062c0
  ldr r2, =_sbss
 800175c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001760:	20000504 	.word	0x20000504

08001764 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_IRQHandler>

08001766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f001 f81f 	bl	80027b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f80e 	bl	8001798 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e001      	b.n	800178c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001788:	f7ff fbe4 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_InitTick+0x6c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <HAL_InitTick+0x70>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_InitTick+0x6c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 f82b 	bl	800281e <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d809      	bhi.n	80017e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 fff5 	bl	80027ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_InitTick+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	e001      	b.n	80017f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	200004dc 	.word	0x200004dc

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200004dc 	.word	0x200004dc

08001850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3360      	adds	r3, #96	@ 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <LL_ADC_SetOffset+0x44>)
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	03fff000 	.word	0x03fff000

08001900 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3360      	adds	r3, #96	@ 0x60
 800190e:	461a      	mov	r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3360      	adds	r3, #96	@ 0x60
 800193c:	461a      	mov	r2, r3
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	615a      	str	r2, [r3, #20]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3330      	adds	r3, #48	@ 0x30
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	211f      	movs	r1, #31
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 011f 	and.w	r1, r3, #31
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3314      	adds	r3, #20
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0e5b      	lsrs	r3, r3, #25
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	0d1b      	lsrs	r3, r3, #20
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0d1b      	lsrs	r3, r3, #20
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0318 	and.w	r3, r3, #24
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	400b      	ands	r3, r1
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	431a      	orrs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	0007ffff 	.word	0x0007ffff

08001a80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6093      	str	r3, [r2, #8]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_IsEnabled+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_IsEnabled+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e129      	b.n	8001dfe <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff f9ef 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff67 	bl	8001aa4 <LL_ADC_IsDeepPowerDownEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff4d 	bl	8001a80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff82 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d115      	bne.n	8001c22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff66 	bl	8001acc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c00:	4b81      	ldr	r3, [pc, #516]	@ (8001e08 <HAL_ADC_Init+0x278>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	4a81      	ldr	r2, [pc, #516]	@ (8001e0c <HAL_ADC_Init+0x27c>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff64 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10d      	bne.n	8001c4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff75 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001c58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80c2 	bne.w	8001dec <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 80be 	bne.w	8001dec <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c78:	f043 0202 	orr.w	r2, r3, #2
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff49 	bl	8001b1c <LL_ADC_IsEnabled>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c90:	485f      	ldr	r0, [pc, #380]	@ (8001e10 <HAL_ADC_Init+0x280>)
 8001c92:	f7ff ff43 	bl	8001b1c <LL_ADC_IsEnabled>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	485c      	ldr	r0, [pc, #368]	@ (8001e14 <HAL_ADC_Init+0x284>)
 8001ca4:	f7ff fdd4 	bl	8001850 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e5b      	ldrb	r3, [r3, #25]
 8001cac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cb8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d106      	bne.n	8001ce4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	045b      	lsls	r3, r3, #17
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <HAL_ADC_Init+0x288>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	69b9      	ldr	r1, [r7, #24]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff25 	bl	8001b68 <LL_ADC_INJ_IsConversionOngoing>
 8001d1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d140      	bne.n	8001da8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13d      	bne.n	8001da8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
 8001d34:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d36:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d3e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d4e:	f023 0306 	bic.w	r3, r3, #6
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d118      	bne.n	8001d98 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	e007      	b.n	8001da8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d10c      	bne.n	8001dca <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f023 010f 	bic.w	r1, r3, #15
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	1e5a      	subs	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc8:	e007      	b.n	8001dda <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 020f 	bic.w	r2, r2, #15
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f023 0303 	bic.w	r3, r3, #3
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dea:	e007      	b.n	8001dfc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	f043 0210 	orr.w	r2, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	053e2d63 	.word	0x053e2d63
 8001e10:	50040000 	.word	0x50040000
 8001e14:	50040300 	.word	0x50040300
 8001e18:	fff0c007 	.word	0xfff0c007

08001e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x22>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e3d5      	b.n	80025ea <HAL_ADC_ConfigChannel+0x7ce>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fe79 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 83ba 	bne.w	80025cc <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d824      	bhi.n	8001eb2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	3b02      	subs	r3, #2
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d81b      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x8e>
 8001e72:	a201      	add	r2, pc, #4	@ (adr r2, 8001e78 <HAL_ADC_ConfigChannel+0x5c>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001e91 	.word	0x08001e91
 8001e80:	08001e99 	.word	0x08001e99
 8001e84:	08001ea1 	.word	0x08001ea1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e8e:	e010      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e90:	2312      	movs	r3, #18
 8001e92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e96:	e00c      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e98:	2318      	movs	r3, #24
 8001e9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e9e:	e008      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ea8:	e003      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001eaa:	2306      	movs	r3, #6
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001eb0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ec0:	f7ff fd62 	bl	8001988 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe3a 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001ece:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fe46 	bl	8001b68 <LL_ADC_INJ_IsConversionOngoing>
 8001edc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 81bf 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 81ba 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001efc:	d10f      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff fd69 	bl	80019e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd23 	bl	8001962 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f1c:	e00e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f7ff fd58 	bl	80019e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fd13 	bl	8001962 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00a      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6919      	ldr	r1, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f6e:	f7ff fca3 	bl	80018b8 <LL_ADC_SetOffset>
 8001f72:	e179      	b.n	8002268 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fcc0 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x184>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fcb5 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	f003 021f 	and.w	r2, r3, #31
 8001f9e:	e01e      	b.n	8001fde <HAL_ADC_ConfigChannel+0x1c2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fcaa 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e004      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001fd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x1da>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	e018      	b.n	8002028 <HAL_ADC_ConfigChannel+0x20c>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800200a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800200e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002012:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e004      	b.n	8002028 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800201e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002028:	429a      	cmp	r2, r3
 800202a:	d106      	bne.n	800203a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fc79 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc5d 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x24a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fc52 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	e01e      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x288>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fc47 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800208c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002094:	2320      	movs	r3, #32
 8002096:	e004      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002098:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x2a0>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	e018      	b.n	80020ee <HAL_ADC_ConfigChannel+0x2d2>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80020d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80020d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80020e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	2101      	movs	r1, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fc16 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fbfa 	bl	8001900 <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x310>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2102      	movs	r1, #2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fbef 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	e01e      	b.n	800216a <HAL_ADC_ConfigChannel+0x34e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2102      	movs	r1, #2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fbe4 	bl	8001900 <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800214a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800214e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800215a:	2320      	movs	r3, #32
 800215c:	e004      	b.n	8002168 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800215e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x366>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	e014      	b.n	80021ac <HAL_ADC_ConfigChannel+0x390>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002196:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80021a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2102      	movs	r1, #2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fbb7 	bl	800192c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2103      	movs	r1, #3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fb9b 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x3ce>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2103      	movs	r1, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fb90 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e017      	b.n	800221a <HAL_ADC_ConfigChannel+0x3fe>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb85 	bl	8001900 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002204:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x416>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	e011      	b.n	8002256 <HAL_ADC_ConfigChannel+0x43a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002242:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e003      	b.n	8002256 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800224e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002256:	429a      	cmp	r2, r3
 8002258:	d106      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	2103      	movs	r1, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fb62 	bl	800192c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fc55 	bl	8001b1c <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 813f 	bne.w	80024f8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f7ff fbd6 	bl	8001a38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4a8e      	ldr	r2, [pc, #568]	@ (80024cc <HAL_ADC_ConfigChannel+0x6b0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	f040 8130 	bne.w	80024f8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x4a4>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	3301      	adds	r3, #1
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e019      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4d8>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80022ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80022d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80022dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	bf94      	ite	ls
 80022ee:	2301      	movls	r3, #1
 80022f0:	2300      	movhi	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d079      	beq.n	80023ec <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x4f8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	069b      	lsls	r3, r3, #26
 800230e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002312:	e015      	b.n	8002340 <HAL_ADC_ConfigChannel+0x524>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002324:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x544>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	e017      	b.n	8002390 <HAL_ADC_ConfigChannel+0x574>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800236e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002370:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800237c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	ea42 0103 	orr.w	r1, r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x59a>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x5cc>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80023c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e8:	430b      	orrs	r3, r1
 80023ea:	e080      	b.n	80024ee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x5ec>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	069b      	lsls	r3, r3, #26
 8002402:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002406:	e015      	b.n	8002434 <HAL_ADC_ConfigChannel+0x618>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800241a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243c:	2b00      	cmp	r3, #0
 800243e:	d109      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x638>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0e9b      	lsrs	r3, r3, #26
 8002446:	3301      	adds	r3, #1
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	e017      	b.n	8002484 <HAL_ADC_ConfigChannel+0x668>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	61bb      	str	r3, [r7, #24]
  return result;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x694>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	3b1e      	subs	r3, #30
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024ae:	e01d      	b.n	80024ec <HAL_ADC_ConfigChannel+0x6d0>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	60fb      	str	r3, [r7, #12]
  return result;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d103      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e005      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x6bc>
 80024cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 021f 	and.w	r2, r3, #31
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	3b1e      	subs	r3, #30
 80024e6:	051b      	lsls	r3, r3, #20
 80024e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7ff fa74 	bl	80019e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b3d      	ldr	r3, [pc, #244]	@ (80025f4 <HAL_ADC_ConfigChannel+0x7d8>)
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d06c      	beq.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002504:	483c      	ldr	r0, [pc, #240]	@ (80025f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002506:	f7ff f9c9 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 800250a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3a      	ldr	r2, [pc, #232]	@ (80025fc <HAL_ADC_ConfigChannel+0x7e0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d127      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800251c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d121      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a35      	ldr	r2, [pc, #212]	@ (8002600 <HAL_ADC_ConfigChannel+0x7e4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d157      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002532:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002536:	4619      	mov	r1, r3
 8002538:	482f      	ldr	r0, [pc, #188]	@ (80025f8 <HAL_ADC_ConfigChannel+0x7dc>)
 800253a:	f7ff f99c 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800253e:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_ADC_ConfigChannel+0x7e8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	099b      	lsrs	r3, r3, #6
 8002544:	4a30      	ldr	r2, [pc, #192]	@ (8002608 <HAL_ADC_ConfigChannel+0x7ec>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002558:	e002      	b.n	8002560 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3b01      	subs	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f9      	bne.n	800255a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002566:	e03a      	b.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a27      	ldr	r2, [pc, #156]	@ (800260c <HAL_ADC_ConfigChannel+0x7f0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d113      	bne.n	800259a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002572:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002576:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <HAL_ADC_ConfigChannel+0x7e4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d12a      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800258c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002590:	4619      	mov	r1, r3
 8002592:	4819      	ldr	r0, [pc, #100]	@ (80025f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002594:	f7ff f96f 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002598:	e021      	b.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_ADC_ConfigChannel+0x7f4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d11c      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <HAL_ADC_ConfigChannel+0x7e4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d111      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025c2:	4619      	mov	r1, r3
 80025c4:	480c      	ldr	r0, [pc, #48]	@ (80025f8 <HAL_ADC_ConfigChannel+0x7dc>)
 80025c6:	f7ff f956 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
 80025ca:	e008      	b.n	80025de <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80025e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	37d8      	adds	r7, #216	@ 0xd8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	80080000 	.word	0x80080000
 80025f8:	50040300 	.word	0x50040300
 80025fc:	c7520000 	.word	0xc7520000
 8002600:	50040000 	.word	0x50040000
 8002604:	20000000 	.word	0x20000000
 8002608:	053e2d63 	.word	0x053e2d63
 800260c:	cb840000 	.word	0xcb840000
 8002610:	80000001 	.word	0x80000001

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002780:	d301      	bcc.n	8002786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002782:	2301      	movs	r3, #1
 8002784:	e00f      	b.n	80027a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <SysTick_Config+0x40>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278e:	210f      	movs	r1, #15
 8002790:	f04f 30ff 	mov.w	r0, #4294967295
 8002794:	f7ff ff8e 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <SysTick_Config+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <SysTick_Config+0x40>)
 80027a0:	2207      	movs	r2, #7
 80027a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	e000e010 	.word	0xe000e010

080027b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff29 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 80027c2:	bf00      	nop
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff3e 	bl	800265c <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff8e 	bl	8002708 <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5d 	bl	80026b4 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff31 	bl	8002678 <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa2 	bl	8002770 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0ac      	b.n	80029a4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f8b2 	bl	80029b8 <DFSDM_GetChannelFromInstance>
 8002854:	4603      	mov	r3, r0
 8002856:	4a55      	ldr	r2, [pc, #340]	@ (80029ac <HAL_DFSDM_ChannelInit+0x174>)
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e09f      	b.n	80029a4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7fe fbd9 	bl	800101c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_DFSDM_ChannelInit+0x178>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a4f      	ldr	r2, [pc, #316]	@ (80029b0 <HAL_DFSDM_ChannelInit+0x178>)
 8002872:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002874:	4b4e      	ldr	r3, [pc, #312]	@ (80029b0 <HAL_DFSDM_ChannelInit+0x178>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d125      	bne.n	80028c8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800287c:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a4c      	ldr	r2, [pc, #304]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002882:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002888:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4948      	ldr	r1, [pc, #288]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a46      	ldr	r2, [pc, #280]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800289c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80028a0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028aa:	4b42      	ldr	r3, [pc, #264]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	493f      	ldr	r1, [pc, #252]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80028bc:	4b3d      	ldr	r3, [pc, #244]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3c      	ldr	r2, [pc, #240]	@ (80029b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80028c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028c6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80028d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80028ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 020f 	bic.w	r2, r2, #15
 8002904:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800292c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f002 0207 	and.w	r2, r2, #7
 8002958:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002984:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f810 	bl	80029b8 <DFSDM_GetChannelFromInstance>
 8002998:	4602      	mov	r2, r0
 800299a:	4904      	ldr	r1, [pc, #16]	@ (80029ac <HAL_DFSDM_ChannelInit+0x174>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200004e4 	.word	0x200004e4
 80029b0:	200004e0 	.word	0x200004e0
 80029b4:	40016000 	.word	0x40016000

080029b8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <DFSDM_GetChannelFromInstance+0x7c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d102      	bne.n	80029ce <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e02b      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <DFSDM_GetChannelFromInstance+0x80>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d102      	bne.n	80029dc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e024      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <DFSDM_GetChannelFromInstance+0x84>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80029e4:	2302      	movs	r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e01d      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <DFSDM_GetChannelFromInstance+0x88>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d102      	bne.n	80029f8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80029f2:	2304      	movs	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e016      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <DFSDM_GetChannelFromInstance+0x8c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d102      	bne.n	8002a06 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002a00:	2305      	movs	r3, #5
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e00f      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a0f      	ldr	r2, [pc, #60]	@ (8002a48 <DFSDM_GetChannelFromInstance+0x90>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d102      	bne.n	8002a14 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e008      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0d      	ldr	r2, [pc, #52]	@ (8002a4c <DFSDM_GetChannelFromInstance+0x94>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d102      	bne.n	8002a22 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002a1c:	2307      	movs	r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e001      	b.n	8002a26 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002a22:	2303      	movs	r3, #3
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40016000 	.word	0x40016000
 8002a38:	40016020 	.word	0x40016020
 8002a3c:	40016040 	.word	0x40016040
 8002a40:	40016080 	.word	0x40016080
 8002a44:	400160a0 	.word	0x400160a0
 8002a48:	400160c0 	.word	0x400160c0
 8002a4c:	400160e0 	.word	0x400160e0

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e166      	b.n	8002d2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8158 	beq.w	8002d28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d005      	beq.n	8002a90 <HAL_GPIO_Init+0x40>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d130      	bne.n	8002af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0201 	and.w	r2, r3, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d017      	beq.n	8002b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d123      	bne.n	8002b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	6939      	ldr	r1, [r7, #16]
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80b2 	beq.w	8002d28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc4:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	4a60      	ldr	r2, [pc, #384]	@ (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bdc:	4a5c      	ldr	r2, [pc, #368]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c06:	d02b      	beq.n	8002c60 <HAL_GPIO_Init+0x210>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a52      	ldr	r2, [pc, #328]	@ (8002d54 <HAL_GPIO_Init+0x304>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d025      	beq.n	8002c5c <HAL_GPIO_Init+0x20c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a51      	ldr	r2, [pc, #324]	@ (8002d58 <HAL_GPIO_Init+0x308>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01f      	beq.n	8002c58 <HAL_GPIO_Init+0x208>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a50      	ldr	r2, [pc, #320]	@ (8002d5c <HAL_GPIO_Init+0x30c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d019      	beq.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a4f      	ldr	r2, [pc, #316]	@ (8002d60 <HAL_GPIO_Init+0x310>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_GPIO_Init+0x200>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002d64 <HAL_GPIO_Init+0x314>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x1fc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4d      	ldr	r2, [pc, #308]	@ (8002d68 <HAL_GPIO_Init+0x318>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x1f8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d6c <HAL_GPIO_Init+0x31c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x1f4>
 8002c40:	2307      	movs	r3, #7
 8002c42:	e00e      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c44:	2308      	movs	r3, #8
 8002c46:	e00c      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c48:	2306      	movs	r3, #6
 8002c4a:	e00a      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e008      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e006      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c54:	2303      	movs	r3, #3
 8002c56:	e004      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e002      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c60:	2300      	movs	r3, #0
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	f002 0203 	and.w	r2, r2, #3
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	4093      	lsls	r3, r2
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c72:	4937      	ldr	r1, [pc, #220]	@ (8002d50 <HAL_GPIO_Init+0x300>)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c80:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002caa:	4b31      	ldr	r3, [pc, #196]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cce:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d22:	4a13      	ldr	r2, [pc, #76]	@ (8002d70 <HAL_GPIO_Init+0x320>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f ae91 	bne.w	8002a60 <HAL_GPIO_Init+0x10>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	48000400 	.word	0x48000400
 8002d58:	48000800 	.word	0x48000800
 8002d5c:	48000c00 	.word	0x48000c00
 8002d60:	48001000 	.word	0x48001000
 8002d64:	48001400 	.word	0x48001400
 8002d68:	48001800 	.word	0x48001800
 8002d6c:	48001c00 	.word	0x48001c00
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dae:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f806 	bl	8002dd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e08d      	b.n	8002f18 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fe f967 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2224      	movs	r2, #36	@ 0x24
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	e006      	b.n	8002e72 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d108      	bne.n	8002e8c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	e007      	b.n	8002e9c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69d9      	ldr	r1, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d138      	bne.n	8002fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e032      	b.n	8002faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	@ 0x24
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6819      	ldr	r1, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d139      	bne.n	8003040 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e033      	b.n	8003042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2224      	movs	r2, #36	@ 0x24
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003008:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7fe fbec 	bl	8001838 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	e092      	b.n	8003194 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 808b 	bne.w	8003194 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe f8d2 	bl	8001228 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003084:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f88b 	bl	80031a4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4b42      	ldr	r3, [pc, #264]	@ (80031a0 <HAL_OSPI_Init+0x150>)
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68d1      	ldr	r1, [r2, #12]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6912      	ldr	r2, [r2, #16]
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0412      	lsls	r2, r2, #16
 80030a4:	4311      	orrs	r1, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6952      	ldr	r2, [r2, #20]
 80030aa:	3a01      	subs	r2, #1
 80030ac:	0212      	lsls	r2, r2, #8
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	69d2      	ldr	r2, [r2, #28]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0412      	lsls	r2, r2, #16
 80030ce:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	2120      	movs	r1, #32
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fb9c 	bl	8003834 <OSPI_WaitFlagStateUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d146      	bne.n	8003194 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800313c:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d107      	bne.n	800317c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0202 	orr.w	r2, r2, #2
 800317a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003184:	d103      	bne.n	800318e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	645a      	str	r2, [r3, #68]	@ 0x44
 800318c:	e002      	b.n	8003194 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2202      	movs	r2, #2
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	f8e0f8f4 	.word	0xf8e0f8f4

080031a4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b092      	sub	sp, #72	@ 0x48
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a08      	ldr	r2, [pc, #32]	@ (8003204 <HAL_OSPIM_Config+0x40>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d105      	bne.n	80031f2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80031f0:	e004      	b.n	80031fc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003202:	e01f      	b.n	8003244 <HAL_OSPIM_Config+0x80>
 8003204:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003208:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800320c:	3301      	adds	r3, #1
 800320e:	b2d8      	uxtb	r0, r3
 8003210:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003214:	f107 0114 	add.w	r1, r7, #20
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	4619      	mov	r1, r3
 8003224:	f000 fb3e 	bl	80038a4 <OSPIM_GetConfig>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2208      	movs	r2, #8
 8003238:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800323a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800323e:	3301      	adds	r3, #1
 8003240:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003244:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003248:	2b01      	cmp	r3, #1
 800324a:	d9dd      	bls.n	8003208 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800324c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 82e3 	bne.w	800381c <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003256:	4bc5      	ldr	r3, [pc, #788]	@ (800356c <HAL_OSPIM_Config+0x3a8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003262:	4bc2      	ldr	r3, [pc, #776]	@ (800356c <HAL_OSPIM_Config+0x3a8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4ac1      	ldr	r2, [pc, #772]	@ (800356c <HAL_OSPIM_Config+0x3a8>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800326e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800327a:	4bbd      	ldr	r3, [pc, #756]	@ (8003570 <HAL_OSPIM_Config+0x3ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003286:	4bba      	ldr	r3, [pc, #744]	@ (8003570 <HAL_OSPIM_Config+0x3ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4ab9      	ldr	r2, [pc, #740]	@ (8003570 <HAL_OSPIM_Config+0x3ac>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003292:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003296:	f043 0302 	orr.w	r3, r3, #2
 800329a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800329e:	49b5      	ldr	r1, [pc, #724]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80032a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3348      	adds	r3, #72	@ 0x48
 80032ac:	443b      	add	r3, r7
 80032ae:	3b2c      	subs	r3, #44	@ 0x2c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	48ae      	ldr	r0, [pc, #696]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80032bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	3348      	adds	r3, #72	@ 0x48
 80032c8:	443b      	add	r3, r7
 80032ca:	3b2c      	subs	r3, #44	@ 0x2c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80032da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3348      	adds	r3, #72	@ 0x48
 80032e6:	443b      	add	r3, r7
 80032e8:	3b34      	subs	r3, #52	@ 0x34
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80a1 	beq.w	8003434 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80032f2:	49a0      	ldr	r1, [pc, #640]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80032f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3348      	adds	r3, #72	@ 0x48
 8003300:	443b      	add	r3, r7
 8003302:	3b34      	subs	r3, #52	@ 0x34
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	6859      	ldr	r1, [r3, #4]
 800330e:	4899      	ldr	r0, [pc, #612]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3348      	adds	r3, #72	@ 0x48
 800331c:	443b      	add	r3, r7
 800331e:	3b34      	subs	r3, #52	@ 0x34
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	f021 0201 	bic.w	r2, r1, #1
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4403      	add	r3, r0
 800332c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800332e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	3348      	adds	r3, #72	@ 0x48
 800333a:	443b      	add	r3, r7
 800333c:	3b30      	subs	r3, #48	@ 0x30
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01d      	beq.n	8003380 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003344:	498b      	ldr	r1, [pc, #556]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	3348      	adds	r3, #72	@ 0x48
 8003352:	443b      	add	r3, r7
 8003354:	3b30      	subs	r3, #48	@ 0x30
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3b01      	subs	r3, #1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	4884      	ldr	r0, [pc, #528]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	3348      	adds	r3, #72	@ 0x48
 800336e:	443b      	add	r3, r7
 8003370:	3b30      	subs	r3, #48	@ 0x30
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3b01      	subs	r3, #1
 8003376:	f021 0210 	bic.w	r2, r1, #16
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	3348      	adds	r3, #72	@ 0x48
 800338c:	443b      	add	r3, r7
 800338e:	3b28      	subs	r3, #40	@ 0x28
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d021      	beq.n	80033da <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003396:	4977      	ldr	r1, [pc, #476]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	3348      	adds	r3, #72	@ 0x48
 80033a4:	443b      	add	r3, r7
 80033a6:	3b28      	subs	r3, #40	@ 0x28
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	486f      	ldr	r0, [pc, #444]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80033b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3348      	adds	r3, #72	@ 0x48
 80033c4:	443b      	add	r3, r7
 80033c6:	3b28      	subs	r3, #40	@ 0x28
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80033da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	3348      	adds	r3, #72	@ 0x48
 80033e6:	443b      	add	r3, r7
 80033e8:	3b24      	subs	r3, #36	@ 0x24
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d021      	beq.n	8003434 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80033f0:	4960      	ldr	r1, [pc, #384]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80033f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	3348      	adds	r3, #72	@ 0x48
 80033fe:	443b      	add	r3, r7
 8003400:	3b24      	subs	r3, #36	@ 0x24
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3b01      	subs	r3, #1
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	4858      	ldr	r0, [pc, #352]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003412:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	3348      	adds	r3, #72	@ 0x48
 800341e:	443b      	add	r3, r7
 8003420:	3b24      	subs	r3, #36	@ 0x24
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3b01      	subs	r3, #1
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3348      	adds	r3, #72	@ 0x48
 8003446:	443b      	add	r3, r7
 8003448:	3b34      	subs	r3, #52	@ 0x34
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4299      	cmp	r1, r3
 800344e:	d03c      	beq.n	80034ca <HAL_OSPIM_Config+0x306>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3348      	adds	r3, #72	@ 0x48
 8003462:	443b      	add	r3, r7
 8003464:	3b2c      	subs	r3, #44	@ 0x2c
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4299      	cmp	r1, r3
 800346a:	d02e      	beq.n	80034ca <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	3348      	adds	r3, #72	@ 0x48
 800347e:	443b      	add	r3, r7
 8003480:	3b30      	subs	r3, #48	@ 0x30
 8003482:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8003484:	4299      	cmp	r1, r3
 8003486:	d103      	bne.n	8003490 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11c      	bne.n	80034ca <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3348      	adds	r3, #72	@ 0x48
 80034a2:	443b      	add	r3, r7
 80034a4:	3b28      	subs	r3, #40	@ 0x28
 80034a6:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80034a8:	4299      	cmp	r1, r3
 80034aa:	d00e      	beq.n	80034ca <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3348      	adds	r3, #72	@ 0x48
 80034be:	443b      	add	r3, r7
 80034c0:	3b24      	subs	r3, #36	@ 0x24
 80034c2:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80034c4:	4299      	cmp	r1, r3
 80034c6:	f040 80d4 	bne.w	8003672 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80034ca:	492a      	ldr	r1, [pc, #168]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80034cc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	3348      	adds	r3, #72	@ 0x48
 80034da:	443b      	add	r3, r7
 80034dc:	3b34      	subs	r3, #52	@ 0x34
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	4822      	ldr	r0, [pc, #136]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 80034ea:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	3348      	adds	r3, #72	@ 0x48
 80034f8:	443b      	add	r3, r7
 80034fa:	3b34      	subs	r3, #52	@ 0x34
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f021 0201 	bic.w	r2, r1, #1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800350a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	3348      	adds	r3, #72	@ 0x48
 8003518:	443b      	add	r3, r7
 800351a:	3b30      	subs	r3, #48	@ 0x30
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01f      	beq.n	8003562 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003522:	4914      	ldr	r1, [pc, #80]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003524:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3348      	adds	r3, #72	@ 0x48
 8003532:	443b      	add	r3, r7
 8003534:	3b30      	subs	r3, #48	@ 0x30
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3b01      	subs	r3, #1
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	480c      	ldr	r0, [pc, #48]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003542:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	3348      	adds	r3, #72	@ 0x48
 8003550:	443b      	add	r3, r7
 8003552:	3b30      	subs	r3, #48	@ 0x30
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3b01      	subs	r3, #1
 8003558:	f021 0210 	bic.w	r2, r1, #16
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003562:	4904      	ldr	r1, [pc, #16]	@ (8003574 <HAL_OSPIM_Config+0x3b0>)
 8003564:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003568:	e006      	b.n	8003578 <HAL_OSPIM_Config+0x3b4>
 800356a:	bf00      	nop
 800356c:	a0001000 	.word	0xa0001000
 8003570:	a0001400 	.word	0xa0001400
 8003574:	50061c00 	.word	0x50061c00
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3348      	adds	r3, #72	@ 0x48
 8003582:	443b      	add	r3, r7
 8003584:	3b2c      	subs	r3, #44	@ 0x2c
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3b01      	subs	r3, #1
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	48a5      	ldr	r0, [pc, #660]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003592:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3348      	adds	r3, #72	@ 0x48
 80035a0:	443b      	add	r3, r7
 80035a2:	3b2c      	subs	r3, #44	@ 0x2c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4403      	add	r3, r0
 80035b0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035b2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3348      	adds	r3, #72	@ 0x48
 80035c0:	443b      	add	r3, r7
 80035c2:	3b28      	subs	r3, #40	@ 0x28
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035ca:	4997      	ldr	r1, [pc, #604]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80035cc:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	3348      	adds	r3, #72	@ 0x48
 80035da:	443b      	add	r3, r7
 80035dc:	3b28      	subs	r3, #40	@ 0x28
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	488e      	ldr	r0, [pc, #568]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80035ee:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	3348      	adds	r3, #72	@ 0x48
 80035fc:	443b      	add	r3, r7
 80035fe:	3b28      	subs	r3, #40	@ 0x28
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3b01      	subs	r3, #1
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003612:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3348      	adds	r3, #72	@ 0x48
 8003620:	443b      	add	r3, r7
 8003622:	3b24      	subs	r3, #36	@ 0x24
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d023      	beq.n	8003672 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800362a:	497f      	ldr	r1, [pc, #508]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800362c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	3348      	adds	r3, #72	@ 0x48
 800363a:	443b      	add	r3, r7
 800363c:	3b24      	subs	r3, #36	@ 0x24
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	4876      	ldr	r0, [pc, #472]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800364e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	3348      	adds	r3, #72	@ 0x48
 800365c:	443b      	add	r3, r7
 800365e:	3b24      	subs	r3, #36	@ 0x24
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4403      	add	r3, r0
 8003670:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003672:	4a6d      	ldr	r2, [pc, #436]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	3b01      	subs	r3, #1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003686:	025b      	lsls	r3, r3, #9
 8003688:	431a      	orrs	r2, r3
 800368a:	4967      	ldr	r1, [pc, #412]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800369c:	4a62      	ldr	r2, [pc, #392]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	431a      	orrs	r2, r3
 80036b4:	495c      	ldr	r1, [pc, #368]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d014      	beq.n	80036f8 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80036ce:	4a56      	ldr	r2, [pc, #344]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e2:	015b      	lsls	r3, r3, #5
 80036e4:	431a      	orrs	r2, r3
 80036e6:	4950      	ldr	r1, [pc, #320]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	f042 0210 	orr.w	r2, r2, #16
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d019      	beq.n	8003738 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003704:	4a48      	ldr	r2, [pc, #288]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	049b      	lsls	r3, r3, #18
 800371e:	431a      	orrs	r2, r3
 8003720:	4941      	ldr	r1, [pc, #260]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e01c      	b.n	8003772 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d018      	beq.n	8003772 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003740:	4a39      	ldr	r2, [pc, #228]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	3b01      	subs	r3, #1
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	069b      	lsls	r3, r3, #26
 800375a:	431a      	orrs	r2, r3
 800375c:	4932      	ldr	r1, [pc, #200]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d019      	beq.n	80037b2 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800377e:	4a2a      	ldr	r2, [pc, #168]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	3b01      	subs	r3, #1
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003796:	049b      	lsls	r3, r3, #18
 8003798:	431a      	orrs	r2, r3
 800379a:	4923      	ldr	r1, [pc, #140]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	e01c      	b.n	80037ec <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80037d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037d2:	069b      	lsls	r3, r3, #26
 80037d4:	431a      	orrs	r2, r3
 80037d6:	4914      	ldr	r1, [pc, #80]	@ (8003828 <HAL_OSPIM_Config+0x664>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	3b01      	subs	r3, #1
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80037ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_OSPIM_Config+0x668>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0b      	ldr	r2, [pc, #44]	@ (800382c <HAL_OSPIM_Config+0x668>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003804:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003810:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HAL_OSPIM_Config+0x66c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a06      	ldr	r2, [pc, #24]	@ (8003830 <HAL_OSPIM_Config+0x66c>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800381c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003820:	4618      	mov	r0, r3
 8003822:	3748      	adds	r7, #72	@ 0x48
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	50061c00 	.word	0x50061c00
 800382c:	a0001000 	.word	0xa0001000
 8003830:	a0001400 	.word	0xa0001400

08003834 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003844:	e01a      	b.n	800387c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d016      	beq.n	800387c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fff3 	bl	8001838 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800386a:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e00e      	b.n	800389a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1d6      	bne.n	8003846 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <OSPIM_GetConfig+0x26>
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d802      	bhi.n	80038ca <OSPIM_GetConfig+0x26>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
 80038ce:	e08e      	b.n	80039ee <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2200      	movs	r2, #0
 80038da:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d101      	bne.n	80038f8 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <OSPIM_GetConfig+0x158>)
 80038f6:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e074      	b.n	80039e8 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80038fe:	4a40      	ldr	r2, [pc, #256]	@ (8003a00 <OSPIM_GetConfig+0x15c>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4053      	eors	r3, r2
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4053      	eors	r3, r2
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4053      	eors	r3, r2
 800395a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d018      	beq.n	80039a6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4053      	eors	r3, r2
 800397a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d111      	bne.n	80039a6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e005      	b.n	80039a6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d018      	beq.n	80039e2 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4053      	eors	r3, r2
 80039b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d111      	bne.n	80039e2 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	611a      	str	r2, [r3, #16]
 80039d4:	e005      	b.n	80039e2 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3301      	adds	r3, #1
 80039da:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3301      	adds	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d987      	bls.n	80038fe <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	04040222 	.word	0x04040222
 8003a00:	50061c00 	.word	0x50061c00

08003a04 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40007000 	.word	0x40007000

08003a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a28:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a34:	d102      	bne.n	8003a3c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a3a:	e00b      	b.n	8003a54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	d102      	bne.n	8003a52 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a50:	e000      	b.n	8003a54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003a52:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40007000 	.word	0x40007000

08003a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d141      	bne.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7e:	d131      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a80:	4b47      	ldr	r3, [pc, #284]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a86:	4a46      	ldr	r2, [pc, #280]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a90:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a98:	4a41      	ldr	r2, [pc, #260]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003aa0:	4b40      	ldr	r3, [pc, #256]	@ (8003ba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2232      	movs	r2, #50	@ 0x32
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ab6:	e002      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003abe:	4b38      	ldr	r3, [pc, #224]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	d102      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f2      	bne.n	8003ab8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad2:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ade:	d158      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e057      	b.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003af4:	e04d      	b.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afc:	d141      	bne.n	8003b82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003afe:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b0a:	d131      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b12:	4a23      	ldr	r2, [pc, #140]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2232      	movs	r2, #50	@ 0x32
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	0c9b      	lsrs	r3, r3, #18
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b42:	e002      	b.n	8003b4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b56:	d102      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f2      	bne.n	8003b44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6a:	d112      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e011      	b.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b80:	e007      	b.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b82:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b90:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	431bde83 	.word	0x431bde83

08003bac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f000 bc08 	b.w	80043d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc0:	4b96      	ldr	r3, [pc, #600]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bca:	4b94      	ldr	r3, [pc, #592]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80e4 	beq.w	8003daa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x4c>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	f040 808b 	bne.w	8003d06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 8087 	bne.w	8003d06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf8:	4b88      	ldr	r3, [pc, #544]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_OscConfig+0x64>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e3df      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	4b81      	ldr	r3, [pc, #516]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <HAL_RCC_OscConfig+0x7e>
 8003c20:	4b7e      	ldr	r3, [pc, #504]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c28:	e005      	b.n	8003c36 <HAL_RCC_OscConfig+0x8a>
 8003c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d223      	bcs.n	8003c82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fdcc 	bl	80047dc <RCC_SetFlashLatencyFromMSIRange>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e3c0      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c4e:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a72      	ldr	r2, [pc, #456]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b70      	ldr	r3, [pc, #448]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	496d      	ldr	r1, [pc, #436]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4968      	ldr	r1, [pc, #416]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e025      	b.n	8003cce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c82:	4b66      	ldr	r3, [pc, #408]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a65      	ldr	r2, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c88:	f043 0308 	orr.w	r3, r3, #8
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4960      	ldr	r1, [pc, #384]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	495b      	ldr	r1, [pc, #364]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fd8c 	bl	80047dc <RCC_SetFlashLatencyFromMSIRange>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e380      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cce:	f000 fcc1 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	4b51      	ldr	r3, [pc, #324]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4950      	ldr	r1, [pc, #320]	@ (8003e20 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	5ccb      	ldrb	r3, [r1, r3]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a4e      	ldr	r2, [pc, #312]	@ (8003e24 <HAL_RCC_OscConfig+0x278>)
 8003cec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cee:	4b4e      	ldr	r3, [pc, #312]	@ (8003e28 <HAL_RCC_OscConfig+0x27c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fd50 	bl	8001798 <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d052      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	e364      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d032      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d0e:	4b43      	ldr	r3, [pc, #268]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a42      	ldr	r2, [pc, #264]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d1a:	f7fd fd8d 	bl	8001838 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d22:	f7fd fd89 	bl	8001838 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e34d      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d34:	4b39      	ldr	r3, [pc, #228]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d40:	4b36      	ldr	r3, [pc, #216]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a35      	ldr	r2, [pc, #212]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d46:	f043 0308 	orr.w	r3, r3, #8
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	4930      	ldr	r1, [pc, #192]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	492b      	ldr	r1, [pc, #172]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
 8003d72:	e01a      	b.n	8003daa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d74:	4b29      	ldr	r3, [pc, #164]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a28      	ldr	r2, [pc, #160]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fd5a 	bl	8001838 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d88:	f7fd fd56 	bl	8001838 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e31a      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1dc>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d073      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d005      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x21c>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d10e      	bne.n	8003de0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	4b14      	ldr	r3, [pc, #80]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d063      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2f0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d15f      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e2f7      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de8:	d106      	bne.n	8003df8 <HAL_RCC_OscConfig+0x24c>
 8003dea:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a0b      	ldr	r2, [pc, #44]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e025      	b.n	8003e44 <HAL_RCC_OscConfig+0x298>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e00:	d114      	bne.n	8003e2c <HAL_RCC_OscConfig+0x280>
 8003e02:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a05      	ldr	r2, [pc, #20]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a02      	ldr	r2, [pc, #8]	@ (8003e1c <HAL_RCC_OscConfig+0x270>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e013      	b.n	8003e44 <HAL_RCC_OscConfig+0x298>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	08006240 	.word	0x08006240
 8003e24:	20000000 	.word	0x20000000
 8003e28:	20000004 	.word	0x20000004
 8003e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a9f      	ldr	r2, [pc, #636]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b9d      	ldr	r3, [pc, #628]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a9c      	ldr	r2, [pc, #624]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fcf4 	bl	8001838 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd fcf0 	bl	8001838 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e2b4      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e66:	4b92      	ldr	r3, [pc, #584]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x2a8>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fce0 	bl	8001838 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fcdc 	bl	8001838 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	@ 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e2a0      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e8e:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x2d0>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d060      	beq.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_OscConfig+0x310>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d119      	bne.n	8003eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d116      	bne.n	8003eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x328>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e27d      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b76      	ldr	r3, [pc, #472]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	4973      	ldr	r1, [pc, #460]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee8:	e040      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d023      	beq.n	8003f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fc9b 	bl	8001838 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f06:	f7fd fc97 	bl	8001838 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e25b      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f18:	4b65      	ldr	r3, [pc, #404]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b62      	ldr	r3, [pc, #392]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	495f      	ldr	r1, [pc, #380]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
 8003f38:	e018      	b.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fc77 	bl	8001838 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fc73 	bl	8001838 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e237      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d03c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01c      	beq.n	8003fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f80:	4b4b      	ldr	r3, [pc, #300]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f86:	4a4a      	ldr	r2, [pc, #296]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fd fc52 	bl	8001838 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fd fc4e 	bl	8001838 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e212      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003faa:	4b41      	ldr	r3, [pc, #260]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ef      	beq.n	8003f98 <HAL_RCC_OscConfig+0x3ec>
 8003fb8:	e01b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b3d      	ldr	r3, [pc, #244]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc0:	4a3b      	ldr	r2, [pc, #236]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fc35 	bl	8001838 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fc31 	bl	8001838 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e1f5      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe4:	4b32      	ldr	r3, [pc, #200]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ef      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80a6 	beq.w	800414c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004004:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004010:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004014:	4a26      	ldr	r2, [pc, #152]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
 800401c:	4b24      	ldr	r3, [pc, #144]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004028:	2301      	movs	r3, #1
 800402a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402c:	4b21      	ldr	r3, [pc, #132]	@ (80040b4 <HAL_RCC_OscConfig+0x508>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d118      	bne.n	800406a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004038:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <HAL_RCC_OscConfig+0x508>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <HAL_RCC_OscConfig+0x508>)
 800403e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004044:	f7fd fbf8 	bl	8001838 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404c:	f7fd fbf4 	bl	8001838 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e1b8      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <HAL_RCC_OscConfig+0x508>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x4d8>
 8004072:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004078:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004082:	e029      	b.n	80040d8 <HAL_RCC_OscConfig+0x52c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b05      	cmp	r3, #5
 800408a:	d115      	bne.n	80040b8 <HAL_RCC_OscConfig+0x50c>
 800408c:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800409c:	4b04      	ldr	r3, [pc, #16]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a03      	ldr	r2, [pc, #12]	@ (80040b0 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x52c>
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
 80040b8:	4b9d      	ldr	r3, [pc, #628]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	4a9c      	ldr	r2, [pc, #624]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040c8:	4b99      	ldr	r3, [pc, #612]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ce:	4a98      	ldr	r2, [pc, #608]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd fbaa 	bl	8001838 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fd fba6 	bl	8001838 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e168      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ed      	beq.n	80040e8 <HAL_RCC_OscConfig+0x53c>
 800410c:	e015      	b.n	800413a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd fb93 	bl	8001838 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd fb8f 	bl	8001838 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e151      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800412c:	4b80      	ldr	r3, [pc, #512]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1ed      	bne.n	8004116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d105      	bne.n	800414c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004140:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	4a7a      	ldr	r2, [pc, #488]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d03c      	beq.n	80041d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01c      	beq.n	800419a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004160:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004166:	4a72      	ldr	r2, [pc, #456]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fd fb62 	bl	8001838 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004178:	f7fd fb5e 	bl	8001838 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e122      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800418a:	4b69      	ldr	r3, [pc, #420]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800418c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCC_OscConfig+0x5cc>
 8004198:	e01b      	b.n	80041d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800419a:	4b65      	ldr	r3, [pc, #404]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800419c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041a0:	4a63      	ldr	r2, [pc, #396]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd fb45 	bl	8001838 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b2:	f7fd fb41 	bl	8001838 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e105      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ef      	bne.n	80041b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80f9 	beq.w	80043ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f040 80cf 	bne.w	8004384 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041e6:	4b52      	ldr	r3, [pc, #328]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0203 	and.w	r2, r3, #3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d12c      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	3b01      	subs	r3, #1
 8004206:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d123      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d11b      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d113      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d109      	bne.n	8004254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	3b01      	subs	r3, #1
 800424e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d071      	beq.n	8004338 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d068      	beq.n	800432c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800425a:	4b35      	ldr	r3, [pc, #212]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d105      	bne.n	8004272 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004266:	4b32      	ldr	r3, [pc, #200]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0ac      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004276:	4b2e      	ldr	r3, [pc, #184]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2d      	ldr	r2, [pc, #180]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800427c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004280:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004282:	f7fd fad9 	bl	8001838 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fd fad5 	bl	8001838 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e099      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b21      	ldr	r3, [pc, #132]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	4b21      	ldr	r3, [pc, #132]	@ (8004334 <HAL_RCC_OscConfig+0x788>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042b8:	3a01      	subs	r2, #1
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042c2:	0212      	lsls	r2, r2, #8
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ca:	0852      	lsrs	r2, r2, #1
 80042cc:	3a01      	subs	r2, #1
 80042ce:	0552      	lsls	r2, r2, #21
 80042d0:	4311      	orrs	r1, r2
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042d6:	0852      	lsrs	r2, r2, #1
 80042d8:	3a01      	subs	r2, #1
 80042da:	0652      	lsls	r2, r2, #25
 80042dc:	4311      	orrs	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042e2:	06d2      	lsls	r2, r2, #27
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4912      	ldr	r1, [pc, #72]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042ec:	4b10      	ldr	r3, [pc, #64]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004302:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004304:	f7fd fa98 	bl	8001838 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd fa94 	bl	8001838 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e058      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431e:	4b04      	ldr	r3, [pc, #16]	@ (8004330 <HAL_RCC_OscConfig+0x784>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800432a:	e050      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e04f      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
 8004330:	40021000 	.word	0x40021000
 8004334:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	4b27      	ldr	r3, [pc, #156]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d144      	bne.n	80043ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004344:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004350:	4b21      	ldr	r3, [pc, #132]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4a20      	ldr	r2, [pc, #128]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800435a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800435c:	f7fd fa6c 	bl	8001838 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd fa68 	bl	8001838 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e02c      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x7b8>
 8004382:	e024      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d01f      	beq.n	80043ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a12      	ldr	r2, [pc, #72]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 8004390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd fa4f 	bl	8001838 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439e:	f7fd fa4b 	bl	8001838 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e00f      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4905      	ldr	r1, [pc, #20]	@ (80043d8 <HAL_RCC_OscConfig+0x82c>)
 80043c2:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <HAL_RCC_OscConfig+0x830>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	60cb      	str	r3, [r1, #12]
 80043c8:	e001      	b.n	80043ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	feeefffc 	.word	0xfeeefffc

080043e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e11d      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b90      	ldr	r3, [pc, #576]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d910      	bls.n	8004428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b8d      	ldr	r3, [pc, #564]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 020f 	bic.w	r2, r3, #15
 800440e:	498b      	ldr	r1, [pc, #556]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004416:	4b89      	ldr	r3, [pc, #548]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e105      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b81      	ldr	r3, [pc, #516]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004440:	429a      	cmp	r2, r3
 8004442:	d908      	bls.n	8004456 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b7e      	ldr	r3, [pc, #504]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	497b      	ldr	r1, [pc, #492]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d079      	beq.n	8004556 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d11e      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0dc      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800447a:	f000 fa09 	bl	8004890 <RCC_GetSysClockFreqFromPLLSource>
 800447e:	4603      	mov	r3, r0
 8004480:	4a70      	ldr	r2, [pc, #448]	@ (8004644 <HAL_RCC_ClockConfig+0x264>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d946      	bls.n	8004514 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004486:	4b6e      	ldr	r3, [pc, #440]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d140      	bne.n	8004514 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004492:	4b6b      	ldr	r3, [pc, #428]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800449a:	4a69      	ldr	r2, [pc, #420]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800449c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e035      	b.n	8004514 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b0:	4b63      	ldr	r3, [pc, #396]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d115      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b9      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0ad      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044d8:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a5      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80044e8:	f000 f8b4 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a55      	ldr	r2, [pc, #340]	@ (8004644 <HAL_RCC_ClockConfig+0x264>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d90f      	bls.n	8004514 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044f4:	4b52      	ldr	r3, [pc, #328]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004500:	4b4f      	ldr	r3, [pc, #316]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004508:	4a4d      	ldr	r2, [pc, #308]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800450a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800450e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004510:	2380      	movs	r3, #128	@ 0x80
 8004512:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004514:	4b4a      	ldr	r3, [pc, #296]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4947      	ldr	r1, [pc, #284]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004526:	f7fd f987 	bl	8001838 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452c:	e00a      	b.n	8004544 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452e:	f7fd f983 	bl	8001838 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e077      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004544:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 020c 	and.w	r2, r3, #12
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	429a      	cmp	r2, r3
 8004554:	d1eb      	bne.n	800452e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b80      	cmp	r3, #128	@ 0x80
 800455a:	d105      	bne.n	8004568 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800455c:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a37      	ldr	r2, [pc, #220]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004566:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	4b31      	ldr	r3, [pc, #196]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004580:	429a      	cmp	r2, r3
 8004582:	d208      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b2e      	ldr	r3, [pc, #184]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	492b      	ldr	r1, [pc, #172]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004596:	4b29      	ldr	r3, [pc, #164]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d210      	bcs.n	80045c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a4:	4b25      	ldr	r3, [pc, #148]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 020f 	bic.w	r2, r3, #15
 80045ac:	4923      	ldr	r1, [pc, #140]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b4:	4b21      	ldr	r3, [pc, #132]	@ (800463c <HAL_RCC_ClockConfig+0x25c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e036      	b.n	8004634 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	4918      	ldr	r1, [pc, #96]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f0:	4b13      	ldr	r3, [pc, #76]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4910      	ldr	r1, [pc, #64]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 8004600:	4313      	orrs	r3, r2
 8004602:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004604:	f000 f826 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <HAL_RCC_ClockConfig+0x260>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	490c      	ldr	r1, [pc, #48]	@ (8004648 <HAL_RCC_ClockConfig+0x268>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <HAL_RCC_ClockConfig+0x26c>)
 8004622:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004624:	4b0a      	ldr	r3, [pc, #40]	@ (8004650 <HAL_RCC_ClockConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fd f8b5 	bl	8001798 <HAL_InitTick>
 800462e:	4603      	mov	r3, r0
 8004630:	73fb      	strb	r3, [r7, #15]

  return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40022000 	.word	0x40022000
 8004640:	40021000 	.word	0x40021000
 8004644:	04c4b400 	.word	0x04c4b400
 8004648:	08006240 	.word	0x08006240
 800464c:	20000000 	.word	0x20000000
 8004650:	20000004 	.word	0x20000004

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	@ 0x24
 8004658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004662:	4b3e      	ldr	r3, [pc, #248]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800466c:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x34>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d121      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d11e      	bne.n	80046c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004688:	4b34      	ldr	r3, [pc, #208]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004694:	4b31      	ldr	r3, [pc, #196]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e005      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a4:	4b2d      	ldr	r3, [pc, #180]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046cc:	4b25      	ldr	r3, [pc, #148]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e004      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d8:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x114>)
 80046da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d134      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e2:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d003      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0xa6>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d003      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0xac>
 80046f8:	e005      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x110>)
 80046fc:	617b      	str	r3, [r7, #20]
      break;
 80046fe:	e005      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004700:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x114>)
 8004702:	617b      	str	r3, [r7, #20]
      break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	617b      	str	r3, [r7, #20]
      break;
 800470a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470c:	4b13      	ldr	r3, [pc, #76]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3301      	adds	r3, #1
 8004718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800471a:	4b10      	ldr	r3, [pc, #64]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	fb03 f202 	mul.w	r2, r3, r2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	0e5b      	lsrs	r3, r3, #25
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	3301      	adds	r3, #1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800474c:	69bb      	ldr	r3, [r7, #24]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	@ 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	08006258 	.word	0x08006258
 8004764:	00f42400 	.word	0x00f42400
 8004768:	007a1200 	.word	0x007a1200

0800476c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	08006250 	.word	0x08006250

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b4:	f7ff ffda 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0adb      	lsrs	r3, r3, #11
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	@ (80047d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08006250 	.word	0x08006250

080047dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047e4:	2300      	movs	r3, #0
 80047e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047e8:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047f4:	f7ff f916 	bl	8003a24 <HAL_PWREx_GetVoltageRange>
 80047f8:	6178      	str	r0, [r7, #20]
 80047fa:	e014      	b.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	4a21      	ldr	r2, [pc, #132]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
 8004808:	4b1f      	ldr	r3, [pc, #124]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004814:	f7ff f906 	bl	8003a24 <HAL_PWREx_GetVoltageRange>
 8004818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800482c:	d10b      	bne.n	8004846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b80      	cmp	r3, #128	@ 0x80
 8004832:	d913      	bls.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2ba0      	cmp	r3, #160	@ 0xa0
 8004838:	d902      	bls.n	8004840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800483a:	2302      	movs	r3, #2
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	e00d      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004840:	2301      	movs	r3, #1
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	e00a      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b7f      	cmp	r3, #127	@ 0x7f
 800484a:	d902      	bls.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800484c:	2302      	movs	r3, #2
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e004      	b.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b70      	cmp	r3, #112	@ 0x70
 8004856:	d101      	bne.n	800485c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004858:	2301      	movs	r3, #1
 800485a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 020f 	bic.w	r2, r3, #15
 8004864:	4909      	ldr	r1, [pc, #36]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	429a      	cmp	r2, r3
 8004878:	d001      	beq.n	800487e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	40022000 	.word	0x40022000

08004890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004896:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d00b      	beq.n	80048be <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d825      	bhi.n	80048f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d008      	beq.n	80048c4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d11f      	bne.n	80048f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80048b8:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80048ba:	613b      	str	r3, [r7, #16]
    break;
 80048bc:	e01f      	b.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80048be:	4b25      	ldr	r3, [pc, #148]	@ (8004954 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80048c0:	613b      	str	r3, [r7, #16]
    break;
 80048c2:	e01c      	b.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048c4:	4b21      	ldr	r3, [pc, #132]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d0:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e005      	b.n	80048ec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80048ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f4:	613b      	str	r3, [r7, #16]
    break;
 80048f6:	e002      	b.n	80048fe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
    break;
 80048fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	3301      	adds	r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800490c:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	fb03 f202 	mul.w	r2, r3, r2
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	0e5b      	lsrs	r3, r3, #25
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800493e:	683b      	ldr	r3, [r7, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40021000 	.word	0x40021000
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200
 8004958:	08006258 	.word	0x08006258

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004968:	2300      	movs	r3, #0
 800496a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d040      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497c:	2b80      	cmp	r3, #128	@ 0x80
 800497e:	d02a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004980:	2b80      	cmp	r3, #128	@ 0x80
 8004982:	d825      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004984:	2b60      	cmp	r3, #96	@ 0x60
 8004986:	d026      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004988:	2b60      	cmp	r3, #96	@ 0x60
 800498a:	d821      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d006      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d81d      	bhi.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d010      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800499c:	e018      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800499e:	4b89      	ldr	r3, [pc, #548]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a88      	ldr	r2, [pc, #544]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049aa:	e015      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fb12 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049bc:	e00c      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3320      	adds	r3, #32
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fbfd 	bl	80051c4 <RCCEx_PLLSAI2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	74fb      	strb	r3, [r7, #19]
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80049d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049de:	4b79      	ldr	r3, [pc, #484]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049e4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ec:	4975      	ldr	r1, [pc, #468]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80049f4:	e001      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d047      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0e:	d030      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a14:	d82a      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a1a:	d02a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004a1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a20:	d824      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a26:	d008      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2c:	d81e      	bhi.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a36:	d010      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a38:	e018      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a3a:	4b62      	ldr	r3, [pc, #392]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4a61      	ldr	r2, [pc, #388]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a46:	e015      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fac4 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fbaf 	bl	80051c4 <RCCEx_PLLSAI2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a7a:	4b52      	ldr	r3, [pc, #328]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	494e      	ldr	r1, [pc, #312]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 809f 	beq.w	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aa8:	4b46      	ldr	r3, [pc, #280]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004abe:	4b41      	ldr	r3, [pc, #260]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac2:	4a40      	ldr	r2, [pc, #256]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aca:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ada:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3a      	ldr	r2, [pc, #232]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fea7 	bl	8001838 <HAL_GetTick>
 8004aea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aec:	e009      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aee:	f7fc fea3 	bl	8001838 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d902      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	74fb      	strb	r3, [r7, #19]
        break;
 8004b00:	e005      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ef      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d15b      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b14:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01f      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d019      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b32:	4b24      	ldr	r3, [pc, #144]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b3e:	4b21      	ldr	r3, [pc, #132]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b54:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b5e:	4a19      	ldr	r2, [pc, #100]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d016      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fc fe62 	bl	8001838 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b76:	e00b      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fc fe5e 	bl	8001838 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d902      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b8e:	e006      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ec      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba4:	4b07      	ldr	r3, [pc, #28]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004baa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb4:	4903      	ldr	r1, [pc, #12]	@ (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bbe:	7cfb      	ldrb	r3, [r7, #19]
 8004bc0:	74bb      	strb	r3, [r7, #18]
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd0:	7c7b      	ldrb	r3, [r7, #17]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd6:	4ba0      	ldr	r3, [pc, #640]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bda:	4a9f      	ldr	r2, [pc, #636]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bee:	4b9a      	ldr	r3, [pc, #616]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f023 0203 	bic.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	4996      	ldr	r1, [pc, #600]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c10:	4b91      	ldr	r3, [pc, #580]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	f023 020c 	bic.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	498e      	ldr	r1, [pc, #568]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c32:	4b89      	ldr	r3, [pc, #548]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c40:	4985      	ldr	r1, [pc, #532]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c54:	4b80      	ldr	r3, [pc, #512]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c62:	497d      	ldr	r1, [pc, #500]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c76:	4b78      	ldr	r3, [pc, #480]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c84:	4974      	ldr	r1, [pc, #464]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c98:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca6:	496c      	ldr	r1, [pc, #432]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cba:	4b67      	ldr	r3, [pc, #412]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc8:	4963      	ldr	r1, [pc, #396]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cea:	495b      	ldr	r1, [pc, #364]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfe:	4b56      	ldr	r3, [pc, #344]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0c:	4952      	ldr	r1, [pc, #328]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d20:	4b4d      	ldr	r3, [pc, #308]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	494a      	ldr	r1, [pc, #296]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d42:	4b45      	ldr	r3, [pc, #276]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	4941      	ldr	r1, [pc, #260]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d64:	4b3c      	ldr	r3, [pc, #240]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d72:	4939      	ldr	r1, [pc, #228]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d028      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d86:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d94:	4930      	ldr	r1, [pc, #192]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004da4:	d106      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db0:	60d3      	str	r3, [r2, #12]
 8004db2:	e011      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 f909 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dce:	7cfb      	ldrb	r3, [r7, #19]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d04d      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dec:	d108      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004dee:	4b1a      	ldr	r3, [pc, #104]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004df4:	4a18      	ldr	r2, [pc, #96]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dfa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004dfe:	e012      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004e00:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e06:	4a14      	ldr	r2, [pc, #80]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e10:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e1e:	490e      	ldr	r1, [pc, #56]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2e:	d106      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a08      	ldr	r2, [pc, #32]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
 8004e3c:	e020      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e46:	d109      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e48:	4b03      	ldr	r3, [pc, #12]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a02      	ldr	r2, [pc, #8]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e52:	60d3      	str	r3, [r2, #12]
 8004e54:	e014      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f8b5 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e76:	7cfb      	ldrb	r3, [r7, #19]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d028      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9a:	4947      	ldr	r1, [pc, #284]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ea6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eaa:	d106      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eac:	4b42      	ldr	r3, [pc, #264]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb6:	60d3      	str	r3, [r2, #12]
 8004eb8:	e011      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec2:	d10c      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f886 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01e      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eea:	4b33      	ldr	r3, [pc, #204]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004efa:	492f      	ldr	r1, [pc, #188]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2102      	movs	r1, #2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 f861 	bl	8004fdc <RCCEx_PLLSAI1_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1e:	7cfb      	ldrb	r3, [r7, #19]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f34:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f3a:	f023 0204 	bic.w	r2, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f44:	491c      	ldr	r1, [pc, #112]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f58:	4b17      	ldr	r3, [pc, #92]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f5e:	f023 0218 	bic.w	r2, r3, #24
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	4913      	ldr	r1, [pc, #76]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f8c:	490a      	ldr	r1, [pc, #40]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40021000 	.word	0x40021000

08004fdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fea:	4b72      	ldr	r3, [pc, #456]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0303 	and.w	r3, r3, #3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00e      	beq.n	8005014 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f003 0203 	and.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d103      	bne.n	800500e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
       ||
 800500a:	2b00      	cmp	r3, #0
 800500c:	d142      	bne.n	8005094 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e03f      	b.n	8005094 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d018      	beq.n	800504e <RCCEx_PLLSAI1_Config+0x72>
 800501c:	2b03      	cmp	r3, #3
 800501e:	d825      	bhi.n	800506c <RCCEx_PLLSAI1_Config+0x90>
 8005020:	2b01      	cmp	r3, #1
 8005022:	d002      	beq.n	800502a <RCCEx_PLLSAI1_Config+0x4e>
 8005024:	2b02      	cmp	r3, #2
 8005026:	d009      	beq.n	800503c <RCCEx_PLLSAI1_Config+0x60>
 8005028:	e020      	b.n	800506c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800502a:	4b62      	ldr	r3, [pc, #392]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11d      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503a:	e01a      	b.n	8005072 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800503c:	4b5d      	ldr	r3, [pc, #372]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d116      	bne.n	8005076 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504c:	e013      	b.n	8005076 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504e:	4b59      	ldr	r3, [pc, #356]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800505a:	4b56      	ldr	r3, [pc, #344]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800506a:	e006      	b.n	800507a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	e004      	b.n	800507c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005072:	bf00      	nop
 8005074:	e002      	b.n	800507c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800507a:	bf00      	nop
    }

    if(status == HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d108      	bne.n	8005094 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005082:	4b4c      	ldr	r3, [pc, #304]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4949      	ldr	r1, [pc, #292]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8086 	bne.w	80051a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800509c:	4b45      	ldr	r3, [pc, #276]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a44      	ldr	r2, [pc, #272]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fc fbc6 	bl	8001838 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b0:	f7fc fbc2 	bl	8001838 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
        break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c4:	4b3b      	ldr	r3, [pc, #236]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1ef      	bne.n	80050b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d168      	bne.n	80051a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d113      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050dc:	4b35      	ldr	r3, [pc, #212]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	0211      	lsls	r1, r2, #8
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	06d2      	lsls	r2, r2, #27
 80050f0:	4311      	orrs	r1, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6852      	ldr	r2, [r2, #4]
 80050f6:	3a01      	subs	r2, #1
 80050f8:	0112      	lsls	r2, r2, #4
 80050fa:	430a      	orrs	r2, r1
 80050fc:	492d      	ldr	r1, [pc, #180]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	610b      	str	r3, [r1, #16]
 8005102:	e02d      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d115      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800510a:	4b2a      	ldr	r3, [pc, #168]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	4b2b      	ldr	r3, [pc, #172]	@ (80051bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6892      	ldr	r2, [r2, #8]
 8005116:	0211      	lsls	r1, r2, #8
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6912      	ldr	r2, [r2, #16]
 800511c:	0852      	lsrs	r2, r2, #1
 800511e:	3a01      	subs	r2, #1
 8005120:	0552      	lsls	r2, r2, #21
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6852      	ldr	r2, [r2, #4]
 8005128:	3a01      	subs	r2, #1
 800512a:	0112      	lsls	r2, r2, #4
 800512c:	430a      	orrs	r2, r1
 800512e:	4921      	ldr	r1, [pc, #132]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	610b      	str	r3, [r1, #16]
 8005134:	e014      	b.n	8005160 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005136:	4b1f      	ldr	r3, [pc, #124]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005138:	691a      	ldr	r2, [r3, #16]
 800513a:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513c:	4013      	ands	r3, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	0211      	lsls	r1, r2, #8
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6952      	ldr	r2, [r2, #20]
 8005148:	0852      	lsrs	r2, r2, #1
 800514a:	3a01      	subs	r2, #1
 800514c:	0652      	lsls	r2, r2, #25
 800514e:	4311      	orrs	r1, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6852      	ldr	r2, [r2, #4]
 8005154:	3a01      	subs	r2, #1
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	430a      	orrs	r2, r1
 800515a:	4916      	ldr	r1, [pc, #88]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005160:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a13      	ldr	r2, [pc, #76]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005166:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800516a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fc fb64 	bl	8001838 <HAL_GetTick>
 8005170:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005172:	e009      	b.n	8005188 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005174:	f7fc fb60 	bl	8001838 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d902      	bls.n	8005188 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	73fb      	strb	r3, [r7, #15]
          break;
 8005186:	e005      	b.n	8005194 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005188:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0ef      	beq.n	8005174 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	4904      	ldr	r1, [pc, #16]	@ (80051b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	07ff800f 	.word	0x07ff800f
 80051bc:	ff9f800f 	.word	0xff9f800f
 80051c0:	f9ff800f 	.word	0xf9ff800f

080051c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051d2:	4b72      	ldr	r3, [pc, #456]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80051de:	4b6f      	ldr	r3, [pc, #444]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0203 	and.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d103      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
       ||
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d142      	bne.n	800527c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e03f      	b.n	800527c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d018      	beq.n	8005236 <RCCEx_PLLSAI2_Config+0x72>
 8005204:	2b03      	cmp	r3, #3
 8005206:	d825      	bhi.n	8005254 <RCCEx_PLLSAI2_Config+0x90>
 8005208:	2b01      	cmp	r3, #1
 800520a:	d002      	beq.n	8005212 <RCCEx_PLLSAI2_Config+0x4e>
 800520c:	2b02      	cmp	r3, #2
 800520e:	d009      	beq.n	8005224 <RCCEx_PLLSAI2_Config+0x60>
 8005210:	e020      	b.n	8005254 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005212:	4b62      	ldr	r3, [pc, #392]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d11d      	bne.n	800525a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005222:	e01a      	b.n	800525a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005224:	4b5d      	ldr	r3, [pc, #372]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522c:	2b00      	cmp	r3, #0
 800522e:	d116      	bne.n	800525e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005234:	e013      	b.n	800525e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005236:	4b59      	ldr	r3, [pc, #356]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10f      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005242:	4b56      	ldr	r3, [pc, #344]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005252:	e006      	b.n	8005262 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e004      	b.n	8005264 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005262:	bf00      	nop
    }

    if(status == HAL_OK)
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800526a:	4b4c      	ldr	r3, [pc, #304]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4949      	ldr	r1, [pc, #292]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 8086 	bne.w	8005390 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005284:	4b45      	ldr	r3, [pc, #276]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a44      	ldr	r2, [pc, #272]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800528e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005290:	f7fc fad2 	bl	8001838 <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005296:	e009      	b.n	80052ac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005298:	f7fc face 	bl	8001838 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d902      	bls.n	80052ac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
        break;
 80052aa:	e005      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052ac:	4b3b      	ldr	r3, [pc, #236]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1ef      	bne.n	8005298 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d168      	bne.n	8005390 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d113      	bne.n	80052ec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052c4:	4b35      	ldr	r3, [pc, #212]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	4b35      	ldr	r3, [pc, #212]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6892      	ldr	r2, [r2, #8]
 80052d0:	0211      	lsls	r1, r2, #8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68d2      	ldr	r2, [r2, #12]
 80052d6:	06d2      	lsls	r2, r2, #27
 80052d8:	4311      	orrs	r1, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6852      	ldr	r2, [r2, #4]
 80052de:	3a01      	subs	r2, #1
 80052e0:	0112      	lsls	r2, r2, #4
 80052e2:	430a      	orrs	r2, r1
 80052e4:	492d      	ldr	r1, [pc, #180]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	614b      	str	r3, [r1, #20]
 80052ea:	e02d      	b.n	8005348 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d115      	bne.n	800531e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052f2:	4b2a      	ldr	r3, [pc, #168]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	4b2b      	ldr	r3, [pc, #172]	@ (80053a4 <RCCEx_PLLSAI2_Config+0x1e0>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6892      	ldr	r2, [r2, #8]
 80052fe:	0211      	lsls	r1, r2, #8
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6912      	ldr	r2, [r2, #16]
 8005304:	0852      	lsrs	r2, r2, #1
 8005306:	3a01      	subs	r2, #1
 8005308:	0552      	lsls	r2, r2, #21
 800530a:	4311      	orrs	r1, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6852      	ldr	r2, [r2, #4]
 8005310:	3a01      	subs	r2, #1
 8005312:	0112      	lsls	r2, r2, #4
 8005314:	430a      	orrs	r2, r1
 8005316:	4921      	ldr	r1, [pc, #132]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	614b      	str	r3, [r1, #20]
 800531c:	e014      	b.n	8005348 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800531e:	4b1f      	ldr	r3, [pc, #124]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005320:	695a      	ldr	r2, [r3, #20]
 8005322:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005324:	4013      	ands	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0211      	lsls	r1, r2, #8
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6952      	ldr	r2, [r2, #20]
 8005330:	0852      	lsrs	r2, r2, #1
 8005332:	3a01      	subs	r2, #1
 8005334:	0652      	lsls	r2, r2, #25
 8005336:	4311      	orrs	r1, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6852      	ldr	r2, [r2, #4]
 800533c:	3a01      	subs	r2, #1
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	430a      	orrs	r2, r1
 8005342:	4916      	ldr	r1, [pc, #88]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005352:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fc fa70 	bl	8001838 <HAL_GetTick>
 8005358:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800535a:	e009      	b.n	8005370 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800535c:	f7fc fa6c 	bl	8001838 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d902      	bls.n	8005370 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	73fb      	strb	r3, [r7, #15]
          break;
 800536e:	e005      	b.n	800537c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0ef      	beq.n	800535c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005382:	4b06      	ldr	r3, [pc, #24]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	4904      	ldr	r1, [pc, #16]	@ (800539c <RCCEx_PLLSAI2_Config+0x1d8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	07ff800f 	.word	0x07ff800f
 80053a4:	ff9f800f 	.word	0xff9f800f
 80053a8:	f9ff800f 	.word	0xf9ff800f

080053ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e095      	b.n	80054ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d108      	bne.n	80053d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ce:	d009      	beq.n	80053e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	61da      	str	r2, [r3, #28]
 80053d6:	e005      	b.n	80053e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fb ff7e 	bl	8001300 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800541a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005424:	d902      	bls.n	800542c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e002      	b.n	8005432 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800542c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800543a:	d007      	beq.n	800544c <HAL_SPI_Init+0xa0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005444:	d002      	beq.n	800544c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	ea42 0103 	orr.w	r1, r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005496:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	0c1b      	lsrs	r3, r3, #16
 80054a8:	f003 0204 	and.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054c8:	ea42 0103 	orr.w	r1, r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e042      	b.n	800558a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb ff68 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	@ 0x24
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fb25 	bl	8005b8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f826 	bl	8005594 <UART_SetConfig>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01b      	b.n	800558a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005560:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005570:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fba4 	bl	8005cd0 <UART_CheckIdleState>
 8005588:	4603      	mov	r3, r0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b08c      	sub	sp, #48	@ 0x30
 800559a:	af00      	add	r7, sp, #0
 800559c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4baa      	ldr	r3, [pc, #680]	@ (800586c <UART_SetConfig+0x2d8>)
 80055c4:	4013      	ands	r3, r2
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055cc:	430b      	orrs	r3, r1
 80055ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005870 <UART_SetConfig+0x2dc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055fc:	4313      	orrs	r3, r2
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800560a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561e:	f023 010f 	bic.w	r1, r3, #15
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a90      	ldr	r2, [pc, #576]	@ (8005874 <UART_SetConfig+0x2e0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d125      	bne.n	8005684 <UART_SetConfig+0xf0>
 8005638:	4b8f      	ldr	r3, [pc, #572]	@ (8005878 <UART_SetConfig+0x2e4>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d81a      	bhi.n	800567c <UART_SetConfig+0xe8>
 8005646:	a201      	add	r2, pc, #4	@ (adr r2, 800564c <UART_SetConfig+0xb8>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566d 	.word	0x0800566d
 8005654:	08005665 	.word	0x08005665
 8005658:	08005675 	.word	0x08005675
 800565c:	2301      	movs	r3, #1
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005662:	e116      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566a:	e112      	b.n	8005892 <UART_SetConfig+0x2fe>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e10e      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e10a      	b.n	8005892 <UART_SetConfig+0x2fe>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e106      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7c      	ldr	r2, [pc, #496]	@ (800587c <UART_SetConfig+0x2e8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d138      	bne.n	8005700 <UART_SetConfig+0x16c>
 800568e:	4b7a      	ldr	r3, [pc, #488]	@ (8005878 <UART_SetConfig+0x2e4>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d82d      	bhi.n	80056f8 <UART_SetConfig+0x164>
 800569c:	a201      	add	r2, pc, #4	@ (adr r2, 80056a4 <UART_SetConfig+0x110>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056d9 	.word	0x080056d9
 80056a8:	080056f9 	.word	0x080056f9
 80056ac:	080056f9 	.word	0x080056f9
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	080056e9 	.word	0x080056e9
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056f9 	.word	0x080056f9
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	080056f1 	.word	0x080056f1
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e0d8      	b.n	8005892 <UART_SetConfig+0x2fe>
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e0d4      	b.n	8005892 <UART_SetConfig+0x2fe>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e0d0      	b.n	8005892 <UART_SetConfig+0x2fe>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e0cc      	b.n	8005892 <UART_SetConfig+0x2fe>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e0c8      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5e      	ldr	r2, [pc, #376]	@ (8005880 <UART_SetConfig+0x2ec>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d125      	bne.n	8005756 <UART_SetConfig+0x1c2>
 800570a:	4b5b      	ldr	r3, [pc, #364]	@ (8005878 <UART_SetConfig+0x2e4>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005710:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005714:	2b30      	cmp	r3, #48	@ 0x30
 8005716:	d016      	beq.n	8005746 <UART_SetConfig+0x1b2>
 8005718:	2b30      	cmp	r3, #48	@ 0x30
 800571a:	d818      	bhi.n	800574e <UART_SetConfig+0x1ba>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d00a      	beq.n	8005736 <UART_SetConfig+0x1a2>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d814      	bhi.n	800574e <UART_SetConfig+0x1ba>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <UART_SetConfig+0x19a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d008      	beq.n	800573e <UART_SetConfig+0x1aa>
 800572c:	e00f      	b.n	800574e <UART_SetConfig+0x1ba>
 800572e:	2300      	movs	r3, #0
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005734:	e0ad      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005736:	2302      	movs	r3, #2
 8005738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573c:	e0a9      	b.n	8005892 <UART_SetConfig+0x2fe>
 800573e:	2304      	movs	r3, #4
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005744:	e0a5      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005746:	2308      	movs	r3, #8
 8005748:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574c:	e0a1      	b.n	8005892 <UART_SetConfig+0x2fe>
 800574e:	2310      	movs	r3, #16
 8005750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005754:	e09d      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a4a      	ldr	r2, [pc, #296]	@ (8005884 <UART_SetConfig+0x2f0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d125      	bne.n	80057ac <UART_SetConfig+0x218>
 8005760:	4b45      	ldr	r3, [pc, #276]	@ (8005878 <UART_SetConfig+0x2e4>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800576a:	2bc0      	cmp	r3, #192	@ 0xc0
 800576c:	d016      	beq.n	800579c <UART_SetConfig+0x208>
 800576e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005770:	d818      	bhi.n	80057a4 <UART_SetConfig+0x210>
 8005772:	2b80      	cmp	r3, #128	@ 0x80
 8005774:	d00a      	beq.n	800578c <UART_SetConfig+0x1f8>
 8005776:	2b80      	cmp	r3, #128	@ 0x80
 8005778:	d814      	bhi.n	80057a4 <UART_SetConfig+0x210>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <UART_SetConfig+0x1f0>
 800577e:	2b40      	cmp	r3, #64	@ 0x40
 8005780:	d008      	beq.n	8005794 <UART_SetConfig+0x200>
 8005782:	e00f      	b.n	80057a4 <UART_SetConfig+0x210>
 8005784:	2300      	movs	r3, #0
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578a:	e082      	b.n	8005892 <UART_SetConfig+0x2fe>
 800578c:	2302      	movs	r3, #2
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e07e      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e07a      	b.n	8005892 <UART_SetConfig+0x2fe>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	e076      	b.n	8005892 <UART_SetConfig+0x2fe>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057aa:	e072      	b.n	8005892 <UART_SetConfig+0x2fe>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a35      	ldr	r2, [pc, #212]	@ (8005888 <UART_SetConfig+0x2f4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d12a      	bne.n	800580c <UART_SetConfig+0x278>
 80057b6:	4b30      	ldr	r3, [pc, #192]	@ (8005878 <UART_SetConfig+0x2e4>)
 80057b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057c4:	d01a      	beq.n	80057fc <UART_SetConfig+0x268>
 80057c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ca:	d81b      	bhi.n	8005804 <UART_SetConfig+0x270>
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d0:	d00c      	beq.n	80057ec <UART_SetConfig+0x258>
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057d6:	d815      	bhi.n	8005804 <UART_SetConfig+0x270>
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <UART_SetConfig+0x250>
 80057dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e0:	d008      	beq.n	80057f4 <UART_SetConfig+0x260>
 80057e2:	e00f      	b.n	8005804 <UART_SetConfig+0x270>
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e052      	b.n	8005892 <UART_SetConfig+0x2fe>
 80057ec:	2302      	movs	r3, #2
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e04e      	b.n	8005892 <UART_SetConfig+0x2fe>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	e04a      	b.n	8005892 <UART_SetConfig+0x2fe>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005802:	e046      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580a:	e042      	b.n	8005892 <UART_SetConfig+0x2fe>
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a17      	ldr	r2, [pc, #92]	@ (8005870 <UART_SetConfig+0x2dc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d13a      	bne.n	800588c <UART_SetConfig+0x2f8>
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <UART_SetConfig+0x2e4>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005820:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005824:	d01a      	beq.n	800585c <UART_SetConfig+0x2c8>
 8005826:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800582a:	d81b      	bhi.n	8005864 <UART_SetConfig+0x2d0>
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005830:	d00c      	beq.n	800584c <UART_SetConfig+0x2b8>
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005836:	d815      	bhi.n	8005864 <UART_SetConfig+0x2d0>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <UART_SetConfig+0x2b0>
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005840:	d008      	beq.n	8005854 <UART_SetConfig+0x2c0>
 8005842:	e00f      	b.n	8005864 <UART_SetConfig+0x2d0>
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e022      	b.n	8005892 <UART_SetConfig+0x2fe>
 800584c:	2302      	movs	r3, #2
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e01e      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e01a      	b.n	8005892 <UART_SetConfig+0x2fe>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005862:	e016      	b.n	8005892 <UART_SetConfig+0x2fe>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586a:	e012      	b.n	8005892 <UART_SetConfig+0x2fe>
 800586c:	cfff69f3 	.word	0xcfff69f3
 8005870:	40008000 	.word	0x40008000
 8005874:	40013800 	.word	0x40013800
 8005878:	40021000 	.word	0x40021000
 800587c:	40004400 	.word	0x40004400
 8005880:	40004800 	.word	0x40004800
 8005884:	40004c00 	.word	0x40004c00
 8005888:	40005000 	.word	0x40005000
 800588c:	2310      	movs	r3, #16
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4aae      	ldr	r2, [pc, #696]	@ (8005b50 <UART_SetConfig+0x5bc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	f040 8097 	bne.w	80059cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800589e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d823      	bhi.n	80058ee <UART_SetConfig+0x35a>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0x318>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058ef 	.word	0x080058ef
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058ef 	.word	0x080058ef
 80058bc:	080058df 	.word	0x080058df
 80058c0:	080058ef 	.word	0x080058ef
 80058c4:	080058ef 	.word	0x080058ef
 80058c8:	080058ef 	.word	0x080058ef
 80058cc:	080058e7 	.word	0x080058e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7fe ff58 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80058d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d6:	e010      	b.n	80058fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005b54 <UART_SetConfig+0x5c0>)
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058dc:	e00d      	b.n	80058fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058de:	f7fe feb9 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 80058e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058e4:	e009      	b.n	80058fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058ec:	e005      	b.n	80058fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8130 	beq.w	8005b62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	4a94      	ldr	r2, [pc, #592]	@ (8005b58 <UART_SetConfig+0x5c4>)
 8005908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590c:	461a      	mov	r2, r3
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	fbb3 f3f2 	udiv	r3, r3, r2
 8005914:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	429a      	cmp	r2, r3
 8005924:	d305      	bcc.n	8005932 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	429a      	cmp	r2, r3
 8005930:	d903      	bls.n	800593a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005938:	e113      	b.n	8005b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2200      	movs	r2, #0
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	60fa      	str	r2, [r7, #12]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	4a84      	ldr	r2, [pc, #528]	@ (8005b58 <UART_SetConfig+0x5c4>)
 8005948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594c:	b29b      	uxth	r3, r3
 800594e:	2200      	movs	r2, #0
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800595c:	f7fa fc4e 	bl	80001fc <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	020b      	lsls	r3, r1, #8
 8005972:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005976:	0202      	lsls	r2, r0, #8
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	6849      	ldr	r1, [r1, #4]
 800597c:	0849      	lsrs	r1, r1, #1
 800597e:	2000      	movs	r0, #0
 8005980:	460c      	mov	r4, r1
 8005982:	4605      	mov	r5, r0
 8005984:	eb12 0804 	adds.w	r8, r2, r4
 8005988:	eb43 0905 	adc.w	r9, r3, r5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	469a      	mov	sl, r3
 8005994:	4693      	mov	fp, r2
 8005996:	4652      	mov	r2, sl
 8005998:	465b      	mov	r3, fp
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fc2d 	bl	80001fc <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4613      	mov	r3, r2
 80059a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059b0:	d308      	bcc.n	80059c4 <UART_SetConfig+0x430>
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b8:	d204      	bcs.n	80059c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	60da      	str	r2, [r3, #12]
 80059c2:	e0ce      	b.n	8005b62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059ca:	e0ca      	b.n	8005b62 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	d166      	bne.n	8005aa4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d827      	bhi.n	8005a2e <UART_SetConfig+0x49a>
 80059de:	a201      	add	r2, pc, #4	@ (adr r2, 80059e4 <UART_SetConfig+0x450>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a09 	.word	0x08005a09
 80059e8:	08005a11 	.word	0x08005a11
 80059ec:	08005a19 	.word	0x08005a19
 80059f0:	08005a2f 	.word	0x08005a2f
 80059f4:	08005a1f 	.word	0x08005a1f
 80059f8:	08005a2f 	.word	0x08005a2f
 80059fc:	08005a2f 	.word	0x08005a2f
 8005a00:	08005a2f 	.word	0x08005a2f
 8005a04:	08005a27 	.word	0x08005a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe febc 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a0e:	e014      	b.n	8005a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a10:	f7fe fece 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8005a14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a16:	e010      	b.n	8005a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a18:	4b4e      	ldr	r3, [pc, #312]	@ (8005b54 <UART_SetConfig+0x5c0>)
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a1c:	e00d      	b.n	8005a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a1e:	f7fe fe19 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005a22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a2c:	e005      	b.n	8005a3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8090 	beq.w	8005b62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	4a44      	ldr	r2, [pc, #272]	@ (8005b58 <UART_SetConfig+0x5c4>)
 8005a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a54:	005a      	lsls	r2, r3, #1
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b0f      	cmp	r3, #15
 8005a6c:	d916      	bls.n	8005a9c <UART_SetConfig+0x508>
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a74:	d212      	bcs.n	8005a9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f023 030f 	bic.w	r3, r3, #15
 8005a7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	8bfb      	ldrh	r3, [r7, #30]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	8bfa      	ldrh	r2, [r7, #30]
 8005a98:	60da      	str	r2, [r3, #12]
 8005a9a:	e062      	b.n	8005b62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005aa2:	e05e      	b.n	8005b62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d828      	bhi.n	8005afe <UART_SetConfig+0x56a>
 8005aac:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab4 <UART_SetConfig+0x520>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fe fe54 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8005adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ade:	e014      	b.n	8005b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fe fe66 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae6:	e010      	b.n	8005b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b54 <UART_SetConfig+0x5c0>)
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aec:	e00d      	b.n	8005b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe fdb1 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8005af2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005af4:	e009      	b.n	8005b0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005afa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005afc:	e005      	b.n	8005b0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b08:	bf00      	nop
    }

    if (pclk != 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d028      	beq.n	8005b62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <UART_SetConfig+0x5c4>)
 8005b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	441a      	add	r2, r3
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d910      	bls.n	8005b5c <UART_SetConfig+0x5c8>
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d20c      	bcs.n	8005b5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	e009      	b.n	8005b62 <UART_SetConfig+0x5ce>
 8005b4e:	bf00      	nop
 8005b50:	40008000 	.word	0x40008000
 8005b54:	00f42400 	.word	0x00f42400
 8005b58:	08006288 	.word	0x08006288
      }
      else
      {
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2200      	movs	r2, #0
 8005b76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3730      	adds	r7, #48	@ 0x30
 8005b86:	46bd      	mov	sp, r7
 8005b88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c8a:	d10a      	bne.n	8005ca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b098      	sub	sp, #96	@ 0x60
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ce0:	f7fb fdaa 	bl	8001838 <HAL_GetTick>
 8005ce4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d12f      	bne.n	8005d54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f88e 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d022      	beq.n	8005d54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e063      	b.n	8005e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d149      	bne.n	8005df6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f857 	bl	8005e24 <UART_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d03c      	beq.n	8005df6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e6      	bne.n	8005d7c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3308      	adds	r3, #8
 8005dcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dce:	61fa      	str	r2, [r7, #28]
 8005dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	617b      	str	r3, [r7, #20]
   return(result);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e012      	b.n	8005e1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3758      	adds	r7, #88	@ 0x58
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e34:	e04f      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d04b      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3e:	f7fb fcfb 	bl	8001838 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e04e      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d037      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b80      	cmp	r3, #128	@ 0x80
 8005e6a:	d034      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d031      	beq.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d110      	bne.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f838 	bl	8005efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2208      	movs	r2, #8
 8005e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e029      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb0:	d111      	bne.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f81e 	bl	8005efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e00f      	b.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d0a0      	beq.n	8005e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b095      	sub	sp, #84	@ 0x54
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f26:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e6      	bne.n	8005f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e3      	bne.n	8005f38 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d118      	bne.n	8005faa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f023 0310 	bic.w	r3, r3, #16
 8005f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6979      	ldr	r1, [r7, #20]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005fbe:	bf00      	nop
 8005fc0:	3754      	adds	r7, #84	@ 0x54
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e027      	b.n	8006030 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	@ 0x24
 8005fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800600e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e02d      	b.n	80060b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	@ 0x24
 8006060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f84f 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e02d      	b.n	800612c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	@ 0x24
 80060dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f811 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006154:	e031      	b.n	80061ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006156:	2308      	movs	r3, #8
 8006158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800615a:	2308      	movs	r3, #8
 800615c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	0e5b      	lsrs	r3, r3, #25
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	0f5b      	lsrs	r3, r3, #29
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	7b3a      	ldrb	r2, [r7, #12]
 8006182:	4911      	ldr	r1, [pc, #68]	@ (80061c8 <UARTEx_SetNbDataToProcess+0x94>)
 8006184:	5c8a      	ldrb	r2, [r1, r2]
 8006186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800618a:	7b3a      	ldrb	r2, [r7, #12]
 800618c:	490f      	ldr	r1, [pc, #60]	@ (80061cc <UARTEx_SetNbDataToProcess+0x98>)
 800618e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006190:	fb93 f3f2 	sdiv	r3, r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	7b7a      	ldrb	r2, [r7, #13]
 80061a0:	4909      	ldr	r1, [pc, #36]	@ (80061c8 <UARTEx_SetNbDataToProcess+0x94>)
 80061a2:	5c8a      	ldrb	r2, [r1, r2]
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061a8:	7b7a      	ldrb	r2, [r7, #13]
 80061aa:	4908      	ldr	r1, [pc, #32]	@ (80061cc <UARTEx_SetNbDataToProcess+0x98>)
 80061ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	080062a0 	.word	0x080062a0
 80061cc:	080062a8 	.word	0x080062a8

080061d0 <memset>:
 80061d0:	4402      	add	r2, r0
 80061d2:	4603      	mov	r3, r0
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d100      	bne.n	80061da <memset+0xa>
 80061d8:	4770      	bx	lr
 80061da:	f803 1b01 	strb.w	r1, [r3], #1
 80061de:	e7f9      	b.n	80061d4 <memset+0x4>

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	@ (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 f818 	bl	8006228 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	080062b8 	.word	0x080062b8
 800621c:	080062b8 	.word	0x080062b8
 8006220:	080062b8 	.word	0x080062b8
 8006224:	080062bc 	.word	0x080062bc

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
