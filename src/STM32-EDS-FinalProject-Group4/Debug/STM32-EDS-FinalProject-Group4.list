
STM32-EDS-FinalProject-Group4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008490  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008650  08008650  00009650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008728  08008728  0000a128  2**0
                  CONTENTS
  4 .ARM          00000008  08008728  08008728  00009728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008730  08008730  0000a128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008734  08008734  00009734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  08008738  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  20000128  08008860  0000a128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08008860  0000a834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001baae  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b6  00000000  00000000  00025c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00028fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001246  00000000  00000000  0002a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e55f  00000000  00000000  0002b99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c996  00000000  00000000  00059efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e9e5  00000000  00000000  00076893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195278  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a2c  00000000  00000000  001952bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0019bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000128 	.word	0x20000128
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008638 	.word	0x08008638

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000012c 	.word	0x2000012c
 80001fc:	08008638 	.word	0x08008638

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96a 	b.w	8000954 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	460c      	mov	r4, r1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d14e      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a4:	4694      	mov	ip, r2
 80006a6:	458c      	cmp	ip, r1
 80006a8:	4686      	mov	lr, r0
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	d962      	bls.n	8000776 <__udivmoddi4+0xde>
 80006b0:	b14a      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b2:	f1c2 0320 	rsb	r3, r2, #32
 80006b6:	4091      	lsls	r1, r2
 80006b8:	fa20 f303 	lsr.w	r3, r0, r3
 80006bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c0:	4319      	orrs	r1, r3
 80006c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ca:	fa1f f68c 	uxth.w	r6, ip
 80006ce:	fbb1 f4f7 	udiv	r4, r1, r7
 80006d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006d6:	fb07 1114 	mls	r1, r7, r4, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb04 f106 	mul.w	r1, r4, r6
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ee:	f080 8112 	bcs.w	8000916 <__udivmoddi4+0x27e>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 810f 	bls.w	8000916 <__udivmoddi4+0x27e>
 80006f8:	3c02      	subs	r4, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a59      	subs	r1, r3, r1
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb1 f0f7 	udiv	r0, r1, r7
 8000706:	fb07 1110 	mls	r1, r7, r0, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb00 f606 	mul.w	r6, r0, r6
 8000712:	429e      	cmp	r6, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x94>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 31ff 	add.w	r1, r0, #4294967295
 800071e:	f080 80fc 	bcs.w	800091a <__udivmoddi4+0x282>
 8000722:	429e      	cmp	r6, r3
 8000724:	f240 80f9 	bls.w	800091a <__udivmoddi4+0x282>
 8000728:	4463      	add	r3, ip
 800072a:	3802      	subs	r0, #2
 800072c:	1b9b      	subs	r3, r3, r6
 800072e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000732:	2100      	movs	r1, #0
 8000734:	b11d      	cbz	r5, 800073e <__udivmoddi4+0xa6>
 8000736:	40d3      	lsrs	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	e9c5 3200 	strd	r3, r2, [r5]
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d905      	bls.n	8000752 <__udivmoddi4+0xba>
 8000746:	b10d      	cbz	r5, 800074c <__udivmoddi4+0xb4>
 8000748:	e9c5 0100 	strd	r0, r1, [r5]
 800074c:	2100      	movs	r1, #0
 800074e:	4608      	mov	r0, r1
 8000750:	e7f5      	b.n	800073e <__udivmoddi4+0xa6>
 8000752:	fab3 f183 	clz	r1, r3
 8000756:	2900      	cmp	r1, #0
 8000758:	d146      	bne.n	80007e8 <__udivmoddi4+0x150>
 800075a:	42a3      	cmp	r3, r4
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xcc>
 800075e:	4290      	cmp	r0, r2
 8000760:	f0c0 80f0 	bcc.w	8000944 <__udivmoddi4+0x2ac>
 8000764:	1a86      	subs	r6, r0, r2
 8000766:	eb64 0303 	sbc.w	r3, r4, r3
 800076a:	2001      	movs	r0, #1
 800076c:	2d00      	cmp	r5, #0
 800076e:	d0e6      	beq.n	800073e <__udivmoddi4+0xa6>
 8000770:	e9c5 6300 	strd	r6, r3, [r5]
 8000774:	e7e3      	b.n	800073e <__udivmoddi4+0xa6>
 8000776:	2a00      	cmp	r2, #0
 8000778:	f040 8090 	bne.w	800089c <__udivmoddi4+0x204>
 800077c:	eba1 040c 	sub.w	r4, r1, ip
 8000780:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000784:	fa1f f78c 	uxth.w	r7, ip
 8000788:	2101      	movs	r1, #1
 800078a:	fbb4 f6f8 	udiv	r6, r4, r8
 800078e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000792:	fb08 4416 	mls	r4, r8, r6, r4
 8000796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800079a:	fb07 f006 	mul.w	r0, r7, r6
 800079e:	4298      	cmp	r0, r3
 80007a0:	d908      	bls.n	80007b4 <__udivmoddi4+0x11c>
 80007a2:	eb1c 0303 	adds.w	r3, ip, r3
 80007a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x11a>
 80007ac:	4298      	cmp	r0, r3
 80007ae:	f200 80cd 	bhi.w	800094c <__udivmoddi4+0x2b4>
 80007b2:	4626      	mov	r6, r4
 80007b4:	1a1c      	subs	r4, r3, r0
 80007b6:	fa1f f38e 	uxth.w	r3, lr
 80007ba:	fbb4 f0f8 	udiv	r0, r4, r8
 80007be:	fb08 4410 	mls	r4, r8, r0, r4
 80007c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007c6:	fb00 f707 	mul.w	r7, r0, r7
 80007ca:	429f      	cmp	r7, r3
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x148>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007d6:	d202      	bcs.n	80007de <__udivmoddi4+0x146>
 80007d8:	429f      	cmp	r7, r3
 80007da:	f200 80b0 	bhi.w	800093e <__udivmoddi4+0x2a6>
 80007de:	4620      	mov	r0, r4
 80007e0:	1bdb      	subs	r3, r3, r7
 80007e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e6:	e7a5      	b.n	8000734 <__udivmoddi4+0x9c>
 80007e8:	f1c1 0620 	rsb	r6, r1, #32
 80007ec:	408b      	lsls	r3, r1
 80007ee:	fa22 f706 	lsr.w	r7, r2, r6
 80007f2:	431f      	orrs	r7, r3
 80007f4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007f8:	fa04 f301 	lsl.w	r3, r4, r1
 80007fc:	ea43 030c 	orr.w	r3, r3, ip
 8000800:	40f4      	lsrs	r4, r6
 8000802:	fa00 f801 	lsl.w	r8, r0, r1
 8000806:	0c38      	lsrs	r0, r7, #16
 8000808:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800080c:	fbb4 fef0 	udiv	lr, r4, r0
 8000810:	fa1f fc87 	uxth.w	ip, r7
 8000814:	fb00 441e 	mls	r4, r0, lr, r4
 8000818:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800081c:	fb0e f90c 	mul.w	r9, lr, ip
 8000820:	45a1      	cmp	r9, r4
 8000822:	fa02 f201 	lsl.w	r2, r2, r1
 8000826:	d90a      	bls.n	800083e <__udivmoddi4+0x1a6>
 8000828:	193c      	adds	r4, r7, r4
 800082a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800082e:	f080 8084 	bcs.w	800093a <__udivmoddi4+0x2a2>
 8000832:	45a1      	cmp	r9, r4
 8000834:	f240 8081 	bls.w	800093a <__udivmoddi4+0x2a2>
 8000838:	f1ae 0e02 	sub.w	lr, lr, #2
 800083c:	443c      	add	r4, r7
 800083e:	eba4 0409 	sub.w	r4, r4, r9
 8000842:	fa1f f983 	uxth.w	r9, r3
 8000846:	fbb4 f3f0 	udiv	r3, r4, r0
 800084a:	fb00 4413 	mls	r4, r0, r3, r4
 800084e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000852:	fb03 fc0c 	mul.w	ip, r3, ip
 8000856:	45a4      	cmp	ip, r4
 8000858:	d907      	bls.n	800086a <__udivmoddi4+0x1d2>
 800085a:	193c      	adds	r4, r7, r4
 800085c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000860:	d267      	bcs.n	8000932 <__udivmoddi4+0x29a>
 8000862:	45a4      	cmp	ip, r4
 8000864:	d965      	bls.n	8000932 <__udivmoddi4+0x29a>
 8000866:	3b02      	subs	r3, #2
 8000868:	443c      	add	r4, r7
 800086a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800086e:	fba0 9302 	umull	r9, r3, r0, r2
 8000872:	eba4 040c 	sub.w	r4, r4, ip
 8000876:	429c      	cmp	r4, r3
 8000878:	46ce      	mov	lr, r9
 800087a:	469c      	mov	ip, r3
 800087c:	d351      	bcc.n	8000922 <__udivmoddi4+0x28a>
 800087e:	d04e      	beq.n	800091e <__udivmoddi4+0x286>
 8000880:	b155      	cbz	r5, 8000898 <__udivmoddi4+0x200>
 8000882:	ebb8 030e 	subs.w	r3, r8, lr
 8000886:	eb64 040c 	sbc.w	r4, r4, ip
 800088a:	fa04 f606 	lsl.w	r6, r4, r6
 800088e:	40cb      	lsrs	r3, r1
 8000890:	431e      	orrs	r6, r3
 8000892:	40cc      	lsrs	r4, r1
 8000894:	e9c5 6400 	strd	r6, r4, [r5]
 8000898:	2100      	movs	r1, #0
 800089a:	e750      	b.n	800073e <__udivmoddi4+0xa6>
 800089c:	f1c2 0320 	rsb	r3, r2, #32
 80008a0:	fa20 f103 	lsr.w	r1, r0, r3
 80008a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008a8:	fa24 f303 	lsr.w	r3, r4, r3
 80008ac:	4094      	lsls	r4, r2
 80008ae:	430c      	orrs	r4, r1
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008b8:	fa1f f78c 	uxth.w	r7, ip
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3110 	mls	r1, r8, r0, r3
 80008c4:	0c23      	lsrs	r3, r4, #16
 80008c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ca:	fb00 f107 	mul.w	r1, r0, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x24c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008da:	d22c      	bcs.n	8000936 <__udivmoddi4+0x29e>
 80008dc:	4299      	cmp	r1, r3
 80008de:	d92a      	bls.n	8000936 <__udivmoddi4+0x29e>
 80008e0:	3802      	subs	r0, #2
 80008e2:	4463      	add	r3, ip
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008ec:	fb08 3311 	mls	r3, r8, r1, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb01 f307 	mul.w	r3, r1, r7
 80008f8:	42a3      	cmp	r3, r4
 80008fa:	d908      	bls.n	800090e <__udivmoddi4+0x276>
 80008fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000900:	f101 36ff 	add.w	r6, r1, #4294967295
 8000904:	d213      	bcs.n	800092e <__udivmoddi4+0x296>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d911      	bls.n	800092e <__udivmoddi4+0x296>
 800090a:	3902      	subs	r1, #2
 800090c:	4464      	add	r4, ip
 800090e:	1ae4      	subs	r4, r4, r3
 8000910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000914:	e739      	b.n	800078a <__udivmoddi4+0xf2>
 8000916:	4604      	mov	r4, r0
 8000918:	e6f0      	b.n	80006fc <__udivmoddi4+0x64>
 800091a:	4608      	mov	r0, r1
 800091c:	e706      	b.n	800072c <__udivmoddi4+0x94>
 800091e:	45c8      	cmp	r8, r9
 8000920:	d2ae      	bcs.n	8000880 <__udivmoddi4+0x1e8>
 8000922:	ebb9 0e02 	subs.w	lr, r9, r2
 8000926:	eb63 0c07 	sbc.w	ip, r3, r7
 800092a:	3801      	subs	r0, #1
 800092c:	e7a8      	b.n	8000880 <__udivmoddi4+0x1e8>
 800092e:	4631      	mov	r1, r6
 8000930:	e7ed      	b.n	800090e <__udivmoddi4+0x276>
 8000932:	4603      	mov	r3, r0
 8000934:	e799      	b.n	800086a <__udivmoddi4+0x1d2>
 8000936:	4630      	mov	r0, r6
 8000938:	e7d4      	b.n	80008e4 <__udivmoddi4+0x24c>
 800093a:	46d6      	mov	lr, sl
 800093c:	e77f      	b.n	800083e <__udivmoddi4+0x1a6>
 800093e:	4463      	add	r3, ip
 8000940:	3802      	subs	r0, #2
 8000942:	e74d      	b.n	80007e0 <__udivmoddi4+0x148>
 8000944:	4606      	mov	r6, r0
 8000946:	4623      	mov	r3, r4
 8000948:	4608      	mov	r0, r1
 800094a:	e70f      	b.n	800076c <__udivmoddi4+0xd4>
 800094c:	3e02      	subs	r6, #2
 800094e:	4463      	add	r3, ip
 8000950:	e730      	b.n	80007b4 <__udivmoddi4+0x11c>
 8000952:	bf00      	nop

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	@ 0x28
 800095c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f001 fd85 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f8c7 	bl	8000af4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000966:	f000 f927 	bl	8000bb8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 fc7d 	bl	8001268 <MX_GPIO_Init>
  MX_ADC1_Init();
 800096e:	f000 f953 	bl	8000c18 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000972:	f000 f9b5 	bl	8000ce0 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000976:	f000 f9eb 	bl	8000d50 <MX_I2C1_Init>
  MX_I2C2_Init();
 800097a:	f000 fa29 	bl	8000dd0 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800097e:	f000 fa67 	bl	8000e50 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000982:	f000 fabb 	bl	8000efc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000986:	f000 faf7 	bl	8000f78 <MX_SPI3_Init>
  MX_UART4_Init();
 800098a:	f000 fb33 	bl	8000ff4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800098e:	f000 fb7d 	bl	800108c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000992:	f000 fbc7 	bl	8001124 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000996:	f000 fc13 	bl	80011c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800099a:	f000 fc5d 	bl	8001258 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800099e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a2:	223b      	movs	r2, #59	@ 0x3b
 80009a4:	494a      	ldr	r1, [pc, #296]	@ (8000ad0 <main+0x178>)
 80009a6:	484b      	ldr	r0, [pc, #300]	@ (8000ad4 <main+0x17c>)
 80009a8:	f006 faab 	bl	8006f02 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80009ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b0:	2238      	movs	r2, #56	@ 0x38
 80009b2:	4949      	ldr	r1, [pc, #292]	@ (8000ad8 <main+0x180>)
 80009b4:	4847      	ldr	r0, [pc, #284]	@ (8000ad4 <main+0x17c>)
 80009b6:	f006 faa4 	bl	8006f02 <HAL_UART_Transmit>
  BSP_TSENSOR_Init(); // Initialize Temperature sensor
 80009ba:	f001 fb9b 	bl	80020f4 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init(); // Initialize Humidity sensor
 80009be:	f001 fb6b 	bl	8002098 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	223a      	movs	r2, #58	@ 0x3a
 80009c8:	4944      	ldr	r1, [pc, #272]	@ (8000adc <main+0x184>)
 80009ca:	4842      	ldr	r0, [pc, #264]	@ (8000ad4 <main+0x17c>)
 80009cc:	f006 fa99 	bl	8006f02 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    temp_value = BSP_TSENSOR_ReadTemp(); // Read Temperature
 80009d0:	f001 fbac 	bl	800212c <BSP_TSENSOR_ReadTemp>
 80009d4:	eef0 7a40 	vmov.f32	s15, s0
 80009d8:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <main+0x188>)
 80009da:	edc3 7a00 	vstr	s15, [r3]
    hum_value = BSP_HSENSOR_ReadHumidity(); // Read Humidity
 80009de:	f001 fb7b 	bl	80020d8 <BSP_HSENSOR_ReadHumidity>
 80009e2:	eef0 7a40 	vmov.f32	s15, s0
 80009e6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae4 <main+0x18c>)
 80009e8:	edc3 7a00 	vstr	s15, [r3]

    int tmpInt1 = temp_value;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <main+0x188>)
 80009ee:	edd3 7a00 	vldr	s15, [r3]
 80009f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f6:	ee17 3a90 	vmov	r3, s15
 80009fa:	617b      	str	r3, [r7, #20]
    float tmpFrac = temp_value - tmpInt1;
 80009fc:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <main+0x188>)
 80009fe:	ed93 7a00 	vldr	s14, [r3]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a10:	edc7 7a04 	vstr	s15, [r7, #16]
    int tmpInt2 = trunc(tmpFrac * 100);
 8000a14:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a18:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000ae8 <main+0x190>
 8000a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a20:	ee17 0a90 	vmov	r0, s15
 8000a24:	f7ff fda0 	bl	8000568 <__aeabi_f2d>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	ec43 2b10 	vmov	d0, r2, r3
 8000a30:	f007 fdc8 	bl	80085c4 <trunc>
 8000a34:	ec53 2b10 	vmov	r2, r3, d0
 8000a38:	4610      	mov	r0, r2
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f7ff fdec 	bl	8000618 <__aeabi_d2iz>
 8000a40:	4603      	mov	r3, r0
 8000a42:	60fb      	str	r3, [r7, #12]

    int humInt1 = (int)hum_value;
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <main+0x18c>)
 8000a46:	edd3 7a00 	vldr	s15, [r3]
 8000a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a4e:	ee17 3a90 	vmov	r3, s15
 8000a52:	60bb      	str	r3, [r7, #8]
    float humFrac = hum_value - humInt1;
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <main+0x18c>)
 8000a56:	ed93 7a00 	vldr	s14, [r3]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	ee07 3a90 	vmov	s15, r3
 8000a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a68:	edc7 7a01 	vstr	s15, [r7, #4]
    int humInt2 = trunc(humFrac * 100);
 8000a6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a70:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000ae8 <main+0x190>
 8000a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a78:	ee17 0a90 	vmov	r0, s15
 8000a7c:	f7ff fd74 	bl	8000568 <__aeabi_f2d>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	ec43 2b10 	vmov	d0, r2, r3
 8000a88:	f007 fd9c 	bl	80085c4 <trunc>
 8000a8c:	ec53 2b10 	vmov	r2, r3, d0
 8000a90:	4610      	mov	r0, r2
 8000a92:	4619      	mov	r1, r3
 8000a94:	f7ff fdc0 	bl	8000618 <__aeabi_d2iz>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	603b      	str	r3, [r7, #0]

//    snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
    snprintf(str_tmp, sizeof(str_tmp), "TEMPERATURE = %d.%02d°C, HUMIDITY = %d.%02d%%\r\n", tmpInt1, tmpInt2, humInt1, humInt2);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <main+0x194>)
 8000aac:	2164      	movs	r1, #100	@ 0x64
 8000aae:	4810      	ldr	r0, [pc, #64]	@ (8000af0 <main+0x198>)
 8000ab0:	f007 f8d4 	bl	8007c5c <sniprintf>
    HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab8:	2264      	movs	r2, #100	@ 0x64
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <main+0x198>)
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <main+0x17c>)
 8000abe:	f006 fa20 	bl	8006f02 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f001 fd45 	bl	8002554 <HAL_Delay>
  {
 8000aca:	bf00      	nop
 8000acc:	e780      	b.n	80009d0 <main+0x78>
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000438 	.word	0x20000438
 8000ad8:	2000003c 	.word	0x2000003c
 8000adc:	20000074 	.word	0x20000074
 8000ae0:	200005f4 	.word	0x200005f4
 8000ae4:	200005f8 	.word	0x200005f8
 8000ae8:	42c80000 	.word	0x42c80000
 8000aec:	08008650 	.word	0x08008650
 8000af0:	200005fc 	.word	0x200005fc

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	@ 0x58
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2244      	movs	r2, #68	@ 0x44
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f007 f8de 	bl	8007cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f004 fc5c 	bl	80053d4 <HAL_PWREx_ControlVoltageScaling>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b22:	f000 fce3 	bl	80014ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b26:	f004 fc25 	bl	8005374 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <SystemClock_Config+0xc0>)
 8000b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b30:	4a20      	ldr	r2, [pc, #128]	@ (8000bb4 <SystemClock_Config+0xc0>)
 8000b32:	f023 0318 	bic.w	r3, r3, #24
 8000b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4a:	2360      	movs	r3, #96	@ 0x60
 8000b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b52:	2301      	movs	r3, #1
 8000b54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b5a:	233c      	movs	r3, #60	@ 0x3c
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fcd4 	bl	800551c <HAL_RCC_OscConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 fcb7 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7e:	230f      	movs	r3, #15
 8000b80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b82:	2303      	movs	r3, #3
 8000b84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b92:	463b      	mov	r3, r7
 8000b94:	2105      	movs	r1, #5
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 f8da 	bl	8005d50 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ba2:	f000 fca3 	bl	80014ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ba6:	f005 fec1 	bl	800692c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000baa:	bf00      	nop
 8000bac:	3758      	adds	r7, #88	@ 0x58
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0a6      	sub	sp, #152	@ 0x98
 8000bbc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2294      	movs	r2, #148	@ 0x94
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 f87d 	bl	8007cc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8000bca:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000be2:	2301      	movs	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000be6:	2318      	movs	r3, #24
 8000be8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000bf6:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8000bfa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f005 fb64 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000c0a:	f000 fc6f 	bl	80014ec <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3798      	adds	r7, #152	@ 0x98
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c2e:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c30:	4a29      	ldr	r2, [pc, #164]	@ (8000cd8 <MX_ADC1_Init+0xc0>)
 8000c32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c40:	4b24      	ldr	r3, [pc, #144]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c46:	4b23      	ldr	r3, [pc, #140]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c8e:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000c90:	f001 fe24 	bl	80028dc <HAL_ADC_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c9a:	f000 fc27 	bl	80014ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_ADC1_Init+0xc4>)
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000caa:	237f      	movs	r3, #127	@ 0x7f
 8000cac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <MX_ADC1_Init+0xbc>)
 8000cbc:	f001 ff54 	bl	8002b68 <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cc6:	f000 fc11 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000144 	.word	0x20000144
 8000cd8:	50040000 	.word	0x50040000
 8000cdc:	04300002 	.word	0x04300002

08000ce0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000ce6:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <MX_DFSDM1_Init+0x6c>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d16:	2204      	movs	r2, #4
 8000d18:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_DFSDM1_Init+0x68>)
 8000d34:	f002 fc26 	bl	8003584 <HAL_DFSDM_ChannelInit>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000d3e:	f000 fbd5 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001ac 	.word	0x200001ac
 8000d4c:	40016040 	.word	0x40016040

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d60:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	480e      	ldr	r0, [pc, #56]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	f002 ffc5 	bl	8003d1a <HAL_I2C_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 fba9 	bl	80014ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4809      	ldr	r0, [pc, #36]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9e:	f003 fd77 	bl	8004890 <HAL_I2CEx_ConfigAnalogFilter>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 fba0 	bl	80014ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_I2C1_Init+0x74>)
 8000db0:	f003 fdb9 	bl	8004926 <HAL_I2CEx_ConfigDigitalFilter>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fb97 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001e4 	.word	0x200001e4
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	307075b1 	.word	0x307075b1

08000dd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <MX_I2C2_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <MX_I2C2_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e0a:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000e0c:	f002 ff85 	bl	8003d1a <HAL_I2C_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 fb69 	bl	80014ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000e1e:	f003 fd37 	bl	8004890 <HAL_I2CEx_ConfigAnalogFilter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 fb60 	bl	80014ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_I2C2_Init+0x74>)
 8000e30:	f003 fd79 	bl	8004926 <HAL_I2CEx_ConfigDigitalFilter>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fb57 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000238 	.word	0x20000238
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	307075b1 	.word	0x307075b1

08000e50 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e66:	4a24      	ldr	r2, [pc, #144]	@ (8000ef8 <MX_OCTOSPI1_Init+0xa8>)
 8000e68:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e70:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e7c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e80:	2220      	movs	r2, #32
 8000e82:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000eb4:	480f      	ldr	r0, [pc, #60]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000eb6:	f003 fd83 	bl	80049c0 <HAL_OSPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000ec0:	f000 fb14 	bl	80014ec <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000ecc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000ed0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	@ (8000ef4 <MX_OCTOSPI1_Init+0xa4>)
 8000edc:	f003 fe2a 	bl	8004b34 <HAL_OSPIM_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8000ee6:	f000 fb01 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000028c 	.word	0x2000028c
 8000ef8:	a0001000 	.word	0xa0001000

08000efc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <MX_SPI1_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f16:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f32:	2208      	movs	r2, #8
 8000f34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	@ (8000f70 <MX_SPI1_Init+0x74>)
 8000f5c:	f005 fede 	bl	8006d1c <HAL_SPI_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fac1 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200002dc 	.word	0x200002dc
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <MX_SPI3_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000f92:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000faa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fd2:	2208      	movs	r2, #8
 8000fd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_SPI3_Init+0x74>)
 8000fd8:	f005 fea0 	bl	8006d1c <HAL_SPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fa83 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000340 	.word	0x20000340
 8000ff0:	40003c00 	.word	0x40003c00

08000ff4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ff8:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <MX_UART4_Init+0x90>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <MX_UART4_Init+0x94>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <MX_UART4_Init+0x90>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <MX_UART4_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <MX_UART4_Init+0x90>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <MX_UART4_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <MX_UART4_Init+0x90>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <MX_UART4_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <MX_UART4_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <MX_UART4_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <MX_UART4_Init+0x90>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <MX_UART4_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800103c:	4811      	ldr	r0, [pc, #68]	@ (8001084 <MX_UART4_Init+0x90>)
 800103e:	f005 ff10 	bl	8006e62 <HAL_UART_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001048:	f000 fa50 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	480d      	ldr	r0, [pc, #52]	@ (8001084 <MX_UART4_Init+0x90>)
 8001050:	f006 fd3a 	bl	8007ac8 <HAL_UARTEx_SetTxFifoThreshold>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800105a:	f000 fa47 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105e:	2100      	movs	r1, #0
 8001060:	4808      	ldr	r0, [pc, #32]	@ (8001084 <MX_UART4_Init+0x90>)
 8001062:	f006 fd6f 	bl	8007b44 <HAL_UARTEx_SetRxFifoThreshold>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 fa3e 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_UART4_Init+0x90>)
 8001072:	f006 fcf0 	bl	8007a56 <HAL_UARTEx_DisableFifoMode>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 fa36 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200003a4 	.word	0x200003a4
 8001088:	40004c00 	.word	0x40004c00

0800108c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_USART1_UART_Init+0x90>)
 8001092:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <MX_USART1_UART_Init+0x94>)
 8001094:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_USART1_UART_Init+0x90>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d4:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010d6:	f005 fec4 	bl	8006e62 <HAL_UART_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010e0:	f000 fa04 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	480d      	ldr	r0, [pc, #52]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010e8:	f006 fcee 	bl	8007ac8 <HAL_UARTEx_SetTxFifoThreshold>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010f2:	f000 f9fb 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4808      	ldr	r0, [pc, #32]	@ (800111c <MX_USART1_UART_Init+0x90>)
 80010fa:	f006 fd23 	bl	8007b44 <HAL_UARTEx_SetRxFifoThreshold>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001104:	f000 f9f2 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <MX_USART1_UART_Init+0x90>)
 800110a:	f006 fca4 	bl	8007a56 <HAL_UARTEx_DisableFifoMode>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001114:	f000 f9ea 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000438 	.word	0x20000438
 8001120:	40013800 	.word	0x40013800

08001124 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 800112a:	4a24      	ldr	r2, [pc, #144]	@ (80011bc <MX_USART2_UART_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001150:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001154:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001170:	f005 fe77 	bl	8006e62 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800117a:	f000 f9b7 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001182:	f006 fca1 	bl	8007ac8 <HAL_UARTEx_SetTxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800118c:	f000 f9ae 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 8001194:	f006 fcd6 	bl	8007b44 <HAL_UARTEx_SetRxFifoThreshold>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800119e:	f000 f9a5 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART2_UART_Init+0x94>)
 80011a4:	f006 fc57 	bl	8007a56 <HAL_UARTEx_DisableFifoMode>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80011ae:	f000 f99d 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200004cc 	.word	0x200004cc
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <MX_USART3_UART_Init+0x94>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 800120a:	f005 fe2a 	bl	8006e62 <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001214:	f000 f96a 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001218:	2100      	movs	r1, #0
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 800121c:	f006 fc54 	bl	8007ac8 <HAL_UARTEx_SetTxFifoThreshold>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001226:	f000 f961 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 800122e:	f006 fc89 	bl	8007b44 <HAL_UARTEx_SetRxFifoThreshold>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001238:	f000 f958 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_USART3_UART_Init+0x90>)
 800123e:	f006 fc0a 	bl	8007a56 <HAL_UARTEx_DisableFifoMode>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 f950 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000560 	.word	0x20000560
 8001254:	40004800 	.word	0x40004800

08001258 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	@ 0x30
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800127e:	4b96      	ldr	r3, [pc, #600]	@ (80014d8 <MX_GPIO_Init+0x270>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	4a95      	ldr	r2, [pc, #596]	@ (80014d8 <MX_GPIO_Init+0x270>)
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128a:	4b93      	ldr	r3, [pc, #588]	@ (80014d8 <MX_GPIO_Init+0x270>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b90      	ldr	r3, [pc, #576]	@ (80014d8 <MX_GPIO_Init+0x270>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	4a8f      	ldr	r2, [pc, #572]	@ (80014d8 <MX_GPIO_Init+0x270>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a2:	4b8d      	ldr	r3, [pc, #564]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	4b8a      	ldr	r3, [pc, #552]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a89      	ldr	r2, [pc, #548]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b87      	ldr	r3, [pc, #540]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b84      	ldr	r3, [pc, #528]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	4a83      	ldr	r2, [pc, #524]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a7d      	ldr	r2, [pc, #500]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b7b      	ldr	r3, [pc, #492]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	4a77      	ldr	r2, [pc, #476]	@ (80014d8 <MX_GPIO_Init+0x270>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001302:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <MX_GPIO_Init+0x270>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f240 1105 	movw	r1, #261	@ 0x105
 8001314:	4871      	ldr	r0, [pc, #452]	@ (80014dc <MX_GPIO_Init+0x274>)
 8001316:	f002 fcc5 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800131a:	2200      	movs	r2, #0
 800131c:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001324:	f002 fcbe 	bl	8003ca4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001328:	2200      	movs	r2, #0
 800132a:	f24f 0134 	movw	r1, #61492	@ 0xf034
 800132e:	486c      	ldr	r0, [pc, #432]	@ (80014e0 <MX_GPIO_Init+0x278>)
 8001330:	f002 fcb8 	bl	8003ca4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f242 0183 	movw	r1, #8323	@ 0x2083
 800133a:	486a      	ldr	r0, [pc, #424]	@ (80014e4 <MX_GPIO_Init+0x27c>)
 800133c:	f002 fcb2 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001346:	4868      	ldr	r0, [pc, #416]	@ (80014e8 <MX_GPIO_Init+0x280>)
 8001348:	f002 fcac 	bl	8003ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800134c:	f240 1305 	movw	r3, #261	@ 0x105
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	485d      	ldr	r0, [pc, #372]	@ (80014dc <MX_GPIO_Init+0x274>)
 8001366:	f002 fa19 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800136a:	237a      	movs	r3, #122	@ 0x7a
 800136c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4857      	ldr	r0, [pc, #348]	@ (80014dc <MX_GPIO_Init+0x274>)
 8001380:	f002 fa0c 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001384:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4853      	ldr	r0, [pc, #332]	@ (80014e8 <MX_GPIO_Init+0x280>)
 800139c:	f002 f9fe 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80013a0:	f248 131c 	movw	r3, #33052	@ 0x811c
 80013a4:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013bc:	f002 f9ee 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4842      	ldr	r0, [pc, #264]	@ (80014e0 <MX_GPIO_Init+0x278>)
 80013d6:	f002 f9e1 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80013da:	2302      	movs	r3, #2
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	483a      	ldr	r0, [pc, #232]	@ (80014e0 <MX_GPIO_Init+0x278>)
 80013f6:	f002 f9d1 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013fa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80013fe:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4833      	ldr	r0, [pc, #204]	@ (80014e0 <MX_GPIO_Init+0x278>)
 8001414:	f002 f9c2 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001418:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 800141c:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800141e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	482d      	ldr	r0, [pc, #180]	@ (80014e4 <MX_GPIO_Init+0x27c>)
 8001430:	f002 f9b4 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001434:	f242 0383 	movw	r3, #8323	@ 0x2083
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4825      	ldr	r0, [pc, #148]	@ (80014e4 <MX_GPIO_Init+0x27c>)
 800144e:	f002 f9a5 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001452:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	4619      	mov	r1, r3
 800146a:	481f      	ldr	r0, [pc, #124]	@ (80014e8 <MX_GPIO_Init+0x280>)
 800146c:	f002 f996 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001488:	f002 f988 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800148c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800149e:	230a      	movs	r3, #10
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ac:	f002 f976 	bl	800379c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014b0:	2200      	movs	r2, #0
 80014b2:	2100      	movs	r1, #0
 80014b4:	2017      	movs	r0, #23
 80014b6:	f002 f82e 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014ba:	2017      	movs	r0, #23
 80014bc:	f002 f847 	bl	800354e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2028      	movs	r0, #40	@ 0x28
 80014c6:	f002 f826 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ca:	2028      	movs	r0, #40	@ 0x28
 80014cc:	f002 f83f 	bl	800354e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	@ 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40021000 	.word	0x40021000
 80014dc:	48001000 	.word	0x48001000
 80014e0:	48000400 	.word	0x48000400
 80014e4:	48000c00 	.word	0x48000c00
 80014e8:	48000800 	.word	0x48000800

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	@ 0x60
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	@ 0x58
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <HAL_ADC_MspInit+0x74>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d123      	bne.n	80015aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 8001568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a0e      	ldr	r2, [pc, #56]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_ADC_MspInit+0x78>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001592:	233f      	movs	r3, #63	@ 0x3f
 8001594:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001596:	230b      	movs	r3, #11
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <HAL_ADC_MspInit+0x7c>)
 80015a6:	f002 f8f9 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	@ 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	50040000 	.word	0x50040000
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000800 	.word	0x48000800

080015c0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0ae      	sub	sp, #184	@ 0xb8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	2294      	movs	r2, #148	@ 0x94
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 fb6f 	bl	8007cc4 <memset>
  if(DFSDM1_Init == 0)
 80015e6:	4b25      	ldr	r3, [pc, #148]	@ (800167c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d142      	bne.n	8001674 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80015ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fe64 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800160a:	f7ff ff6f 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001612:	4a1b      	ldr	r2, [pc, #108]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001614:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001618:	6613      	str	r3, [r2, #96]	@ 0x60
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800161c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800163e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001658:	2306      	movs	r3, #6
 800165a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001662:	4619      	mov	r1, r3
 8001664:	4807      	ldr	r0, [pc, #28]	@ (8001684 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001666:	f002 f899 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800166a:	4b04      	ldr	r3, [pc, #16]	@ (800167c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a02      	ldr	r2, [pc, #8]	@ (800167c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001672:	6013      	str	r3, [r2, #0]
  }

}
 8001674:	bf00      	nop
 8001676:	37b8      	adds	r7, #184	@ 0xb8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000660 	.word	0x20000660
 8001680:	40021000 	.word	0x40021000
 8001684:	48001000 	.word	0x48001000

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0b0      	sub	sp, #192	@ 0xc0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	2294      	movs	r2, #148	@ 0x94
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fb0b 	bl	8007cc4 <memset>
  if(hi2c->Instance==I2C1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a42      	ldr	r2, [pc, #264]	@ (80017bc <HAL_I2C_MspInit+0x134>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d13c      	bne.n	8001732 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016b8:	2340      	movs	r3, #64	@ 0x40
 80016ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	4618      	mov	r0, r3
 80016c6:	f004 fe01 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff ff0c 	bl	80014ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d8:	4a39      	ldr	r2, [pc, #228]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001706:	2304      	movs	r3, #4
 8001708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001710:	4619      	mov	r1, r3
 8001712:	482c      	ldr	r0, [pc, #176]	@ (80017c4 <HAL_I2C_MspInit+0x13c>)
 8001714:	f002 f842 	bl	800379c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001722:	6593      	str	r3, [r2, #88]	@ 0x58
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001730:	e040      	b.n	80017b4 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <HAL_I2C_MspInit+0x140>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d13b      	bne.n	80017b4 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001740:	2300      	movs	r3, #0
 8001742:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fdbf 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001754:	f7ff feca 	bl	80014ec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001770:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001778:	2312      	movs	r3, #18
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800178a:	2304      	movs	r3, #4
 800178c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001794:	4619      	mov	r1, r3
 8001796:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <HAL_I2C_MspInit+0x13c>)
 8001798:	f002 f800 	bl	800379c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 80017a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_I2C_MspInit+0x138>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
}
 80017b4:	bf00      	nop
 80017b6:	37c0      	adds	r7, #192	@ 0xc0
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000400 	.word	0x48000400
 80017c8:	40005800 	.word	0x40005800

080017cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a16      	ldr	r2, [pc, #88]	@ (8001834 <HAL_I2C_MspDeInit+0x68>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d110      	bne.n	8001800 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_I2C_MspDeInit+0x6c>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_I2C_MspDeInit+0x6c>)
 80017e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017e8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 80017ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ee:	4813      	ldr	r0, [pc, #76]	@ (800183c <HAL_I2C_MspDeInit+0x70>)
 80017f0:	f002 f966 	bl	8003ac0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 80017f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f8:	4810      	ldr	r0, [pc, #64]	@ (800183c <HAL_I2C_MspDeInit+0x70>)
 80017fa:	f002 f961 	bl	8003ac0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80017fe:	e014      	b.n	800182a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_I2C_MspDeInit+0x74>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10f      	bne.n	800182a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_I2C_MspDeInit+0x6c>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_I2C_MspDeInit+0x6c>)
 8001810:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001814:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800181a:	4808      	ldr	r0, [pc, #32]	@ (800183c <HAL_I2C_MspDeInit+0x70>)
 800181c:	f002 f950 	bl	8003ac0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001820:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_I2C_MspDeInit+0x70>)
 8001826:	f002 f94b 	bl	8003ac0 <HAL_GPIO_DeInit>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005400 	.word	0x40005400
 8001838:	40021000 	.word	0x40021000
 800183c:	48000400 	.word	0x48000400
 8001840:	40005800 	.word	0x40005800

08001844 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0b0      	sub	sp, #192	@ 0xc0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	2294      	movs	r2, #148	@ 0x94
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f006 fa2d 	bl	8007cc4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <HAL_OSPI_MspInit+0xcc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d149      	bne.n	8001908 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001874:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001878:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001880:	f107 0318 	add.w	r3, r7, #24
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fd21 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001890:	f7ff fe2c 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 800189a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800189e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b0:	4a18      	ldr	r2, [pc, #96]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_OSPI_MspInit+0xd0>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80018dc:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80018f6:	230a      	movs	r3, #10
 80018f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001900:	4619      	mov	r1, r3
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <HAL_OSPI_MspInit+0xd4>)
 8001904:	f001 ff4a 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8001908:	bf00      	nop
 800190a:	37c0      	adds	r7, #192	@ 0xc0
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	a0001000 	.word	0xa0001000
 8001914:	40021000 	.word	0x40021000
 8001918:	48001000 	.word	0x48001000

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <HAL_SPI_MspInit+0xdc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d129      	bne.n	8001992 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	4b2f      	ldr	r3, [pc, #188]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	4a2e      	ldr	r2, [pc, #184]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 8001944:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001948:	6613      	str	r3, [r2, #96]	@ 0x60
 800194a:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a28      	ldr	r2, [pc, #160]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800196e:	23e0      	movs	r3, #224	@ 0xe0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197e:	2305      	movs	r3, #5
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800198c:	f001 ff06 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001990:	e02d      	b.n	80019ee <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d128      	bne.n	80019ee <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	4a16      	ldr	r2, [pc, #88]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 80019aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80019cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019de:	2306      	movs	r3, #6
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <HAL_SPI_MspInit+0xe8>)
 80019ea:	f001 fed7 	bl	800379c <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3730      	adds	r7, #48	@ 0x30
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40013000 	.word	0x40013000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40003c00 	.word	0x40003c00
 8001a04:	48000800 	.word	0x48000800

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0b4      	sub	sp, #208	@ 0xd0
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a24:	2294      	movs	r2, #148	@ 0x94
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 f94b 	bl	8007cc4 <memset>
  if(huart->Instance==UART4)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a83      	ldr	r2, [pc, #524]	@ (8001c40 <HAL_UART_MspInit+0x238>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13c      	bne.n	8001ab2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fc41 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a50:	f7ff fd4c 	bl	80014ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a54:	4b7b      	ldr	r3, [pc, #492]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	4a7a      	ldr	r2, [pc, #488]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a60:	4b78      	ldr	r3, [pc, #480]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b75      	ldr	r3, [pc, #468]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a70:	4a74      	ldr	r2, [pc, #464]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a78:	4b72      	ldr	r3, [pc, #456]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aac:	f001 fe76 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab0:	e0c2      	b.n	8001c38 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a64      	ldr	r2, [pc, #400]	@ (8001c48 <HAL_UART_MspInit+0x240>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d13b      	bne.n	8001b34 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 fbff 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001ad4:	f7ff fd0a 	bl	80014ec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	4a59      	ldr	r2, [pc, #356]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ae4:	4b57      	ldr	r3, [pc, #348]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	4a53      	ldr	r2, [pc, #332]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001af6:	f043 0302 	orr.w	r3, r3, #2
 8001afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afc:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b08:	23c0      	movs	r3, #192	@ 0xc0
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b20:	2307      	movs	r3, #7
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4847      	ldr	r0, [pc, #284]	@ (8001c4c <HAL_UART_MspInit+0x244>)
 8001b2e:	f001 fe35 	bl	800379c <HAL_GPIO_Init>
}
 8001b32:	e081      	b.n	8001c38 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a45      	ldr	r2, [pc, #276]	@ (8001c50 <HAL_UART_MspInit+0x248>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d13b      	bne.n	8001bb6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 fbbe 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001b56:	f7ff fcc9 	bl	80014ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a39      	ldr	r2, [pc, #228]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	4b34      	ldr	r3, [pc, #208]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	4a33      	ldr	r2, [pc, #204]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7e:	4b31      	ldr	r3, [pc, #196]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001b8a:	2378      	movs	r3, #120	@ 0x78
 8001b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001bac:	4619      	mov	r1, r3
 8001bae:	4829      	ldr	r0, [pc, #164]	@ (8001c54 <HAL_UART_MspInit+0x24c>)
 8001bb0:	f001 fdf4 	bl	800379c <HAL_GPIO_Init>
}
 8001bb4:	e040      	b.n	8001c38 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a27      	ldr	r2, [pc, #156]	@ (8001c58 <HAL_UART_MspInit+0x250>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d13b      	bne.n	8001c38 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f004 fb7d 	bl	80062cc <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8001bd8:	f7ff fc88 	bl	80014ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be0:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001be2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001be8:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf8:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c00:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_UART_MspInit+0x23c>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c26:	2307      	movs	r3, #7
 8001c28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001c30:	4619      	mov	r1, r3
 8001c32:	4808      	ldr	r0, [pc, #32]	@ (8001c54 <HAL_UART_MspInit+0x24c>)
 8001c34:	f001 fdb2 	bl	800379c <HAL_GPIO_Init>
}
 8001c38:	bf00      	nop
 8001c3a:	37d0      	adds	r7, #208	@ 0xd0
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40004c00 	.word	0x40004c00
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	40004400 	.word	0x40004400
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	40004800 	.word	0x40004800

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <NMI_Handler+0x4>

08001c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <MemManage_Handler+0x4>

08001c74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb2:	f000 fc2f 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001cbe:	2020      	movs	r0, #32
 8001cc0:	f002 f808 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001cc4:	2040      	movs	r0, #64	@ 0x40
 8001cc6:	f002 f805 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001cca:	2080      	movs	r0, #128	@ 0x80
 8001ccc:	f002 f802 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001cd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001cd4:	f001 fffe 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8001ce0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ce4:	f001 fff6 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001ce8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001cec:	f001 fff2 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8001cf0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cf4:	f001 ffee 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001cf8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cfc:	f001 ffea 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001d00:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d04:	f001 ffe6 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001d08:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d0c:	f001 ffe2 	bl	8003cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	@ (8001d70 <_sbrk+0x5c>)
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <_sbrk+0x60>)
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x64>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <_sbrk+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d44:	f005 ffc6 	bl	8007cd4 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	e009      	b.n	8001d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d54:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <_sbrk+0x64>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <_sbrk+0x64>)
 8001d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d66:	68fb      	ldr	r3, [r7, #12]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200a0000 	.word	0x200a0000
 8001d74:	00000400 	.word	0x00000400
 8001d78:	20000664 	.word	0x20000664
 8001d7c:	20000838 	.word	0x20000838

08001d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <SystemInit+0x20>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <SystemInit+0x20>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ddc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da8:	f7ff ffea 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dac:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dae:	490d      	ldr	r1, [pc, #52]	@ (8001de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db0:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <LoopForever+0xe>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001df0 <LoopForever+0x16>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f005 ff85 	bl	8007ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd6:	f7fe fdbf 	bl	8000958 <main>

08001dda <LoopForever>:

LoopForever:
    b LoopForever
 8001dda:	e7fe      	b.n	8001dda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ddc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001de8:	08008738 	.word	0x08008738
  ldr r2, =_sbss
 8001dec:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001df0:	20000834 	.word	0x20000834

08001df4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_IRQHandler>
	...

08001df8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	4a26      	ldr	r2, [pc, #152]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001e18:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	481b      	ldr	r0, [pc, #108]	@ (8001ea4 <I2Cx_MspInit+0xac>)
 8001e36:	f001 fcb1 	bl	800379c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4818      	ldr	r0, [pc, #96]	@ (8001ea4 <I2Cx_MspInit+0xac>)
 8001e42:	f001 fcab 	bl	800379c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001e46:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e68:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea0 <I2Cx_MspInit+0xa8>)
 8001e70:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001e74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	210f      	movs	r1, #15
 8001e7a:	2021      	movs	r0, #33	@ 0x21
 8001e7c:	f001 fb4b 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001e80:	2021      	movs	r0, #33	@ 0x21
 8001e82:	f001 fb64 	bl	800354e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	210f      	movs	r1, #15
 8001e8a:	2022      	movs	r0, #34	@ 0x22
 8001e8c:	f001 fb43 	bl	8003516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001e90:	2022      	movs	r0, #34	@ 0x22
 8001e92:	f001 fb5c 	bl	800354e <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	@ 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <I2Cx_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a11      	ldr	r2, [pc, #68]	@ (8001f00 <I2Cx_Init+0x58>)
 8001eba:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff89 	bl	8001df8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f001 ff17 	bl	8003d1a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001eec:	2100      	movs	r1, #0
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f002 fcce 	bl	8004890 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40005800 	.word	0x40005800
 8001f00:	00702681 	.word	0x00702681

08001f04 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	4608      	mov	r0, r1
 8001f0e:	4611      	mov	r1, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	72fb      	strb	r3, [r7, #11]
 8001f16:	460b      	mov	r3, r1
 8001f18:	813b      	strh	r3, [r7, #8]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	b299      	uxth	r1, r3
 8001f26:	88f8      	ldrh	r0, [r7, #6]
 8001f28:	893a      	ldrh	r2, [r7, #8]
 8001f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4603      	mov	r3, r0
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f002 f8cc 	bl	80040d8 <HAL_I2C_Mem_Read>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f832 	bl	8001fb8 <I2Cx_Error>
  }
  return status;
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b08a      	sub	sp, #40	@ 0x28
 8001f62:	af04      	add	r7, sp, #16
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	4608      	mov	r0, r1
 8001f68:	4611      	mov	r1, r2
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	72fb      	strb	r3, [r7, #11]
 8001f70:	460b      	mov	r3, r1
 8001f72:	813b      	strh	r3, [r7, #8]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	88f8      	ldrh	r0, [r7, #6]
 8001f82:	893a      	ldrh	r2, [r7, #8]
 8001f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4603      	mov	r3, r0
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f001 ff8b 	bl	8003eb0 <HAL_I2C_Mem_Write>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f805 	bl	8001fb8 <I2Cx_Error>
  }
  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f001 ff43 	bl	8003e50 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff6c 	bl	8001ea8 <I2Cx_Init>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <SENSOR_IO_Init+0x10>)
 8001fde:	f7ff ff63 	bl	8001ea8 <I2Cx_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000668 	.word	0x20000668

08001fec <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ffe:	79bb      	ldrb	r3, [r7, #6]
 8002000:	b29a      	uxth	r2, r3
 8002002:	79f9      	ldrb	r1, [r7, #7]
 8002004:	2301      	movs	r3, #1
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	1d7b      	adds	r3, r7, #5
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	4803      	ldr	r0, [pc, #12]	@ (800201c <SENSOR_IO_Write+0x30>)
 8002010:	f7ff ffa5 	bl	8001f5e <I2Cx_WriteMultiple>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000668 	.word	0x20000668

08002020 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	b29a      	uxth	r2, r3
 8002038:	79f9      	ldrb	r1, [r7, #7]
 800203a:	2301      	movs	r3, #1
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	f107 030f 	add.w	r3, r7, #15
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	4804      	ldr	r0, [pc, #16]	@ (8002058 <SENSOR_IO_Read+0x38>)
 8002048:	f7ff ff5c 	bl	8001f04 <I2Cx_ReadMultiple>

  return read_value;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000668 	.word	0x20000668

0800205c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af02      	add	r7, sp, #8
 8002062:	603a      	str	r2, [r7, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	460b      	mov	r3, r1
 800206c:	71bb      	strb	r3, [r7, #6]
 800206e:	4613      	mov	r3, r2
 8002070:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002072:	79bb      	ldrb	r3, [r7, #6]
 8002074:	b29a      	uxth	r2, r3
 8002076:	79f9      	ldrb	r1, [r7, #7]
 8002078:	88bb      	ldrh	r3, [r7, #4]
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	4804      	ldr	r0, [pc, #16]	@ (8002094 <SENSOR_IO_ReadMultiple+0x38>)
 8002084:	f7ff ff3e 	bl	8001f04 <I2Cx_ReadMultiple>
 8002088:	4603      	mov	r3, r0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000668 	.word	0x20000668

08002098 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <BSP_HSENSOR_Init+0x38>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	20be      	movs	r0, #190	@ 0xbe
 80020a4:	4798      	blx	r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	2bbc      	cmp	r3, #188	@ 0xbc
 80020aa:	d002      	beq.n	80020b2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	e009      	b.n	80020c6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <BSP_HSENSOR_Init+0x3c>)
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <BSP_HSENSOR_Init+0x38>)
 80020b6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <BSP_HSENSOR_Init+0x3c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	20be      	movs	r0, #190	@ 0xbe
 80020c0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200000b4 	.word	0x200000b4
 80020d4:	200006bc 	.word	0x200006bc

080020d8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <BSP_HSENSOR_ReadHumidity+0x18>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	20be      	movs	r0, #190	@ 0xbe
 80020e4:	4798      	blx	r3
 80020e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200006bc 	.word	0x200006bc

080020f4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <BSP_TSENSOR_Init+0x30>)
 8002100:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <BSP_TSENSOR_Init+0x34>)
 8002102:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002104:	f7ff ff68 	bl	8001fd8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <BSP_TSENSOR_Init+0x30>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2100      	movs	r1, #0
 8002110:	20be      	movs	r0, #190	@ 0xbe
 8002112:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002118:	79fb      	ldrb	r3, [r7, #7]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200006c0 	.word	0x200006c0
 8002128:	200000c0 	.word	0x200000c0

0800212c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <BSP_TSENSOR_ReadTemp+0x18>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	20be      	movs	r0, #190	@ 0xbe
 8002138:	4798      	blx	r3
 800213a:	eef0 7a40 	vmov.f32	s15, s0
}
 800213e:	eeb0 0a67 	vmov.f32	s0, s15
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200006c0 	.word	0x200006c0

08002148 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2120      	movs	r1, #32
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff61 	bl	8002020 <SENSOR_IO_Read>
 800215e:	4603      	mov	r3, r0
 8002160:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002188:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	2120      	movs	r1, #32
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff2a 	bl	8001fec <SENSOR_IO_Write>
}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80021ae:	f7ff ff13 	bl	8001fd8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	210f      	movs	r1, #15
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff31 	bl	8002020 <SENSOR_IO_Read>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	f107 020c 	add.w	r2, r7, #12
 80021de:	2302      	movs	r3, #2
 80021e0:	21b0      	movs	r1, #176	@ 0xb0
 80021e2:	f7ff ff3b 	bl	800205c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80021e6:	7b3b      	ldrb	r3, [r7, #12]
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80021ee:	7b7b      	ldrb	r3, [r7, #13]
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	b2d8      	uxtb	r0, r3
 80021fa:	f107 020c 	add.w	r2, r7, #12
 80021fe:	2302      	movs	r3, #2
 8002200:	21b6      	movs	r1, #182	@ 0xb6
 8002202:	f7ff ff2b 	bl	800205c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002206:	7b7b      	ldrb	r3, [r7, #13]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	b21a      	sxth	r2, r3
 800220c:	7b3b      	ldrb	r3, [r7, #12]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	f107 020c 	add.w	r2, r7, #12
 800221c:	2302      	movs	r3, #2
 800221e:	21ba      	movs	r1, #186	@ 0xba
 8002220:	f7ff ff1c 	bl	800205c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002224:	7b7b      	ldrb	r3, [r7, #13]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b21a      	sxth	r2, r3
 800222a:	7b3b      	ldrb	r3, [r7, #12]
 800222c:	b21b      	sxth	r3, r3
 800222e:	4313      	orrs	r3, r2
 8002230:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2d8      	uxtb	r0, r3
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	2302      	movs	r3, #2
 800223c:	21a8      	movs	r1, #168	@ 0xa8
 800223e:	f7ff ff0d 	bl	800205c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002242:	7b7b      	ldrb	r3, [r7, #13]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b21a      	sxth	r2, r3
 8002248:	7b3b      	ldrb	r3, [r7, #12]
 800224a:	b21b      	sxth	r3, r3
 800224c:	4313      	orrs	r3, r2
 800224e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002250:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002254:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002262:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002266:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002278:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800227c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80022a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ae:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80022b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80022fc <HTS221_H_ReadHumidity+0x130>
 80022ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c2:	dd01      	ble.n	80022c8 <HTS221_H_ReadHumidity+0xfc>
 80022c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HTS221_H_ReadHumidity+0x134>)
 80022c6:	e00a      	b.n	80022de <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80022c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d4:	d502      	bpl.n	80022dc <HTS221_H_ReadHumidity+0x110>
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	e000      	b.n	80022de <HTS221_H_ReadHumidity+0x112>
 80022dc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80022de:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80022e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80022f0:	eeb0 0a67 	vmov.f32	s0, s15
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	447a0000 	.word	0x447a0000
 8002300:	447a0000 	.word	0x447a0000

08002304 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2120      	movs	r1, #32
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fe82 	bl	8002020 <SENSOR_IO_Read>
 800231c:	4603      	mov	r3, r0
 800231e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	f023 0304 	bic.w	r3, r3, #4
 8002326:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002346:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	2120      	movs	r1, #32
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fe4b 	bl	8001fec <SENSOR_IO_Write>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b088      	sub	sp, #32
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	f107 0208 	add.w	r2, r7, #8
 8002370:	2302      	movs	r3, #2
 8002372:	21b2      	movs	r1, #178	@ 0xb2
 8002374:	f7ff fe72 	bl	800205c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2135      	movs	r1, #53	@ 0x35
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe4e 	bl	8002020 <SENSOR_IO_Read>
 8002384:	4603      	mov	r3, r0
 8002386:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002388:	7ffb      	ldrb	r3, [r7, #31]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21b      	sxth	r3, r3
 800238e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002392:	b21a      	sxth	r2, r3
 8002394:	7a3b      	ldrb	r3, [r7, #8]
 8002396:	b21b      	sxth	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800239c:	7ffb      	ldrb	r3, [r7, #31]
 800239e:	019b      	lsls	r3, r3, #6
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	7a7b      	ldrb	r3, [r7, #9]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80023b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023b4:	10db      	asrs	r3, r3, #3
 80023b6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80023b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023bc:	10db      	asrs	r3, r3, #3
 80023be:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	b2d8      	uxtb	r0, r3
 80023c4:	f107 0208 	add.w	r2, r7, #8
 80023c8:	2304      	movs	r3, #4
 80023ca:	21bc      	movs	r1, #188	@ 0xbc
 80023cc:	f7ff fe46 	bl	800205c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80023d0:	7a7b      	ldrb	r3, [r7, #9]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	7a3b      	ldrb	r3, [r7, #8]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	7abb      	ldrb	r3, [r7, #10]
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	f107 0208 	add.w	r2, r7, #8
 80023f4:	2302      	movs	r3, #2
 80023f6:	21aa      	movs	r1, #170	@ 0xaa
 80023f8:	f7ff fe30 	bl	800205c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	b21a      	sxth	r2, r3
 8002402:	7a3b      	ldrb	r3, [r7, #8]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800240a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800240e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002420:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002432:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002448:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800244c:	ee07 3a90 	vmov	s15, r3
 8002450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002458:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	ee07 3a90 	vmov	s15, r3
}
 8002462:	eeb0 0a67 	vmov.f32	s0, s15
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002476:	2003      	movs	r0, #3
 8002478:	f001 f842 	bl	8003500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f80d 	bl	800249c <HAL_InitTick>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	e001      	b.n	8002492 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248e:	f7ff f833 	bl	80014f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002492:	79fb      	ldrb	r3, [r7, #7]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_InitTick+0x6c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d023      	beq.n	80024f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_InitTick+0x70>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_InitTick+0x6c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	4619      	mov	r1, r3
 80024ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024be:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f001 f84f 	bl	800356a <HAL_SYSTICK_Config>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d809      	bhi.n	80024ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f001 f819 	bl	8003516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_InitTick+0x74>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e007      	b.n	80024fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e004      	b.n	80024fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e001      	b.n	80024fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200000d4 	.word	0x200000d4
 800250c:	200000b0 	.word	0x200000b0
 8002510:	200000d0 	.word	0x200000d0

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200000d4 	.word	0x200000d4
 8002538:	200006c4 	.word	0x200006c4

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	@ (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200006c4 	.word	0x200006c4

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200000d4 	.word	0x200000d4

0800259c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3360      	adds	r3, #96	@ 0x60
 8002616:	461a      	mov	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <LL_ADC_SetOffset+0x44>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	4313      	orrs	r3, r2
 8002634:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	03fff000 	.word	0x03fff000

0800264c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3360      	adds	r3, #96	@ 0x60
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3360      	adds	r3, #96	@ 0x60
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026a2:	bf00      	nop
 80026a4:	371c      	adds	r7, #28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	615a      	str	r2, [r3, #20]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3330      	adds	r3, #48	@ 0x30
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	4413      	add	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	211f      	movs	r1, #31
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	401a      	ands	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 011f 	and.w	r1, r3, #31
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	431a      	orrs	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3314      	adds	r3, #20
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	0e5b      	lsrs	r3, r3, #25
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	0d1b      	lsrs	r3, r3, #20
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	2107      	movs	r1, #7
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	401a      	ands	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	0d1b      	lsrs	r3, r3, #20
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	431a      	orrs	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	43db      	mvns	r3, r3
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0318 	and.w	r3, r3, #24
 80027a6:	4908      	ldr	r1, [pc, #32]	@ (80027c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027a8:	40d9      	lsrs	r1, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	400b      	ands	r3, r1
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	0007ffff 	.word	0x0007ffff

080027cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6093      	str	r3, [r2, #8]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d101      	bne.n	800280a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800282c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002854:	d101      	bne.n	800285a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <LL_ADC_IsEnabled+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_IsEnabled+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d101      	bne.n	80028cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e129      	b.n	8002b4a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fe fe1b 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff67 	bl	80027f0 <LL_ADC_IsDeepPowerDownEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff4d 	bl	80027cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff82 	bl	8002840 <LL_ADC_IsInternalRegulatorEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff66 	bl	8002818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4b81      	ldr	r3, [pc, #516]	@ (8002b54 <HAL_ADC_Init+0x278>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	4a81      	ldr	r2, [pc, #516]	@ (8002b58 <HAL_ADC_Init+0x27c>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002960:	e002      	b.n	8002968 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b01      	subs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f9      	bne.n	8002962 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ff64 	bl	8002840 <LL_ADC_IsInternalRegulatorEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	f043 0210 	orr.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff ff75 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 80029a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 80c2 	bne.w	8002b38 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80be 	bne.w	8002b38 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029c4:	f043 0202 	orr.w	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff49 	bl	8002868 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029dc:	485f      	ldr	r0, [pc, #380]	@ (8002b5c <HAL_ADC_Init+0x280>)
 80029de:	f7ff ff43 	bl	8002868 <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4619      	mov	r1, r3
 80029ee:	485c      	ldr	r0, [pc, #368]	@ (8002b60 <HAL_ADC_Init+0x284>)
 80029f0:	f7ff fdd4 	bl	800259c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7e5b      	ldrb	r3, [r3, #25]
 80029f8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029fe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a04:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a0a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a12:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	3b01      	subs	r3, #1
 8002a28:	045b      	lsls	r3, r3, #17
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	4b44      	ldr	r3, [pc, #272]	@ (8002b64 <HAL_ADC_Init+0x288>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff25 	bl	80028b4 <LL_ADC_INJ_IsConversionOngoing>
 8002a6a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d140      	bne.n	8002af4 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13d      	bne.n	8002af4 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
 8002a80:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a82:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a8a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a9a:	f023 0306 	bic.w	r3, r3, #6
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d118      	bne.n	8002ae4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ac8:	4311      	orrs	r1, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ace:	4311      	orrs	r1, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
 8002ae2:	e007      	b.n	8002af4 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10c      	bne.n	8002b16 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f023 010f 	bic.w	r1, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	1e5a      	subs	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b14:	e007      	b.n	8002b26 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020f 	bic.w	r2, r2, #15
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b36:	e007      	b.n	8002b48 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3c:	f043 0210 	orr.w	r2, r3, #16
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200000b0 	.word	0x200000b0
 8002b58:	053e2d63 	.word	0x053e2d63
 8002b5c:	50040000 	.word	0x50040000
 8002b60:	50040300 	.word	0x50040300
 8002b64:	fff0c007 	.word	0xfff0c007

08002b68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x22>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e3d5      	b.n	8003336 <HAL_ADC_ConfigChannel+0x7ce>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fe79 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 83ba 	bne.w	8003318 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d824      	bhi.n	8002bfe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	3b02      	subs	r3, #2
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d81b      	bhi.n	8002bf6 <HAL_ADC_ConfigChannel+0x8e>
 8002bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <HAL_ADC_ConfigChannel+0x5c>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002be5 	.word	0x08002be5
 8002bd0:	08002bed 	.word	0x08002bed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bda:	e010      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002be2:	e00c      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002be4:	2318      	movs	r3, #24
 8002be6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bea:	e008      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bfc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c0c:	f7ff fd62 	bl	80026d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fe3a 	bl	800288e <LL_ADC_REG_IsConversionOngoing>
 8002c1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe46 	bl	80028b4 <LL_ADC_INJ_IsConversionOngoing>
 8002c28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 81bf 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 81ba 	bne.w	8002fb4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c48:	d10f      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7ff fd69 	bl	800272c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd23 	bl	80026ae <LL_ADC_SetSamplingTimeCommonConfig>
 8002c68:	e00e      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f7ff fd58 	bl	800272c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fd13 	bl	80026ae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	08db      	lsrs	r3, r3, #3
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6919      	ldr	r1, [r3, #16]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cba:	f7ff fca3 	bl	8002604 <LL_ADC_SetOffset>
 8002cbe:	e179      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fcc0 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x184>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fcb5 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	e01e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1c2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fcaa 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x1da>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	e018      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x20c>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e004      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fc79 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fc5d 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x24a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fc52 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	e01e      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x288>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fc47 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x2a0>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	e018      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x2d2>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e004      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fc16 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fbfa 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x310>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fbef 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	e01e      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x34e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fbe4 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e004      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x366>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	e014      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x390>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ede:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002eee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d106      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fbb7 	bl	8002678 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2103      	movs	r1, #3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fb9b 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x3ce>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2103      	movs	r1, #3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fb90 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	e017      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x3fe>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fb85 	bl	800264c <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f50:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x416>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0e9b      	lsrs	r3, r3, #26
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	e011      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x43a>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002f96:	2320      	movs	r3, #32
 8002f98:	e003      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d106      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2103      	movs	r1, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fb62 	bl	8002678 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fc55 	bl	8002868 <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 813f 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f7ff fbd6 	bl	8002784 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a8e      	ldr	r2, [pc, #568]	@ (8003218 <HAL_ADC_ConfigChannel+0x6b0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	f040 8130 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_ADC_ConfigChannel+0x4a4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	0e9b      	lsrs	r3, r3, #26
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b09      	cmp	r3, #9
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e019      	b.n	8003040 <HAL_ADC_ConfigChannel+0x4d8>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800301a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800301e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003024:	2320      	movs	r3, #32
 8003026:	e003      	b.n	8003030 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f003 031f 	and.w	r3, r3, #31
 8003036:	2b09      	cmp	r3, #9
 8003038:	bf94      	ite	ls
 800303a:	2301      	movls	r3, #1
 800303c:	2300      	movhi	r3, #0
 800303e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003040:	2b00      	cmp	r3, #0
 8003042:	d079      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d107      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x4f8>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	3301      	adds	r3, #1
 8003058:	069b      	lsls	r3, r3, #26
 800305a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800305e:	e015      	b.n	800308c <HAL_ADC_ConfigChannel+0x524>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800306e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003070:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800307c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	069b      	lsls	r3, r3, #26
 8003088:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x544>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0e9b      	lsrs	r3, r3, #26
 800309e:	3301      	adds	r3, #1
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	e017      	b.n	80030dc <HAL_ADC_ConfigChannel+0x574>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80030c4:	2320      	movs	r3, #32
 80030c6:	e003      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80030c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2101      	movs	r1, #1
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	ea42 0103 	orr.w	r1, r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x59a>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	3301      	adds	r3, #1
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	051b      	lsls	r3, r3, #20
 8003100:	e018      	b.n	8003134 <HAL_ADC_ConfigChannel+0x5cc>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800311e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003134:	430b      	orrs	r3, r1
 8003136:	e080      	b.n	800323a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x5ec>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	3301      	adds	r3, #1
 800314c:	069b      	lsls	r3, r3, #26
 800314e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003152:	e015      	b.n	8003180 <HAL_ADC_ConfigChannel+0x618>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800316c:	2320      	movs	r3, #32
 800316e:	e003      	b.n	8003178 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	3301      	adds	r3, #1
 800317a:	069b      	lsls	r3, r3, #26
 800317c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x638>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	0e9b      	lsrs	r3, r3, #26
 8003192:	3301      	adds	r3, #1
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2101      	movs	r1, #1
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	e017      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x668>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	61bb      	str	r3, [r7, #24]
  return result;
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e003      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	ea42 0103 	orr.w	r1, r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10d      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x694>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	3b1e      	subs	r3, #30
 80031f4:	051b      	lsls	r3, r3, #20
 80031f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	e01d      	b.n	8003238 <HAL_ADC_ConfigChannel+0x6d0>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	60fb      	str	r3, [r7, #12]
  return result;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e005      	b.n	8003224 <HAL_ADC_ConfigChannel+0x6bc>
 8003218:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	3b1e      	subs	r3, #30
 8003232:	051b      	lsls	r3, r3, #20
 8003234:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003238:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800323e:	4619      	mov	r1, r3
 8003240:	f7ff fa74 	bl	800272c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b3d      	ldr	r3, [pc, #244]	@ (8003340 <HAL_ADC_ConfigChannel+0x7d8>)
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d06c      	beq.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003250:	483c      	ldr	r0, [pc, #240]	@ (8003344 <HAL_ADC_ConfigChannel+0x7dc>)
 8003252:	f7ff f9c9 	bl	80025e8 <LL_ADC_GetCommonPathInternalCh>
 8003256:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3a      	ldr	r2, [pc, #232]	@ (8003348 <HAL_ADC_ConfigChannel+0x7e0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d127      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d121      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a35      	ldr	r2, [pc, #212]	@ (800334c <HAL_ADC_ConfigChannel+0x7e4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d157      	bne.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800327a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800327e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003282:	4619      	mov	r1, r3
 8003284:	482f      	ldr	r0, [pc, #188]	@ (8003344 <HAL_ADC_ConfigChannel+0x7dc>)
 8003286:	f7ff f99c 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800328a:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_ADC_ConfigChannel+0x7e8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <HAL_ADC_ConfigChannel+0x7ec>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032a4:	e002      	b.n	80032ac <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f9      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032b2:	e03a      	b.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a27      	ldr	r2, [pc, #156]	@ (8003358 <HAL_ADC_ConfigChannel+0x7f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d113      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1f      	ldr	r2, [pc, #124]	@ (800334c <HAL_ADC_ConfigChannel+0x7e4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d12a      	bne.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032dc:	4619      	mov	r1, r3
 80032de:	4819      	ldr	r0, [pc, #100]	@ (8003344 <HAL_ADC_ConfigChannel+0x7dc>)
 80032e0:	f7ff f96f 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e4:	e021      	b.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <HAL_ADC_ConfigChannel+0x7f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d11c      	bne.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a12      	ldr	r2, [pc, #72]	@ (800334c <HAL_ADC_ConfigChannel+0x7e4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d111      	bne.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800330a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800330e:	4619      	mov	r1, r3
 8003310:	480c      	ldr	r0, [pc, #48]	@ (8003344 <HAL_ADC_ConfigChannel+0x7dc>)
 8003312:	f7ff f956 	bl	80025c2 <LL_ADC_SetCommonPathInternalCh>
 8003316:	e008      	b.n	800332a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003332:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003336:	4618      	mov	r0, r3
 8003338:	37d8      	adds	r7, #216	@ 0xd8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	80080000 	.word	0x80080000
 8003344:	50040300 	.word	0x50040300
 8003348:	c7520000 	.word	0xc7520000
 800334c:	50040000 	.word	0x50040000
 8003350:	200000b0 	.word	0x200000b0
 8003354:	053e2d63 	.word	0x053e2d63
 8003358:	cb840000 	.word	0xcb840000
 800335c:	80000001 	.word	0x80000001

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4907      	ldr	r1, [pc, #28]	@ (80033fc <__NVIC_EnableIRQ+0x38>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000e100 	.word	0xe000e100

08003400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	@ (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
         );
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034cc:	d301      	bcc.n	80034d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <SysTick_Config+0x40>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034da:	210f      	movs	r1, #15
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295
 80034e0:	f7ff ff8e 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <SysTick_Config+0x40>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ea:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <SysTick_Config+0x40>)
 80034ec:	2207      	movs	r2, #7
 80034ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000e010 	.word	0xe000e010

08003500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff29 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003528:	f7ff ff3e 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 800352c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6978      	ldr	r0, [r7, #20]
 8003534:	f7ff ff8e 	bl	8003454 <NVIC_EncodePriority>
 8003538:	4602      	mov	r2, r0
 800353a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff5d 	bl	8003400 <__NVIC_SetPriority>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff31 	bl	80033c4 <__NVIC_EnableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffa2 	bl	80034bc <SysTick_Config>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0ac      	b.n	80036f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f8b2 	bl	8003704 <DFSDM_GetChannelFromInstance>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4a55      	ldr	r2, [pc, #340]	@ (80036f8 <HAL_DFSDM_ChannelInit+0x174>)
 80035a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e09f      	b.n	80036f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fe f805 	bl	80015c0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80035b6:	4b51      	ldr	r3, [pc, #324]	@ (80036fc <HAL_DFSDM_ChannelInit+0x178>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a4f      	ldr	r2, [pc, #316]	@ (80036fc <HAL_DFSDM_ChannelInit+0x178>)
 80035be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80035c0:	4b4e      	ldr	r3, [pc, #312]	@ (80036fc <HAL_DFSDM_ChannelInit+0x178>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d125      	bne.n	8003614 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80035c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80035d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4948      	ldr	r1, [pc, #288]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a46      	ldr	r2, [pc, #280]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035e8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80035ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80035f6:	4b42      	ldr	r3, [pc, #264]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	493f      	ldr	r1, [pc, #252]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003608:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3c      	ldr	r2, [pc, #240]	@ (8003700 <HAL_DFSDM_ChannelInit+0x17c>)
 800360e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003612:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003622:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003632:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003638:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020f 	bic.w	r2, r2, #15
 8003650:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003678:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f002 0207 	and.w	r2, r2, #7
 80036a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f810 	bl	8003704 <DFSDM_GetChannelFromInstance>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_DFSDM_ChannelInit+0x174>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200006cc 	.word	0x200006cc
 80036fc:	200006c8 	.word	0x200006c8
 8003700:	40016000 	.word	0x40016000

08003704 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <DFSDM_GetChannelFromInstance+0x7c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d102      	bne.n	800371a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e02b      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a19      	ldr	r2, [pc, #100]	@ (8003784 <DFSDM_GetChannelFromInstance+0x80>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d102      	bne.n	8003728 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e024      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <DFSDM_GetChannelFromInstance+0x84>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d102      	bne.n	8003736 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e01d      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a14      	ldr	r2, [pc, #80]	@ (800378c <DFSDM_GetChannelFromInstance+0x88>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d102      	bne.n	8003744 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800373e:	2304      	movs	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e016      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a12      	ldr	r2, [pc, #72]	@ (8003790 <DFSDM_GetChannelFromInstance+0x8c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800374c:	2305      	movs	r3, #5
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e00f      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a0f      	ldr	r2, [pc, #60]	@ (8003794 <DFSDM_GetChannelFromInstance+0x90>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d102      	bne.n	8003760 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800375a:	2306      	movs	r3, #6
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e008      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a0d      	ldr	r2, [pc, #52]	@ (8003798 <DFSDM_GetChannelFromInstance+0x94>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003768:	2307      	movs	r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e001      	b.n	8003772 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800376e:	2303      	movs	r3, #3
 8003770:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003772:	68fb      	ldr	r3, [r7, #12]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40016000 	.word	0x40016000
 8003784:	40016020 	.word	0x40016020
 8003788:	40016040 	.word	0x40016040
 800378c:	40016080 	.word	0x40016080
 8003790:	400160a0 	.word	0x400160a0
 8003794:	400160c0 	.word	0x400160c0
 8003798:	400160e0 	.word	0x400160e0

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	e166      	b.n	8003a7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8158 	beq.w	8003a74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d005      	beq.n	80037dc <HAL_GPIO_Init+0x40>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d130      	bne.n	800383e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003812:	2201      	movs	r2, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 0201 	and.w	r2, r3, #1
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d017      	beq.n	800387a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	2203      	movs	r2, #3
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d123      	bne.n	80038ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	08da      	lsrs	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3208      	adds	r2, #8
 800388e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	6939      	ldr	r1, [r7, #16]
 80038ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80b2 	beq.w	8003a74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <HAL_GPIO_Init+0x2fc>)
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	4a60      	ldr	r2, [pc, #384]	@ (8003a98 <HAL_GPIO_Init+0x2fc>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6613      	str	r3, [r2, #96]	@ 0x60
 800391c:	4b5e      	ldr	r3, [pc, #376]	@ (8003a98 <HAL_GPIO_Init+0x2fc>)
 800391e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003928:	4a5c      	ldr	r2, [pc, #368]	@ (8003a9c <HAL_GPIO_Init+0x300>)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003952:	d02b      	beq.n	80039ac <HAL_GPIO_Init+0x210>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_GPIO_Init+0x304>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d025      	beq.n	80039a8 <HAL_GPIO_Init+0x20c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a51      	ldr	r2, [pc, #324]	@ (8003aa4 <HAL_GPIO_Init+0x308>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01f      	beq.n	80039a4 <HAL_GPIO_Init+0x208>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a50      	ldr	r2, [pc, #320]	@ (8003aa8 <HAL_GPIO_Init+0x30c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d019      	beq.n	80039a0 <HAL_GPIO_Init+0x204>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a4f      	ldr	r2, [pc, #316]	@ (8003aac <HAL_GPIO_Init+0x310>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d013      	beq.n	800399c <HAL_GPIO_Init+0x200>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_GPIO_Init+0x314>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00d      	beq.n	8003998 <HAL_GPIO_Init+0x1fc>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab4 <HAL_GPIO_Init+0x318>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_GPIO_Init+0x1f8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab8 <HAL_GPIO_Init+0x31c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_GPIO_Init+0x1f4>
 800398c:	2307      	movs	r3, #7
 800398e:	e00e      	b.n	80039ae <HAL_GPIO_Init+0x212>
 8003990:	2308      	movs	r3, #8
 8003992:	e00c      	b.n	80039ae <HAL_GPIO_Init+0x212>
 8003994:	2306      	movs	r3, #6
 8003996:	e00a      	b.n	80039ae <HAL_GPIO_Init+0x212>
 8003998:	2305      	movs	r3, #5
 800399a:	e008      	b.n	80039ae <HAL_GPIO_Init+0x212>
 800399c:	2304      	movs	r3, #4
 800399e:	e006      	b.n	80039ae <HAL_GPIO_Init+0x212>
 80039a0:	2303      	movs	r3, #3
 80039a2:	e004      	b.n	80039ae <HAL_GPIO_Init+0x212>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e002      	b.n	80039ae <HAL_GPIO_Init+0x212>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_GPIO_Init+0x212>
 80039ac:	2300      	movs	r3, #0
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	f002 0203 	and.w	r2, r2, #3
 80039b4:	0092      	lsls	r2, r2, #2
 80039b6:	4093      	lsls	r3, r2
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039be:	4937      	ldr	r1, [pc, #220]	@ (8003a9c <HAL_GPIO_Init+0x300>)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039cc:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_GPIO_Init+0x320>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039f0:	4a32      	ldr	r2, [pc, #200]	@ (8003abc <HAL_GPIO_Init+0x320>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f6:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_GPIO_Init+0x320>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a1a:	4a28      	ldr	r2, [pc, #160]	@ (8003abc <HAL_GPIO_Init+0x320>)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a20:	4b26      	ldr	r3, [pc, #152]	@ (8003abc <HAL_GPIO_Init+0x320>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a44:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <HAL_GPIO_Init+0x320>)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003abc <HAL_GPIO_Init+0x320>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4013      	ands	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a6e:	4a13      	ldr	r2, [pc, #76]	@ (8003abc <HAL_GPIO_Init+0x320>)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	3301      	adds	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f47f ae91 	bne.w	80037ac <HAL_GPIO_Init+0x10>
  }
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	48000400 	.word	0x48000400
 8003aa4:	48000800 	.word	0x48000800
 8003aa8:	48000c00 	.word	0x48000c00
 8003aac:	48001000 	.word	0x48001000
 8003ab0:	48001400 	.word	0x48001400
 8003ab4:	48001800 	.word	0x48001800
 8003ab8:	48001c00 	.word	0x48001c00
 8003abc:	40010400 	.word	0x40010400

08003ac0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ace:	e0c9      	b.n	8003c64 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80bc 	beq.w	8003c5e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ae6:	4a66      	ldr	r2, [pc, #408]	@ (8003c80 <HAL_GPIO_DeInit+0x1c0>)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b0e:	d02b      	beq.n	8003b68 <HAL_GPIO_DeInit+0xa8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a5c      	ldr	r2, [pc, #368]	@ (8003c84 <HAL_GPIO_DeInit+0x1c4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d025      	beq.n	8003b64 <HAL_GPIO_DeInit+0xa4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c88 <HAL_GPIO_DeInit+0x1c8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01f      	beq.n	8003b60 <HAL_GPIO_DeInit+0xa0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a5a      	ldr	r2, [pc, #360]	@ (8003c8c <HAL_GPIO_DeInit+0x1cc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d019      	beq.n	8003b5c <HAL_GPIO_DeInit+0x9c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a59      	ldr	r2, [pc, #356]	@ (8003c90 <HAL_GPIO_DeInit+0x1d0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_GPIO_DeInit+0x98>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a58      	ldr	r2, [pc, #352]	@ (8003c94 <HAL_GPIO_DeInit+0x1d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00d      	beq.n	8003b54 <HAL_GPIO_DeInit+0x94>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a57      	ldr	r2, [pc, #348]	@ (8003c98 <HAL_GPIO_DeInit+0x1d8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <HAL_GPIO_DeInit+0x90>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a56      	ldr	r2, [pc, #344]	@ (8003c9c <HAL_GPIO_DeInit+0x1dc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_GPIO_DeInit+0x8c>
 8003b48:	2307      	movs	r3, #7
 8003b4a:	e00e      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	e00c      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b50:	2306      	movs	r3, #6
 8003b52:	e00a      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b54:	2305      	movs	r3, #5
 8003b56:	e008      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	e006      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e004      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e002      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_GPIO_DeInit+0xaa>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d132      	bne.n	8003be0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b7a:	4b49      	ldr	r3, [pc, #292]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	4947      	ldr	r1, [pc, #284]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003b88:	4b45      	ldr	r3, [pc, #276]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	4943      	ldr	r1, [pc, #268]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003b96:	4b42      	ldr	r3, [pc, #264]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	4940      	ldr	r1, [pc, #256]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	493c      	ldr	r1, [pc, #240]	@ (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c80 <HAL_GPIO_DeInit+0x1c0>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	482b      	ldr	r0, [pc, #172]	@ (8003c80 <HAL_GPIO_DeInit+0x1c0>)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	400a      	ands	r2, r1
 8003bda:	3302      	adds	r3, #2
 8003bdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	2103      	movs	r1, #3
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	220f      	movs	r2, #15
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	08d2      	lsrs	r2, r2, #3
 8003c14:	4019      	ands	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2103      	movs	r1, #3
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	401a      	ands	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	401a      	ands	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2103      	movs	r1, #3
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	401a      	ands	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f af2f 	bne.w	8003ad0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40010000 	.word	0x40010000
 8003c84:	48000400 	.word	0x48000400
 8003c88:	48000800 	.word	0x48000800
 8003c8c:	48000c00 	.word	0x48000c00
 8003c90:	48001000 	.word	0x48001000
 8003c94:	48001400 	.word	0x48001400
 8003c98:	48001800 	.word	0x48001800
 8003c9c:	48001c00 	.word	0x48001c00
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cb4:	787b      	ldrb	r3, [r7, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cba:	887a      	ldrh	r2, [r7, #2]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc0:	e002      	b.n	8003cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc2:	887a      	ldrh	r2, [r7, #2]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cea:	4a05      	ldr	r2, [pc, #20]	@ (8003d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f806 	bl	8003d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e08d      	b.n	8003e48 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd fca1 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2224      	movs	r2, #36	@ 0x24
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d6a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d7a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d107      	bne.n	8003d94 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	e006      	b.n	8003da2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003da0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d108      	bne.n	8003dbc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	e007      	b.n	8003dcc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dde:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69d9      	ldr	r1, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e021      	b.n	8003ea6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2224      	movs	r2, #36	@ 0x24
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd fca6 	bl	80017cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	817b      	strh	r3, [r7, #10]
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	813b      	strh	r3, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	f040 80f9 	bne.w	80040ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x34>
 8003ede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0ed      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_I2C_Mem_Write+0x4e>
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0e6      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f06:	f7fe fb19 	bl	800253c <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2319      	movs	r3, #25
 8003f12:	2201      	movs	r2, #1
 8003f14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fac3 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0d1      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	@ 0x21
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2240      	movs	r2, #64	@ 0x40
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a3a      	ldr	r2, [r7, #32]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f50:	88f8      	ldrh	r0, [r7, #6]
 8003f52:	893a      	ldrh	r2, [r7, #8]
 8003f54:	8979      	ldrh	r1, [r7, #10]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4603      	mov	r3, r0
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f9d3 	bl	800430c <I2C_RequestMemoryWrite>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0a9      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2bff      	cmp	r3, #255	@ 0xff
 8003f80:	d90e      	bls.n	8003fa0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	22ff      	movs	r2, #255	@ 0xff
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fc47 	bl	800482c <I2C_TransferConfig>
 8003f9e:	e00f      	b.n	8003fc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	8979      	ldrh	r1, [r7, #10]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fc36 	bl	800482c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fac6 	bl	8004556 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e07b      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d034      	beq.n	8004078 <HAL_I2C_Mem_Write+0x1c8>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d130      	bne.n	8004078 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	@ 0x80
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fa3f 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e04d      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2bff      	cmp	r3, #255	@ 0xff
 8004038:	d90e      	bls.n	8004058 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22ff      	movs	r2, #255	@ 0xff
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004044:	b2da      	uxtb	r2, r3
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	2300      	movs	r3, #0
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fbeb 	bl	800482c <I2C_TransferConfig>
 8004056:	e00f      	b.n	8004078 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004066:	b2da      	uxtb	r2, r3
 8004068:	8979      	ldrh	r1, [r7, #10]
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fbda 	bl	800482c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d19e      	bne.n	8003fc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 faac 	bl	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e01a      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2220      	movs	r2, #32
 800409c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_I2C_Mem_Write+0x224>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	fe00e800 	.word	0xfe00e800

080040d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f040 80fd 	bne.w	80042fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_I2C_Mem_Read+0x34>
 8004106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004112:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0f1      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_I2C_Mem_Read+0x4e>
 8004122:	2302      	movs	r3, #2
 8004124:	e0ea      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800412e:	f7fe fa05 	bl	800253c <HAL_GetTick>
 8004132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2319      	movs	r3, #25
 800413a:	2201      	movs	r2, #1
 800413c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f9af 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0d5      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2222      	movs	r2, #34	@ 0x22
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2240      	movs	r2, #64	@ 0x40
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004170:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004178:	88f8      	ldrh	r0, [r7, #6]
 800417a:	893a      	ldrh	r2, [r7, #8]
 800417c:	8979      	ldrh	r1, [r7, #10]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4603      	mov	r3, r0
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f913 	bl	80043b4 <I2C_RequestMemoryRead>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0ad      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2bff      	cmp	r3, #255	@ 0xff
 80041a8:	d90e      	bls.n	80041c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	4b52      	ldr	r3, [pc, #328]	@ (8004304 <HAL_I2C_Mem_Read+0x22c>)
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fb33 	bl	800482c <I2C_TransferConfig>
 80041c6:	e00f      	b.n	80041e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	8979      	ldrh	r1, [r7, #10]
 80041da:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <HAL_I2C_Mem_Read+0x22c>)
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fb22 	bl	800482c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	2200      	movs	r2, #0
 80041f0:	2104      	movs	r1, #4
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f956 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e07c      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d034      	beq.n	80042a8 <HAL_I2C_Mem_Read+0x1d0>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d130      	bne.n	80042a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	@ 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f927 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04d      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	@ 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fad3 	bl	800482c <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fac2 	bl	800482c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d19a      	bne.n	80041e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f994 	bl	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e01a      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2220      	movs	r2, #32
 80042cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_I2C_Mem_Read+0x230>)
 80042da:	400b      	ands	r3, r1
 80042dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	80002400 	.word	0x80002400
 8004308:	fe00e800 	.word	0xfe00e800

0800430c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	4608      	mov	r0, r1
 8004316:	4611      	mov	r1, r2
 8004318:	461a      	mov	r2, r3
 800431a:	4603      	mov	r3, r0
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	460b      	mov	r3, r1
 8004320:	813b      	strh	r3, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	8979      	ldrh	r1, [r7, #10]
 800432c:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <I2C_RequestMemoryWrite+0xa4>)
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fa79 	bl	800482c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f909 	bl	8004556 <I2C_WaitOnTXISFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e02c      	b.n	80043a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004354:	893b      	ldrh	r3, [r7, #8]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	629a      	str	r2, [r3, #40]	@ 0x28
 800435e:	e015      	b.n	800438c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004360:	893b      	ldrh	r3, [r7, #8]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	b29b      	uxth	r3, r3
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8ef 	bl	8004556 <I2C_WaitOnTXISFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e012      	b.n	80043a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004382:	893b      	ldrh	r3, [r7, #8]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	@ 0x80
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f884 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	80002000 	.word	0x80002000

080043b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	461a      	mov	r2, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	817b      	strh	r3, [r7, #10]
 80043c6:	460b      	mov	r3, r1
 80043c8:	813b      	strh	r3, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	8979      	ldrh	r1, [r7, #10]
 80043d4:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <I2C_RequestMemoryRead+0xa4>)
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2300      	movs	r3, #0
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fa26 	bl	800482c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	69b9      	ldr	r1, [r7, #24]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f8b6 	bl	8004556 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e02c      	b.n	800444e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043fa:	893b      	ldrh	r3, [r7, #8]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28
 8004404:	e015      	b.n	8004432 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	b29b      	uxth	r3, r3
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	69b9      	ldr	r1, [r7, #24]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f89c 	bl	8004556 <I2C_WaitOnTXISFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e012      	b.n	800444e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	@ 0x40
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f831 	bl	80044a4 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	80002000 	.word	0x80002000

0800445c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d103      	bne.n	800447a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d007      	beq.n	8004498 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	619a      	str	r2, [r3, #24]
  }
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b4:	e03b      	b.n	800452e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f8d6 	bl	800466c <I2C_IsErrorOccurred>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e041      	b.n	800454e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d02d      	beq.n	800452e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe f833 	bl	800253c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d122      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d113      	bne.n	800452e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e00f      	b.n	800454e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	699a      	ldr	r2, [r3, #24]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4013      	ands	r3, r2
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	429a      	cmp	r2, r3
 800453c:	bf0c      	ite	eq
 800453e:	2301      	moveq	r3, #1
 8004540:	2300      	movne	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	429a      	cmp	r2, r3
 800454a:	d0b4      	beq.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004562:	e033      	b.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f87f 	bl	800466c <I2C_IsErrorOccurred>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e031      	b.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d025      	beq.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004580:	f7fd ffdc 	bl	800253c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	d302      	bcc.n	8004596 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11a      	bne.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d013      	beq.n	80045cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e007      	b.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d1c4      	bne.n	8004564 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f0:	e02f      	b.n	8004652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f838 	bl	800466c <I2C_IsErrorOccurred>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e02d      	b.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fd ff99 	bl	800253c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11a      	bne.n	8004652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d013      	beq.n	8004652 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e007      	b.n	8004662 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b20      	cmp	r3, #32
 800465e:	d1c8      	bne.n	80045f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	@ 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d068      	beq.n	800476a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2210      	movs	r2, #16
 800469e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046a0:	e049      	b.n	8004736 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d045      	beq.n	8004736 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fd ff47 	bl	800253c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_IsErrorOccurred+0x54>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d13a      	bne.n	8004736 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e2:	d121      	bne.n	8004728 <I2C_IsErrorOccurred+0xbc>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046ea:	d01d      	beq.n	8004728 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d01a      	beq.n	8004728 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004702:	f7fd ff1b 	bl	800253c <HAL_GetTick>
 8004706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004708:	e00e      	b.n	8004728 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800470a:	f7fd ff17 	bl	800253c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b19      	cmp	r3, #25
 8004716:	d907      	bls.n	8004728 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004726:	e006      	b.n	8004736 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d1e9      	bne.n	800470a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b20      	cmp	r3, #32
 8004742:	d003      	beq.n	800474c <I2C_IsErrorOccurred+0xe0>
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0aa      	beq.n	80046a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800474c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2220      	movs	r2, #32
 800475a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800478c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f043 0308 	orr.w	r3, r3, #8
 80047a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00b      	beq.n	80047d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80047d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01c      	beq.n	800481a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7ff fe3b 	bl	800445c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <I2C_IsErrorOccurred+0x1bc>)
 80047f2:	400b      	ands	r3, r1
 80047f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800481a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800481e:	4618      	mov	r0, r3
 8004820:	3728      	adds	r7, #40	@ 0x28
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	fe00e800 	.word	0xfe00e800

0800482c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	817b      	strh	r3, [r7, #10]
 800483a:	4613      	mov	r3, r2
 800483c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004844:	7a7b      	ldrb	r3, [r7, #9]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	4313      	orrs	r3, r2
 8004856:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800485a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	0d5b      	lsrs	r3, r3, #21
 8004866:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800486a:	4b08      	ldr	r3, [pc, #32]	@ (800488c <I2C_TransferConfig+0x60>)
 800486c:	430b      	orrs	r3, r1
 800486e:	43db      	mvns	r3, r3
 8004870:	ea02 0103 	and.w	r1, r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	03ff63ff 	.word	0x03ff63ff

08004890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d138      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e032      	b.n	800491a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	@ 0x24
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b20      	cmp	r3, #32
 800493a:	d139      	bne.n	80049b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004946:	2302      	movs	r3, #2
 8004948:	e033      	b.n	80049b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2224      	movs	r2, #36	@ 0x24
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80049cc:	f7fd fdb6 	bl	800253c <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
 80049dc:	e092      	b.n	8004b04 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 808b 	bne.w	8004b04 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fc ff28 	bl	8001844 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80049f4:	f241 3188 	movw	r1, #5000	@ 0x1388
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f88b 	bl	8004b14 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b42      	ldr	r3, [pc, #264]	@ (8004b10 <HAL_OSPI_Init+0x150>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68d1      	ldr	r1, [r2, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6912      	ldr	r2, [r2, #16]
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0412      	lsls	r2, r2, #16
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6952      	ldr	r2, [r2, #20]
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0212      	lsls	r2, r2, #8
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a24:	4311      	orrs	r1, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	69d2      	ldr	r2, [r2, #28]
 8004a2a:	4311      	orrs	r1, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0412      	lsls	r2, r2, #16
 8004a3e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	2120      	movs	r1, #32
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fb9c 	bl	80051a4 <OSPI_WaitFlagStateUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d146      	bne.n	8004b04 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004aac:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d107      	bne.n	8004aec <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0202 	orr.w	r2, r2, #2
 8004aea:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004af4:	d103      	bne.n	8004afe <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	645a      	str	r2, [r3, #68]	@ 0x44
 8004afc:	e002      	b.n	8004b04 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	f8e0f8f4 	.word	0xf8e0f8f4

08004b14 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b092      	sub	sp, #72	@ 0x48
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a08      	ldr	r2, [pc, #32]	@ (8004b74 <HAL_OSPIM_Config+0x40>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d105      	bne.n	8004b62 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004b60:	e004      	b.n	8004b6c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004b62:	2301      	movs	r3, #1
 8004b64:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004b72:	e01f      	b.n	8004bb4 <HAL_OSPIM_Config+0x80>
 8004b74:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004b78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	b2d8      	uxtb	r0, r3
 8004b80:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004b84:	f107 0114 	add.w	r1, r7, #20
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	4619      	mov	r1, r3
 8004b94:	f000 fb3e 	bl	8005214 <OSPIM_GetConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004baa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d9dd      	bls.n	8004b78 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004bbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 82e3 	bne.w	800518c <HAL_OSPIM_Config+0x658>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004bc6:	4bc5      	ldr	r3, [pc, #788]	@ (8004edc <HAL_OSPIM_Config+0x3a8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004bd2:	4bc2      	ldr	r3, [pc, #776]	@ (8004edc <HAL_OSPIM_Config+0x3a8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4ac1      	ldr	r2, [pc, #772]	@ (8004edc <HAL_OSPIM_Config+0x3a8>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004bde:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8004bea:	4bbd      	ldr	r3, [pc, #756]	@ (8004ee0 <HAL_OSPIM_Config+0x3ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00b      	beq.n	8004c0e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004bf6:	4bba      	ldr	r3, [pc, #744]	@ (8004ee0 <HAL_OSPIM_Config+0x3ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4ab9      	ldr	r2, [pc, #740]	@ (8004ee0 <HAL_OSPIM_Config+0x3ac>)
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004c02:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004c06:	f043 0302 	orr.w	r3, r3, #2
 8004c0a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004c0e:	49b5      	ldr	r1, [pc, #724]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3348      	adds	r3, #72	@ 0x48
 8004c1c:	443b      	add	r3, r7
 8004c1e:	3b2c      	subs	r3, #44	@ 0x2c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	48ae      	ldr	r0, [pc, #696]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	3348      	adds	r3, #72	@ 0x48
 8004c38:	443b      	add	r3, r7
 8004c3a:	3b2c      	subs	r3, #44	@ 0x2c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4403      	add	r3, r0
 8004c48:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	3348      	adds	r3, #72	@ 0x48
 8004c56:	443b      	add	r3, r7
 8004c58:	3b34      	subs	r3, #52	@ 0x34
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80a1 	beq.w	8004da4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004c62:	49a0      	ldr	r1, [pc, #640]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3348      	adds	r3, #72	@ 0x48
 8004c70:	443b      	add	r3, r7
 8004c72:	3b34      	subs	r3, #52	@ 0x34
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	4899      	ldr	r0, [pc, #612]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	3348      	adds	r3, #72	@ 0x48
 8004c8c:	443b      	add	r3, r7
 8004c8e:	3b34      	subs	r3, #52	@ 0x34
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	f021 0201 	bic.w	r2, r1, #1
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4403      	add	r3, r0
 8004c9c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	3348      	adds	r3, #72	@ 0x48
 8004caa:	443b      	add	r3, r7
 8004cac:	3b30      	subs	r3, #48	@ 0x30
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01d      	beq.n	8004cf0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004cb4:	498b      	ldr	r1, [pc, #556]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004cb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	3348      	adds	r3, #72	@ 0x48
 8004cc2:	443b      	add	r3, r7
 8004cc4:	3b30      	subs	r3, #48	@ 0x30
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	4884      	ldr	r0, [pc, #528]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004cd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	3348      	adds	r3, #72	@ 0x48
 8004cde:	443b      	add	r3, r7
 8004ce0:	3b30      	subs	r3, #48	@ 0x30
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f021 0210 	bic.w	r2, r1, #16
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4403      	add	r3, r0
 8004cee:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	3348      	adds	r3, #72	@ 0x48
 8004cfc:	443b      	add	r3, r7
 8004cfe:	3b28      	subs	r3, #40	@ 0x28
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d021      	beq.n	8004d4a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004d06:	4977      	ldr	r1, [pc, #476]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004d08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	3348      	adds	r3, #72	@ 0x48
 8004d14:	443b      	add	r3, r7
 8004d16:	3b28      	subs	r3, #40	@ 0x28
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	486f      	ldr	r0, [pc, #444]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	3348      	adds	r3, #72	@ 0x48
 8004d34:	443b      	add	r3, r7
 8004d36:	3b28      	subs	r3, #40	@ 0x28
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4403      	add	r3, r0
 8004d48:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	3348      	adds	r3, #72	@ 0x48
 8004d56:	443b      	add	r3, r7
 8004d58:	3b24      	subs	r3, #36	@ 0x24
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d021      	beq.n	8004da4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004d60:	4960      	ldr	r1, [pc, #384]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	3348      	adds	r3, #72	@ 0x48
 8004d6e:	443b      	add	r3, r7
 8004d70:	3b24      	subs	r3, #36	@ 0x24
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	4858      	ldr	r0, [pc, #352]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	3348      	adds	r3, #72	@ 0x48
 8004d8e:	443b      	add	r3, r7
 8004d90:	3b24      	subs	r3, #36	@ 0x24
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4403      	add	r3, r0
 8004da2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6819      	ldr	r1, [r3, #0]
 8004da8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	3348      	adds	r3, #72	@ 0x48
 8004db6:	443b      	add	r3, r7
 8004db8:	3b34      	subs	r3, #52	@ 0x34
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4299      	cmp	r1, r3
 8004dbe:	d03c      	beq.n	8004e3a <HAL_OSPIM_Config+0x306>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6899      	ldr	r1, [r3, #8]
 8004dc4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	3348      	adds	r3, #72	@ 0x48
 8004dd2:	443b      	add	r3, r7
 8004dd4:	3b2c      	subs	r3, #44	@ 0x2c
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4299      	cmp	r1, r3
 8004dda:	d02e      	beq.n	8004e3a <HAL_OSPIM_Config+0x306>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	3348      	adds	r3, #72	@ 0x48
 8004dee:	443b      	add	r3, r7
 8004df0:	3b30      	subs	r3, #48	@ 0x30
 8004df2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d103      	bne.n	8004e00 <HAL_OSPIM_Config+0x2cc>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d11c      	bne.n	8004e3a <HAL_OSPIM_Config+0x306>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	68d9      	ldr	r1, [r3, #12]
 8004e04:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3348      	adds	r3, #72	@ 0x48
 8004e12:	443b      	add	r3, r7
 8004e14:	3b28      	subs	r3, #40	@ 0x28
 8004e16:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8004e18:	4299      	cmp	r1, r3
 8004e1a:	d00e      	beq.n	8004e3a <HAL_OSPIM_Config+0x306>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6919      	ldr	r1, [r3, #16]
 8004e20:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	3348      	adds	r3, #72	@ 0x48
 8004e2e:	443b      	add	r3, r7
 8004e30:	3b24      	subs	r3, #36	@ 0x24
 8004e32:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004e34:	4299      	cmp	r1, r3
 8004e36:	f040 80d4 	bne.w	8004fe2 <HAL_OSPIM_Config+0x4ae>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004e3a:	492a      	ldr	r1, [pc, #168]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004e3c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3348      	adds	r3, #72	@ 0x48
 8004e4a:	443b      	add	r3, r7
 8004e4c:	3b34      	subs	r3, #52	@ 0x34
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	6859      	ldr	r1, [r3, #4]
 8004e58:	4822      	ldr	r0, [pc, #136]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004e5a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3348      	adds	r3, #72	@ 0x48
 8004e68:	443b      	add	r3, r7
 8004e6a:	3b34      	subs	r3, #52	@ 0x34
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	f021 0201 	bic.w	r2, r1, #1
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4403      	add	r3, r0
 8004e78:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004e7a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	3348      	adds	r3, #72	@ 0x48
 8004e88:	443b      	add	r3, r7
 8004e8a:	3b30      	subs	r3, #48	@ 0x30
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01f      	beq.n	8004ed2 <HAL_OSPIM_Config+0x39e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004e92:	4914      	ldr	r1, [pc, #80]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004e94:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	3348      	adds	r3, #72	@ 0x48
 8004ea2:	443b      	add	r3, r7
 8004ea4:	3b30      	subs	r3, #48	@ 0x30
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	480c      	ldr	r0, [pc, #48]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004eb2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	3348      	adds	r3, #72	@ 0x48
 8004ec0:	443b      	add	r3, r7
 8004ec2:	3b30      	subs	r3, #48	@ 0x30
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	f021 0210 	bic.w	r2, r1, #16
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4403      	add	r3, r0
 8004ed0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004ed2:	4904      	ldr	r1, [pc, #16]	@ (8004ee4 <HAL_OSPIM_Config+0x3b0>)
 8004ed4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004ed8:	e006      	b.n	8004ee8 <HAL_OSPIM_Config+0x3b4>
 8004eda:	bf00      	nop
 8004edc:	a0001000 	.word	0xa0001000
 8004ee0:	a0001400 	.word	0xa0001400
 8004ee4:	50061c00 	.word	0x50061c00
 8004ee8:	4613      	mov	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	3348      	adds	r3, #72	@ 0x48
 8004ef2:	443b      	add	r3, r7
 8004ef4:	3b2c      	subs	r3, #44	@ 0x2c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	6859      	ldr	r1, [r3, #4]
 8004f00:	48a5      	ldr	r0, [pc, #660]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004f02:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	3348      	adds	r3, #72	@ 0x48
 8004f10:	443b      	add	r3, r7
 8004f12:	3b2c      	subs	r3, #44	@ 0x2c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4403      	add	r3, r0
 8004f20:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004f22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3348      	adds	r3, #72	@ 0x48
 8004f30:	443b      	add	r3, r7
 8004f32:	3b28      	subs	r3, #40	@ 0x28
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d023      	beq.n	8004f82 <HAL_OSPIM_Config+0x44e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f3a:	4997      	ldr	r1, [pc, #604]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004f3c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3348      	adds	r3, #72	@ 0x48
 8004f4a:	443b      	add	r3, r7
 8004f4c:	3b28      	subs	r3, #40	@ 0x28
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	488e      	ldr	r0, [pc, #568]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004f5e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	3348      	adds	r3, #72	@ 0x48
 8004f6c:	443b      	add	r3, r7
 8004f6e:	3b28      	subs	r3, #40	@ 0x28
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4403      	add	r3, r0
 8004f80:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004f82:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	3348      	adds	r3, #72	@ 0x48
 8004f90:	443b      	add	r3, r7
 8004f92:	3b24      	subs	r3, #36	@ 0x24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d023      	beq.n	8004fe2 <HAL_OSPIM_Config+0x4ae>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004f9a:	497f      	ldr	r1, [pc, #508]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004f9c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	3348      	adds	r3, #72	@ 0x48
 8004faa:	443b      	add	r3, r7
 8004fac:	3b24      	subs	r3, #36	@ 0x24
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	4876      	ldr	r0, [pc, #472]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004fbe:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	3348      	adds	r3, #72	@ 0x48
 8004fcc:	443b      	add	r3, r7
 8004fce:	3b24      	subs	r3, #36	@ 0x24
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4403      	add	r3, r0
 8004fe0:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004fe2:	4a6d      	ldr	r2, [pc, #436]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff6:	025b      	lsls	r3, r3, #9
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	4967      	ldr	r1, [pc, #412]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	3b01      	subs	r3, #1
 8005002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800500c:	4a62      	ldr	r2, [pc, #392]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3b01      	subs	r3, #1
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	431a      	orrs	r2, r3
 8005024:	495c      	ldr	r1, [pc, #368]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3b01      	subs	r3, #1
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <HAL_OSPIM_Config+0x534>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800503e:	4a56      	ldr	r2, [pc, #344]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	3b01      	subs	r3, #1
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005052:	015b      	lsls	r3, r3, #5
 8005054:	431a      	orrs	r2, r3
 8005056:	4950      	ldr	r1, [pc, #320]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	f042 0210 	orr.w	r2, r2, #16
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <HAL_OSPIM_Config+0x574>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005074:	4a48      	ldr	r2, [pc, #288]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800508a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800508c:	049b      	lsls	r3, r3, #18
 800508e:	431a      	orrs	r2, r3
 8005090:	4941      	ldr	r1, [pc, #260]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	3b01      	subs	r3, #1
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	e01c      	b.n	80050e2 <HAL_OSPIM_Config+0x5ae>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d018      	beq.n	80050e2 <HAL_OSPIM_Config+0x5ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80050b0:	4a39      	ldr	r2, [pc, #228]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80050c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c8:	069b      	lsls	r3, r3, #26
 80050ca:	431a      	orrs	r2, r3
 80050cc:	4932      	ldr	r1, [pc, #200]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <HAL_OSPIM_Config+0x5ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80050ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005106:	049b      	lsls	r3, r3, #18
 8005108:	431a      	orrs	r2, r3
 800510a:	4923      	ldr	r1, [pc, #140]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3b01      	subs	r3, #1
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	e01c      	b.n	800515c <HAL_OSPIM_Config+0x628>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <HAL_OSPIM_Config+0x628>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800512a:	4a1b      	ldr	r2, [pc, #108]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005142:	069b      	lsls	r3, r3, #26
 8005144:	431a      	orrs	r2, r3
 8005146:	4914      	ldr	r1, [pc, #80]	@ (8005198 <HAL_OSPIM_Config+0x664>)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	3b01      	subs	r3, #1
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800515c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_OSPIM_Config+0x640>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_OSPIM_Config+0x668>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a0b      	ldr	r2, [pc, #44]	@ (800519c <HAL_OSPIM_Config+0x668>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005174:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_OSPIM_Config+0x658>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <HAL_OSPIM_Config+0x66c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a06      	ldr	r2, [pc, #24]	@ (80051a0 <HAL_OSPIM_Config+0x66c>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800518c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005190:	4618      	mov	r0, r3
 8005192:	3748      	adds	r7, #72	@ 0x48
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	50061c00 	.word	0x50061c00
 800519c:	a0001000 	.word	0xa0001000
 80051a0:	a0001400 	.word	0xa0001400

080051a4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80051b4:	e01a      	b.n	80051ec <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051bc:	d016      	beq.n	80051ec <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051be:	f7fd f9bd 	bl	800253c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d302      	bcc.n	80051d4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051da:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e0:	f043 0201 	orr.w	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e00e      	b.n	800520a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6a1a      	ldr	r2, [r3, #32]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	bf14      	ite	ne
 80051fa:	2301      	movne	r3, #1
 80051fc:	2300      	moveq	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d1d6      	bne.n	80051b6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <OSPIM_GetConfig+0x26>
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	2b02      	cmp	r3, #2
 8005232:	d802      	bhi.n	800523a <OSPIM_GetConfig+0x26>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
 800523e:	e08e      	b.n	800535e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d101      	bne.n	8005268 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8005264:	4b41      	ldr	r3, [pc, #260]	@ (800536c <OSPIM_GetConfig+0x158>)
 8005266:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e074      	b.n	8005358 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800526e:	4a40      	ldr	r2, [pc, #256]	@ (8005370 <OSPIM_GetConfig+0x15c>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4053      	eors	r3, r2
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4053      	eors	r3, r2
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4053      	eors	r3, r2
 80052ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d018      	beq.n	8005316 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4053      	eors	r3, r2
 80052ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d111      	bne.n	8005316 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	60da      	str	r2, [r3, #12]
 8005308:	e005      	b.n	8005316 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3301      	adds	r3, #1
 800530e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d018      	beq.n	8005352 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4053      	eors	r3, r2
 8005326:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d111      	bne.n	8005352 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3301      	adds	r3, #1
 800533c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	611a      	str	r2, [r3, #16]
 8005344:	e005      	b.n	8005352 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3301      	adds	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d987      	bls.n	800526e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800535e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	04040222 	.word	0x04040222
 8005370:	50061c00 	.word	0x50061c00

08005374 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005378:	4b05      	ldr	r3, [pc, #20]	@ (8005390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a04      	ldr	r2, [pc, #16]	@ (8005390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40007000 	.word	0x40007000

08005394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a4:	d102      	bne.n	80053ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80053a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053aa:	e00b      	b.n	80053c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80053ac:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ba:	d102      	bne.n	80053c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80053bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053c0:	e000      	b.n	80053c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80053c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40007000 	.word	0x40007000

080053d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d141      	bne.n	8005466 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053e2:	4b4b      	ldr	r3, [pc, #300]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ee:	d131      	bne.n	8005454 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f0:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f6:	4a46      	ldr	r2, [pc, #280]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005400:	4b43      	ldr	r3, [pc, #268]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005408:	4a41      	ldr	r2, [pc, #260]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800540e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005410:	4b40      	ldr	r3, [pc, #256]	@ (8005514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2232      	movs	r2, #50	@ 0x32
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	4a3f      	ldr	r2, [pc, #252]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	0c9b      	lsrs	r3, r3, #18
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005426:	e002      	b.n	800542e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	4b38      	ldr	r3, [pc, #224]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543a:	d102      	bne.n	8005442 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f2      	bne.n	8005428 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005442:	4b33      	ldr	r3, [pc, #204]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800544e:	d158      	bne.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e057      	b.n	8005504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005454:	4b2e      	ldr	r3, [pc, #184]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545a:	4a2d      	ldr	r2, [pc, #180]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005464:	e04d      	b.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800546c:	d141      	bne.n	80054f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800546e:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547a:	d131      	bne.n	80054e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800547c:	4b24      	ldr	r3, [pc, #144]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005482:	4a23      	ldr	r2, [pc, #140]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005488:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800548c:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005494:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005496:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800549a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800549c:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2232      	movs	r2, #50	@ 0x32
 80054a2:	fb02 f303 	mul.w	r3, r2, r3
 80054a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005518 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	0c9b      	lsrs	r3, r3, #18
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	e002      	b.n	80054ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ba:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c6:	d102      	bne.n	80054ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f2      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ce:	4b10      	ldr	r3, [pc, #64]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054da:	d112      	bne.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e011      	b.n	8005504 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054f0:	e007      	b.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054f2:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054fa:	4a05      	ldr	r2, [pc, #20]	@ (8005510 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005500:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40007000 	.word	0x40007000
 8005514:	200000b0 	.word	0x200000b0
 8005518:	431bde83 	.word	0x431bde83

0800551c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	f000 bc08 	b.w	8005d40 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005530:	4b96      	ldr	r3, [pc, #600]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 030c 	and.w	r3, r3, #12
 8005538:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553a:	4b94      	ldr	r3, [pc, #592]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80e4 	beq.w	800571a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <HAL_RCC_OscConfig+0x4c>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b0c      	cmp	r3, #12
 800555c:	f040 808b 	bne.w	8005676 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 8087 	bne.w	8005676 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005568:	4b88      	ldr	r3, [pc, #544]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_OscConfig+0x64>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e3df      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	4b81      	ldr	r3, [pc, #516]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_RCC_OscConfig+0x7e>
 8005590:	4b7e      	ldr	r3, [pc, #504]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005598:	e005      	b.n	80055a6 <HAL_RCC_OscConfig+0x8a>
 800559a:	4b7c      	ldr	r3, [pc, #496]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d223      	bcs.n	80055f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fdcc 	bl	800614c <RCC_SetFlashLatencyFromMSIRange>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e3c0      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055be:	4b73      	ldr	r3, [pc, #460]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a72      	ldr	r2, [pc, #456]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055c4:	f043 0308 	orr.w	r3, r3, #8
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b70      	ldr	r3, [pc, #448]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	496d      	ldr	r1, [pc, #436]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055dc:	4b6b      	ldr	r3, [pc, #428]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	4968      	ldr	r1, [pc, #416]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	604b      	str	r3, [r1, #4]
 80055f0:	e025      	b.n	800563e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055f2:	4b66      	ldr	r3, [pc, #408]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a65      	ldr	r2, [pc, #404]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b63      	ldr	r3, [pc, #396]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	4960      	ldr	r1, [pc, #384]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005610:	4b5e      	ldr	r3, [pc, #376]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	495b      	ldr	r1, [pc, #364]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fd8c 	bl	800614c <RCC_SetFlashLatencyFromMSIRange>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e380      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800563e:	f000 fcc1 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005642:	4602      	mov	r2, r0
 8005644:	4b51      	ldr	r3, [pc, #324]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4950      	ldr	r1, [pc, #320]	@ (8005790 <HAL_RCC_OscConfig+0x274>)
 8005650:	5ccb      	ldrb	r3, [r1, r3]
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a4e      	ldr	r2, [pc, #312]	@ (8005794 <HAL_RCC_OscConfig+0x278>)
 800565c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800565e:	4b4e      	ldr	r3, [pc, #312]	@ (8005798 <HAL_RCC_OscConfig+0x27c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7fc ff1a 	bl	800249c <HAL_InitTick>
 8005668:	4603      	mov	r3, r0
 800566a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d052      	beq.n	8005718 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	e364      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d032      	beq.n	80056e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800567e:	4b43      	ldr	r3, [pc, #268]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a42      	ldr	r2, [pc, #264]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800568a:	f7fc ff57 	bl	800253c <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005692:	f7fc ff53 	bl	800253c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e34d      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056a4:	4b39      	ldr	r3, [pc, #228]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056b0:	4b36      	ldr	r3, [pc, #216]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a35      	ldr	r2, [pc, #212]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056b6:	f043 0308 	orr.w	r3, r3, #8
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b33      	ldr	r3, [pc, #204]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	4930      	ldr	r1, [pc, #192]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ce:	4b2f      	ldr	r3, [pc, #188]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	492b      	ldr	r1, [pc, #172]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	604b      	str	r3, [r1, #4]
 80056e2:	e01a      	b.n	800571a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056e4:	4b29      	ldr	r3, [pc, #164]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a28      	ldr	r2, [pc, #160]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056f0:	f7fc ff24 	bl	800253c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056f8:	f7fc ff20 	bl	800253c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e31a      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800570a:	4b20      	ldr	r3, [pc, #128]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1dc>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d073      	beq.n	800580e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d005      	beq.n	8005738 <HAL_RCC_OscConfig+0x21c>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b0c      	cmp	r3, #12
 8005730:	d10e      	bne.n	8005750 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d10b      	bne.n	8005750 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	4b14      	ldr	r3, [pc, #80]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d063      	beq.n	800580c <HAL_RCC_OscConfig+0x2f0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d15f      	bne.n	800580c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e2f7      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005758:	d106      	bne.n	8005768 <HAL_RCC_OscConfig+0x24c>
 800575a:	4b0c      	ldr	r3, [pc, #48]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a0b      	ldr	r2, [pc, #44]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e025      	b.n	80057b4 <HAL_RCC_OscConfig+0x298>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005770:	d114      	bne.n	800579c <HAL_RCC_OscConfig+0x280>
 8005772:	4b06      	ldr	r3, [pc, #24]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a05      	ldr	r2, [pc, #20]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	4b03      	ldr	r3, [pc, #12]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a02      	ldr	r2, [pc, #8]	@ (800578c <HAL_RCC_OscConfig+0x270>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e013      	b.n	80057b4 <HAL_RCC_OscConfig+0x298>
 800578c:	40021000 	.word	0x40021000
 8005790:	08008684 	.word	0x08008684
 8005794:	200000b0 	.word	0x200000b0
 8005798:	200000d0 	.word	0x200000d0
 800579c:	4ba0      	ldr	r3, [pc, #640]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80057a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a9c      	ldr	r2, [pc, #624]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80057ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fc febe 	bl	800253c <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c4:	f7fc feba 	bl	800253c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	@ 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e2b4      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d6:	4b92      	ldr	r3, [pc, #584]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x2a8>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc feaa 	bl	800253c <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ec:	f7fc fea6 	bl	800253c <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b64      	cmp	r3, #100	@ 0x64
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e2a0      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057fe:	4b88      	ldr	r3, [pc, #544]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x2d0>
 800580a:	e000      	b.n	800580e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d060      	beq.n	80058dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	2b04      	cmp	r3, #4
 800581e:	d005      	beq.n	800582c <HAL_RCC_OscConfig+0x310>
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b0c      	cmp	r3, #12
 8005824:	d119      	bne.n	800585a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d116      	bne.n	800585a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800582c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_OscConfig+0x328>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e27d      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005844:	4b76      	ldr	r3, [pc, #472]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	4973      	ldr	r1, [pc, #460]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005854:	4313      	orrs	r3, r2
 8005856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005858:	e040      	b.n	80058dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d023      	beq.n	80058aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005862:	4b6f      	ldr	r3, [pc, #444]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6e      	ldr	r2, [pc, #440]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fc fe65 	bl	800253c <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005876:	f7fc fe61 	bl	800253c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e25b      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005888:	4b65      	ldr	r3, [pc, #404]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005894:	4b62      	ldr	r3, [pc, #392]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	495f      	ldr	r1, [pc, #380]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	e018      	b.n	80058dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc fe41 	bl	800253c <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058be:	f7fc fe3d 	bl	800253c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e237      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d0:	4b53      	ldr	r3, [pc, #332]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d03c      	beq.n	8005962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01c      	beq.n	800592a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fc fe1c 	bl	800253c <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005908:	f7fc fe18 	bl	800253c <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e212      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800591a:	4b41      	ldr	r3, [pc, #260]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800591c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ef      	beq.n	8005908 <HAL_RCC_OscConfig+0x3ec>
 8005928:	e01b      	b.n	8005962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800592c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005930:	4a3b      	ldr	r2, [pc, #236]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fdff 	bl	800253c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005942:	f7fc fdfb 	bl	800253c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e1f5      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005954:	4b32      	ldr	r3, [pc, #200]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ef      	bne.n	8005942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80a6 	beq.w	8005abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005970:	2300      	movs	r3, #0
 8005972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005974:	4b2a      	ldr	r3, [pc, #168]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005980:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005984:	4a26      	ldr	r2, [pc, #152]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800598a:	6593      	str	r3, [r2, #88]	@ 0x58
 800598c:	4b24      	ldr	r3, [pc, #144]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005998:	2301      	movs	r3, #1
 800599a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599c:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <HAL_RCC_OscConfig+0x508>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d118      	bne.n	80059da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a24 <HAL_RCC_OscConfig+0x508>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <HAL_RCC_OscConfig+0x508>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059b4:	f7fc fdc2 	bl	800253c <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059bc:	f7fc fdbe 	bl	800253c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1b8      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059ce:	4b15      	ldr	r3, [pc, #84]	@ (8005a24 <HAL_RCC_OscConfig+0x508>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d108      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4d8>
 80059e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80059f2:	e029      	b.n	8005a48 <HAL_RCC_OscConfig+0x52c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b05      	cmp	r3, #5
 80059fa:	d115      	bne.n	8005a28 <HAL_RCC_OscConfig+0x50c>
 80059fc:	4b08      	ldr	r3, [pc, #32]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a02:	4a07      	ldr	r2, [pc, #28]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a0c:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a12:	4a03      	ldr	r2, [pc, #12]	@ (8005a20 <HAL_RCC_OscConfig+0x504>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a1c:	e014      	b.n	8005a48 <HAL_RCC_OscConfig+0x52c>
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40007000 	.word	0x40007000
 8005a28:	4b9d      	ldr	r3, [pc, #628]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2e:	4a9c      	ldr	r2, [pc, #624]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a38:	4b99      	ldr	r3, [pc, #612]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	4a98      	ldr	r2, [pc, #608]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7fc fd74 	bl	800253c <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fc fd70 	bl	800253c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e168      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a6e:	4b8c      	ldr	r3, [pc, #560]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ed      	beq.n	8005a58 <HAL_RCC_OscConfig+0x53c>
 8005a7c:	e015      	b.n	8005aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7e:	f7fc fd5d 	bl	800253c <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f7fc fd59 	bl	800253c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e151      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a9c:	4b80      	ldr	r3, [pc, #512]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1ed      	bne.n	8005a86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03c      	beq.n	8005b42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01c      	beq.n	8005b0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ad0:	4b73      	ldr	r3, [pc, #460]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ad6:	4a72      	ldr	r2, [pc, #456]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc fd2c 	bl	800253c <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ae8:	f7fc fd28 	bl	800253c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e122      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005afa:	4b69      	ldr	r3, [pc, #420]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ef      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x5cc>
 8005b08:	e01b      	b.n	8005b42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b0a:	4b65      	ldr	r3, [pc, #404]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b10:	4a63      	ldr	r2, [pc, #396]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1a:	f7fc fd0f 	bl	800253c <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b22:	f7fc fd0b 	bl	800253c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e105      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ef      	bne.n	8005b22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 80f9 	beq.w	8005d3e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	f040 80cf 	bne.w	8005cf4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b56:	4b52      	ldr	r3, [pc, #328]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0203 	and.w	r2, r3, #3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d12c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	3b01      	subs	r3, #1
 8005b76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d123      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d113      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d071      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d068      	beq.n	8005c9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bca:	4b35      	ldr	r3, [pc, #212]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d105      	bne.n	8005be2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005bd6:	4b32      	ldr	r3, [pc, #200]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0ac      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005be6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2d      	ldr	r2, [pc, #180]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bf0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bf2:	f7fc fca3 	bl	800253c <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fc fc9f 	bl	800253c <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e099      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c0c:	4b24      	ldr	r3, [pc, #144]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f0      	bne.n	8005bfa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c18:	4b21      	ldr	r3, [pc, #132]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ca4 <HAL_RCC_OscConfig+0x788>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c28:	3a01      	subs	r2, #1
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	4311      	orrs	r1, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c32:	0212      	lsls	r2, r2, #8
 8005c34:	4311      	orrs	r1, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c3a:	0852      	lsrs	r2, r2, #1
 8005c3c:	3a01      	subs	r2, #1
 8005c3e:	0552      	lsls	r2, r2, #21
 8005c40:	4311      	orrs	r1, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c46:	0852      	lsrs	r2, r2, #1
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	0652      	lsls	r2, r2, #25
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c52:	06d2      	lsls	r2, r2, #27
 8005c54:	430a      	orrs	r2, r1
 8005c56:	4912      	ldr	r1, [pc, #72]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c68:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c74:	f7fc fc62 	bl	800253c <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fc fc5e 	bl	800253c <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e058      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ca0 <HAL_RCC_OscConfig+0x784>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c9a:	e050      	b.n	8005d3e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e04f      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca8:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d144      	bne.n	8005d3e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b24      	ldr	r3, [pc, #144]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a23      	ldr	r2, [pc, #140]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cc0:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a20      	ldr	r2, [pc, #128]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ccc:	f7fc fc36 	bl	800253c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fc fc32 	bl	800253c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e02c      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x7b8>
 8005cf2:	e024      	b.n	8005d3e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d01f      	beq.n	8005d3a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cfa:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d06:	f7fc fc19 	bl	800253c <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fc fc15 	bl	800253c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e00f      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d20:	4b09      	ldr	r3, [pc, #36]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	4905      	ldr	r1, [pc, #20]	@ (8005d48 <HAL_RCC_OscConfig+0x82c>)
 8005d32:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <HAL_RCC_OscConfig+0x830>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	60cb      	str	r3, [r1, #12]
 8005d38:	e001      	b.n	8005d3e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3720      	adds	r7, #32
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	feeefffc 	.word	0xfeeefffc

08005d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e11d      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d68:	4b90      	ldr	r3, [pc, #576]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d910      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b8d      	ldr	r3, [pc, #564]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 020f 	bic.w	r2, r3, #15
 8005d7e:	498b      	ldr	r1, [pc, #556]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b89      	ldr	r3, [pc, #548]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e105      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b81      	ldr	r3, [pc, #516]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d908      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	497b      	ldr	r1, [pc, #492]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d079      	beq.n	8005ec6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d11e      	bne.n	8005e18 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dda:	4b75      	ldr	r3, [pc, #468]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0dc      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005dea:	f000 fa09 	bl	8006200 <RCC_GetSysClockFreqFromPLLSource>
 8005dee:	4603      	mov	r3, r0
 8005df0:	4a70      	ldr	r2, [pc, #448]	@ (8005fb4 <HAL_RCC_ClockConfig+0x264>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d946      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005df6:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d140      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e02:	4b6b      	ldr	r3, [pc, #428]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e0a:	4a69      	ldr	r2, [pc, #420]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e035      	b.n	8005e84 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e20:	4b63      	ldr	r3, [pc, #396]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0b9      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d107      	bne.n	8005e48 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e38:	4b5d      	ldr	r3, [pc, #372]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0ad      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e48:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0a5      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005e58:	f000 f8b4 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a55      	ldr	r2, [pc, #340]	@ (8005fb4 <HAL_RCC_ClockConfig+0x264>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d90f      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e64:	4b52      	ldr	r3, [pc, #328]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e70:	4b4f      	ldr	r3, [pc, #316]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e78:	4a4d      	ldr	r2, [pc, #308]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e84:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f023 0203 	bic.w	r2, r3, #3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4947      	ldr	r1, [pc, #284]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e96:	f7fc fb51 	bl	800253c <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9c:	e00a      	b.n	8005eb4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e9e:	f7fc fb4d 	bl	800253c <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e077      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 020c 	and.w	r2, r3, #12
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d1eb      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b80      	cmp	r3, #128	@ 0x80
 8005eca:	d105      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005ecc:	4b38      	ldr	r3, [pc, #224]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a37      	ldr	r2, [pc, #220]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ed6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d010      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	4b31      	ldr	r3, [pc, #196]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d208      	bcs.n	8005f06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	492b      	ldr	r1, [pc, #172]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f06:	4b29      	ldr	r3, [pc, #164]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d210      	bcs.n	8005f36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f14:	4b25      	ldr	r3, [pc, #148]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 020f 	bic.w	r2, r3, #15
 8005f1c:	4923      	ldr	r1, [pc, #140]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f24:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <HAL_RCC_ClockConfig+0x25c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d001      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e036      	b.n	8005fa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f42:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4918      	ldr	r1, [pc, #96]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f60:	4b13      	ldr	r3, [pc, #76]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4910      	ldr	r1, [pc, #64]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f74:	f000 f826 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb0 <HAL_RCC_ClockConfig+0x260>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	091b      	lsrs	r3, r3, #4
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	490c      	ldr	r1, [pc, #48]	@ (8005fb8 <HAL_RCC_ClockConfig+0x268>)
 8005f86:	5ccb      	ldrb	r3, [r1, r3]
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <HAL_RCC_ClockConfig+0x26c>)
 8005f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f94:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc0 <HAL_RCC_ClockConfig+0x270>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fc fa7f 	bl	800249c <HAL_InitTick>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40022000 	.word	0x40022000
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	04c4b400 	.word	0x04c4b400
 8005fb8:	08008684 	.word	0x08008684
 8005fbc:	200000b0 	.word	0x200000b0
 8005fc0:	200000d0 	.word	0x200000d0

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b089      	sub	sp, #36	@ 0x24
 8005fc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d121      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d11e      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ff8:	4b34      	ldr	r3, [pc, #208]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d107      	bne.n	8006014 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006004:	4b31      	ldr	r3, [pc, #196]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	e005      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006014:	4b2d      	ldr	r3, [pc, #180]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006020:	4a2b      	ldr	r2, [pc, #172]	@ (80060d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006028:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10d      	bne.n	800604c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006034:	e00a      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d102      	bne.n	8006042 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800603c:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	e004      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b08      	cmp	r3, #8
 8006046:	d101      	bne.n	800604c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006048:	4b23      	ldr	r3, [pc, #140]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800604a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b0c      	cmp	r3, #12
 8006050:	d134      	bne.n	80060bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006052:	4b1e      	ldr	r3, [pc, #120]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d003      	beq.n	800606a <HAL_RCC_GetSysClockFreq+0xa6>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d003      	beq.n	8006070 <HAL_RCC_GetSysClockFreq+0xac>
 8006068:	e005      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800606a:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800606c:	617b      	str	r3, [r7, #20]
      break;
 800606e:	e005      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006070:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006072:	617b      	str	r3, [r7, #20]
      break;
 8006074:	e002      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	617b      	str	r3, [r7, #20]
      break;
 800607a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800607c:	4b13      	ldr	r3, [pc, #76]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	3301      	adds	r3, #1
 8006088:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800608a:	4b10      	ldr	r3, [pc, #64]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	fb03 f202 	mul.w	r2, r3, r2
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <HAL_RCC_GetSysClockFreq+0x108>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	0e5b      	lsrs	r3, r3, #25
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	3301      	adds	r3, #1
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060bc:	69bb      	ldr	r3, [r7, #24]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3724      	adds	r7, #36	@ 0x24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40021000 	.word	0x40021000
 80060d0:	0800869c 	.word	0x0800869c
 80060d4:	00f42400 	.word	0x00f42400
 80060d8:	007a1200 	.word	0x007a1200

080060dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060e0:	4b03      	ldr	r3, [pc, #12]	@ (80060f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80060e2:	681b      	ldr	r3, [r3, #0]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200000b0 	.word	0x200000b0

080060f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060f8:	f7ff fff0 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0a1b      	lsrs	r3, r3, #8
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4904      	ldr	r1, [pc, #16]	@ (800611c <HAL_RCC_GetPCLK1Freq+0x28>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021000 	.word	0x40021000
 800611c:	08008694 	.word	0x08008694

08006120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006124:	f7ff ffda 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b06      	ldr	r3, [pc, #24]	@ (8006144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	0adb      	lsrs	r3, r3, #11
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4904      	ldr	r1, [pc, #16]	@ (8006148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40021000 	.word	0x40021000
 8006148:	08008694 	.word	0x08008694

0800614c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006158:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006164:	f7ff f916 	bl	8005394 <HAL_PWREx_GetVoltageRange>
 8006168:	6178      	str	r0, [r7, #20]
 800616a:	e014      	b.n	8006196 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800616c:	4b22      	ldr	r3, [pc, #136]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006170:	4a21      	ldr	r2, [pc, #132]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006176:	6593      	str	r3, [r2, #88]	@ 0x58
 8006178:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006184:	f7ff f906 	bl	8005394 <HAL_PWREx_GetVoltageRange>
 8006188:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800618a:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006194:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619c:	d10b      	bne.n	80061b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b80      	cmp	r3, #128	@ 0x80
 80061a2:	d913      	bls.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80061a8:	d902      	bls.n	80061b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061aa:	2302      	movs	r3, #2
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	e00d      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061b0:	2301      	movs	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e00a      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ba:	d902      	bls.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80061bc:	2302      	movs	r3, #2
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e004      	b.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b70      	cmp	r3, #112	@ 0x70
 80061c6:	d101      	bne.n	80061cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061c8:	2301      	movs	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061cc:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f023 020f 	bic.w	r2, r3, #15
 80061d4:	4909      	ldr	r1, [pc, #36]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d001      	beq.n	80061ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40022000 	.word	0x40022000

08006200 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006206:	4b2d      	ldr	r3, [pc, #180]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d00b      	beq.n	800622e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d825      	bhi.n	8006268 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d008      	beq.n	8006234 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d11f      	bne.n	8006268 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006228:	4b25      	ldr	r3, [pc, #148]	@ (80062c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800622a:	613b      	str	r3, [r7, #16]
    break;
 800622c:	e01f      	b.n	800626e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800622e:	4b25      	ldr	r3, [pc, #148]	@ (80062c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006230:	613b      	str	r3, [r7, #16]
    break;
 8006232:	e01c      	b.n	800626e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006234:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d107      	bne.n	8006250 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006240:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e005      	b.n	800625c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006250:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800625c:	4a1a      	ldr	r2, [pc, #104]	@ (80062c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006264:	613b      	str	r3, [r7, #16]
    break;
 8006266:	e002      	b.n	800626e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
    break;
 800626c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800626e:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	3301      	adds	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800627c:	4b0f      	ldr	r3, [pc, #60]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	fb03 f202 	mul.w	r2, r3, r2
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006294:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	0e5b      	lsrs	r3, r3, #25
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	3301      	adds	r3, #1
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80062ae:	683b      	ldr	r3, [r7, #0]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	40021000 	.word	0x40021000
 80062c0:	00f42400 	.word	0x00f42400
 80062c4:	007a1200 	.word	0x007a1200
 80062c8:	0800869c 	.word	0x0800869c

080062cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d8:	2300      	movs	r3, #0
 80062da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d040      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ec:	2b80      	cmp	r3, #128	@ 0x80
 80062ee:	d02a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062f0:	2b80      	cmp	r3, #128	@ 0x80
 80062f2:	d825      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062f4:	2b60      	cmp	r3, #96	@ 0x60
 80062f6:	d026      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062f8:	2b60      	cmp	r3, #96	@ 0x60
 80062fa:	d821      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062fc:	2b40      	cmp	r3, #64	@ 0x40
 80062fe:	d006      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006300:	2b40      	cmp	r3, #64	@ 0x40
 8006302:	d81d      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d010      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800630c:	e018      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800630e:	4b89      	ldr	r3, [pc, #548]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	4a88      	ldr	r2, [pc, #544]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006318:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800631a:	e015      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fb12 	bl	800694c <RCCEx_PLLSAI1_Config>
 8006328:	4603      	mov	r3, r0
 800632a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800632c:	e00c      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3320      	adds	r3, #32
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fbfd 	bl	8006b34 <RCCEx_PLLSAI2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	74fb      	strb	r3, [r7, #19]
      break;
 8006344:	e000      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800634e:	4b79      	ldr	r3, [pc, #484]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006354:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635c:	4975      	ldr	r1, [pc, #468]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006364:	e001      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d047      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637e:	d030      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006384:	d82a      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800638a:	d02a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800638c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006390:	d824      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006396:	d008      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800639c:	d81e      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80063a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a6:	d010      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80063a8:	e018      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063aa:	4b62      	ldr	r3, [pc, #392]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	4a61      	ldr	r2, [pc, #388]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063b6:	e015      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fac4 	bl	800694c <RCCEx_PLLSAI1_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063c8:	e00c      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3320      	adds	r3, #32
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fbaf 	bl	8006b34 <RCCEx_PLLSAI2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063da:	e003      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	74fb      	strb	r3, [r7, #19]
      break;
 80063e0:	e000      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80063e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e4:	7cfb      	ldrb	r3, [r7, #19]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063ea:	4b52      	ldr	r3, [pc, #328]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f8:	494e      	ldr	r1, [pc, #312]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006400:	e001      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	7cfb      	ldrb	r3, [r7, #19]
 8006404:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 809f 	beq.w	8006552 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006414:	2300      	movs	r3, #0
 8006416:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006418:	4b46      	ldr	r3, [pc, #280]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800641a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00d      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006432:	4a40      	ldr	r2, [pc, #256]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006438:	6593      	str	r3, [r2, #88]	@ 0x58
 800643a:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006442:	60bb      	str	r3, [r7, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006446:	2301      	movs	r3, #1
 8006448:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800644a:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a3a      	ldr	r2, [pc, #232]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006456:	f7fc f871 	bl	800253c <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800645c:	e009      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800645e:	f7fc f86d 	bl	800253c <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d902      	bls.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	74fb      	strb	r3, [r7, #19]
        break;
 8006470:	e005      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006472:	4b31      	ldr	r3, [pc, #196]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0ef      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800647e:	7cfb      	ldrb	r3, [r7, #19]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d15b      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800648e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01f      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d019      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064a2:	4b24      	ldr	r3, [pc, #144]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064ae:	4b21      	ldr	r3, [pc, #132]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064be:	4b1d      	ldr	r3, [pc, #116]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064ce:	4a19      	ldr	r2, [pc, #100]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc f82c 	bl	800253c <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064e6:	e00b      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e8:	f7fc f828 	bl	800253c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d902      	bls.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	74fb      	strb	r3, [r7, #19]
            break;
 80064fe:	e006      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006500:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0ec      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800650e:	7cfb      	ldrb	r3, [r7, #19]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10c      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006514:	4b07      	ldr	r3, [pc, #28]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	4903      	ldr	r1, [pc, #12]	@ (8006534 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800652c:	e008      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	74bb      	strb	r3, [r7, #18]
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006534:	40021000 	.word	0x40021000
 8006538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006540:	7c7b      	ldrb	r3, [r7, #17]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d105      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006546:	4ba0      	ldr	r3, [pc, #640]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654a:	4a9f      	ldr	r2, [pc, #636]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800654c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006550:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800655e:	4b9a      	ldr	r3, [pc, #616]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006564:	f023 0203 	bic.w	r2, r3, #3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656c:	4996      	ldr	r1, [pc, #600]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006580:	4b91      	ldr	r3, [pc, #580]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f023 020c 	bic.w	r2, r3, #12
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	498e      	ldr	r1, [pc, #568]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065a2:	4b89      	ldr	r3, [pc, #548]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b0:	4985      	ldr	r1, [pc, #532]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065c4:	4b80      	ldr	r3, [pc, #512]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065d2:	497d      	ldr	r1, [pc, #500]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065e6:	4b78      	ldr	r3, [pc, #480]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	4974      	ldr	r1, [pc, #464]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006608:	4b6f      	ldr	r3, [pc, #444]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006616:	496c      	ldr	r1, [pc, #432]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662a:	4b67      	ldr	r3, [pc, #412]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800662c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006630:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006638:	4963      	ldr	r1, [pc, #396]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800664c:	4b5e      	ldr	r3, [pc, #376]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006652:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800665a:	495b      	ldr	r1, [pc, #364]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800666e:	4b56      	ldr	r3, [pc, #344]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667c:	4952      	ldr	r1, [pc, #328]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006690:	4b4d      	ldr	r3, [pc, #308]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006696:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669e:	494a      	ldr	r1, [pc, #296]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066b2:	4b45      	ldr	r3, [pc, #276]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c0:	4941      	ldr	r1, [pc, #260]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066d4:	4b3c      	ldr	r3, [pc, #240]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066da:	f023 0203 	bic.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	4939      	ldr	r1, [pc, #228]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d028      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f6:	4b34      	ldr	r3, [pc, #208]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006704:	4930      	ldr	r1, [pc, #192]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006714:	d106      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006716:	4b2c      	ldr	r3, [pc, #176]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4a2b      	ldr	r2, [pc, #172]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800671c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006720:	60d3      	str	r3, [r2, #12]
 8006722:	e011      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006728:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800672c:	d10c      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	2101      	movs	r1, #1
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f909 	bl	800694c <RCCEx_PLLSAI1_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800673e:	7cfb      	ldrb	r3, [r7, #19]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006744:	7cfb      	ldrb	r3, [r7, #19]
 8006746:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d04d      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800675c:	d108      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800675e:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006764:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800676a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800676e:	e012      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006770:	4b15      	ldr	r3, [pc, #84]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006776:	4a14      	ldr	r2, [pc, #80]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800677c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006780:	4b11      	ldr	r3, [pc, #68]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006786:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800678e:	490e      	ldr	r1, [pc, #56]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800679a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800679e:	d106      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067a0:	4b09      	ldr	r3, [pc, #36]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067aa:	60d3      	str	r3, [r2, #12]
 80067ac:	e020      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b6:	d109      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067b8:	4b03      	ldr	r3, [pc, #12]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4a02      	ldr	r2, [pc, #8]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c2:	60d3      	str	r3, [r2, #12]
 80067c4:	e014      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80067c6:	bf00      	nop
 80067c8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3304      	adds	r3, #4
 80067da:	2101      	movs	r1, #1
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f8b5 	bl	800694c <RCCEx_PLLSAI1_Config>
 80067e2:	4603      	mov	r3, r0
 80067e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067e6:	7cfb      	ldrb	r3, [r7, #19]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80067ec:	7cfb      	ldrb	r3, [r7, #19]
 80067ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d028      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006802:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800680a:	4947      	ldr	r1, [pc, #284]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800681a:	d106      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800681c:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a41      	ldr	r2, [pc, #260]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006826:	60d3      	str	r3, [r2, #12]
 8006828:	e011      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006832:	d10c      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	2101      	movs	r1, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f886 	bl	800694c <RCCEx_PLLSAI1_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800684a:	7cfb      	ldrb	r3, [r7, #19]
 800684c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01e      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800685a:	4b33      	ldr	r3, [pc, #204]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006860:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686a:	492f      	ldr	r1, [pc, #188]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800687c:	d10c      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f000 f861 	bl	800694c <RCCEx_PLLSAI1_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006894:	7cfb      	ldrb	r3, [r7, #19]
 8006896:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068a4:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068aa:	f023 0204 	bic.w	r2, r3, #4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b4:	491c      	ldr	r1, [pc, #112]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80068c8:	4b17      	ldr	r3, [pc, #92]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068ce:	f023 0218 	bic.w	r2, r3, #24
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d8:	4913      	ldr	r1, [pc, #76]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d017      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068fc:	490a      	ldr	r1, [pc, #40]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800690a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800690e:	d105      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006910:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a04      	ldr	r2, [pc, #16]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006916:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800691a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800691c:	7cbb      	ldrb	r3, [r7, #18]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000

0800692c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a04      	ldr	r2, [pc, #16]	@ (8006948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006936:	f043 0304 	orr.w	r3, r3, #4
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	40021000 	.word	0x40021000

0800694c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800695a:	4b72      	ldr	r3, [pc, #456]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006966:	4b6f      	ldr	r3, [pc, #444]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0203 	and.w	r2, r3, #3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d103      	bne.n	800697e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
       ||
 800697a:	2b00      	cmp	r3, #0
 800697c:	d142      	bne.n	8006a04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
 8006982:	e03f      	b.n	8006a04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d018      	beq.n	80069be <RCCEx_PLLSAI1_Config+0x72>
 800698c:	2b03      	cmp	r3, #3
 800698e:	d825      	bhi.n	80069dc <RCCEx_PLLSAI1_Config+0x90>
 8006990:	2b01      	cmp	r3, #1
 8006992:	d002      	beq.n	800699a <RCCEx_PLLSAI1_Config+0x4e>
 8006994:	2b02      	cmp	r3, #2
 8006996:	d009      	beq.n	80069ac <RCCEx_PLLSAI1_Config+0x60>
 8006998:	e020      	b.n	80069dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800699a:	4b62      	ldr	r3, [pc, #392]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11d      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069aa:	e01a      	b.n	80069e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d116      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069bc:	e013      	b.n	80069e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069be:	4b59      	ldr	r3, [pc, #356]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069ca:	4b56      	ldr	r3, [pc, #344]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069da:	e006      	b.n	80069ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
      break;
 80069e0:	e004      	b.n	80069ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80069ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d108      	bne.n	8006a04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80069f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f023 0203 	bic.w	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4949      	ldr	r1, [pc, #292]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f040 8086 	bne.w	8006b18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a0c:	4b45      	ldr	r3, [pc, #276]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a44      	ldr	r2, [pc, #272]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a18:	f7fb fd90 	bl	800253c <HAL_GetTick>
 8006a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a1e:	e009      	b.n	8006a34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a20:	f7fb fd8c 	bl	800253c <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d902      	bls.n	8006a34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	73fb      	strb	r3, [r7, #15]
        break;
 8006a32:	e005      	b.n	8006a40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a34:	4b3b      	ldr	r3, [pc, #236]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ef      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d168      	bne.n	8006b18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d113      	bne.n	8006a74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	4b35      	ldr	r3, [pc, #212]	@ (8006b28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6892      	ldr	r2, [r2, #8]
 8006a58:	0211      	lsls	r1, r2, #8
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68d2      	ldr	r2, [r2, #12]
 8006a5e:	06d2      	lsls	r2, r2, #27
 8006a60:	4311      	orrs	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6852      	ldr	r2, [r2, #4]
 8006a66:	3a01      	subs	r2, #1
 8006a68:	0112      	lsls	r2, r2, #4
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	492d      	ldr	r1, [pc, #180]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	610b      	str	r3, [r1, #16]
 8006a72:	e02d      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d115      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8006b2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6892      	ldr	r2, [r2, #8]
 8006a86:	0211      	lsls	r1, r2, #8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6912      	ldr	r2, [r2, #16]
 8006a8c:	0852      	lsrs	r2, r2, #1
 8006a8e:	3a01      	subs	r2, #1
 8006a90:	0552      	lsls	r2, r2, #21
 8006a92:	4311      	orrs	r1, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	6852      	ldr	r2, [r2, #4]
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	0112      	lsls	r2, r2, #4
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	4921      	ldr	r1, [pc, #132]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	610b      	str	r3, [r1, #16]
 8006aa4:	e014      	b.n	8006ad0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	4b21      	ldr	r3, [pc, #132]	@ (8006b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6892      	ldr	r2, [r2, #8]
 8006ab2:	0211      	lsls	r1, r2, #8
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6952      	ldr	r2, [r2, #20]
 8006ab8:	0852      	lsrs	r2, r2, #1
 8006aba:	3a01      	subs	r2, #1
 8006abc:	0652      	lsls	r2, r2, #25
 8006abe:	4311      	orrs	r1, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6852      	ldr	r2, [r2, #4]
 8006ac4:	3a01      	subs	r2, #1
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	4916      	ldr	r1, [pc, #88]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ad0:	4b14      	ldr	r3, [pc, #80]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006adc:	f7fb fd2e 	bl	800253c <HAL_GetTick>
 8006ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ae2:	e009      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae4:	f7fb fd2a 	bl	800253c <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d902      	bls.n	8006af8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	73fb      	strb	r3, [r7, #15]
          break;
 8006af6:	e005      	b.n	8006b04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006af8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0ef      	beq.n	8006ae4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b0a:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b0c:	691a      	ldr	r2, [r3, #16]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	4904      	ldr	r1, [pc, #16]	@ (8006b24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	07ff800f 	.word	0x07ff800f
 8006b2c:	ff9f800f 	.word	0xff9f800f
 8006b30:	f9ff800f 	.word	0xf9ff800f

08006b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b42:	4b72      	ldr	r3, [pc, #456]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00e      	beq.n	8006b6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0203 	and.w	r2, r3, #3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d103      	bne.n	8006b66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
       ||
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d142      	bne.n	8006bec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	e03f      	b.n	8006bec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d018      	beq.n	8006ba6 <RCCEx_PLLSAI2_Config+0x72>
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d825      	bhi.n	8006bc4 <RCCEx_PLLSAI2_Config+0x90>
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d002      	beq.n	8006b82 <RCCEx_PLLSAI2_Config+0x4e>
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d009      	beq.n	8006b94 <RCCEx_PLLSAI2_Config+0x60>
 8006b80:	e020      	b.n	8006bc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b82:	4b62      	ldr	r3, [pc, #392]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11d      	bne.n	8006bca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b92:	e01a      	b.n	8006bca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b94:	4b5d      	ldr	r3, [pc, #372]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d116      	bne.n	8006bce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba4:	e013      	b.n	8006bce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ba6:	4b59      	ldr	r3, [pc, #356]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10f      	bne.n	8006bd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bb2:	4b56      	ldr	r3, [pc, #344]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bc2:	e006      	b.n	8006bd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc8:	e004      	b.n	8006bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006bda:	4b4c      	ldr	r3, [pc, #304]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f023 0203 	bic.w	r2, r3, #3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4949      	ldr	r1, [pc, #292]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f040 8086 	bne.w	8006d00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bf4:	4b45      	ldr	r3, [pc, #276]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a44      	ldr	r2, [pc, #272]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fb fc9c 	bl	800253c <HAL_GetTick>
 8006c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c06:	e009      	b.n	8006c1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c08:	f7fb fc98 	bl	800253c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d902      	bls.n	8006c1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	73fb      	strb	r3, [r7, #15]
        break;
 8006c1a:	e005      	b.n	8006c28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ef      	bne.n	8006c08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d168      	bne.n	8006d00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d113      	bne.n	8006c5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	4b35      	ldr	r3, [pc, #212]	@ (8006d10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6892      	ldr	r2, [r2, #8]
 8006c40:	0211      	lsls	r1, r2, #8
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68d2      	ldr	r2, [r2, #12]
 8006c46:	06d2      	lsls	r2, r2, #27
 8006c48:	4311      	orrs	r1, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6852      	ldr	r2, [r2, #4]
 8006c4e:	3a01      	subs	r2, #1
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	430a      	orrs	r2, r1
 8006c54:	492d      	ldr	r1, [pc, #180]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	614b      	str	r3, [r1, #20]
 8006c5a:	e02d      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d115      	bne.n	8006c8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c62:	4b2a      	ldr	r3, [pc, #168]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	4b2b      	ldr	r3, [pc, #172]	@ (8006d14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	0211      	lsls	r1, r2, #8
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6912      	ldr	r2, [r2, #16]
 8006c74:	0852      	lsrs	r2, r2, #1
 8006c76:	3a01      	subs	r2, #1
 8006c78:	0552      	lsls	r2, r2, #21
 8006c7a:	4311      	orrs	r1, r2
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6852      	ldr	r2, [r2, #4]
 8006c80:	3a01      	subs	r2, #1
 8006c82:	0112      	lsls	r2, r2, #4
 8006c84:	430a      	orrs	r2, r1
 8006c86:	4921      	ldr	r1, [pc, #132]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	614b      	str	r3, [r1, #20]
 8006c8c:	e014      	b.n	8006cb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	4b21      	ldr	r3, [pc, #132]	@ (8006d18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6892      	ldr	r2, [r2, #8]
 8006c9a:	0211      	lsls	r1, r2, #8
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6952      	ldr	r2, [r2, #20]
 8006ca0:	0852      	lsrs	r2, r2, #1
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	0652      	lsls	r2, r2, #25
 8006ca6:	4311      	orrs	r1, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6852      	ldr	r2, [r2, #4]
 8006cac:	3a01      	subs	r2, #1
 8006cae:	0112      	lsls	r2, r2, #4
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	4916      	ldr	r1, [pc, #88]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006cb8:	4b14      	ldr	r3, [pc, #80]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a13      	ldr	r2, [pc, #76]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc4:	f7fb fc3a 	bl	800253c <HAL_GetTick>
 8006cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cca:	e009      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ccc:	f7fb fc36 	bl	800253c <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d902      	bls.n	8006ce0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8006cde:	e005      	b.n	8006cec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0ef      	beq.n	8006ccc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cf2:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	4904      	ldr	r1, [pc, #16]	@ (8006d0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000
 8006d10:	07ff800f 	.word	0x07ff800f
 8006d14:	ff9f800f 	.word	0xff9f800f
 8006d18:	f9ff800f 	.word	0xf9ff800f

08006d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e095      	b.n	8006e5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d108      	bne.n	8006d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d3e:	d009      	beq.n	8006d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	61da      	str	r2, [r3, #28]
 8006d46:	e005      	b.n	8006d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d106      	bne.n	8006d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa fdd4 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d94:	d902      	bls.n	8006d9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e002      	b.n	8006da2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006da0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006daa:	d007      	beq.n	8006dbc <HAL_SPI_Init+0xa0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	431a      	orrs	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfe:	ea42 0103 	orr.w	r1, r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	0c1b      	lsrs	r3, r3, #16
 8006e18:	f003 0204 	and.w	r2, r3, #4
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e38:	ea42 0103 	orr.w	r1, r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e042      	b.n	8006efa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fa fdbe 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2224      	movs	r2, #36	@ 0x24
 8006e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0201 	bic.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbb3 	bl	8007618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f8b4 	bl	8007020 <UART_SetConfig>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e01b      	b.n	8006efa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fc32 	bl	800775c <UART_CheckIdleState>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b08a      	sub	sp, #40	@ 0x28
 8006f06:	af02      	add	r7, sp, #8
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d17b      	bne.n	8007014 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Transmit+0x26>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e074      	b.n	8007016 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2221      	movs	r2, #33	@ 0x21
 8006f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3c:	f7fb fafe 	bl	800253c <HAL_GetTick>
 8006f40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5a:	d108      	bne.n	8006f6e <HAL_UART_Transmit+0x6c>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e003      	b.n	8006f76 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f76:	e030      	b.n	8006fda <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2180      	movs	r1, #128	@ 0x80
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fc94 	bl	80078b0 <UART_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e03d      	b.n	8007016 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	881a      	ldrh	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fac:	b292      	uxth	r2, r2
 8006fae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e007      	b.n	8006fc8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1c8      	bne.n	8006f78 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2140      	movs	r1, #64	@ 0x40
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fc5d 	bl	80078b0 <UART_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e006      	b.n	8007016 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	e000      	b.n	8007016 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007014:	2302      	movs	r3, #2
  }
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007024:	b08c      	sub	sp, #48	@ 0x30
 8007026:	af00      	add	r7, sp, #0
 8007028:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	431a      	orrs	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	431a      	orrs	r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	4313      	orrs	r3, r2
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4baa      	ldr	r3, [pc, #680]	@ (80072f8 <UART_SetConfig+0x2d8>)
 8007050:	4013      	ands	r3, r2
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	6812      	ldr	r2, [r2, #0]
 8007056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007058:	430b      	orrs	r3, r1
 800705a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a9f      	ldr	r2, [pc, #636]	@ (80072fc <UART_SetConfig+0x2dc>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007088:	4313      	orrs	r3, r2
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007096:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	6812      	ldr	r2, [r2, #0]
 800709e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	f023 010f 	bic.w	r1, r3, #15
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a90      	ldr	r2, [pc, #576]	@ (8007300 <UART_SetConfig+0x2e0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d125      	bne.n	8007110 <UART_SetConfig+0xf0>
 80070c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007304 <UART_SetConfig+0x2e4>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d81a      	bhi.n	8007108 <UART_SetConfig+0xe8>
 80070d2:	a201      	add	r2, pc, #4	@ (adr r2, 80070d8 <UART_SetConfig+0xb8>)
 80070d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070f9 	.word	0x080070f9
 80070e0:	080070f1 	.word	0x080070f1
 80070e4:	08007101 	.word	0x08007101
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ee:	e116      	b.n	800731e <UART_SetConfig+0x2fe>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f6:	e112      	b.n	800731e <UART_SetConfig+0x2fe>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fe:	e10e      	b.n	800731e <UART_SetConfig+0x2fe>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007106:	e10a      	b.n	800731e <UART_SetConfig+0x2fe>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710e:	e106      	b.n	800731e <UART_SetConfig+0x2fe>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a7c      	ldr	r2, [pc, #496]	@ (8007308 <UART_SetConfig+0x2e8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d138      	bne.n	800718c <UART_SetConfig+0x16c>
 800711a:	4b7a      	ldr	r3, [pc, #488]	@ (8007304 <UART_SetConfig+0x2e4>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007120:	f003 030c 	and.w	r3, r3, #12
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d82d      	bhi.n	8007184 <UART_SetConfig+0x164>
 8007128:	a201      	add	r2, pc, #4	@ (adr r2, 8007130 <UART_SetConfig+0x110>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007165 	.word	0x08007165
 8007134:	08007185 	.word	0x08007185
 8007138:	08007185 	.word	0x08007185
 800713c:	08007185 	.word	0x08007185
 8007140:	08007175 	.word	0x08007175
 8007144:	08007185 	.word	0x08007185
 8007148:	08007185 	.word	0x08007185
 800714c:	08007185 	.word	0x08007185
 8007150:	0800716d 	.word	0x0800716d
 8007154:	08007185 	.word	0x08007185
 8007158:	08007185 	.word	0x08007185
 800715c:	08007185 	.word	0x08007185
 8007160:	0800717d 	.word	0x0800717d
 8007164:	2300      	movs	r3, #0
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716a:	e0d8      	b.n	800731e <UART_SetConfig+0x2fe>
 800716c:	2302      	movs	r3, #2
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007172:	e0d4      	b.n	800731e <UART_SetConfig+0x2fe>
 8007174:	2304      	movs	r3, #4
 8007176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717a:	e0d0      	b.n	800731e <UART_SetConfig+0x2fe>
 800717c:	2308      	movs	r3, #8
 800717e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007182:	e0cc      	b.n	800731e <UART_SetConfig+0x2fe>
 8007184:	2310      	movs	r3, #16
 8007186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800718a:	e0c8      	b.n	800731e <UART_SetConfig+0x2fe>
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5e      	ldr	r2, [pc, #376]	@ (800730c <UART_SetConfig+0x2ec>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d125      	bne.n	80071e2 <UART_SetConfig+0x1c2>
 8007196:	4b5b      	ldr	r3, [pc, #364]	@ (8007304 <UART_SetConfig+0x2e4>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071a0:	2b30      	cmp	r3, #48	@ 0x30
 80071a2:	d016      	beq.n	80071d2 <UART_SetConfig+0x1b2>
 80071a4:	2b30      	cmp	r3, #48	@ 0x30
 80071a6:	d818      	bhi.n	80071da <UART_SetConfig+0x1ba>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d00a      	beq.n	80071c2 <UART_SetConfig+0x1a2>
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d814      	bhi.n	80071da <UART_SetConfig+0x1ba>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <UART_SetConfig+0x19a>
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d008      	beq.n	80071ca <UART_SetConfig+0x1aa>
 80071b8:	e00f      	b.n	80071da <UART_SetConfig+0x1ba>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c0:	e0ad      	b.n	800731e <UART_SetConfig+0x2fe>
 80071c2:	2302      	movs	r3, #2
 80071c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c8:	e0a9      	b.n	800731e <UART_SetConfig+0x2fe>
 80071ca:	2304      	movs	r3, #4
 80071cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d0:	e0a5      	b.n	800731e <UART_SetConfig+0x2fe>
 80071d2:	2308      	movs	r3, #8
 80071d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d8:	e0a1      	b.n	800731e <UART_SetConfig+0x2fe>
 80071da:	2310      	movs	r3, #16
 80071dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e0:	e09d      	b.n	800731e <UART_SetConfig+0x2fe>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007310 <UART_SetConfig+0x2f0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d125      	bne.n	8007238 <UART_SetConfig+0x218>
 80071ec:	4b45      	ldr	r3, [pc, #276]	@ (8007304 <UART_SetConfig+0x2e4>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80071f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f8:	d016      	beq.n	8007228 <UART_SetConfig+0x208>
 80071fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80071fc:	d818      	bhi.n	8007230 <UART_SetConfig+0x210>
 80071fe:	2b80      	cmp	r3, #128	@ 0x80
 8007200:	d00a      	beq.n	8007218 <UART_SetConfig+0x1f8>
 8007202:	2b80      	cmp	r3, #128	@ 0x80
 8007204:	d814      	bhi.n	8007230 <UART_SetConfig+0x210>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <UART_SetConfig+0x1f0>
 800720a:	2b40      	cmp	r3, #64	@ 0x40
 800720c:	d008      	beq.n	8007220 <UART_SetConfig+0x200>
 800720e:	e00f      	b.n	8007230 <UART_SetConfig+0x210>
 8007210:	2300      	movs	r3, #0
 8007212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007216:	e082      	b.n	800731e <UART_SetConfig+0x2fe>
 8007218:	2302      	movs	r3, #2
 800721a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800721e:	e07e      	b.n	800731e <UART_SetConfig+0x2fe>
 8007220:	2304      	movs	r3, #4
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e07a      	b.n	800731e <UART_SetConfig+0x2fe>
 8007228:	2308      	movs	r3, #8
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e076      	b.n	800731e <UART_SetConfig+0x2fe>
 8007230:	2310      	movs	r3, #16
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e072      	b.n	800731e <UART_SetConfig+0x2fe>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a35      	ldr	r2, [pc, #212]	@ (8007314 <UART_SetConfig+0x2f4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d12a      	bne.n	8007298 <UART_SetConfig+0x278>
 8007242:	4b30      	ldr	r3, [pc, #192]	@ (8007304 <UART_SetConfig+0x2e4>)
 8007244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800724c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007250:	d01a      	beq.n	8007288 <UART_SetConfig+0x268>
 8007252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007256:	d81b      	bhi.n	8007290 <UART_SetConfig+0x270>
 8007258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800725c:	d00c      	beq.n	8007278 <UART_SetConfig+0x258>
 800725e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007262:	d815      	bhi.n	8007290 <UART_SetConfig+0x270>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <UART_SetConfig+0x250>
 8007268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800726c:	d008      	beq.n	8007280 <UART_SetConfig+0x260>
 800726e:	e00f      	b.n	8007290 <UART_SetConfig+0x270>
 8007270:	2300      	movs	r3, #0
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007276:	e052      	b.n	800731e <UART_SetConfig+0x2fe>
 8007278:	2302      	movs	r3, #2
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727e:	e04e      	b.n	800731e <UART_SetConfig+0x2fe>
 8007280:	2304      	movs	r3, #4
 8007282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007286:	e04a      	b.n	800731e <UART_SetConfig+0x2fe>
 8007288:	2308      	movs	r3, #8
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800728e:	e046      	b.n	800731e <UART_SetConfig+0x2fe>
 8007290:	2310      	movs	r3, #16
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007296:	e042      	b.n	800731e <UART_SetConfig+0x2fe>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <UART_SetConfig+0x2dc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d13a      	bne.n	8007318 <UART_SetConfig+0x2f8>
 80072a2:	4b18      	ldr	r3, [pc, #96]	@ (8007304 <UART_SetConfig+0x2e4>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072b0:	d01a      	beq.n	80072e8 <UART_SetConfig+0x2c8>
 80072b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072b6:	d81b      	bhi.n	80072f0 <UART_SetConfig+0x2d0>
 80072b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072bc:	d00c      	beq.n	80072d8 <UART_SetConfig+0x2b8>
 80072be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c2:	d815      	bhi.n	80072f0 <UART_SetConfig+0x2d0>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <UART_SetConfig+0x2b0>
 80072c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072cc:	d008      	beq.n	80072e0 <UART_SetConfig+0x2c0>
 80072ce:	e00f      	b.n	80072f0 <UART_SetConfig+0x2d0>
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d6:	e022      	b.n	800731e <UART_SetConfig+0x2fe>
 80072d8:	2302      	movs	r3, #2
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072de:	e01e      	b.n	800731e <UART_SetConfig+0x2fe>
 80072e0:	2304      	movs	r3, #4
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e6:	e01a      	b.n	800731e <UART_SetConfig+0x2fe>
 80072e8:	2308      	movs	r3, #8
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e016      	b.n	800731e <UART_SetConfig+0x2fe>
 80072f0:	2310      	movs	r3, #16
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e012      	b.n	800731e <UART_SetConfig+0x2fe>
 80072f8:	cfff69f3 	.word	0xcfff69f3
 80072fc:	40008000 	.word	0x40008000
 8007300:	40013800 	.word	0x40013800
 8007304:	40021000 	.word	0x40021000
 8007308:	40004400 	.word	0x40004400
 800730c:	40004800 	.word	0x40004800
 8007310:	40004c00 	.word	0x40004c00
 8007314:	40005000 	.word	0x40005000
 8007318:	2310      	movs	r3, #16
 800731a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4aae      	ldr	r2, [pc, #696]	@ (80075dc <UART_SetConfig+0x5bc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	f040 8097 	bne.w	8007458 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800732a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800732e:	2b08      	cmp	r3, #8
 8007330:	d823      	bhi.n	800737a <UART_SetConfig+0x35a>
 8007332:	a201      	add	r2, pc, #4	@ (adr r2, 8007338 <UART_SetConfig+0x318>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	0800735d 	.word	0x0800735d
 800733c:	0800737b 	.word	0x0800737b
 8007340:	08007365 	.word	0x08007365
 8007344:	0800737b 	.word	0x0800737b
 8007348:	0800736b 	.word	0x0800736b
 800734c:	0800737b 	.word	0x0800737b
 8007350:	0800737b 	.word	0x0800737b
 8007354:	0800737b 	.word	0x0800737b
 8007358:	08007373 	.word	0x08007373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7fe feca 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8007360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007362:	e010      	b.n	8007386 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007364:	4b9e      	ldr	r3, [pc, #632]	@ (80075e0 <UART_SetConfig+0x5c0>)
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007368:	e00d      	b.n	8007386 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736a:	f7fe fe2b 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 800736e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007370:	e009      	b.n	8007386 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007378:	e005      	b.n	8007386 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007384:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8130 	beq.w	80075ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007392:	4a94      	ldr	r2, [pc, #592]	@ (80075e4 <UART_SetConfig+0x5c4>)
 8007394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007398:	461a      	mov	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d305      	bcc.n	80073be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d903      	bls.n	80073c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073c4:	e113      	b.n	80075ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2200      	movs	r2, #0
 80073ca:	60bb      	str	r3, [r7, #8]
 80073cc:	60fa      	str	r2, [r7, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	4a84      	ldr	r2, [pc, #528]	@ (80075e4 <UART_SetConfig+0x5c4>)
 80073d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073e8:	f7f9 f93e 	bl	8000668 <__aeabi_uldivmod>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4610      	mov	r0, r2
 80073f2:	4619      	mov	r1, r3
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	020b      	lsls	r3, r1, #8
 80073fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007402:	0202      	lsls	r2, r0, #8
 8007404:	6979      	ldr	r1, [r7, #20]
 8007406:	6849      	ldr	r1, [r1, #4]
 8007408:	0849      	lsrs	r1, r1, #1
 800740a:	2000      	movs	r0, #0
 800740c:	460c      	mov	r4, r1
 800740e:	4605      	mov	r5, r0
 8007410:	eb12 0804 	adds.w	r8, r2, r4
 8007414:	eb43 0905 	adc.w	r9, r3, r5
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	469a      	mov	sl, r3
 8007420:	4693      	mov	fp, r2
 8007422:	4652      	mov	r2, sl
 8007424:	465b      	mov	r3, fp
 8007426:	4640      	mov	r0, r8
 8007428:	4649      	mov	r1, r9
 800742a:	f7f9 f91d 	bl	8000668 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4613      	mov	r3, r2
 8007434:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800743c:	d308      	bcc.n	8007450 <UART_SetConfig+0x430>
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007444:	d204      	bcs.n	8007450 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	e0ce      	b.n	80075ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007456:	e0ca      	b.n	80075ee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007460:	d166      	bne.n	8007530 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007462:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007466:	2b08      	cmp	r3, #8
 8007468:	d827      	bhi.n	80074ba <UART_SetConfig+0x49a>
 800746a:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <UART_SetConfig+0x450>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	08007495 	.word	0x08007495
 8007474:	0800749d 	.word	0x0800749d
 8007478:	080074a5 	.word	0x080074a5
 800747c:	080074bb 	.word	0x080074bb
 8007480:	080074ab 	.word	0x080074ab
 8007484:	080074bb 	.word	0x080074bb
 8007488:	080074bb 	.word	0x080074bb
 800748c:	080074bb 	.word	0x080074bb
 8007490:	080074b3 	.word	0x080074b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007494:	f7fe fe2e 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8007498:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800749a:	e014      	b.n	80074c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800749c:	f7fe fe40 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 80074a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074a2:	e010      	b.n	80074c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a4:	4b4e      	ldr	r3, [pc, #312]	@ (80075e0 <UART_SetConfig+0x5c0>)
 80074a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074a8:	e00d      	b.n	80074c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074aa:	f7fe fd8b 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 80074ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074b0:	e009      	b.n	80074c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074b8:	e005      	b.n	80074c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8090 	beq.w	80075ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	4a44      	ldr	r2, [pc, #272]	@ (80075e4 <UART_SetConfig+0x5c4>)
 80074d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d8:	461a      	mov	r2, r3
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e0:	005a      	lsls	r2, r3, #1
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	085b      	lsrs	r3, r3, #1
 80074e8:	441a      	add	r2, r3
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	d916      	bls.n	8007528 <UART_SetConfig+0x508>
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007500:	d212      	bcs.n	8007528 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	b29b      	uxth	r3, r3
 8007506:	f023 030f 	bic.w	r3, r3, #15
 800750a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	b29b      	uxth	r3, r3
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	b29a      	uxth	r2, r3
 8007518:	8bfb      	ldrh	r3, [r7, #30]
 800751a:	4313      	orrs	r3, r2
 800751c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	8bfa      	ldrh	r2, [r7, #30]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	e062      	b.n	80075ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800752e:	e05e      	b.n	80075ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007530:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007534:	2b08      	cmp	r3, #8
 8007536:	d828      	bhi.n	800758a <UART_SetConfig+0x56a>
 8007538:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <UART_SetConfig+0x520>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007565 	.word	0x08007565
 8007544:	0800756d 	.word	0x0800756d
 8007548:	08007575 	.word	0x08007575
 800754c:	0800758b 	.word	0x0800758b
 8007550:	0800757b 	.word	0x0800757b
 8007554:	0800758b 	.word	0x0800758b
 8007558:	0800758b 	.word	0x0800758b
 800755c:	0800758b 	.word	0x0800758b
 8007560:	08007583 	.word	0x08007583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007564:	f7fe fdc6 	bl	80060f4 <HAL_RCC_GetPCLK1Freq>
 8007568:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800756a:	e014      	b.n	8007596 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800756c:	f7fe fdd8 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 8007570:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007572:	e010      	b.n	8007596 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007574:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <UART_SetConfig+0x5c0>)
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007578:	e00d      	b.n	8007596 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757a:	f7fe fd23 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 800757e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007580:	e009      	b.n	8007596 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007588:	e005      	b.n	8007596 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007594:	bf00      	nop
    }

    if (pclk != 0U)
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d028      	beq.n	80075ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	4a10      	ldr	r2, [pc, #64]	@ (80075e4 <UART_SetConfig+0x5c4>)
 80075a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a6:	461a      	mov	r2, r3
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	441a      	add	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80075be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b0f      	cmp	r3, #15
 80075c4:	d910      	bls.n	80075e8 <UART_SetConfig+0x5c8>
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075cc:	d20c      	bcs.n	80075e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60da      	str	r2, [r3, #12]
 80075d8:	e009      	b.n	80075ee <UART_SetConfig+0x5ce>
 80075da:	bf00      	nop
 80075dc:	40008000 	.word	0x40008000
 80075e0:	00f42400 	.word	0x00f42400
 80075e4:	080086cc 	.word	0x080086cc
      }
      else
      {
        ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800760a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800760e:	4618      	mov	r0, r3
 8007610:	3730      	adds	r7, #48	@ 0x30
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00a      	beq.n	8007642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00a      	beq.n	8007686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007716:	d10a      	bne.n	800772e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	605a      	str	r2, [r3, #4]
  }
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b098      	sub	sp, #96	@ 0x60
 8007760:	af02      	add	r7, sp, #8
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800776c:	f7fa fee6 	bl	800253c <HAL_GetTick>
 8007770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d12f      	bne.n	80077e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007788:	2200      	movs	r2, #0
 800778a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f88e 	bl	80078b0 <UART_WaitOnFlagUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d022      	beq.n	80077e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e6      	bne.n	800779a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e063      	b.n	80078a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d149      	bne.n	8007882 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f6:	2200      	movs	r2, #0
 80077f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f857 	bl	80078b0 <UART_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d03c      	beq.n	8007882 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	623b      	str	r3, [r7, #32]
   return(result);
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800781c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007826:	633b      	str	r3, [r7, #48]	@ 0x30
 8007828:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800782c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	60fb      	str	r3, [r7, #12]
   return(result);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f023 0301 	bic.w	r3, r3, #1
 8007850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800785a:	61fa      	str	r2, [r7, #28]
 800785c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	69b9      	ldr	r1, [r7, #24]
 8007860:	69fa      	ldr	r2, [r7, #28]
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	617b      	str	r3, [r7, #20]
   return(result);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e012      	b.n	80078a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2220      	movs	r2, #32
 8007886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3758      	adds	r7, #88	@ 0x58
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c0:	e04f      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d04b      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ca:	f7fa fe37 	bl	800253c <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e04e      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d037      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b80      	cmp	r3, #128	@ 0x80
 80078f6:	d034      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	d031      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b08      	cmp	r3, #8
 800790a:	d110      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f838 	bl	800798a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2208      	movs	r2, #8
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e029      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800793c:	d111      	bne.n	8007962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 f81e 	bl	800798a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e00f      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0a0      	beq.n	80078c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800798a:	b480      	push	{r7}
 800798c:	b095      	sub	sp, #84	@ 0x54
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3308      	adds	r3, #8
 80079ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	e853 3f00 	ldrex	r3, [r3]
 80079d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e3      	bne.n	80079c4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d118      	bne.n	8007a36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f023 0310 	bic.w	r3, r3, #16
 8007a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e6      	bne.n	8007a04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a4a:	bf00      	nop
 8007a4c:	3754      	adds	r7, #84	@ 0x54
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_UARTEx_DisableFifoMode+0x16>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e027      	b.n	8007abc <HAL_UARTEx_DisableFifoMode+0x66>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2224      	movs	r2, #36	@ 0x24
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 0201 	bic.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e02d      	b.n	8007b3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	@ 0x24
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0201 	bic.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f84f 	bl	8007bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e02d      	b.n	8007bb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2224      	movs	r2, #36	@ 0x24
 8007b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f811 	bl	8007bc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d108      	bne.n	8007be2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007be0:	e031      	b.n	8007c46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007be2:	2308      	movs	r3, #8
 8007be4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007be6:	2308      	movs	r3, #8
 8007be8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	0e5b      	lsrs	r3, r3, #25
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	0f5b      	lsrs	r3, r3, #29
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	7b3a      	ldrb	r2, [r7, #12]
 8007c0e:	4911      	ldr	r1, [pc, #68]	@ (8007c54 <UARTEx_SetNbDataToProcess+0x94>)
 8007c10:	5c8a      	ldrb	r2, [r1, r2]
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c16:	7b3a      	ldrb	r2, [r7, #12]
 8007c18:	490f      	ldr	r1, [pc, #60]	@ (8007c58 <UARTEx_SetNbDataToProcess+0x98>)
 8007c1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	7b7a      	ldrb	r2, [r7, #13]
 8007c2c:	4909      	ldr	r1, [pc, #36]	@ (8007c54 <UARTEx_SetNbDataToProcess+0x94>)
 8007c2e:	5c8a      	ldrb	r2, [r1, r2]
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c34:	7b7a      	ldrb	r2, [r7, #13]
 8007c36:	4908      	ldr	r1, [pc, #32]	@ (8007c58 <UARTEx_SetNbDataToProcess+0x98>)
 8007c38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007c46:	bf00      	nop
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	080086e4 	.word	0x080086e4
 8007c58:	080086ec 	.word	0x080086ec

08007c5c <sniprintf>:
 8007c5c:	b40c      	push	{r2, r3}
 8007c5e:	b530      	push	{r4, r5, lr}
 8007c60:	4b17      	ldr	r3, [pc, #92]	@ (8007cc0 <sniprintf+0x64>)
 8007c62:	1e0c      	subs	r4, r1, #0
 8007c64:	681d      	ldr	r5, [r3, #0]
 8007c66:	b09d      	sub	sp, #116	@ 0x74
 8007c68:	da08      	bge.n	8007c7c <sniprintf+0x20>
 8007c6a:	238b      	movs	r3, #139	@ 0x8b
 8007c6c:	602b      	str	r3, [r5, #0]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	b01d      	add	sp, #116	@ 0x74
 8007c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c78:	b002      	add	sp, #8
 8007c7a:	4770      	bx	lr
 8007c7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c84:	bf14      	ite	ne
 8007c86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c8a:	4623      	moveq	r3, r4
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	9307      	str	r3, [sp, #28]
 8007c90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c94:	9002      	str	r0, [sp, #8]
 8007c96:	9006      	str	r0, [sp, #24]
 8007c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c9e:	ab21      	add	r3, sp, #132	@ 0x84
 8007ca0:	a902      	add	r1, sp, #8
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	9301      	str	r3, [sp, #4]
 8007ca6:	f000 f9a3 	bl	8007ff0 <_svfiprintf_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	bfbc      	itt	lt
 8007cae:	238b      	movlt	r3, #139	@ 0x8b
 8007cb0:	602b      	strlt	r3, [r5, #0]
 8007cb2:	2c00      	cmp	r4, #0
 8007cb4:	d0dd      	beq.n	8007c72 <sniprintf+0x16>
 8007cb6:	9b02      	ldr	r3, [sp, #8]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	e7d9      	b.n	8007c72 <sniprintf+0x16>
 8007cbe:	bf00      	nop
 8007cc0:	200000d8 	.word	0x200000d8

08007cc4 <memset>:
 8007cc4:	4402      	add	r2, r0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d100      	bne.n	8007cce <memset+0xa>
 8007ccc:	4770      	bx	lr
 8007cce:	f803 1b01 	strb.w	r1, [r3], #1
 8007cd2:	e7f9      	b.n	8007cc8 <memset+0x4>

08007cd4 <__errno>:
 8007cd4:	4b01      	ldr	r3, [pc, #4]	@ (8007cdc <__errno+0x8>)
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	200000d8 	.word	0x200000d8

08007ce0 <__libc_init_array>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8007d18 <__libc_init_array+0x38>)
 8007ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8007d1c <__libc_init_array+0x3c>)
 8007ce6:	1b64      	subs	r4, r4, r5
 8007ce8:	10a4      	asrs	r4, r4, #2
 8007cea:	2600      	movs	r6, #0
 8007cec:	42a6      	cmp	r6, r4
 8007cee:	d109      	bne.n	8007d04 <__libc_init_array+0x24>
 8007cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8007d20 <__libc_init_array+0x40>)
 8007cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8007d24 <__libc_init_array+0x44>)
 8007cf4:	f000 fca0 	bl	8008638 <_init>
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	42a6      	cmp	r6, r4
 8007d00:	d105      	bne.n	8007d0e <__libc_init_array+0x2e>
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d08:	4798      	blx	r3
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	e7ee      	b.n	8007cec <__libc_init_array+0xc>
 8007d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d12:	4798      	blx	r3
 8007d14:	3601      	adds	r6, #1
 8007d16:	e7f2      	b.n	8007cfe <__libc_init_array+0x1e>
 8007d18:	08008730 	.word	0x08008730
 8007d1c:	08008730 	.word	0x08008730
 8007d20:	08008730 	.word	0x08008730
 8007d24:	08008734 	.word	0x08008734

08007d28 <__retarget_lock_acquire_recursive>:
 8007d28:	4770      	bx	lr

08007d2a <__retarget_lock_release_recursive>:
 8007d2a:	4770      	bx	lr

08007d2c <memcpy>:
 8007d2c:	440a      	add	r2, r1
 8007d2e:	4291      	cmp	r1, r2
 8007d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d34:	d100      	bne.n	8007d38 <memcpy+0xc>
 8007d36:	4770      	bx	lr
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d42:	4291      	cmp	r1, r2
 8007d44:	d1f9      	bne.n	8007d3a <memcpy+0xe>
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <_free_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d041      	beq.n	8007dd4 <_free_r+0x8c>
 8007d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d54:	1f0c      	subs	r4, r1, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfb8      	it	lt
 8007d5a:	18e4      	addlt	r4, r4, r3
 8007d5c:	f000 f8e0 	bl	8007f20 <__malloc_lock>
 8007d60:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd8 <_free_r+0x90>)
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	b933      	cbnz	r3, 8007d74 <_free_r+0x2c>
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	6014      	str	r4, [r2, #0]
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d70:	f000 b8dc 	b.w	8007f2c <__malloc_unlock>
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	d908      	bls.n	8007d8a <_free_r+0x42>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	1821      	adds	r1, r4, r0
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf01      	itttt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	1809      	addeq	r1, r1, r0
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	e7ed      	b.n	8007d66 <_free_r+0x1e>
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b10b      	cbz	r3, 8007d94 <_free_r+0x4c>
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	d9fa      	bls.n	8007d8a <_free_r+0x42>
 8007d94:	6811      	ldr	r1, [r2, #0]
 8007d96:	1850      	adds	r0, r2, r1
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d10b      	bne.n	8007db4 <_free_r+0x6c>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	4401      	add	r1, r0
 8007da0:	1850      	adds	r0, r2, r1
 8007da2:	4283      	cmp	r3, r0
 8007da4:	6011      	str	r1, [r2, #0]
 8007da6:	d1e0      	bne.n	8007d6a <_free_r+0x22>
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	6053      	str	r3, [r2, #4]
 8007dae:	4408      	add	r0, r1
 8007db0:	6010      	str	r0, [r2, #0]
 8007db2:	e7da      	b.n	8007d6a <_free_r+0x22>
 8007db4:	d902      	bls.n	8007dbc <_free_r+0x74>
 8007db6:	230c      	movs	r3, #12
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	e7d6      	b.n	8007d6a <_free_r+0x22>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	1821      	adds	r1, r4, r0
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	bf04      	itt	eq
 8007dc4:	6819      	ldreq	r1, [r3, #0]
 8007dc6:	685b      	ldreq	r3, [r3, #4]
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	bf04      	itt	eq
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	6054      	str	r4, [r2, #4]
 8007dd2:	e7ca      	b.n	8007d6a <_free_r+0x22>
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000830 	.word	0x20000830

08007ddc <sbrk_aligned>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4e0f      	ldr	r6, [pc, #60]	@ (8007e1c <sbrk_aligned+0x40>)
 8007de0:	460c      	mov	r4, r1
 8007de2:	6831      	ldr	r1, [r6, #0]
 8007de4:	4605      	mov	r5, r0
 8007de6:	b911      	cbnz	r1, 8007dee <sbrk_aligned+0x12>
 8007de8:	f000 fba6 	bl	8008538 <_sbrk_r>
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	4621      	mov	r1, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 fba1 	bl	8008538 <_sbrk_r>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d103      	bne.n	8007e02 <sbrk_aligned+0x26>
 8007dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8007dfe:	4620      	mov	r0, r4
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	1cc4      	adds	r4, r0, #3
 8007e04:	f024 0403 	bic.w	r4, r4, #3
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d0f8      	beq.n	8007dfe <sbrk_aligned+0x22>
 8007e0c:	1a21      	subs	r1, r4, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fb92 	bl	8008538 <_sbrk_r>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d1f2      	bne.n	8007dfe <sbrk_aligned+0x22>
 8007e18:	e7ef      	b.n	8007dfa <sbrk_aligned+0x1e>
 8007e1a:	bf00      	nop
 8007e1c:	2000082c 	.word	0x2000082c

08007e20 <_malloc_r>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	1ccd      	adds	r5, r1, #3
 8007e26:	f025 0503 	bic.w	r5, r5, #3
 8007e2a:	3508      	adds	r5, #8
 8007e2c:	2d0c      	cmp	r5, #12
 8007e2e:	bf38      	it	cc
 8007e30:	250c      	movcc	r5, #12
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	4606      	mov	r6, r0
 8007e36:	db01      	blt.n	8007e3c <_malloc_r+0x1c>
 8007e38:	42a9      	cmp	r1, r5
 8007e3a:	d904      	bls.n	8007e46 <_malloc_r+0x26>
 8007e3c:	230c      	movs	r3, #12
 8007e3e:	6033      	str	r3, [r6, #0]
 8007e40:	2000      	movs	r0, #0
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f1c <_malloc_r+0xfc>
 8007e4a:	f000 f869 	bl	8007f20 <__malloc_lock>
 8007e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e52:	461c      	mov	r4, r3
 8007e54:	bb44      	cbnz	r4, 8007ea8 <_malloc_r+0x88>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ffbf 	bl	8007ddc <sbrk_aligned>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	4604      	mov	r4, r0
 8007e62:	d158      	bne.n	8007f16 <_malloc_r+0xf6>
 8007e64:	f8d8 4000 	ldr.w	r4, [r8]
 8007e68:	4627      	mov	r7, r4
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	d143      	bne.n	8007ef6 <_malloc_r+0xd6>
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	d04b      	beq.n	8007f0a <_malloc_r+0xea>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	4639      	mov	r1, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	eb04 0903 	add.w	r9, r4, r3
 8007e7c:	f000 fb5c 	bl	8008538 <_sbrk_r>
 8007e80:	4581      	cmp	r9, r0
 8007e82:	d142      	bne.n	8007f0a <_malloc_r+0xea>
 8007e84:	6821      	ldr	r1, [r4, #0]
 8007e86:	1a6d      	subs	r5, r5, r1
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ffa6 	bl	8007ddc <sbrk_aligned>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d03a      	beq.n	8007f0a <_malloc_r+0xea>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	442b      	add	r3, r5
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	bb62      	cbnz	r2, 8007efc <_malloc_r+0xdc>
 8007ea2:	f8c8 7000 	str.w	r7, [r8]
 8007ea6:	e00f      	b.n	8007ec8 <_malloc_r+0xa8>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	1b52      	subs	r2, r2, r5
 8007eac:	d420      	bmi.n	8007ef0 <_malloc_r+0xd0>
 8007eae:	2a0b      	cmp	r2, #11
 8007eb0:	d917      	bls.n	8007ee2 <_malloc_r+0xc2>
 8007eb2:	1961      	adds	r1, r4, r5
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	6025      	str	r5, [r4, #0]
 8007eb8:	bf18      	it	ne
 8007eba:	6059      	strne	r1, [r3, #4]
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	bf08      	it	eq
 8007ec0:	f8c8 1000 	streq.w	r1, [r8]
 8007ec4:	5162      	str	r2, [r4, r5]
 8007ec6:	604b      	str	r3, [r1, #4]
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f82f 	bl	8007f2c <__malloc_unlock>
 8007ece:	f104 000b 	add.w	r0, r4, #11
 8007ed2:	1d23      	adds	r3, r4, #4
 8007ed4:	f020 0007 	bic.w	r0, r0, #7
 8007ed8:	1ac2      	subs	r2, r0, r3
 8007eda:	bf1c      	itt	ne
 8007edc:	1a1b      	subne	r3, r3, r0
 8007ede:	50a3      	strne	r3, [r4, r2]
 8007ee0:	e7af      	b.n	8007e42 <_malloc_r+0x22>
 8007ee2:	6862      	ldr	r2, [r4, #4]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	bf0c      	ite	eq
 8007ee8:	f8c8 2000 	streq.w	r2, [r8]
 8007eec:	605a      	strne	r2, [r3, #4]
 8007eee:	e7eb      	b.n	8007ec8 <_malloc_r+0xa8>
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	6864      	ldr	r4, [r4, #4]
 8007ef4:	e7ae      	b.n	8007e54 <_malloc_r+0x34>
 8007ef6:	463c      	mov	r4, r7
 8007ef8:	687f      	ldr	r7, [r7, #4]
 8007efa:	e7b6      	b.n	8007e6a <_malloc_r+0x4a>
 8007efc:	461a      	mov	r2, r3
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	d1fb      	bne.n	8007efc <_malloc_r+0xdc>
 8007f04:	2300      	movs	r3, #0
 8007f06:	6053      	str	r3, [r2, #4]
 8007f08:	e7de      	b.n	8007ec8 <_malloc_r+0xa8>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	6033      	str	r3, [r6, #0]
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f000 f80c 	bl	8007f2c <__malloc_unlock>
 8007f14:	e794      	b.n	8007e40 <_malloc_r+0x20>
 8007f16:	6005      	str	r5, [r0, #0]
 8007f18:	e7d6      	b.n	8007ec8 <_malloc_r+0xa8>
 8007f1a:	bf00      	nop
 8007f1c:	20000830 	.word	0x20000830

08007f20 <__malloc_lock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	@ (8007f28 <__malloc_lock+0x8>)
 8007f22:	f7ff bf01 	b.w	8007d28 <__retarget_lock_acquire_recursive>
 8007f26:	bf00      	nop
 8007f28:	20000828 	.word	0x20000828

08007f2c <__malloc_unlock>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	@ (8007f34 <__malloc_unlock+0x8>)
 8007f2e:	f7ff befc 	b.w	8007d2a <__retarget_lock_release_recursive>
 8007f32:	bf00      	nop
 8007f34:	20000828 	.word	0x20000828

08007f38 <__ssputs_r>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	688e      	ldr	r6, [r1, #8]
 8007f3e:	461f      	mov	r7, r3
 8007f40:	42be      	cmp	r6, r7
 8007f42:	680b      	ldr	r3, [r1, #0]
 8007f44:	4682      	mov	sl, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4690      	mov	r8, r2
 8007f4a:	d82d      	bhi.n	8007fa8 <__ssputs_r+0x70>
 8007f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f54:	d026      	beq.n	8007fa4 <__ssputs_r+0x6c>
 8007f56:	6965      	ldr	r5, [r4, #20]
 8007f58:	6909      	ldr	r1, [r1, #16]
 8007f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f5e:	eba3 0901 	sub.w	r9, r3, r1
 8007f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f66:	1c7b      	adds	r3, r7, #1
 8007f68:	444b      	add	r3, r9
 8007f6a:	106d      	asrs	r5, r5, #1
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	bf38      	it	cc
 8007f70:	461d      	movcc	r5, r3
 8007f72:	0553      	lsls	r3, r2, #21
 8007f74:	d527      	bpl.n	8007fc6 <__ssputs_r+0x8e>
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7ff ff52 	bl	8007e20 <_malloc_r>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	b360      	cbz	r0, 8007fda <__ssputs_r+0xa2>
 8007f80:	6921      	ldr	r1, [r4, #16]
 8007f82:	464a      	mov	r2, r9
 8007f84:	f7ff fed2 	bl	8007d2c <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	6165      	str	r5, [r4, #20]
 8007f98:	444e      	add	r6, r9
 8007f9a:	eba5 0509 	sub.w	r5, r5, r9
 8007f9e:	6026      	str	r6, [r4, #0]
 8007fa0:	60a5      	str	r5, [r4, #8]
 8007fa2:	463e      	mov	r6, r7
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	d900      	bls.n	8007faa <__ssputs_r+0x72>
 8007fa8:	463e      	mov	r6, r7
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	4632      	mov	r2, r6
 8007fae:	4641      	mov	r1, r8
 8007fb0:	f000 faa8 	bl	8008504 <memmove>
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	1b9b      	subs	r3, r3, r6
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4433      	add	r3, r6
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	f000 fac6 	bl	8008558 <_realloc_r>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d1e0      	bne.n	8007f94 <__ssputs_r+0x5c>
 8007fd2:	6921      	ldr	r1, [r4, #16]
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7ff feb7 	bl	8007d48 <_free_r>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	f8ca 3000 	str.w	r3, [sl]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e7e9      	b.n	8007fc2 <__ssputs_r+0x8a>
	...

08007ff0 <_svfiprintf_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	4698      	mov	r8, r3
 8007ff6:	898b      	ldrh	r3, [r1, #12]
 8007ff8:	061b      	lsls	r3, r3, #24
 8007ffa:	b09d      	sub	sp, #116	@ 0x74
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	4614      	mov	r4, r2
 8008002:	d510      	bpl.n	8008026 <_svfiprintf_r+0x36>
 8008004:	690b      	ldr	r3, [r1, #16]
 8008006:	b973      	cbnz	r3, 8008026 <_svfiprintf_r+0x36>
 8008008:	2140      	movs	r1, #64	@ 0x40
 800800a:	f7ff ff09 	bl	8007e20 <_malloc_r>
 800800e:	6028      	str	r0, [r5, #0]
 8008010:	6128      	str	r0, [r5, #16]
 8008012:	b930      	cbnz	r0, 8008022 <_svfiprintf_r+0x32>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	@ 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	2340      	movs	r3, #64	@ 0x40
 8008024:	616b      	str	r3, [r5, #20]
 8008026:	2300      	movs	r3, #0
 8008028:	9309      	str	r3, [sp, #36]	@ 0x24
 800802a:	2320      	movs	r3, #32
 800802c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008030:	f8cd 800c 	str.w	r8, [sp, #12]
 8008034:	2330      	movs	r3, #48	@ 0x30
 8008036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081d4 <_svfiprintf_r+0x1e4>
 800803a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800803e:	f04f 0901 	mov.w	r9, #1
 8008042:	4623      	mov	r3, r4
 8008044:	469a      	mov	sl, r3
 8008046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800804a:	b10a      	cbz	r2, 8008050 <_svfiprintf_r+0x60>
 800804c:	2a25      	cmp	r2, #37	@ 0x25
 800804e:	d1f9      	bne.n	8008044 <_svfiprintf_r+0x54>
 8008050:	ebba 0b04 	subs.w	fp, sl, r4
 8008054:	d00b      	beq.n	800806e <_svfiprintf_r+0x7e>
 8008056:	465b      	mov	r3, fp
 8008058:	4622      	mov	r2, r4
 800805a:	4629      	mov	r1, r5
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff ff6b 	bl	8007f38 <__ssputs_r>
 8008062:	3001      	adds	r0, #1
 8008064:	f000 80a7 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800806a:	445a      	add	r2, fp
 800806c:	9209      	str	r2, [sp, #36]	@ 0x24
 800806e:	f89a 3000 	ldrb.w	r3, [sl]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 809f 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008078:	2300      	movs	r3, #0
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008082:	f10a 0a01 	add.w	sl, sl, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	9307      	str	r3, [sp, #28]
 800808a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800808e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008090:	4654      	mov	r4, sl
 8008092:	2205      	movs	r2, #5
 8008094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008098:	484e      	ldr	r0, [pc, #312]	@ (80081d4 <_svfiprintf_r+0x1e4>)
 800809a:	f7f8 f8b1 	bl	8000200 <memchr>
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	b9d8      	cbnz	r0, 80080da <_svfiprintf_r+0xea>
 80080a2:	06d0      	lsls	r0, r2, #27
 80080a4:	bf44      	itt	mi
 80080a6:	2320      	movmi	r3, #32
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ac:	0711      	lsls	r1, r2, #28
 80080ae:	bf44      	itt	mi
 80080b0:	232b      	movmi	r3, #43	@ 0x2b
 80080b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80080bc:	d015      	beq.n	80080ea <_svfiprintf_r+0xfa>
 80080be:	9a07      	ldr	r2, [sp, #28]
 80080c0:	4654      	mov	r4, sl
 80080c2:	2000      	movs	r0, #0
 80080c4:	f04f 0c0a 	mov.w	ip, #10
 80080c8:	4621      	mov	r1, r4
 80080ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ce:	3b30      	subs	r3, #48	@ 0x30
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	d94b      	bls.n	800816c <_svfiprintf_r+0x17c>
 80080d4:	b1b0      	cbz	r0, 8008104 <_svfiprintf_r+0x114>
 80080d6:	9207      	str	r2, [sp, #28]
 80080d8:	e014      	b.n	8008104 <_svfiprintf_r+0x114>
 80080da:	eba0 0308 	sub.w	r3, r0, r8
 80080de:	fa09 f303 	lsl.w	r3, r9, r3
 80080e2:	4313      	orrs	r3, r2
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	46a2      	mov	sl, r4
 80080e8:	e7d2      	b.n	8008090 <_svfiprintf_r+0xa0>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	1d19      	adds	r1, r3, #4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	9103      	str	r1, [sp, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfbb      	ittet	lt
 80080f6:	425b      	neglt	r3, r3
 80080f8:	f042 0202 	orrlt.w	r2, r2, #2
 80080fc:	9307      	strge	r3, [sp, #28]
 80080fe:	9307      	strlt	r3, [sp, #28]
 8008100:	bfb8      	it	lt
 8008102:	9204      	strlt	r2, [sp, #16]
 8008104:	7823      	ldrb	r3, [r4, #0]
 8008106:	2b2e      	cmp	r3, #46	@ 0x2e
 8008108:	d10a      	bne.n	8008120 <_svfiprintf_r+0x130>
 800810a:	7863      	ldrb	r3, [r4, #1]
 800810c:	2b2a      	cmp	r3, #42	@ 0x2a
 800810e:	d132      	bne.n	8008176 <_svfiprintf_r+0x186>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	9203      	str	r2, [sp, #12]
 8008118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800811c:	3402      	adds	r4, #2
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081e4 <_svfiprintf_r+0x1f4>
 8008124:	7821      	ldrb	r1, [r4, #0]
 8008126:	2203      	movs	r2, #3
 8008128:	4650      	mov	r0, sl
 800812a:	f7f8 f869 	bl	8000200 <memchr>
 800812e:	b138      	cbz	r0, 8008140 <_svfiprintf_r+0x150>
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	eba0 000a 	sub.w	r0, r0, sl
 8008136:	2240      	movs	r2, #64	@ 0x40
 8008138:	4082      	lsls	r2, r0
 800813a:	4313      	orrs	r3, r2
 800813c:	3401      	adds	r4, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	4824      	ldr	r0, [pc, #144]	@ (80081d8 <_svfiprintf_r+0x1e8>)
 8008146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800814a:	2206      	movs	r2, #6
 800814c:	f7f8 f858 	bl	8000200 <memchr>
 8008150:	2800      	cmp	r0, #0
 8008152:	d036      	beq.n	80081c2 <_svfiprintf_r+0x1d2>
 8008154:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <_svfiprintf_r+0x1ec>)
 8008156:	bb1b      	cbnz	r3, 80081a0 <_svfiprintf_r+0x1b0>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	3307      	adds	r3, #7
 800815c:	f023 0307 	bic.w	r3, r3, #7
 8008160:	3308      	adds	r3, #8
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	4433      	add	r3, r6
 8008168:	9309      	str	r3, [sp, #36]	@ 0x24
 800816a:	e76a      	b.n	8008042 <_svfiprintf_r+0x52>
 800816c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008170:	460c      	mov	r4, r1
 8008172:	2001      	movs	r0, #1
 8008174:	e7a8      	b.n	80080c8 <_svfiprintf_r+0xd8>
 8008176:	2300      	movs	r3, #0
 8008178:	3401      	adds	r4, #1
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008188:	3a30      	subs	r2, #48	@ 0x30
 800818a:	2a09      	cmp	r2, #9
 800818c:	d903      	bls.n	8008196 <_svfiprintf_r+0x1a6>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0c6      	beq.n	8008120 <_svfiprintf_r+0x130>
 8008192:	9105      	str	r1, [sp, #20]
 8008194:	e7c4      	b.n	8008120 <_svfiprintf_r+0x130>
 8008196:	fb0c 2101 	mla	r1, ip, r1, r2
 800819a:	4604      	mov	r4, r0
 800819c:	2301      	movs	r3, #1
 800819e:	e7f0      	b.n	8008182 <_svfiprintf_r+0x192>
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	462a      	mov	r2, r5
 80081a6:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4638      	mov	r0, r7
 80081ac:	f3af 8000 	nop.w
 80081b0:	1c42      	adds	r2, r0, #1
 80081b2:	4606      	mov	r6, r0
 80081b4:	d1d6      	bne.n	8008164 <_svfiprintf_r+0x174>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af2d 	bmi.w	8008018 <_svfiprintf_r+0x28>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e72c      	b.n	800801c <_svfiprintf_r+0x2c>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4638      	mov	r0, r7
 80081ce:	f000 f879 	bl	80082c4 <_printf_i>
 80081d2:	e7ed      	b.n	80081b0 <_svfiprintf_r+0x1c0>
 80081d4:	080086f4 	.word	0x080086f4
 80081d8:	080086fe 	.word	0x080086fe
 80081dc:	00000000 	.word	0x00000000
 80081e0:	08007f39 	.word	0x08007f39
 80081e4:	080086fa 	.word	0x080086fa

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bfb8      	it	lt
 80081fc:	4613      	movlt	r3, r2
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008204:	4607      	mov	r7, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc26      	bgt.n	800827e <_printf_common+0x96>
 8008230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	3b00      	subs	r3, #0
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d42b      	bmi.n	8008298 <_printf_common+0xb0>
 8008240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008244:	4641      	mov	r1, r8
 8008246:	4638      	mov	r0, r7
 8008248:	47c8      	blx	r9
 800824a:	3001      	adds	r0, #1
 800824c:	d01e      	beq.n	800828c <_printf_common+0xa4>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	2b04      	cmp	r3, #4
 8008258:	bf02      	ittt	eq
 800825a:	68e5      	ldreq	r5, [r4, #12]
 800825c:	6833      	ldreq	r3, [r6, #0]
 800825e:	1aed      	subeq	r5, r5, r3
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	2600      	movs	r6, #0
 8008274:	341a      	adds	r4, #26
 8008276:	42b5      	cmp	r5, r6
 8008278:	d11a      	bne.n	80082b0 <_printf_common+0xc8>
 800827a:	2000      	movs	r0, #0
 800827c:	e008      	b.n	8008290 <_printf_common+0xa8>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4641      	mov	r1, r8
 8008284:	4638      	mov	r0, r7
 8008286:	47c8      	blx	r9
 8008288:	3001      	adds	r0, #1
 800828a:	d103      	bne.n	8008294 <_printf_common+0xac>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	3501      	adds	r5, #1
 8008296:	e7c6      	b.n	8008226 <_printf_common+0x3e>
 8008298:	18e1      	adds	r1, r4, r3
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2030      	movs	r0, #48	@ 0x30
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a2:	4422      	add	r2, r4
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082ac:	3302      	adds	r3, #2
 80082ae:	e7c7      	b.n	8008240 <_printf_common+0x58>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4622      	mov	r2, r4
 80082b4:	4641      	mov	r1, r8
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c8      	blx	r9
 80082ba:	3001      	adds	r0, #1
 80082bc:	d0e6      	beq.n	800828c <_printf_common+0xa4>
 80082be:	3601      	adds	r6, #1
 80082c0:	e7d9      	b.n	8008276 <_printf_common+0x8e>
	...

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	7e0f      	ldrb	r7, [r1, #24]
 80082ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082cc:	2f78      	cmp	r7, #120	@ 0x78
 80082ce:	4691      	mov	r9, r2
 80082d0:	4680      	mov	r8, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	469a      	mov	sl, r3
 80082d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	@ 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d2 	beq.w	800848a <_printf_i+0x1c6>
 80082e6:	2f58      	cmp	r7, #88	@ 0x58
 80082e8:	f000 80b9 	beq.w	800845e <_printf_i+0x19a>
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008304 <_printf_i+0x40>)
 8008300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	08008471 	.word	0x08008471
 8008334:	0800839b 	.word	0x0800839b
 8008338:	0800842b 	.word	0x0800842b
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	08008493 	.word	0x08008493
 8008348:	080082ed 	.word	0x080082ed
 800834c:	0800839b 	.word	0x0800839b
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008433 	.word	0x08008433
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6032      	str	r2, [r6, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e09d      	b.n	80084ac <_printf_i+0x1e8>
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	0606      	lsls	r6, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xbc>
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	e003      	b.n	8008388 <_printf_i+0xc4>
 8008380:	0645      	lsls	r5, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xb8>
 8008384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xd0>
 800838c:	232d      	movs	r3, #45	@ 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008394:	4859      	ldr	r0, [pc, #356]	@ (80084fc <_printf_i+0x238>)
 8008396:	230a      	movs	r3, #10
 8008398:	e011      	b.n	80083be <_printf_i+0xfa>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	0608      	lsls	r0, r1, #24
 80083a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0xe8>
 80083a6:	0649      	lsls	r1, r1, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ae:	4853      	ldr	r0, [pc, #332]	@ (80084fc <_printf_i+0x238>)
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	bf14      	ite	ne
 80083b4:	230a      	movne	r3, #10
 80083b6:	2308      	moveq	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083be:	6866      	ldr	r6, [r4, #4]
 80083c0:	60a6      	str	r6, [r4, #8]
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	bfa2      	ittt	ge
 80083c6:	6821      	ldrge	r1, [r4, #0]
 80083c8:	f021 0104 	bicge.w	r1, r1, #4
 80083cc:	6021      	strge	r1, [r4, #0]
 80083ce:	b90d      	cbnz	r5, 80083d4 <_printf_i+0x110>
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	d04b      	beq.n	800846c <_printf_i+0x1a8>
 80083d4:	4616      	mov	r6, r2
 80083d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083da:	fb03 5711 	mls	r7, r3, r1, r5
 80083de:	5dc7      	ldrb	r7, [r0, r7]
 80083e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e4:	462f      	mov	r7, r5
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	460d      	mov	r5, r1
 80083ea:	d9f4      	bls.n	80083d6 <_printf_i+0x112>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d10b      	bne.n	8008408 <_printf_i+0x144>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	07df      	lsls	r7, r3, #31
 80083f4:	d508      	bpl.n	8008408 <_printf_i+0x144>
 80083f6:	6923      	ldr	r3, [r4, #16]
 80083f8:	6861      	ldr	r1, [r4, #4]
 80083fa:	4299      	cmp	r1, r3
 80083fc:	bfde      	ittt	le
 80083fe:	2330      	movle	r3, #48	@ 0x30
 8008400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008404:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008408:	1b92      	subs	r2, r2, r6
 800840a:	6122      	str	r2, [r4, #16]
 800840c:	f8cd a000 	str.w	sl, [sp]
 8008410:	464b      	mov	r3, r9
 8008412:	aa03      	add	r2, sp, #12
 8008414:	4621      	mov	r1, r4
 8008416:	4640      	mov	r0, r8
 8008418:	f7ff fee6 	bl	80081e8 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	d14a      	bne.n	80084b6 <_printf_i+0x1f2>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	b004      	add	sp, #16
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	f043 0320 	orr.w	r3, r3, #32
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	4833      	ldr	r0, [pc, #204]	@ (8008500 <_printf_i+0x23c>)
 8008434:	2778      	movs	r7, #120	@ 0x78
 8008436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	6831      	ldr	r1, [r6, #0]
 800843e:	061f      	lsls	r7, r3, #24
 8008440:	f851 5b04 	ldr.w	r5, [r1], #4
 8008444:	d402      	bmi.n	800844c <_printf_i+0x188>
 8008446:	065f      	lsls	r7, r3, #25
 8008448:	bf48      	it	mi
 800844a:	b2ad      	uxthmi	r5, r5
 800844c:	6031      	str	r1, [r6, #0]
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	bf44      	itt	mi
 8008452:	f043 0320 	orrmi.w	r3, r3, #32
 8008456:	6023      	strmi	r3, [r4, #0]
 8008458:	b11d      	cbz	r5, 8008462 <_printf_i+0x19e>
 800845a:	2310      	movs	r3, #16
 800845c:	e7ac      	b.n	80083b8 <_printf_i+0xf4>
 800845e:	4827      	ldr	r0, [pc, #156]	@ (80084fc <_printf_i+0x238>)
 8008460:	e7e9      	b.n	8008436 <_printf_i+0x172>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	f023 0320 	bic.w	r3, r3, #32
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	e7f6      	b.n	800845a <_printf_i+0x196>
 800846c:	4616      	mov	r6, r2
 800846e:	e7bd      	b.n	80083ec <_printf_i+0x128>
 8008470:	6833      	ldr	r3, [r6, #0]
 8008472:	6825      	ldr	r5, [r4, #0]
 8008474:	6961      	ldr	r1, [r4, #20]
 8008476:	1d18      	adds	r0, r3, #4
 8008478:	6030      	str	r0, [r6, #0]
 800847a:	062e      	lsls	r6, r5, #24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	d501      	bpl.n	8008484 <_printf_i+0x1c0>
 8008480:	6019      	str	r1, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0x1c6>
 8008484:	0668      	lsls	r0, r5, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0x1bc>
 8008488:	8019      	strh	r1, [r3, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	4616      	mov	r6, r2
 8008490:	e7bc      	b.n	800840c <_printf_i+0x148>
 8008492:	6833      	ldr	r3, [r6, #0]
 8008494:	1d1a      	adds	r2, r3, #4
 8008496:	6032      	str	r2, [r6, #0]
 8008498:	681e      	ldr	r6, [r3, #0]
 800849a:	6862      	ldr	r2, [r4, #4]
 800849c:	2100      	movs	r1, #0
 800849e:	4630      	mov	r0, r6
 80084a0:	f7f7 feae 	bl	8000200 <memchr>
 80084a4:	b108      	cbz	r0, 80084aa <_printf_i+0x1e6>
 80084a6:	1b80      	subs	r0, r0, r6
 80084a8:	6060      	str	r0, [r4, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b4:	e7aa      	b.n	800840c <_printf_i+0x148>
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	4632      	mov	r2, r6
 80084ba:	4649      	mov	r1, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	47d0      	blx	sl
 80084c0:	3001      	adds	r0, #1
 80084c2:	d0ad      	beq.n	8008420 <_printf_i+0x15c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	079b      	lsls	r3, r3, #30
 80084c8:	d413      	bmi.n	80084f2 <_printf_i+0x22e>
 80084ca:	68e0      	ldr	r0, [r4, #12]
 80084cc:	9b03      	ldr	r3, [sp, #12]
 80084ce:	4298      	cmp	r0, r3
 80084d0:	bfb8      	it	lt
 80084d2:	4618      	movlt	r0, r3
 80084d4:	e7a6      	b.n	8008424 <_printf_i+0x160>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4632      	mov	r2, r6
 80084da:	4649      	mov	r1, r9
 80084dc:	4640      	mov	r0, r8
 80084de:	47d0      	blx	sl
 80084e0:	3001      	adds	r0, #1
 80084e2:	d09d      	beq.n	8008420 <_printf_i+0x15c>
 80084e4:	3501      	adds	r5, #1
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	9903      	ldr	r1, [sp, #12]
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dcf2      	bgt.n	80084d6 <_printf_i+0x212>
 80084f0:	e7eb      	b.n	80084ca <_printf_i+0x206>
 80084f2:	2500      	movs	r5, #0
 80084f4:	f104 0619 	add.w	r6, r4, #25
 80084f8:	e7f5      	b.n	80084e6 <_printf_i+0x222>
 80084fa:	bf00      	nop
 80084fc:	08008705 	.word	0x08008705
 8008500:	08008716 	.word	0x08008716

08008504 <memmove>:
 8008504:	4288      	cmp	r0, r1
 8008506:	b510      	push	{r4, lr}
 8008508:	eb01 0402 	add.w	r4, r1, r2
 800850c:	d902      	bls.n	8008514 <memmove+0x10>
 800850e:	4284      	cmp	r4, r0
 8008510:	4623      	mov	r3, r4
 8008512:	d807      	bhi.n	8008524 <memmove+0x20>
 8008514:	1e43      	subs	r3, r0, #1
 8008516:	42a1      	cmp	r1, r4
 8008518:	d008      	beq.n	800852c <memmove+0x28>
 800851a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008522:	e7f8      	b.n	8008516 <memmove+0x12>
 8008524:	4402      	add	r2, r0
 8008526:	4601      	mov	r1, r0
 8008528:	428a      	cmp	r2, r1
 800852a:	d100      	bne.n	800852e <memmove+0x2a>
 800852c:	bd10      	pop	{r4, pc}
 800852e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008536:	e7f7      	b.n	8008528 <memmove+0x24>

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	@ (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f9 fbe6 	bl	8001d14 <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000824 	.word	0x20000824

08008558 <_realloc_r>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	4680      	mov	r8, r0
 800855e:	4615      	mov	r5, r2
 8008560:	460c      	mov	r4, r1
 8008562:	b921      	cbnz	r1, 800856e <_realloc_r+0x16>
 8008564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008568:	4611      	mov	r1, r2
 800856a:	f7ff bc59 	b.w	8007e20 <_malloc_r>
 800856e:	b92a      	cbnz	r2, 800857c <_realloc_r+0x24>
 8008570:	f7ff fbea 	bl	8007d48 <_free_r>
 8008574:	2400      	movs	r4, #0
 8008576:	4620      	mov	r0, r4
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	f000 f81a 	bl	80085b4 <_malloc_usable_size_r>
 8008580:	4285      	cmp	r5, r0
 8008582:	4606      	mov	r6, r0
 8008584:	d802      	bhi.n	800858c <_realloc_r+0x34>
 8008586:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800858a:	d8f4      	bhi.n	8008576 <_realloc_r+0x1e>
 800858c:	4629      	mov	r1, r5
 800858e:	4640      	mov	r0, r8
 8008590:	f7ff fc46 	bl	8007e20 <_malloc_r>
 8008594:	4607      	mov	r7, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d0ec      	beq.n	8008574 <_realloc_r+0x1c>
 800859a:	42b5      	cmp	r5, r6
 800859c:	462a      	mov	r2, r5
 800859e:	4621      	mov	r1, r4
 80085a0:	bf28      	it	cs
 80085a2:	4632      	movcs	r2, r6
 80085a4:	f7ff fbc2 	bl	8007d2c <memcpy>
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fbcc 	bl	8007d48 <_free_r>
 80085b0:	463c      	mov	r4, r7
 80085b2:	e7e0      	b.n	8008576 <_realloc_r+0x1e>

080085b4 <_malloc_usable_size_r>:
 80085b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b8:	1f18      	subs	r0, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bfbc      	itt	lt
 80085be:	580b      	ldrlt	r3, [r1, r0]
 80085c0:	18c0      	addlt	r0, r0, r3
 80085c2:	4770      	bx	lr

080085c4 <trunc>:
 80085c4:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80085c8:	ec5c bb10 	vmov	fp, ip, d0
 80085cc:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80085d0:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80085d4:	2913      	cmp	r1, #19
 80085d6:	4664      	mov	r4, ip
 80085d8:	dc14      	bgt.n	8008604 <trunc+0x40>
 80085da:	2900      	cmp	r1, #0
 80085dc:	bfa4      	itt	ge
 80085de:	4b15      	ldrge	r3, [pc, #84]	@ (8008634 <trunc+0x70>)
 80085e0:	fa43 f101 	asrge.w	r1, r3, r1
 80085e4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80085e8:	bfad      	iteet	ge
 80085ea:	4021      	andge	r1, r4
 80085ec:	2200      	movlt	r2, #0
 80085ee:	4603      	movlt	r3, r0
 80085f0:	2200      	movge	r2, #0
 80085f2:	bfa8      	it	ge
 80085f4:	ea41 0300 	orrge.w	r3, r1, r0
 80085f8:	4693      	mov	fp, r2
 80085fa:	469c      	mov	ip, r3
 80085fc:	ec4c bb10 	vmov	d0, fp, ip
 8008600:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8008604:	2933      	cmp	r1, #51	@ 0x33
 8008606:	dd0b      	ble.n	8008620 <trunc+0x5c>
 8008608:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800860c:	d1f6      	bne.n	80085fc <trunc+0x38>
 800860e:	465a      	mov	r2, fp
 8008610:	4663      	mov	r3, ip
 8008612:	4658      	mov	r0, fp
 8008614:	4621      	mov	r1, r4
 8008616:	f7f7 fe49 	bl	80002ac <__adddf3>
 800861a:	4683      	mov	fp, r0
 800861c:	468c      	mov	ip, r1
 800861e:	e7ed      	b.n	80085fc <trunc+0x38>
 8008620:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	40c3      	lsrs	r3, r0
 800862a:	ea2b 0603 	bic.w	r6, fp, r3
 800862e:	46b3      	mov	fp, r6
 8008630:	46a4      	mov	ip, r4
 8008632:	e7e3      	b.n	80085fc <trunc+0x38>
 8008634:	fff00000 	.word	0xfff00000

08008638 <_init>:
 8008638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863a:	bf00      	nop
 800863c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800863e:	bc08      	pop	{r3}
 8008640:	469e      	mov	lr, r3
 8008642:	4770      	bx	lr

08008644 <_fini>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr
