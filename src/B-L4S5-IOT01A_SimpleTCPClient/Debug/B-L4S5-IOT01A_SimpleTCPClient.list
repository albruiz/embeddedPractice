
B-L4S5-IOT01A_SimpleTCPClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f008  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800f1c8  0800f1c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffbc  0800ffbc  000111d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffbc  0800ffbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffc4  0800ffc4  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffc4  0800ffc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffc8  0800ffc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ffcc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  200001d4  080101a0  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  080101a0  00011210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5f6  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c71  00000000  00000000  000307fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001559  00000000  00000000  00035fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f633  00000000  00000000  00037541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202f9  00000000  00000000  00066b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00120b47  00000000  00000000  00086e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a79b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ce4  00000000  00000000  001a79f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001b06dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800f1b0 	.word	0x0800f1b0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	0800f1b0 	.word	0x0800f1b0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800101c:	4b57      	ldr	r3, [pc, #348]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	4a56      	ldr	r2, [pc, #344]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001026:	6593      	str	r3, [r2, #88]	@ 0x58
 8001028:	4b54      	ldr	r3, [pc, #336]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b51      	ldr	r3, [pc, #324]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	4a50      	ldr	r2, [pc, #320]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001040:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104c:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001064:	4b45      	ldr	r3, [pc, #276]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a44      	ldr	r2, [pc, #272]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	483f      	ldr	r0, [pc, #252]	@ (8001180 <SPI_WIFI_MspInit+0x16c>)
 8001084:	f004 fcb2 	bl	80059ec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4837      	ldr	r0, [pc, #220]	@ (8001180 <SPI_WIFI_MspInit+0x16c>)
 80010a2:	f004 fa07 	bl	80054b4 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4831      	ldr	r0, [pc, #196]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010c0:	f004 f9f8 	bl	80054b4 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4828      	ldr	r0, [pc, #160]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010e2:	f004 f9e7 	bl	80054b4 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80010e6:	2201      	movs	r2, #1
 80010e8:	2101      	movs	r1, #1
 80010ea:	4826      	ldr	r0, [pc, #152]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010ec:	f004 fc7e 	bl	80059ec <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	481f      	ldr	r0, [pc, #124]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 8001108:	f004 f9d4 	bl	80054b4 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800110c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800111e:	2306      	movs	r3, #6
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800112a:	f004 f9c3 	bl	80054b4 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001140:	2306      	movs	r3, #6
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800114c:	f004 f9b2 	bl	80054b4 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001150:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001162:	2306      	movs	r3, #6
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800116e:	f004 f9a1 	bl	80054b4 <HAL_GPIO_Init>
}
 8001172:	bf00      	nop
 8001174:	3730      	adds	r7, #48	@ 0x30
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	48000400 	.word	0x48000400
 8001184:	48001000 	.word	0x48001000
 8001188:	48000800 	.word	0x48000800

0800118c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d145      	bne.n	800122c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011a2:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <SPI_WIFI_Init+0xb8>)
 80011a4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80011a6:	4826      	ldr	r0, [pc, #152]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011a8:	f7ff ff34 	bl	8001014 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b2:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011bc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80011c0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011d8:	2210      	movs	r2, #16
 80011da:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011f6:	f006 ff5b 	bl	80080b0 <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	e018      	b.n	8001238 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2007      	movs	r0, #7
 800120c:	f003 ffaf 	bl	800516e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001210:	2007      	movs	r0, #7
 8001212:	f003 ffc8 	bl	80051a6 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2033      	movs	r0, #51	@ 0x33
 800121c:	f003 ffa7 	bl	800516e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001220:	2033      	movs	r0, #51	@ 0x33
 8001222:	f003 ffc0 	bl	80051a6 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 f9fe 	bl	8001628 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800122c:	f000 f80c 	bl	8001248 <SPI_WIFI_ResetModule>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200001f0 	.word	0x200001f0
 8001244:	40003c00 	.word	0x40003c00

08001248 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800124e:	f002 ff9d 	bl	800418c <HAL_GetTick>
 8001252:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800125e:	4830      	ldr	r0, [pc, #192]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001260:	f004 fbc4 	bl	80059ec <HAL_GPIO_WritePin>
 8001264:	200a      	movs	r0, #10
 8001266:	f002 ff9d 	bl	80041a4 <HAL_Delay>
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001270:	482b      	ldr	r0, [pc, #172]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001272:	f004 fbbb 	bl	80059ec <HAL_GPIO_WritePin>
 8001276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800127a:	f002 ff93 	bl	80041a4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800127e:	2200      	movs	r2, #0
 8001280:	2101      	movs	r1, #1
 8001282:	4827      	ldr	r0, [pc, #156]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001284:	f004 fbb2 	bl	80059ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001288:	200f      	movs	r0, #15
 800128a:	f000 f9cd 	bl	8001628 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800128e:	e020      	b.n	80012d2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	463a      	mov	r2, r7
 8001294:	18d1      	adds	r1, r2, r3
 8001296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129a:	2201      	movs	r2, #1
 800129c:	4821      	ldr	r0, [pc, #132]	@ (8001324 <SPI_WIFI_ResetModule+0xdc>)
 800129e:	f006 ffd2 	bl	8008246 <HAL_SPI_Receive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3302      	adds	r3, #2
 80012aa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80012ac:	f002 ff6e 	bl	800418c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ba:	d202      	bcs.n	80012c2 <SPI_WIFI_ResetModule+0x7a>
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80012c2:	2201      	movs	r2, #1
 80012c4:	2101      	movs	r1, #1
 80012c6:	4816      	ldr	r0, [pc, #88]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012c8:	f004 fb90 	bl	80059ec <HAL_GPIO_WritePin>
      return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	e021      	b.n	8001316 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80012d2:	2102      	movs	r1, #2
 80012d4:	4812      	ldr	r0, [pc, #72]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012d6:	f004 fb71 	bl	80059bc <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d0d7      	beq.n	8001290 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80012e0:	2201      	movs	r2, #1
 80012e2:	2101      	movs	r1, #1
 80012e4:	480e      	ldr	r0, [pc, #56]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012e6:	f004 fb81 	bl	80059ec <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80012ea:	783b      	ldrb	r3, [r7, #0]
 80012ec:	2b15      	cmp	r3, #21
 80012ee:	d10e      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b15      	cmp	r3, #21
 80012f4:	d10b      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d108      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80012fc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d105      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	2b3e      	cmp	r3, #62	@ 0x3e
 8001306:	d102      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d002      	beq.n	8001314 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e000      	b.n	8001316 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	48001000 	.word	0x48001000
 8001324:	200001f0 	.word	0x200001f0

08001328 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <SPI_WIFI_DeInit+0x10>)
 800132e:	f006 ff62 	bl	80081f6 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200001f0 	.word	0x200001f0

0800133c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001344:	f002 ff22 	bl	800418c <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800134c:	e00a      	b.n	8001364 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800134e:	f002 ff1d 	bl	800418c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	d902      	bls.n	8001364 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e007      	b.n	8001374 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001364:	2102      	movs	r1, #2
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <wait_cmddata_rdy_high+0x40>)
 8001368:	f004 fb28 	bl	80059bc <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d1ed      	bne.n	800134e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	48001000 	.word	0x48001000

08001380 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001388:	f002 ff00 	bl	800418c <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001390:	e00a      	b.n	80013a8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001392:	f002 fefb 	bl	800418c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad2      	subs	r2, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d902      	bls.n	80013a8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <wait_cmddata_rdy_rising_event+0x3c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d0f0      	beq.n	8001392 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80013b0:	2300      	movs	r3, #0
#endif
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000025c 	.word	0x2000025c

080013c0 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80013c8:	f002 fee0 	bl	800418c <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80013d0:	e00a      	b.n	80013e8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80013d2:	f002 fedb 	bl	800418c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d902      	bls.n	80013e8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e004      	b.n	80013f2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <wait_spi_rx_event+0x3c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d0f0      	beq.n	80013d2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80013f0:	2300      	movs	r3, #0
#endif
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000254 	.word	0x20000254

08001400 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001408:	f002 fec0 	bl	800418c <HAL_GetTick>
 800140c:	4603      	mov	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001410:	e00a      	b.n	8001428 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001412:	f002 febb 	bl	800418c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d902      	bls.n	8001428 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e004      	b.n	8001432 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <wait_spi_tx_event+0x3c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d0f0      	beq.n	8001412 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001430:	2300      	movs	r3, #0
#endif
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000258 	.word	0x20000258

08001440 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	460b      	mov	r3, r1
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	4834      	ldr	r0, [pc, #208]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001458:	f004 fac8 	bl	80059ec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f8e3 	bl	8001628 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff8b 	bl	8001380 <wait_cmddata_rdy_rising_event>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	da02      	bge.n	8001476 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001470:	f06f 0302 	mvn.w	r3, #2
 8001474:	e054      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	482b      	ldr	r0, [pc, #172]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 800147c:	f004 fab6 	bl	80059ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001480:	200f      	movs	r0, #15
 8001482:	f000 f8d1 	bl	8001628 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001486:	e03d      	b.n	8001504 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	429a      	cmp	r2, r3
 8001490:	db02      	blt.n	8001498 <SPI_WIFI_ReceiveData+0x58>
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13c      	bne.n	8001512 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <SPI_WIFI_ReceiveData+0xec>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	4822      	ldr	r0, [pc, #136]	@ (8001530 <SPI_WIFI_ReceiveData+0xf0>)
 80014a8:	f007 fa9e 	bl	80089e8 <HAL_SPI_Receive_IT>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	481c      	ldr	r0, [pc, #112]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 80014b8:	f004 fa98 	bl	80059ec <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	e02e      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff7b 	bl	80013c0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80014ca:	7d3a      	ldrb	r2, [r7, #20]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	7d7a      	ldrb	r2, [r7, #21]
 80014d6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80014d8:	8afb      	ldrh	r3, [r7, #22]
 80014da:	3302      	adds	r3, #2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3302      	adds	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80014e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014ea:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80014ee:	db09      	blt.n	8001504 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80014f0:	2201      	movs	r2, #1
 80014f2:	2101      	movs	r1, #1
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 80014f6:	f004 fa79 	bl	80059ec <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80014fa:	f7ff fea5 	bl	8001248 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80014fe:	f06f 0303 	mvn.w	r3, #3
 8001502:	e00d      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001504:	2102      	movs	r1, #2
 8001506:	4808      	ldr	r0, [pc, #32]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001508:	f004 fa58 	bl	80059bc <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b01      	cmp	r3, #1
 8001510:	d0ba      	beq.n	8001488 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001512:	2201      	movs	r2, #1
 8001514:	2101      	movs	r1, #1
 8001516:	4804      	ldr	r0, [pc, #16]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001518:	f004 fa68 	bl	80059ec <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800151c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48001000 	.word	0x48001000
 800152c:	20000254 	.word	0x20000254
 8001530:	200001f0 	.word	0x200001f0

08001534 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	460b      	mov	r3, r1
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout)<0)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fef9 	bl	800133c <wait_cmddata_rdy_high>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	e04f      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <SPI_WIFI_SendData+0xcc>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800155c:	2200      	movs	r2, #0
 800155e:	2101      	movs	r1, #1
 8001560:	4828      	ldr	r0, [pc, #160]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 8001562:	f004 fa43 	bl	80059ec <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f85e 	bl	8001628 <SPI_WIFI_DelayUs>
  if (len > 1)
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d919      	bls.n	80015a6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <SPI_WIFI_SendData+0xd4>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001578:	897b      	ldrh	r3, [r7, #10]
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <SPI_WIFI_SendData+0xd8>)
 8001584:	f007 f9a2 	bl	80088cc <HAL_SPI_Transmit_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	481c      	ldr	r0, [pc, #112]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 8001594:	f004 fa2a 	bl	80059ec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e02b      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff2d 	bl	8001400 <wait_spi_tx_event>
  }

  if ( len & 1)
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80015bc:	230a      	movs	r3, #10
 80015be:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SPI_WIFI_SendData+0xd4>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <SPI_WIFI_SendData+0xd8>)
 80015d0:	f007 f97c 	bl	80088cc <HAL_SPI_Transmit_IT>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80015da:	2201      	movs	r2, #1
 80015dc:	2101      	movs	r1, #1
 80015de:	4809      	ldr	r0, [pc, #36]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 80015e0:	f004 fa04 	bl	80059ec <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e005      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff07 	bl	8001400 <wait_spi_tx_event>
    
  }
  return len;
 80015f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000025c 	.word	0x2000025c
 8001604:	48001000 	.word	0x48001000
 8001608:	20000258 	.word	0x20000258
 800160c:	200001f0 	.word	0x200001f0

08001610 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f002 fdc3 	bl	80041a4 <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d122      	bne.n	8001686 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <SPI_WIFI_DelayUs+0x98>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1f      	ldr	r2, [pc, #124]	@ (80016c4 <SPI_WIFI_DelayUs+0x9c>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001656:	f002 fd99 	bl	800418c <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800165c:	e002      	b.n	8001664 <SPI_WIFI_DelayUs+0x3c>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800166a:	f002 fd8f 	bl	800418c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001676:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SPI_WIFI_DelayUs+0x5e>
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <SPI_WIFI_DelayUs+0x98>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <SPI_WIFI_DelayUs+0xa0>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	0c9a      	lsrs	r2, r3, #18
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80016a6:	e002      	b.n	80016ae <SPI_WIFI_DelayUs+0x86>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <SPI_WIFI_DelayUs+0x80>
  return;
 80016b4:	bf00      	nop
}
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000260 	.word	0x20000260
 80016c0:	20000000 	.word	0x20000000
 80016c4:	10624dd3 	.word	0x10624dd3
 80016c8:	431bde83 	.word	0x431bde83

080016cc <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_SPI_RxCpltCallback+0x24>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_SPI_RxCpltCallback+0x24>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000254 	.word	0x20000254

080016f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_SPI_TxCpltCallback+0x24>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <HAL_SPI_TxCpltCallback+0x24>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000258 	.word	0x20000258

0800171c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SPI_WIFI_ISR+0x1c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <SPI_WIFI_ISR+0x1c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
   }
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	2000025c 	.word	0x2000025c

0800173c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800173c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001740:	b0b2      	sub	sp, #200	@ 0xc8
 8001742:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	char pcRouterSSID[] = "MOVISTAR_D0F0";
 8001744:	4bb7      	ldr	r3, [pc, #732]	@ (8001a24 <main+0x2e8>)
 8001746:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800174a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174c:	c407      	stmia	r4!, {r0, r1, r2}
 800174e:	8023      	strh	r3, [r4, #0]
	char pcRouterPWR[] = "faGAEandMxjdVvMwAqJa";
 8001750:	4bb5      	ldr	r3, [pc, #724]	@ (8001a28 <main+0x2ec>)
 8001752:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8001756:	461d      	mov	r5, r3
 8001758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001760:	6020      	str	r0, [r4, #0]
 8001762:	3404      	adds	r4, #4
 8001764:	7021      	strb	r1, [r4, #0]
	WIFI_Ecn_t	enRoutreEncryptiontype = WIFI_ECN_WPA2_PSK; // set your Router encryption
 8001766:	2303      	movs	r3, #3
 8001768:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	// change to your IP router
	pu8RemoteIpv4[0] = 192;
 800176c:	4baf      	ldr	r3, [pc, #700]	@ (8001a2c <main+0x2f0>)
 800176e:	22c0      	movs	r2, #192	@ 0xc0
 8001770:	701a      	strb	r2, [r3, #0]
	pu8RemoteIpv4[1] = 168;
 8001772:	4bae      	ldr	r3, [pc, #696]	@ (8001a2c <main+0x2f0>)
 8001774:	22a8      	movs	r2, #168	@ 0xa8
 8001776:	705a      	strb	r2, [r3, #1]
	pu8RemoteIpv4[2] = 1;
 8001778:	4bac      	ldr	r3, [pc, #688]	@ (8001a2c <main+0x2f0>)
 800177a:	2201      	movs	r2, #1
 800177c:	709a      	strb	r2, [r3, #2]
	pu8RemoteIpv4[3] = 35;
 800177e:	4bab      	ldr	r3, [pc, #684]	@ (8001a2c <main+0x2f0>)
 8001780:	2223      	movs	r2, #35	@ 0x23
 8001782:	70da      	strb	r2, [r3, #3]

	float temperature = 20.0f;
 8001784:	4baa      	ldr	r3, [pc, #680]	@ (8001a30 <main+0x2f4>)
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	float humidity = 50.0f;
 800178a:	4baa      	ldr	r3, [pc, #680]	@ (8001a34 <main+0x2f8>)
 800178c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	float light = 100.0f;
 8001790:	4ba9      	ldr	r3, [pc, #676]	@ (8001a38 <main+0x2fc>)
 8001792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001796:	f002 fc91 	bl	80040bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179a:	f000 f98d 	bl	8001ab8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800179e:	f000 f9ed 	bl	8001b7c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a2:	f000 fd1f 	bl	80021e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017a6:	f000 fa1d 	bl	8001be4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80017aa:	f000 fa7f 	bl	8001cac <MX_DFSDM1_Init>
  MX_I2C1_Init();
 80017ae:	f000 fab5 	bl	8001d1c <MX_I2C1_Init>
  MX_I2C2_Init();
 80017b2:	f000 faf3 	bl	8001d9c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80017b6:	f000 fb31 	bl	8001e1c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80017ba:	f000 fb9b 	bl	8001ef4 <MX_SPI1_Init>
  MX_UART4_Init();
 80017be:	f000 fbd7 	bl	8001f70 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017c2:	f000 fc21 	bl	8002008 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017c6:	f000 fc6b 	bl	80020a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017ca:	f000 fcb7 	bl	800213c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80017ce:	f000 fd01 	bl	80021d4 <MX_USB_OTG_FS_USB_Init>
  MX_RNG_Init();
 80017d2:	f000 fb79 	bl	8001ec8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  // Init Wifi module
  printf("***  Init WIFI  ***\n\r");
 80017d6:	4899      	ldr	r0, [pc, #612]	@ (8001a3c <main+0x300>)
 80017d8:	f00a fec8 	bl	800c56c <iprintf>
  if(WIFI_Init() == WIFI_STATUS_OK)
 80017dc:	f008 fefc 	bl	800a5d8 <WIFI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8099 	bne.w	800191a <main+0x1de>
  {
	  printf("Init WIFI: Success\n\n\r");
 80017e8:	4895      	ldr	r0, [pc, #596]	@ (8001a40 <main+0x304>)
 80017ea:	f00a febf 	bl	800c56c <iprintf>
	  printf("************************ WiFi Module Infos ************************\n\n\r");
 80017ee:	4895      	ldr	r0, [pc, #596]	@ (8001a44 <main+0x308>)
 80017f0:	f00a febc 	bl	800c56c <iprintf>
	  // get module name
	  if(WIFI_GetModuleName(pcWifiModuleName) == WIFI_STATUS_OK)
 80017f4:	4894      	ldr	r0, [pc, #592]	@ (8001a48 <main+0x30c>)
 80017f6:	f009 f815 	bl	800a824 <WIFI_GetModuleName>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <main+0xce>
	  {
		  printf("Wifi Module Name: %s\n\r",pcWifiModuleName);
 8001800:	4991      	ldr	r1, [pc, #580]	@ (8001a48 <main+0x30c>)
 8001802:	4892      	ldr	r0, [pc, #584]	@ (8001a4c <main+0x310>)
 8001804:	f00a feb2 	bl	800c56c <iprintf>
 8001808:	e002      	b.n	8001810 <main+0xd4>
	  }
	  else
	  {
		  printf(">> couldn't get Wifi module name\n\r");
 800180a:	4891      	ldr	r0, [pc, #580]	@ (8001a50 <main+0x314>)
 800180c:	f00a feae 	bl	800c56c <iprintf>
	  }
	  // get module ID
	  if(WIFI_GetModuleID(pcWifiModuleId) == WIFI_STATUS_OK)
 8001810:	4890      	ldr	r0, [pc, #576]	@ (8001a54 <main+0x318>)
 8001812:	f008 fff3 	bl	800a7fc <WIFI_GetModuleID>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <main+0xea>
	  {
		  printf("Wifi Module ID: %s\n\r",pcWifiModuleId);
 800181c:	498d      	ldr	r1, [pc, #564]	@ (8001a54 <main+0x318>)
 800181e:	488e      	ldr	r0, [pc, #568]	@ (8001a58 <main+0x31c>)
 8001820:	f00a fea4 	bl	800c56c <iprintf>
 8001824:	e002      	b.n	800182c <main+0xf0>
	  }
	  else
	  {
		  printf(">> couldn't get Wifi module ID\n\r");
 8001826:	488d      	ldr	r0, [pc, #564]	@ (8001a5c <main+0x320>)
 8001828:	f00a fea0 	bl	800c56c <iprintf>
	  }
	  // get module Firmware revision
	  if(WIFI_GetModuleFwRevision(pcWifiModuleFwRev) == WIFI_STATUS_OK)
 800182c:	488c      	ldr	r0, [pc, #560]	@ (8001a60 <main+0x324>)
 800182e:	f008 ffd1 	bl	800a7d4 <WIFI_GetModuleFwRevision>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <main+0x106>
	  {
		  printf("Wifi Module Firmware revision: %s\n\r",pcWifiModuleFwRev);
 8001838:	4989      	ldr	r1, [pc, #548]	@ (8001a60 <main+0x324>)
 800183a:	488a      	ldr	r0, [pc, #552]	@ (8001a64 <main+0x328>)
 800183c:	f00a fe96 	bl	800c56c <iprintf>
 8001840:	e002      	b.n	8001848 <main+0x10c>
	  }
	  else
	  {
		  printf(">> couldn't get Wifi module Firmware revision\n\r");
 8001842:	4889      	ldr	r0, [pc, #548]	@ (8001a68 <main+0x32c>)
 8001844:	f00a fe92 	bl	800c56c <iprintf>
	  }
	  // get module Mac@
	  if(WIFI_GetMAC_Address(pu8WifiModuleMacAddress) == WIFI_STATUS_OK)
 8001848:	4888      	ldr	r0, [pc, #544]	@ (8001a6c <main+0x330>)
 800184a:	f008 ff13 	bl	800a674 <WIFI_GetMAC_Address>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11a      	bne.n	800188a <main+0x14e>
	  {
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 8001854:	4b85      	ldr	r3, [pc, #532]	@ (8001a6c <main+0x330>)
 8001856:	781b      	ldrb	r3, [r3, #0]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001858:	4618      	mov	r0, r3
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 800185a:	4b84      	ldr	r3, [pc, #528]	@ (8001a6c <main+0x330>)
 800185c:	785b      	ldrb	r3, [r3, #1]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 800185e:	461c      	mov	r4, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 8001860:	4b82      	ldr	r3, [pc, #520]	@ (8001a6c <main+0x330>)
 8001862:	789b      	ldrb	r3, [r3, #2]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001864:	461d      	mov	r5, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 8001866:	4b81      	ldr	r3, [pc, #516]	@ (8001a6c <main+0x330>)
 8001868:	78db      	ldrb	r3, [r3, #3]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 800186a:	461a      	mov	r2, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 800186c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a6c <main+0x330>)
 800186e:	791b      	ldrb	r3, [r3, #4]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001870:	4619      	mov	r1, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 8001872:	4b7e      	ldr	r3, [pc, #504]	@ (8001a6c <main+0x330>)
 8001874:	795b      	ldrb	r3, [r3, #5]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	9101      	str	r1, [sp, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	4601      	mov	r1, r0
 8001882:	487b      	ldr	r0, [pc, #492]	@ (8001a70 <main+0x334>)
 8001884:	f00a fe72 	bl	800c56c <iprintf>
 8001888:	e002      	b.n	8001890 <main+0x154>
	  }
	  else
	  {
		  printf(">> couldn't get Wifi module MAC address\n\r");
 800188a:	487a      	ldr	r0, [pc, #488]	@ (8001a74 <main+0x338>)
 800188c:	f00a fe6e 	bl	800c56c <iprintf>
	  }
	  printf("*******************************************************************\n\r");
 8001890:	4879      	ldr	r0, [pc, #484]	@ (8001a78 <main+0x33c>)
 8001892:	f00a fe6b 	bl	800c56c <iprintf>

	  // Connect to router
	  if(WIFI_Connect(pcRouterSSID, pcRouterPWR, enRoutreEncryptiontype) == WIFI_STATUS_OK)
 8001896:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 800189a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800189e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fec4 	bl	800a630 <WIFI_Connect>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d131      	bne.n	8001912 <main+0x1d6>
	  {
		  printf("Successfully connected to router %s\n\r", pcRouterSSID);
 80018ae:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80018b2:	4619      	mov	r1, r3
 80018b4:	4871      	ldr	r0, [pc, #452]	@ (8001a7c <main+0x340>)
 80018b6:	f00a fe59 	bl	800c56c <iprintf>
		  // get ip address
		  if(WIFI_GetIP_Address(pu8LocalIpv4) == WIFI_STATUS_OK)
 80018ba:	4871      	ldr	r0, [pc, #452]	@ (8001a80 <main+0x344>)
 80018bc:	f008 fef0 	bl	800a6a0 <WIFI_GetIP_Address>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <main+0x1aa>
		  {
			  printf("Device IPv4: %u.%u.%u.%u\n\r",
					  pu8LocalIpv4[0],pu8LocalIpv4[1],
 80018c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a80 <main+0x344>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
			  printf("Device IPv4: %u.%u.%u.%u\n\r",
 80018ca:	4619      	mov	r1, r3
					  pu8LocalIpv4[0],pu8LocalIpv4[1],
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <main+0x344>)
 80018ce:	785b      	ldrb	r3, [r3, #1]
			  printf("Device IPv4: %u.%u.%u.%u\n\r",
 80018d0:	461a      	mov	r2, r3
					  pu8LocalIpv4[2],pu8LocalIpv4[3]);
 80018d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <main+0x344>)
 80018d4:	789b      	ldrb	r3, [r3, #2]
			  printf("Device IPv4: %u.%u.%u.%u\n\r",
 80018d6:	4618      	mov	r0, r3
					  pu8LocalIpv4[2],pu8LocalIpv4[3]);
 80018d8:	4b69      	ldr	r3, [pc, #420]	@ (8001a80 <main+0x344>)
 80018da:	78db      	ldrb	r3, [r3, #3]
			  printf("Device IPv4: %u.%u.%u.%u\n\r",
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4603      	mov	r3, r0
 80018e0:	4868      	ldr	r0, [pc, #416]	@ (8001a84 <main+0x348>)
 80018e2:	f00a fe43 	bl	800c56c <iprintf>
		  }

		  // Open TCP client
		  if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", pu8RemoteIpv4, 48569, 0) == WIFI_STATUS_OK)
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	f64b 53b9 	movw	r3, #48569	@ 0xbdb9
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a2c <main+0x2f0>)
 80018f2:	4a65      	ldr	r2, [pc, #404]	@ (8001a88 <main+0x34c>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f008 feee 	bl	800a6d8 <WIFI_OpenClientConnection>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <main+0x1ce>
		  {
			  // send msg to server
			  printf("successfully TCP client created\n\r");
 8001902:	4862      	ldr	r0, [pc, #392]	@ (8001a8c <main+0x350>)
 8001904:	f00a fe32 	bl	800c56c <iprintf>
 8001908:	e00a      	b.n	8001920 <main+0x1e4>
			  //	printf(">> failed to send welcome msg to TCP server\n\r");
			  //}
		  }
		  else
		  {
			  printf(">> couldn't create TCP client\n\r");
 800190a:	4861      	ldr	r0, [pc, #388]	@ (8001a90 <main+0x354>)
 800190c:	f00a fe2e 	bl	800c56c <iprintf>
 8001910:	e006      	b.n	8001920 <main+0x1e4>
		  }

	  }
	  else
	  {
		  printf(">> couldn't connect to router\n\r");
 8001912:	4860      	ldr	r0, [pc, #384]	@ (8001a94 <main+0x358>)
 8001914:	f00a fe2a 	bl	800c56c <iprintf>
 8001918:	e002      	b.n	8001920 <main+0x1e4>
	  }
  }
  else
  {
	  printf(">> Init WIFI: Failed\n\r");
 800191a:	485f      	ldr	r0, [pc, #380]	@ (8001a98 <main+0x35c>)
 800191c:	f00a fe26 	bl	800c56c <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  sprintf(message, "Temperature: %.2f, Humidity: %.2f, Light: %.2f", temperature, humidity, light);
 8001920:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001924:	f7fe fe28 	bl	8000578 <__aeabi_f2d>
 8001928:	4680      	mov	r8, r0
 800192a:	4689      	mov	r9, r1
 800192c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001930:	f7fe fe22 	bl	8000578 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800193c:	f7fe fe1c 	bl	8000578 <__aeabi_f2d>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	f107 0014 	add.w	r0, r7, #20
 8001948:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800194c:	e9cd 4500 	strd	r4, r5, [sp]
 8001950:	4642      	mov	r2, r8
 8001952:	464b      	mov	r3, r9
 8001954:	4951      	ldr	r1, [pc, #324]	@ (8001a9c <main+0x360>)
 8001956:	f00a fe79 	bl	800c64c <siprintf>

	  if(WIFI_SendData(0, message, strlen(message), NULL, 1000) == WIFI_STATUS_OK)
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc9e 	bl	80002a0 <strlen>
 8001964:	4603      	mov	r3, r0
 8001966:	b29a      	uxth	r2, r3
 8001968:	f107 0114 	add.w	r1, r7, #20
 800196c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2000      	movs	r0, #0
 8001976:	f008 fee9 	bl	800a74c <WIFI_SendData>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <main+0x252>
	  {
		  printf("Sent: %s\n\r", message);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4846      	ldr	r0, [pc, #280]	@ (8001aa0 <main+0x364>)
 8001988:	f00a fdf0 	bl	800c56c <iprintf>
 800198c:	e002      	b.n	8001994 <main+0x258>
	  }
	  else
	  {
		  printf(">> Failed to send data\n\r");
 800198e:	4845      	ldr	r0, [pc, #276]	@ (8001aa4 <main+0x368>)
 8001990:	f00a fdec 	bl	800c56c <iprintf>
	  }

	  sendingFunction();
 8001994:	f000 fe54 	bl	8002640 <sendingFunction>


	  HAL_Delay(2000);
 8001998:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800199c:	f002 fc02 	bl	80041a4 <HAL_Delay>

	  if(WIFI_ReceiveData(0, pu8RxData, sizeof(pu8RxData), &iReceivedDataLength, 5000) == WIFI_STATUS_OK)
 80019a0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <main+0x36c>)
 80019a8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019ac:	493f      	ldr	r1, [pc, #252]	@ (8001aac <main+0x370>)
 80019ae:	2000      	movs	r0, #0
 80019b0:	f008 feee 	bl	800a790 <WIFI_ReceiveData>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1b2      	bne.n	8001920 <main+0x1e4>
	  {
		  if(iReceivedDataLength>0)
 80019ba:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa8 <main+0x36c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	ddae      	ble.n	8001920 <main+0x1e4>
		  {
			  //with'/0' set the new message end, in case the new message length is lower than the old message
			  pu8RxData[iReceivedDataLength] = '\0';
 80019c2:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <main+0x36c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a39      	ldr	r2, [pc, #228]	@ (8001aac <main+0x370>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	54d1      	strb	r1, [r2, r3]

			  printf("received message from server = %s\n\r", pu8RxData);
 80019cc:	4937      	ldr	r1, [pc, #220]	@ (8001aac <main+0x370>)
 80019ce:	4838      	ldr	r0, [pc, #224]	@ (8001ab0 <main+0x374>)
 80019d0:	f00a fdcc 	bl	800c56c <iprintf>

			  messageReceived myMessage = parseMessage((const char *)pu8RxData); // Cast to const char *
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4935      	ldr	r1, [pc, #212]	@ (8001aac <main+0x370>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fd55 	bl	8002488 <parseMessage>

			  // Now you can use the values in myMessage:
			  printf("Parsed: Type = %u, Time = %u, Temp = %.2f, Hum = %.2f, Light = %.2f\n",myMessage.type, myMessage.time, myMessage.temp, myMessage.hum, myMessage.light);
 80019de:	793b      	ldrb	r3, [r7, #4]
 80019e0:	461e      	mov	r6, r3
 80019e2:	797b      	ldrb	r3, [r7, #5]
 80019e4:	469a      	mov	sl, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fdc5 	bl	8000578 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdbf 	bl	8000578 <__aeabi_f2d>
 80019fa:	4680      	mov	r8, r0
 80019fc:	4689      	mov	r9, r1
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fdb9 	bl	8000578 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a0e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001a12:	e9cd 4500 	strd	r4, r5, [sp]
 8001a16:	4652      	mov	r2, sl
 8001a18:	4631      	mov	r1, r6
 8001a1a:	4826      	ldr	r0, [pc, #152]	@ (8001ab4 <main+0x378>)
 8001a1c:	f00a fda6 	bl	800c56c <iprintf>
	  sprintf(message, "Temperature: %.2f, Humidity: %.2f, Light: %.2f", temperature, humidity, light);
 8001a20:	e77e      	b.n	8001920 <main+0x1e4>
 8001a22:	bf00      	nop
 8001a24:	0800f54c 	.word	0x0800f54c
 8001a28:	0800f55c 	.word	0x0800f55c
 8001a2c:	200007ec 	.word	0x200007ec
 8001a30:	41a00000 	.word	0x41a00000
 8001a34:	42480000 	.word	0x42480000
 8001a38:	42c80000 	.word	0x42c80000
 8001a3c:	0800f1c8 	.word	0x0800f1c8
 8001a40:	0800f1e0 	.word	0x0800f1e0
 8001a44:	0800f1f8 	.word	0x0800f1f8
 8001a48:	200006b4 	.word	0x200006b4
 8001a4c:	0800f240 	.word	0x0800f240
 8001a50:	0800f258 	.word	0x0800f258
 8001a54:	20000718 	.word	0x20000718
 8001a58:	0800f27c 	.word	0x0800f27c
 8001a5c:	0800f294 	.word	0x0800f294
 8001a60:	2000077c 	.word	0x2000077c
 8001a64:	0800f2b8 	.word	0x0800f2b8
 8001a68:	0800f2dc 	.word	0x0800f2dc
 8001a6c:	200007e0 	.word	0x200007e0
 8001a70:	0800f30c 	.word	0x0800f30c
 8001a74:	0800f348 	.word	0x0800f348
 8001a78:	0800f374 	.word	0x0800f374
 8001a7c:	0800f3bc 	.word	0x0800f3bc
 8001a80:	200007e8 	.word	0x200007e8
 8001a84:	0800f3e4 	.word	0x0800f3e4
 8001a88:	0800f400 	.word	0x0800f400
 8001a8c:	0800f40c 	.word	0x0800f40c
 8001a90:	0800f430 	.word	0x0800f430
 8001a94:	0800f450 	.word	0x0800f450
 8001a98:	0800f470 	.word	0x0800f470
 8001a9c:	0800f488 	.word	0x0800f488
 8001aa0:	0800f4b8 	.word	0x0800f4b8
 8001aa4:	0800f4c4 	.word	0x0800f4c4
 8001aa8:	200009e4 	.word	0x200009e4
 8001aac:	200007f0 	.word	0x200007f0
 8001ab0:	0800f4e0 	.word	0x0800f4e0
 8001ab4:	0800f504 	.word	0x0800f504

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b096      	sub	sp, #88	@ 0x58
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2244      	movs	r2, #68	@ 0x44
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f00a fec8 	bl	800c85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f004 fde2 	bl	80066a4 <HAL_PWREx_ControlVoltageScaling>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001ae6:	f000 fecb 	bl	8002880 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aea:	f004 fdab 	bl	8006644 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <SystemClock_Config+0xc0>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af4:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <SystemClock_Config+0xc0>)
 8001af6:	f023 0318 	bic.w	r3, r3, #24
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001afe:	2314      	movs	r3, #20
 8001b00:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b0e:	2360      	movs	r3, #96	@ 0x60
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b12:	2302      	movs	r3, #2
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b16:	2301      	movs	r3, #1
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001b1e:	233c      	movs	r3, #60	@ 0x3c
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fe5a 	bl	80067ec <HAL_RCC_OscConfig>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b3e:	f000 fe9f 	bl	8002880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b42:	230f      	movs	r3, #15
 8001b44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b46:	2303      	movs	r3, #3
 8001b48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b56:	463b      	mov	r3, r7
 8001b58:	2105      	movs	r1, #5
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 fa60 	bl	8007020 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001b66:	f000 fe8b 	bl	8002880 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001b6a:	f006 f847 	bl	8007bfc <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b6e:	bf00      	nop
 8001b70:	3758      	adds	r7, #88	@ 0x58
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000

08001b7c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0a6      	sub	sp, #152	@ 0x98
 8001b80:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2294      	movs	r2, #148	@ 0x94
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00a fe67 	bl	800c85c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 8001b8e:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 8001b92:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b94:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001ba2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001baa:	2301      	movs	r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bb2:	2318      	movs	r3, #24
 8001bb4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001bc2:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001bc6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fce6 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001bd6:	f000 fe53 	bl	8002880 <Error_Handler>
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3798      	adds	r7, #152	@ 0x98
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001bfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <MX_ADC1_Init+0xc0>)
 8001bfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0c:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c18:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c5a:	4811      	ldr	r0, [pc, #68]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c5c:	f002 fc66 	bl	800452c <HAL_ADC_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001c66:	f000 fe0b 	bl	8002880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <MX_ADC1_Init+0xc4>)
 8001c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c6e:	2306      	movs	r3, #6
 8001c70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c76:	237f      	movs	r3, #127	@ 0x7f
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <MX_ADC1_Init+0xbc>)
 8001c88:	f002 fd9c 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c92:	f000 fdf5 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000264 	.word	0x20000264
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	04300002 	.word	0x04300002

08001cac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cb2:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <MX_DFSDM1_Init+0x6c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001cec:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <MX_DFSDM1_Init+0x68>)
 8001d00:	f003 fa6c 	bl	80051dc <HAL_DFSDM_ChannelInit>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001d0a:	f000 fdb9 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200002cc 	.word	0x200002cc
 8001d18:	40016040 	.word	0x40016040

08001d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d22:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <MX_I2C1_Init+0x78>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d28:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <MX_I2C1_Init+0x7c>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d32:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d56:	480e      	ldr	r0, [pc, #56]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d58:	f003 fe78 	bl	8005a4c <HAL_I2C_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d62:	f000 fd8d 	bl	8002880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d66:	2100      	movs	r1, #0
 8001d68:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d6a:	f003 fefe 	bl	8005b6a <HAL_I2CEx_ConfigAnalogFilter>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d74:	f000 fd84 	bl	8002880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <MX_I2C1_Init+0x74>)
 8001d7c:	f003 ff40 	bl	8005c00 <HAL_I2CEx_ConfigDigitalFilter>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f000 fd7b 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000304 	.word	0x20000304
 8001d94:	40005400 	.word	0x40005400
 8001d98:	307075b1 	.word	0x307075b1

08001d9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001da2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <MX_I2C2_Init+0x78>)
 8001da4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001da8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e18 <MX_I2C2_Init+0x7c>)
 8001daa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dac:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db8:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dd6:	480e      	ldr	r0, [pc, #56]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dd8:	f003 fe38 	bl	8005a4c <HAL_I2C_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001de2:	f000 fd4d 	bl	8002880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001de6:	2100      	movs	r1, #0
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dea:	f003 febe 	bl	8005b6a <HAL_I2CEx_ConfigAnalogFilter>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001df4:	f000 fd44 	bl	8002880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_I2C2_Init+0x74>)
 8001dfc:	f003 ff00 	bl	8005c00 <HAL_I2CEx_ConfigDigitalFilter>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e06:	f000 fd3b 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000358 	.word	0x20000358
 8001e14:	40005800 	.word	0x40005800
 8001e18:	307075b1 	.word	0x307075b1

08001e1c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001e30:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e32:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <MX_OCTOSPI1_Init+0xa8>)
 8001e34:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001e3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e48:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001e62:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001e6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001e80:	480f      	ldr	r0, [pc, #60]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001e82:	f003 ff09 	bl	8005c98 <HAL_OSPI_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001e8c:	f000 fcf8 	bl	8002880 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001e98:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001e9c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4806      	ldr	r0, [pc, #24]	@ (8001ec0 <MX_OCTOSPI1_Init+0xa4>)
 8001ea8:	f003 ffb0 	bl	8005e0c <HAL_OSPIM_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001eb2:	f000 fce5 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200003ac 	.word	0x200003ac
 8001ec4:	a0001000 	.word	0xa0001000

08001ec8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <MX_RNG_Init+0x24>)
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <MX_RNG_Init+0x28>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_RNG_Init+0x24>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <MX_RNG_Init+0x24>)
 8001eda:	f006 f887 	bl	8007fec <HAL_RNG_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ee4:	f000 fccc 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	200003fc 	.word	0x200003fc
 8001ef0:	50060800 	.word	0x50060800

08001ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <MX_SPI1_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001f12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f42:	2207      	movs	r2, #7
 8001f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f4e:	2208      	movs	r2, #8
 8001f50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <MX_SPI1_Init+0x74>)
 8001f54:	f006 f8ac 	bl	80080b0 <HAL_SPI_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f000 fc8f 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000410 	.word	0x20000410
 8001f6c:	40013000 	.word	0x40013000

08001f70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f74:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f76:	4a23      	ldr	r2, [pc, #140]	@ (8002004 <MX_UART4_Init+0x94>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <MX_UART4_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fb8:	4811      	ldr	r0, [pc, #68]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fba:	f007 fb9e 	bl	80096fa <HAL_UART_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001fc4:	f000 fc5c 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fcc:	f008 fa3a 	bl	800a444 <HAL_UARTEx_SetTxFifoThreshold>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001fd6:	f000 fc53 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4808      	ldr	r0, [pc, #32]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fde:	f008 fa6f 	bl	800a4c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001fe8:	f000 fc4a 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_UART4_Init+0x90>)
 8001fee:	f008 f9f0 	bl	800a3d2 <HAL_UARTEx_DisableFifoMode>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ff8:	f000 fc42 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000474 	.word	0x20000474
 8002004:	40004c00 	.word	0x40004c00

08002008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 800200e:	4a23      	ldr	r2, [pc, #140]	@ (800209c <MX_USART1_UART_Init+0x94>)
 8002010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002012:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002026:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002044:	4b14      	ldr	r3, [pc, #80]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002046:	2200      	movs	r2, #0
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800204a:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 800204c:	2200      	movs	r2, #0
 800204e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002050:	4811      	ldr	r0, [pc, #68]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002052:	f007 fb52 	bl	80096fa <HAL_UART_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800205c:	f000 fc10 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002060:	2100      	movs	r1, #0
 8002062:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002064:	f008 f9ee 	bl	800a444 <HAL_UARTEx_SetTxFifoThreshold>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800206e:	f000 fc07 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002072:	2100      	movs	r1, #0
 8002074:	4808      	ldr	r0, [pc, #32]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002076:	f008 fa23 	bl	800a4c0 <HAL_UARTEx_SetRxFifoThreshold>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002080:	f000 fbfe 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_USART1_UART_Init+0x90>)
 8002086:	f008 f9a4 	bl	800a3d2 <HAL_UARTEx_DisableFifoMode>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002090:	f000 fbf6 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000504 	.word	0x20000504
 800209c:	40013800 	.word	0x40013800

080020a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a4:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020a6:	4a24      	ldr	r2, [pc, #144]	@ (8002138 <MX_USART2_UART_Init+0x98>)
 80020a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020aa:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020be:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020c6:	220c      	movs	r2, #12
 80020c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020cc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80020d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020d8:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ea:	4812      	ldr	r0, [pc, #72]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020ec:	f007 fb05 	bl	80096fa <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80020f6:	f000 fbc3 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020fa:	2100      	movs	r1, #0
 80020fc:	480d      	ldr	r0, [pc, #52]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 80020fe:	f008 f9a1 	bl	800a444 <HAL_UARTEx_SetTxFifoThreshold>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002108:	f000 fbba 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210c:	2100      	movs	r1, #0
 800210e:	4809      	ldr	r0, [pc, #36]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 8002110:	f008 f9d6 	bl	800a4c0 <HAL_UARTEx_SetRxFifoThreshold>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800211a:	f000 fbb1 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	@ (8002134 <MX_USART2_UART_Init+0x94>)
 8002120:	f008 f957 	bl	800a3d2 <HAL_UARTEx_DisableFifoMode>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800212a:	f000 fba9 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000594 	.word	0x20000594
 8002138:	40004400 	.word	0x40004400

0800213c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002140:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002142:	4a23      	ldr	r2, [pc, #140]	@ (80021d0 <MX_USART3_UART_Init+0x94>)
 8002144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002172:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002178:	4b14      	ldr	r3, [pc, #80]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800217e:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002184:	4811      	ldr	r0, [pc, #68]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002186:	f007 fab8 	bl	80096fa <HAL_UART_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002190:	f000 fb76 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002194:	2100      	movs	r1, #0
 8002196:	480d      	ldr	r0, [pc, #52]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 8002198:	f008 f954 	bl	800a444 <HAL_UARTEx_SetTxFifoThreshold>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021a2:	f000 fb6d 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4808      	ldr	r0, [pc, #32]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 80021aa:	f008 f989 	bl	800a4c0 <HAL_UARTEx_SetRxFifoThreshold>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021b4:	f000 fb64 	bl	8002880 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_USART3_UART_Init+0x90>)
 80021ba:	f008 f90a 	bl	800a3d2 <HAL_UARTEx_DisableFifoMode>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80021c4:	f000 fb5c 	bl	8002880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000624 	.word	0x20000624
 80021d0:	40004800 	.word	0x40004800

080021d4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	@ 0x30
 80021e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002474 <MX_GPIO_Init+0x290>)
 80021fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fe:	4a9d      	ldr	r2, [pc, #628]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002206:	4b9b      	ldr	r3, [pc, #620]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	4b98      	ldr	r3, [pc, #608]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	4a97      	ldr	r2, [pc, #604]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800221e:	4b95      	ldr	r3, [pc, #596]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222a:	4b92      	ldr	r3, [pc, #584]	@ (8002474 <MX_GPIO_Init+0x290>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	4a91      	ldr	r2, [pc, #580]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002236:	4b8f      	ldr	r3, [pc, #572]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b8c      	ldr	r3, [pc, #560]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	4a8b      	ldr	r2, [pc, #556]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224e:	4b89      	ldr	r3, [pc, #548]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b86      	ldr	r3, [pc, #536]	@ (8002474 <MX_GPIO_Init+0x290>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	4a85      	ldr	r2, [pc, #532]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002266:	4b83      	ldr	r3, [pc, #524]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002272:	4b80      	ldr	r3, [pc, #512]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	4a7f      	ldr	r2, [pc, #508]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002278:	f043 0308 	orr.w	r3, r3, #8
 800227c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800227e:	4b7d      	ldr	r3, [pc, #500]	@ (8002474 <MX_GPIO_Init+0x290>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST25DV04K_RF_DISABLE_GPIO_Port, ST25DV04K_RF_DISABLE_Pin, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	2104      	movs	r1, #4
 800228e:	487a      	ldr	r0, [pc, #488]	@ (8002478 <MX_GPIO_Init+0x294>)
 8002290:	f003 fbac 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002294:	2200      	movs	r2, #0
 8002296:	f248 111c 	movw	r1, #33052	@ 0x811c
 800229a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229e:	f003 fba5 	bl	80059ec <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 80022a2:	2200      	movs	r2, #0
 80022a4:	f24d 0134 	movw	r1, #53300	@ 0xd034
 80022a8:	4874      	ldr	r0, [pc, #464]	@ (800247c <MX_GPIO_Init+0x298>)
 80022aa:	f003 fb9f 	bl	80059ec <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f242 0183 	movw	r1, #8323	@ 0x2083
 80022b4:	4872      	ldr	r0, [pc, #456]	@ (8002480 <MX_GPIO_Init+0x29c>)
 80022b6:	f003 fb99 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80022c0:	4870      	ldr	r0, [pc, #448]	@ (8002484 <MX_GPIO_Init+0x2a0>)
 80022c2:	f003 fb93 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST25DV04K_RF_DISABLE_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin;
 80022c6:	2304      	movs	r3, #4
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST25DV04K_RF_DISABLE_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4866      	ldr	r0, [pc, #408]	@ (8002478 <MX_GPIO_Init+0x294>)
 80022de:	f003 f8e9 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin;
 80022e2:	2378      	movs	r3, #120	@ 0x78
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4860      	ldr	r0, [pc, #384]	@ (8002478 <MX_GPIO_Init+0x294>)
 80022f8:	f003 f8dc 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80022fc:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002302:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	485c      	ldr	r0, [pc, #368]	@ (8002484 <MX_GPIO_Init+0x2a0>)
 8002314:	f003 f8ce 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002318:	f248 131c 	movw	r3, #33052	@ 0x811c
 800231c:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002334:	f003 f8be 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002338:	2301      	movs	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	484b      	ldr	r0, [pc, #300]	@ (800247c <MX_GPIO_Init+0x298>)
 800234e:	f003 f8b1 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002352:	2302      	movs	r3, #2
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002362:	2302      	movs	r3, #2
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4843      	ldr	r0, [pc, #268]	@ (800247c <MX_GPIO_Init+0x298>)
 800236e:	f003 f8a1 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8002372:	f24d 0334 	movw	r3, #53300	@ 0xd034
 8002376:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	483c      	ldr	r0, [pc, #240]	@ (800247c <MX_GPIO_Init+0x298>)
 800238c:	f003 f892 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002390:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 8002394:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002396:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800239a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	4836      	ldr	r0, [pc, #216]	@ (8002480 <MX_GPIO_Init+0x29c>)
 80023a8:	f003 f884 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80023ac:	f242 0383 	movw	r3, #8323	@ 0x2083
 80023b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	482e      	ldr	r0, [pc, #184]	@ (8002480 <MX_GPIO_Init+0x29c>)
 80023c6:	f003 f875 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80023ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80023ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	4828      	ldr	r0, [pc, #160]	@ (8002484 <MX_GPIO_Init+0x2a0>)
 80023e4:	f003 f866 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80023e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002400:	f003 f858 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002404:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002416:	230a      	movs	r3, #10
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 031c 	add.w	r3, r7, #28
 800241e:	4619      	mov	r1, r3
 8002420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002424:	f003 f846 	bl	80054b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002428:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800242c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800243a:	2306      	movs	r3, #6
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	480f      	ldr	r0, [pc, #60]	@ (8002484 <MX_GPIO_Init+0x2a0>)
 8002446:	f003 f835 	bl	80054b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2017      	movs	r0, #23
 8002450:	f002 fe8d 	bl	800516e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002454:	2017      	movs	r0, #23
 8002456:	f002 fea6 	bl	80051a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2028      	movs	r0, #40	@ 0x28
 8002460:	f002 fe85 	bl	800516e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002464:	2028      	movs	r0, #40	@ 0x28
 8002466:	f002 fe9e 	bl	80051a6 <HAL_NVIC_EnableIRQ>

}
 800246a:	bf00      	nop
 800246c:	3730      	adds	r7, #48	@ 0x30
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	48001000 	.word	0x48001000
 800247c:	48000400 	.word	0x48000400
 8002480:	48000c00 	.word	0x48000c00
 8002484:	48000800 	.word	0x48000800

08002488 <parseMessage>:

/* USER CODE BEGIN 4 */

// Function to parse the string and initialize the struct
messageReceived parseMessage(const char *rxData) {
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    messageReceived message;
    char *token;
    char *str_copy; // Create a copy of the string, strtok modifies it

    // Initialize to safe default values in case parsing fails
    message.type = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	723b      	strb	r3, [r7, #8]
    message.time = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	727b      	strb	r3, [r7, #9]
    message.temp = DEFAULT_TEMP;
 800249a:	4b5a      	ldr	r3, [pc, #360]	@ (8002604 <parseMessage+0x17c>)
 800249c:	60fb      	str	r3, [r7, #12]
    message.hum = DEFAULT_HUM;
 800249e:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <parseMessage+0x180>)
 80024a0:	613b      	str	r3, [r7, #16]
    message.light = DEFAULT_LIGHT;
 80024a2:	4b5a      	ldr	r3, [pc, #360]	@ (800260c <parseMessage+0x184>)
 80024a4:	617b      	str	r3, [r7, #20]

    // Create a copy of the input string since strtok modifies the string
    str_copy = strdup(rxData);  // IMPORTANT:  Allocate memory for the copy
 80024a6:	6838      	ldr	r0, [r7, #0]
 80024a8:	f00a f9e0 	bl	800c86c <strdup>
 80024ac:	4603      	mov	r3, r0
 80024ae:	61fb      	str	r3, [r7, #28]

    if (str_copy == NULL) {
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <parseMessage+0x44>
        printf("Error: Memory allocation failed for string copy.\n");
 80024b6:	4856      	ldr	r0, [pc, #344]	@ (8002610 <parseMessage+0x188>)
 80024b8:	f00a f8c0 	bl	800c63c <puts>
        return message; // Return default initialized struct
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	461c      	mov	r4, r3
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024ca:	e097      	b.n	80025fc <parseMessage+0x174>
    }

    // Parse the type
    token = strtok(str_copy, ","); // Tokenize by comma
 80024cc:	4951      	ldr	r1, [pc, #324]	@ (8002614 <parseMessage+0x18c>)
 80024ce:	69f8      	ldr	r0, [r7, #28]
 80024d0:	f00a fa0c 	bl	800c8ec <strtok>
 80024d4:	61b8      	str	r0, [r7, #24]
    if (token != NULL) {
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <parseMessage+0x76>
        message.type = (uint8_t)atoi(token); // Convert string to integer
 80024dc:	69b8      	ldr	r0, [r7, #24]
 80024de:	f008 f9b8 	bl	800a852 <atoi>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	723b      	strb	r3, [r7, #8]
        if (message.type > 2) {
 80024e8:	7a3b      	ldrb	r3, [r7, #8]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d90b      	bls.n	8002506 <parseMessage+0x7e>
            printf("Error: Invalid type value: %d\n", message.type);
 80024ee:	7a3b      	ldrb	r3, [r7, #8]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4849      	ldr	r0, [pc, #292]	@ (8002618 <parseMessage+0x190>)
 80024f4:	f00a f83a 	bl	800c56c <iprintf>
            message.type = 0; // Reset to default
 80024f8:	2300      	movs	r3, #0
 80024fa:	723b      	strb	r3, [r7, #8]
 80024fc:	e003      	b.n	8002506 <parseMessage+0x7e>
        }
    } else {
        printf("Error: Missing type value\n");
 80024fe:	4847      	ldr	r0, [pc, #284]	@ (800261c <parseMessage+0x194>)
 8002500:	f00a f89c 	bl	800c63c <puts>
        goto cleanup; // Jump to cleanup to free memory
 8002504:	e070      	b.n	80025e8 <parseMessage+0x160>
    }

    // Handle different types
    if (message.type == 0) {
 8002506:	7a3b      	ldrb	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <parseMessage+0x8c>
        // Use default values for all other fields (already initialized)
        printf("Type 0: Using default values.\n");
 800250c:	4844      	ldr	r0, [pc, #272]	@ (8002620 <parseMessage+0x198>)
 800250e:	f00a f895 	bl	800c63c <puts>
 8002512:	e069      	b.n	80025e8 <parseMessage+0x160>
    } else if (message.type == 1) {
 8002514:	7a3b      	ldrb	r3, [r7, #8]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d11f      	bne.n	800255a <parseMessage+0xd2>
        // Parse the time
        token = strtok(NULL, ","); // Get the next token
 800251a:	493e      	ldr	r1, [pc, #248]	@ (8002614 <parseMessage+0x18c>)
 800251c:	2000      	movs	r0, #0
 800251e:	f00a f9e5 	bl	800c8ec <strtok>
 8002522:	61b8      	str	r0, [r7, #24]
        if (token != NULL) {
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <parseMessage+0xc4>
            message.time = (uint8_t)atoi(token);
 800252a:	69b8      	ldr	r0, [r7, #24]
 800252c:	f008 f991 	bl	800a852 <atoi>
 8002530:	4603      	mov	r3, r0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	727b      	strb	r3, [r7, #9]
            if (message.time > 3) {
 8002536:	7a7b      	ldrb	r3, [r7, #9]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d90a      	bls.n	8002552 <parseMessage+0xca>
                printf("Error: Invalid time value: %d\n", message.time);
 800253c:	7a7b      	ldrb	r3, [r7, #9]
 800253e:	4619      	mov	r1, r3
 8002540:	4838      	ldr	r0, [pc, #224]	@ (8002624 <parseMessage+0x19c>)
 8002542:	f00a f813 	bl	800c56c <iprintf>
                message.time = 0;  //Reset to Default
 8002546:	2300      	movs	r3, #0
 8002548:	727b      	strb	r3, [r7, #9]
 800254a:	e002      	b.n	8002552 <parseMessage+0xca>
            }
        } else {
            printf("Error: Missing time value for type 1\n");
 800254c:	4836      	ldr	r0, [pc, #216]	@ (8002628 <parseMessage+0x1a0>)
 800254e:	f00a f875 	bl	800c63c <puts>
        }

        // Use default values for temp, hum, light (already initialized)
        printf("Type 1: Using default values for temp, hum, light.\n");
 8002552:	4836      	ldr	r0, [pc, #216]	@ (800262c <parseMessage+0x1a4>)
 8002554:	f00a f872 	bl	800c63c <puts>
 8002558:	e046      	b.n	80025e8 <parseMessage+0x160>
    } else if (message.type == 2) {
 800255a:	7a3b      	ldrb	r3, [r7, #8]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d142      	bne.n	80025e6 <parseMessage+0x15e>
        // Parse temp, hum, and light
        token = strtok(NULL, ","); // Get temp
 8002560:	492c      	ldr	r1, [pc, #176]	@ (8002614 <parseMessage+0x18c>)
 8002562:	2000      	movs	r0, #0
 8002564:	f00a f9c2 	bl	800c8ec <strtok>
 8002568:	61b8      	str	r0, [r7, #24]
        if (token != NULL) {
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <parseMessage+0xfc>
            message.temp = (float)atof(token);
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	f008 f96b 	bl	800a84c <atof>
 8002576:	ee07 0a90 	vmov	s15, r0
 800257a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002582:	e002      	b.n	800258a <parseMessage+0x102>
        } else {
            printf("Error: Missing temp value for type 2\n");
 8002584:	482a      	ldr	r0, [pc, #168]	@ (8002630 <parseMessage+0x1a8>)
 8002586:	f00a f859 	bl	800c63c <puts>
        }

        token = strtok(NULL, ","); // Get hum
 800258a:	4922      	ldr	r1, [pc, #136]	@ (8002614 <parseMessage+0x18c>)
 800258c:	2000      	movs	r0, #0
 800258e:	f00a f9ad 	bl	800c8ec <strtok>
 8002592:	61b8      	str	r0, [r7, #24]
        if (token != NULL) {
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <parseMessage+0x126>
            message.hum = (float)atof(token);
 800259a:	69b8      	ldr	r0, [r7, #24]
 800259c:	f008 f956 	bl	800a84c <atof>
 80025a0:	ee07 0a90 	vmov	s15, r0
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	edc7 7a04 	vstr	s15, [r7, #16]
 80025ac:	e002      	b.n	80025b4 <parseMessage+0x12c>
        } else {
            printf("Error: Missing hum value for type 2\n");
 80025ae:	4821      	ldr	r0, [pc, #132]	@ (8002634 <parseMessage+0x1ac>)
 80025b0:	f00a f844 	bl	800c63c <puts>
        }

        token = strtok(NULL, ","); // Get light
 80025b4:	4917      	ldr	r1, [pc, #92]	@ (8002614 <parseMessage+0x18c>)
 80025b6:	2000      	movs	r0, #0
 80025b8:	f00a f998 	bl	800c8ec <strtok>
 80025bc:	61b8      	str	r0, [r7, #24]
        if (token != NULL) {
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <parseMessage+0x150>
            message.light = (float)atof(token);
 80025c4:	69b8      	ldr	r0, [r7, #24]
 80025c6:	f008 f941 	bl	800a84c <atof>
 80025ca:	ee07 0a90 	vmov	s15, r0
 80025ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025d2:	edc7 7a05 	vstr	s15, [r7, #20]
 80025d6:	e002      	b.n	80025de <parseMessage+0x156>
        } else {
            printf("Error: Missing light value for type 2\n");
 80025d8:	4817      	ldr	r0, [pc, #92]	@ (8002638 <parseMessage+0x1b0>)
 80025da:	f00a f82f 	bl	800c63c <puts>
        }

        printf("Type 2: Using parsed values.\n");
 80025de:	4817      	ldr	r0, [pc, #92]	@ (800263c <parseMessage+0x1b4>)
 80025e0:	f00a f82c 	bl	800c63c <puts>
 80025e4:	e000      	b.n	80025e8 <parseMessage+0x160>
    }

cleanup:
 80025e6:	bf00      	nop
    free(str_copy); // Free the allocated memory
 80025e8:	69f8      	ldr	r0, [r7, #28]
 80025ea:	f008 f93f 	bl	800a86c <free>
    return message;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	461c      	mov	r4, r3
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	3724      	adds	r7, #36	@ 0x24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	41a00000 	.word	0x41a00000
 8002608:	42200000 	.word	0x42200000
 800260c:	42c80000 	.word	0x42c80000
 8002610:	0800f574 	.word	0x0800f574
 8002614:	0800f5a8 	.word	0x0800f5a8
 8002618:	0800f5ac 	.word	0x0800f5ac
 800261c:	0800f5cc 	.word	0x0800f5cc
 8002620:	0800f5e8 	.word	0x0800f5e8
 8002624:	0800f608 	.word	0x0800f608
 8002628:	0800f628 	.word	0x0800f628
 800262c:	0800f650 	.word	0x0800f650
 8002630:	0800f684 	.word	0x0800f684
 8002634:	0800f6ac 	.word	0x0800f6ac
 8002638:	0800f6d0 	.word	0x0800f6d0
 800263c:	0800f6f8 	.word	0x0800f6f8

08002640 <sendingFunction>:


void sendingFunction() {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
    mesageSent myMessage;
    myMessage.type = 0; // Or 1 or 2
 8002646:	2300      	movs	r3, #0
 8002648:	703b      	strb	r3, [r7, #0]
    myMessage.temp = 22.5f;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <sendingFunction+0x44>)
 800264c:	f8c7 3001 	str.w	r3, [r7, #1]
    myMessage.hum = 55.0f;
 8002650:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <sendingFunction+0x48>)
 8002652:	f8c7 3005 	str.w	r3, [r7, #5]
    myMessage.light = 15.0f;
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <sendingFunction+0x4c>)
 8002658:	f8c7 3009 	str.w	r3, [r7, #9]

    WIFI_Status_t sendStatus = sendMessage(&myMessage);
 800265c:	463b      	mov	r3, r7
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f890 	bl	8002784 <sendMessage>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]

    if (sendStatus == WIFI_STATUS_OK) {
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <sendingFunction+0x36>
        printf("Message sent successfully!\n");
 800266e:	4808      	ldr	r0, [pc, #32]	@ (8002690 <sendingFunction+0x50>)
 8002670:	f009 ffe4 	bl	800c63c <puts>
    } else {
        printf("Error sending message!\n");
    }
}
 8002674:	e002      	b.n	800267c <sendingFunction+0x3c>
        printf("Error sending message!\n");
 8002676:	4807      	ldr	r0, [pc, #28]	@ (8002694 <sendingFunction+0x54>)
 8002678:	f009 ffe0 	bl	800c63c <puts>
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	41b40000 	.word	0x41b40000
 8002688:	425c0000 	.word	0x425c0000
 800268c:	41700000 	.word	0x41700000
 8002690:	0800f718 	.word	0x0800f718
 8002694:	0800f734 	.word	0x0800f734

08002698 <packMessage>:

uint8_t* packMessage(const mesageSent* message, uint32_t* packedSize) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
    // Calculate the size of the packed data
    uint32_t size = sizeof(message->type) +
 80026a2:	230d      	movs	r3, #13
 80026a4:	613b      	str	r3, [r7, #16]
                   sizeof(message->temp) +
                   sizeof(message->hum) +
                   sizeof(message->light);


    printf("Tamano bueno bueno",size);
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	482f      	ldr	r0, [pc, #188]	@ (8002768 <packMessage+0xd0>)
 80026aa:	f009 ff5f 	bl	800c56c <iprintf>
    printf("The value of my_uint32 is: %\n", size);
 80026ae:	6939      	ldr	r1, [r7, #16]
 80026b0:	482e      	ldr	r0, [pc, #184]	@ (800276c <packMessage+0xd4>)
 80026b2:	f009 ff5b 	bl	800c56c <iprintf>
    printf("The value of my_uint32 is: %x\n", size);
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	482d      	ldr	r0, [pc, #180]	@ (8002770 <packMessage+0xd8>)
 80026ba:	f009 ff57 	bl	800c56c <iprintf>
    // Allocate memory for the packed data
    uint8_t* packedData = (uint8_t*)malloc(size);
 80026be:	6938      	ldr	r0, [r7, #16]
 80026c0:	f008 f8cc 	bl	800a85c <malloc>
 80026c4:	4603      	mov	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    if (packedData == NULL) {
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <packMessage+0x46>
        printf("Error: Memory allocation failed for packed data.\n");
 80026ce:	4829      	ldr	r0, [pc, #164]	@ (8002774 <packMessage+0xdc>)
 80026d0:	f009 ffb4 	bl	800c63c <puts>
        *packedSize = 0;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
        return NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	e03f      	b.n	800275e <packMessage+0xc6>
    }

    // Pack the data into the byte array
    uint8_t* ptr = packedData;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->type, sizeof(message->type));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	701a      	strb	r2, [r3, #0]
    ptr += sizeof(message->type);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->temp, sizeof(message->temp));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->temp);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3304      	adds	r3, #4
 8002700:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->hum, sizeof(message->hum));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3305      	adds	r3, #5
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->hum);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3304      	adds	r3, #4
 8002712:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->light, sizeof(message->light));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3309      	adds	r3, #9
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->light);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3304      	adds	r3, #4
 8002724:	60bb      	str	r3, [r7, #8]

    *packedSize = size;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	601a      	str	r2, [r3, #0]
	printf("Packed Data (Hex):\n");
 800272c:	4812      	ldr	r0, [pc, #72]	@ (8002778 <packMessage+0xe0>)
 800272e:	f009 ff85 	bl	800c63c <puts>
	for (uint32_t i = 0; i < size; i++) {
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e00a      	b.n	800274e <packMessage+0xb6>
		printf("%02X ", packedData[i]); // %02X formats the byte as a two-digit hexadecimal number with leading zero if needed.
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4413      	add	r3, r2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	480e      	ldr	r0, [pc, #56]	@ (800277c <packMessage+0xe4>)
 8002744:	f009 ff12 	bl	800c56c <iprintf>
	for (uint32_t i = 0; i < size; i++) {
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	3301      	adds	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3f0      	bcc.n	8002738 <packMessage+0xa0>

	}
	printf("YA ESTAMOS AQUIII");
 8002756:	480a      	ldr	r0, [pc, #40]	@ (8002780 <packMessage+0xe8>)
 8002758:	f009 ff08 	bl	800c56c <iprintf>
    return packedData;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	0800f74c 	.word	0x0800f74c
 800276c:	0800f760 	.word	0x0800f760
 8002770:	0800f780 	.word	0x0800f780
 8002774:	0800f7a0 	.word	0x0800f7a0
 8002778:	0800f7d4 	.word	0x0800f7d4
 800277c:	0800f7e8 	.word	0x0800f7e8
 8002780:	0800f7f0 	.word	0x0800f7f0

08002784 <sendMessage>:

// Function to send the packed message
WIFI_Status_t sendMessage(const mesageSent* message) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af02      	add	r7, sp, #8
 800278a:	6078      	str	r0, [r7, #4]
    uint32_t packedSize;
    uint8_t* packedData = packMessage(message, &packedSize);
 800278c:	f107 0310 	add.w	r3, r7, #16
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ff80 	bl	8002698 <packMessage>
 8002798:	4603      	mov	r3, r0
 800279a:	60fb      	str	r3, [r7, #12]
    if (packedData == NULL) {
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <sendMessage+0x28>
        printf("Error: packedData es NULL\n");
 80027a2:	4812      	ldr	r0, [pc, #72]	@ (80027ec <sendMessage+0x68>)
 80027a4:	f009 ff4a 	bl	800c63c <puts>
        return 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e01a      	b.n	80027e2 <sendMessage+0x5e>
    }

    if (packedData == NULL || packedSize == 0) {
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <sendMessage+0x34>
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <sendMessage+0x38>
        // Handle memory allocation failure
        return WIFI_STATUS_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e012      	b.n	80027e2 <sendMessage+0x5e>
    }

    // Assuming WIFI_SendData takes a byte array and its length
    WIFI_Status_t status = WIFI_SendData(0, packedData, 20, NULL, 5000);
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	2214      	movs	r2, #20
 80027c8:	2000      	movs	r0, #0
 80027ca:	f007 ffbf 	bl	800a74c <WIFI_SendData>
 80027ce:	4603      	mov	r3, r0
 80027d0:	75fb      	strb	r3, [r7, #23]
    printf(sizeof(&packedData));
 80027d2:	2004      	movs	r0, #4
 80027d4:	f009 feca 	bl	800c56c <iprintf>

    // Free the allocated memory
    free(packedData);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f008 f846 	bl	800a86c <free>

    return status;
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	0800f804 	.word	0x0800f804

080027f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d102      	bne.n	8002806 <HAL_GPIO_EXTI_Callback+0x16>
  {
	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 8002800:	f7fe ff8c 	bl	800171c <SPI_WIFI_ISR>
		break;
 8002804:	e000      	b.n	8002808 <HAL_GPIO_EXTI_Callback+0x18>
	}

    default:
    {
      break;
 8002806:	bf00      	nop
    }
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <SPI3_IRQHandler>:

// SPI3 Interruption request handler for the Wifi module (send/receive AT cmd via SPI)
void SPI3_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <SPI3_IRQHandler+0x10>)
 8002816:	f006 fa47 	bl	8008ca8 <HAL_SPI_IRQHandler>
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200001f0 	.word	0x200001f0

08002824 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 800282c:	bf00      	nop
 800282e:	1d39      	adds	r1, r7, #4
 8002830:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002834:	2201      	movs	r2, #1
 8002836:	4805      	ldr	r0, [pc, #20]	@ (800284c <__io_putchar+0x28>)
 8002838:	f006 ffaf 	bl	800979a <HAL_UART_Transmit>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f5      	bne.n	800282e <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000504 	.word	0x20000504

08002850 <__io_getchar>:
GETCHAR_PROTOTYPE
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 800285a:	bf00      	nop
 800285c:	1df9      	adds	r1, r7, #7
 800285e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002862:	2201      	movs	r2, #1
 8002864:	4805      	ldr	r0, [pc, #20]	@ (800287c <__io_getchar+0x2c>)
 8002866:	f007 f82e 	bl	80098c6 <HAL_UART_Receive>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f5      	bne.n	800285c <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8002870:	79fb      	ldrb	r3, [r7, #7]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000504 	.word	0x20000504

08002880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002884:	b672      	cpsid	i
}
 8002886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <Error_Handler+0x8>

0800288c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_MspInit+0x44>)
 8002894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002896:	4a0e      	ldr	r2, [pc, #56]	@ (80028d0 <HAL_MspInit+0x44>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6613      	str	r3, [r2, #96]	@ 0x60
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_MspInit+0x44>)
 80028a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <HAL_MspInit+0x44>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	4a08      	ldr	r2, [pc, #32]	@ (80028d0 <HAL_MspInit+0x44>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_MspInit+0x44>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a15      	ldr	r2, [pc, #84]	@ (8002948 <HAL_ADC_MspInit+0x74>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d123      	bne.n	800293e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_ADC_MspInit+0x78>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	4a14      	ldr	r2, [pc, #80]	@ (800294c <HAL_ADC_MspInit+0x78>)
 80028fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_ADC_MspInit+0x78>)
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_ADC_MspInit+0x78>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	4a0e      	ldr	r2, [pc, #56]	@ (800294c <HAL_ADC_MspInit+0x78>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_ADC_MspInit+0x78>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002926:	233f      	movs	r3, #63	@ 0x3f
 8002928:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800292a:	230b      	movs	r3, #11
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	@ (8002950 <HAL_ADC_MspInit+0x7c>)
 800293a:	f002 fdbb 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	50040000 	.word	0x50040000
 800294c:	40021000 	.word	0x40021000
 8002950:	48000800 	.word	0x48000800

08002954 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b0ae      	sub	sp, #184	@ 0xb8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2294      	movs	r2, #148	@ 0x94
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f009 ff71 	bl	800c85c <memset>
  if(DFSDM1_Init == 0)
 800297a:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d142      	bne.n	8002a08 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002982:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fe02 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800299e:	f7ff ff6f 	bl	8002880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80029a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029c0:	f043 0310 	orr.w	r3, r3, #16
 80029c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c6:	4b13      	ldr	r3, [pc, #76]	@ (8002a14 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80029d2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80029d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80029ec:	2306      	movs	r3, #6
 80029ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4807      	ldr	r0, [pc, #28]	@ (8002a18 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80029fa:	f002 fd5b 	bl	80054b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80029fe:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a02      	ldr	r2, [pc, #8]	@ (8002a10 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002a06:	6013      	str	r3, [r2, #0]
  }

}
 8002a08:	bf00      	nop
 8002a0a:	37b8      	adds	r7, #184	@ 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200009e8 	.word	0x200009e8
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48001000 	.word	0x48001000

08002a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0b0      	sub	sp, #192	@ 0xc0
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	2294      	movs	r2, #148	@ 0x94
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f009 ff0d 	bl	800c85c <memset>
  if(hi2c->Instance==I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a42      	ldr	r2, [pc, #264]	@ (8002b50 <HAL_I2C_MspInit+0x134>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d13c      	bne.n	8002ac6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a4c:	2340      	movs	r3, #64	@ 0x40
 8002a4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fd9f 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a64:	f7ff ff0c 	bl	8002880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	4b3a      	ldr	r3, [pc, #232]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a39      	ldr	r2, [pc, #228]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a74:	4b37      	ldr	r3, [pc, #220]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002a80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a88:	2312      	movs	r3, #18
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482c      	ldr	r0, [pc, #176]	@ (8002b58 <HAL_I2C_MspInit+0x13c>)
 8002aa8:	f002 fd04 	bl	80054b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aac:	4b29      	ldr	r3, [pc, #164]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	4a28      	ldr	r2, [pc, #160]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab8:	4b26      	ldr	r3, [pc, #152]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ac4:	e040      	b.n	8002b48 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_I2C_MspInit+0x140>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d13b      	bne.n	8002b48 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 fd5d 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002ae8:	f7ff feca 	bl	8002880 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af0:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af8:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002b04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b0c:	2312      	movs	r3, #18
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b24:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <HAL_I2C_MspInit+0x13c>)
 8002b2c:	f002 fcc2 	bl	80054b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	4a07      	ldr	r2, [pc, #28]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002b36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_I2C_MspInit+0x138>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	37c0      	adds	r7, #192	@ 0xc0
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40005400 	.word	0x40005400
 8002b54:	40021000 	.word	0x40021000
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	40005800 	.word	0x40005800

08002b60 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b0b0      	sub	sp, #192	@ 0xc0
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b78:	f107 0318 	add.w	r3, r7, #24
 8002b7c:	2294      	movs	r2, #148	@ 0x94
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f009 fe6b 	bl	800c85c <memset>
  if(hospi->Instance==OCTOSPI1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a28      	ldr	r2, [pc, #160]	@ (8002c2c <HAL_OSPI_MspInit+0xcc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d149      	bne.n	8002c24 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	f107 0318 	add.w	r3, r7, #24
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fcfb 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002bac:	f7ff fe68 	bl	8002880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bcc:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be0:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be4:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bec:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_OSPI_MspInit+0xd0>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002bf8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002c12:	230a      	movs	r3, #10
 8002c14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4805      	ldr	r0, [pc, #20]	@ (8002c34 <HAL_OSPI_MspInit+0xd4>)
 8002c20:	f002 fc48 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002c24:	bf00      	nop
 8002c26:	37c0      	adds	r7, #192	@ 0xc0
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	a0001000 	.word	0xa0001000
 8002c30:	40021000 	.word	0x40021000
 8002c34:	48001000 	.word	0x48001000

08002c38 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_RNG_MspInit+0x38>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10b      	bne.n	8002c62 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RNG_MspInit+0x3c>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <HAL_RNG_MspInit+0x3c>)
 8002c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c56:	4b07      	ldr	r3, [pc, #28]	@ (8002c74 <HAL_RNG_MspInit+0x3c>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	50060800 	.word	0x50060800
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a17      	ldr	r2, [pc, #92]	@ (8002cf4 <HAL_SPI_MspInit+0x7c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d128      	bne.n	8002cec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9e:	4a16      	ldr	r2, [pc, #88]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_SPI_MspInit+0x80>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002cca:	23e0      	movs	r3, #224	@ 0xe0
 8002ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cda:	2305      	movs	r3, #5
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ce8:	f002 fbe4 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cec:	bf00      	nop
 8002cee:	3728      	adds	r7, #40	@ 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40013000 	.word	0x40013000
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <HAL_SPI_MspDeInit+0x30>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d10a      	bne.n	8002d24 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <HAL_SPI_MspDeInit+0x34>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <HAL_SPI_MspDeInit+0x34>)
 8002d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d18:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 8002d1a:	21e0      	movs	r1, #224	@ 0xe0
 8002d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d20:	f002 fd5a 	bl	80057d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013000 	.word	0x40013000
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0b4      	sub	sp, #208	@ 0xd0
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d50:	2294      	movs	r2, #148	@ 0x94
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f009 fd81 	bl	800c85c <memset>
  if(huart->Instance==UART4)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a83      	ldr	r2, [pc, #524]	@ (8002f6c <HAL_UART_MspInit+0x238>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d13c      	bne.n	8002dde <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d64:	2308      	movs	r3, #8
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fc13 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d7c:	f7ff fd80 	bl	8002880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d80:	4b7b      	ldr	r3, [pc, #492]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	4a7a      	ldr	r2, [pc, #488]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002d86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d8c:	4b78      	ldr	r3, [pc, #480]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b75      	ldr	r3, [pc, #468]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	4a74      	ldr	r2, [pc, #464]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002da4:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd8:	f002 fb6c 	bl	80054b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ddc:	e0c2      	b.n	8002f64 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a64      	ldr	r2, [pc, #400]	@ (8002f74 <HAL_UART_MspInit+0x240>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d13b      	bne.n	8002e60 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dec:	2300      	movs	r3, #0
 8002dee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fbd1 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002e00:	f7ff fd3e 	bl	8002880 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e04:	4b5a      	ldr	r3, [pc, #360]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e08:	4a59      	ldr	r2, [pc, #356]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e10:	4b57      	ldr	r3, [pc, #348]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	4b54      	ldr	r3, [pc, #336]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e20:	4a53      	ldr	r2, [pc, #332]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e28:	4b51      	ldr	r3, [pc, #324]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002e34:	23c0      	movs	r3, #192	@ 0xc0
 8002e36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e52:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002e56:	4619      	mov	r1, r3
 8002e58:	4847      	ldr	r0, [pc, #284]	@ (8002f78 <HAL_UART_MspInit+0x244>)
 8002e5a:	f002 fb2b 	bl	80054b4 <HAL_GPIO_Init>
}
 8002e5e:	e081      	b.n	8002f64 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a45      	ldr	r2, [pc, #276]	@ (8002f7c <HAL_UART_MspInit+0x248>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d13b      	bne.n	8002ee2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 fb90 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002e82:	f7ff fcfd 	bl	8002880 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e86:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	4a39      	ldr	r2, [pc, #228]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e92:	4b37      	ldr	r3, [pc, #220]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea2:	4a33      	ldr	r2, [pc, #204]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eaa:	4b31      	ldr	r3, [pc, #196]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002eb6:	2378      	movs	r3, #120	@ 0x78
 8002eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ece:	2307      	movs	r3, #7
 8002ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4829      	ldr	r0, [pc, #164]	@ (8002f80 <HAL_UART_MspInit+0x24c>)
 8002edc:	f002 faea 	bl	80054b4 <HAL_GPIO_Init>
}
 8002ee0:	e040      	b.n	8002f64 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a27      	ldr	r2, [pc, #156]	@ (8002f84 <HAL_UART_MspInit+0x250>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d13b      	bne.n	8002f64 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002eec:	2304      	movs	r3, #4
 8002eee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fb4f 	bl	800759c <HAL_RCCEx_PeriphCLKConfig>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002f04:	f7ff fcbc 	bl	8002880 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f08:	4b19      	ldr	r3, [pc, #100]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f14:	4b16      	ldr	r3, [pc, #88]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f20:	4b13      	ldr	r3, [pc, #76]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f26:	f043 0308 	orr.w	r3, r3, #8
 8002f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f2c:	4b10      	ldr	r3, [pc, #64]	@ (8002f70 <HAL_UART_MspInit+0x23c>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002f38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f52:	2307      	movs	r3, #7
 8002f54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f58:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4808      	ldr	r0, [pc, #32]	@ (8002f80 <HAL_UART_MspInit+0x24c>)
 8002f60:	f002 faa8 	bl	80054b4 <HAL_GPIO_Init>
}
 8002f64:	bf00      	nop
 8002f66:	37d0      	adds	r7, #208	@ 0xd0
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40004c00 	.word	0x40004c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40013800 	.word	0x40013800
 8002f78:	48000400 	.word	0x48000400
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	48000c00 	.word	0x48000c00
 8002f84:	40004800 	.word	0x40004800

08002f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <NMI_Handler+0x4>

08002f90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <HardFault_Handler+0x4>

08002f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <MemManage_Handler+0x4>

08002fa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <BusFault_Handler+0x4>

08002fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <UsageFault_Handler+0x4>

08002fb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fde:	f001 f8c1 	bl	8004164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002fea:	2020      	movs	r0, #32
 8002fec:	f002 fd16 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002ff0:	2040      	movs	r0, #64	@ 0x40
 8002ff2:	f002 fd13 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002ff6:	2080      	movs	r0, #128	@ 0x80
 8002ff8:	f002 fd10 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002ffc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003000:	f002 fd0c 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003004:	bf00      	nop
 8003006:	bd80      	pop	{r7, pc}

08003008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800300c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003010:	f002 fd04 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003014:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003018:	f002 fd00 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800301c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003020:	f002 fcfc 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003024:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003028:	f002 fcf8 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800302c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003030:	f002 fcf4 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003034:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003038:	f002 fcf0 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003044:	2002      	movs	r0, #2
 8003046:	f002 fce9 	bl	8005a1c <HAL_GPIO_EXTI_IRQHandler>
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}

0800304e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
	return 1;
 8003052:	2301      	movs	r3, #1
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_kill>:

int _kill(int pid, int sig)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003068:	f009 fd0c 	bl	800ca84 <__errno>
 800306c:	4603      	mov	r3, r0
 800306e:	2216      	movs	r2, #22
 8003070:	601a      	str	r2, [r3, #0]
	return -1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_exit>:

void _exit (int status)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003086:	f04f 31ff 	mov.w	r1, #4294967295
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffe7 	bl	800305e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <_exit+0x12>

08003094 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e00a      	b.n	80030bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030a6:	f7ff fbd3 	bl	8002850 <__io_getchar>
 80030aa:	4601      	mov	r1, r0
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	60ba      	str	r2, [r7, #8]
 80030b2:	b2ca      	uxtb	r2, r1
 80030b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	3301      	adds	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dbf0      	blt.n	80030a6 <_read+0x12>
	}

return len;
 80030c4:	687b      	ldr	r3, [r7, #4]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e009      	b.n	80030f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	60ba      	str	r2, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fb9b 	bl	8002824 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3301      	adds	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	dbf1      	blt.n	80030e0 <_write+0x12>
	}
	return len;
 80030fc:	687b      	ldr	r3, [r7, #4]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_close>:

int _close(int file)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
	return -1;
 800310e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800312e:	605a      	str	r2, [r3, #4]
	return 0;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <_isatty>:

int _isatty(int file)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
	return 1;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
	return 0;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003178:	4a14      	ldr	r2, [pc, #80]	@ (80031cc <_sbrk+0x5c>)
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <_sbrk+0x60>)
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <_sbrk+0x64>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800318c:	4b11      	ldr	r3, [pc, #68]	@ (80031d4 <_sbrk+0x64>)
 800318e:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <_sbrk+0x68>)
 8003190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <_sbrk+0x64>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	429a      	cmp	r2, r3
 800319e:	d207      	bcs.n	80031b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a0:	f009 fc70 	bl	800ca84 <__errno>
 80031a4:	4603      	mov	r3, r0
 80031a6:	220c      	movs	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e009      	b.n	80031c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <_sbrk+0x64>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <_sbrk+0x64>)
 80031c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c2:	68fb      	ldr	r3, [r7, #12]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200a0000 	.word	0x200a0000
 80031d0:	00000400 	.word	0x00000400
 80031d4:	200009ec 	.word	0x200009ec
 80031d8:	20001210 	.word	0x20001210

080031dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <SystemInit+0x20>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <SystemInit+0x20>)
 80031e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003238 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003204:	f7ff ffea 	bl	80031dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003208:	480c      	ldr	r0, [pc, #48]	@ (800323c <LoopForever+0x6>)
  ldr r1, =_edata
 800320a:	490d      	ldr	r1, [pc, #52]	@ (8003240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800320c:	4a0d      	ldr	r2, [pc, #52]	@ (8003244 <LoopForever+0xe>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003210:	e002      	b.n	8003218 <LoopCopyDataInit>

08003212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003216:	3304      	adds	r3, #4

08003218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800321c:	d3f9      	bcc.n	8003212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321e:	4a0a      	ldr	r2, [pc, #40]	@ (8003248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003220:	4c0a      	ldr	r4, [pc, #40]	@ (800324c <LoopForever+0x16>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003224:	e001      	b.n	800322a <LoopFillZerobss>

08003226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003228:	3204      	adds	r2, #4

0800322a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800322c:	d3fb      	bcc.n	8003226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800322e:	f009 fc2f 	bl	800ca90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003232:	f7fe fa83 	bl	800173c <main>

08003236 <LoopForever>:

LoopForever:
    b LoopForever
 8003236:	e7fe      	b.n	8003236 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003238:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800323c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003240:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003244:	0800ffcc 	.word	0x0800ffcc
  ldr r2, =_sbss
 8003248:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800324c:	20001210 	.word	0x20001210

08003250 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003250:	e7fe      	b.n	8003250 <ADC1_IRQHandler>

08003252 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003260:	d906      	bls.n	8003270 <Hex2Num+0x1e>
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	2b39      	cmp	r3, #57	@ 0x39
 8003266:	d803      	bhi.n	8003270 <Hex2Num+0x1e>
        return a - '0';
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	3b30      	subs	r3, #48	@ 0x30
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e014      	b.n	800329a <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b60      	cmp	r3, #96	@ 0x60
 8003274:	d906      	bls.n	8003284 <Hex2Num+0x32>
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b66      	cmp	r3, #102	@ 0x66
 800327a:	d803      	bhi.n	8003284 <Hex2Num+0x32>
        return (a - 'a') + 10;
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	3b57      	subs	r3, #87	@ 0x57
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e00a      	b.n	800329a <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d906      	bls.n	8003298 <Hex2Num+0x46>
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b46      	cmp	r3, #70	@ 0x46
 800328e:	d803      	bhi.n	8003298 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	3b37      	subs	r3, #55	@ 0x37
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e000      	b.n	800329a <Hex2Num+0x48>
    }

    return 0;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80032b8:	e012      	b.n	80032e0 <ParseHexNumber+0x3a>
        sum <<= 4;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffc4 	bl	8003252 <Hex2Num>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
        ptr++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3301      	adds	r3, #1
 80032d8:	607b      	str	r3, [r7, #4]
        i++;
 80032da:	7afb      	ldrb	r3, [r7, #11]
 80032dc:	3301      	adds	r3, #1
 80032de:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80032e6:	d903      	bls.n	80032f0 <ParseHexNumber+0x4a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b39      	cmp	r3, #57	@ 0x39
 80032ee:	d9e4      	bls.n	80032ba <ParseHexNumber+0x14>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b60      	cmp	r3, #96	@ 0x60
 80032f6:	d903      	bls.n	8003300 <ParseHexNumber+0x5a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b66      	cmp	r3, #102	@ 0x66
 80032fe:	d9dc      	bls.n	80032ba <ParseHexNumber+0x14>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b40      	cmp	r3, #64	@ 0x40
 8003306:	d903      	bls.n	8003310 <ParseHexNumber+0x6a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b46      	cmp	r3, #70	@ 0x46
 800330e:	d9d4      	bls.n	80032ba <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <ParseHexNumber+0x76>
        *cnt = i;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	7afa      	ldrb	r2, [r7, #11]
 800331a:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 800331c:	68fb      	ldr	r3, [r7, #12]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	2300      	movs	r3, #0
 8003336:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b2d      	cmp	r3, #45	@ 0x2d
 8003342:	d119      	bne.n	8003378 <ParseNumber+0x52>
        minus = 1;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
        i++;
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	3301      	adds	r3, #1
 8003352:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003354:	e010      	b.n	8003378 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	3b30      	subs	r3, #48	@ 0x30
 8003368:	4413      	add	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
        i++;
 8003372:	7bbb      	ldrb	r3, [r7, #14]
 8003374:	3301      	adds	r3, #1
 8003376:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b2f      	cmp	r3, #47	@ 0x2f
 800337e:	d903      	bls.n	8003388 <ParseNumber+0x62>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b39      	cmp	r3, #57	@ 0x39
 8003386:	d9e6      	bls.n	8003356 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <ParseNumber+0x6e>
        *cnt = i;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7bba      	ldrb	r2, [r7, #14]
 8003392:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <ParseNumber+0x7a>
        return 0 - sum;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	425b      	negs	r3, r3
 800339e:	e000      	b.n	80033a2 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 80033a0:	68bb      	ldr	r3, [r7, #8]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b084      	sub	sp, #16
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80033bc:	e019      	b.n	80033f2 <ParseMAC+0x44>
    hexcnt = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80033c8:	d00e      	beq.n	80033e8 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80033ca:	f107 030e 	add.w	r3, r7, #14
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff68 	bl	80032a6 <ParseHexNumber>
 80033d6:	4601      	mov	r1, r0
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	73fa      	strb	r2, [r7, #15]
 80033de:	461a      	mov	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4413      	add	r3, r2
 80033e4:	b2ca      	uxtb	r2, r1
 80033e6:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80033e8:	7bbb      	ldrb	r3, [r7, #14]
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e1      	bne.n	80033be <ParseMAC+0x10>
  }
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800340e:	2300      	movs	r3, #0
 8003410:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8003412:	e019      	b.n	8003448 <ParseIP+0x44>
    hexcnt = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b2e      	cmp	r3, #46	@ 0x2e
 800341e:	d00e      	beq.n	800343e <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8003420:	f107 030e 	add.w	r3, r7, #14
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff7d 	bl	8003326 <ParseNumber>
 800342c:	4601      	mov	r1, r0
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	73fa      	strb	r2, [r7, #15]
 8003434:	461a      	mov	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e1      	bne.n	8003414 <ParseIP+0x10>
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	3302      	adds	r3, #2
 800346e:	4934      	ldr	r1, [pc, #208]	@ (8003540 <AT_ParseInfo+0xe4>)
 8003470:	4618      	mov	r0, r3
 8003472:	f009 fa3b 	bl	800c8ec <strtok>
 8003476:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8003478:	e05a      	b.n	8003530 <AT_ParseInfo+0xd4>
    switch (num++) {
 800347a:	7afb      	ldrb	r3, [r7, #11]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	72fa      	strb	r2, [r7, #11]
 8003480:	2b06      	cmp	r3, #6
 8003482:	d84f      	bhi.n	8003524 <AT_ParseInfo+0xc8>
 8003484:	a201      	add	r2, pc, #4	@ (adr r2, 800348c <AT_ParseInfo+0x30>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	080034a9 	.word	0x080034a9
 8003490:	080034b7 	.word	0x080034b7
 8003494:	080034c7 	.word	0x080034c7
 8003498:	080034d7 	.word	0x080034d7
 800349c:	080034e7 	.word	0x080034e7
 80034a0:	080034f7 	.word	0x080034f7
 80034a4:	0800350b 	.word	0x0800350b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f009 fa09 	bl	800c8c6 <strncpy>
      break;
 80034b4:	e037      	b.n	8003526 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3320      	adds	r3, #32
 80034ba:	2218      	movs	r2, #24
 80034bc:	68f9      	ldr	r1, [r7, #12]
 80034be:	4618      	mov	r0, r3
 80034c0:	f009 fa01 	bl	800c8c6 <strncpy>
      break;
 80034c4:	e02f      	b.n	8003526 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3338      	adds	r3, #56	@ 0x38
 80034ca:	2210      	movs	r2, #16
 80034cc:	68f9      	ldr	r1, [r7, #12]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f009 f9f9 	bl	800c8c6 <strncpy>
      break;
 80034d4:	e027      	b.n	8003526 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3348      	adds	r3, #72	@ 0x48
 80034da:	2210      	movs	r2, #16
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	4618      	mov	r0, r3
 80034e0:	f009 f9f1 	bl	800c8c6 <strncpy>
      break;
 80034e4:	e01f      	b.n	8003526 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3358      	adds	r3, #88	@ 0x58
 80034ea:	2210      	movs	r2, #16
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f009 f9e9 	bl	800c8c6 <strncpy>
      break;
 80034f4:	e017      	b.n	8003526 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80034f6:	2100      	movs	r1, #0
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff ff14 	bl	8003326 <ParseNumber>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 8003508:	e00d      	b.n	8003526 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800350a:	490e      	ldr	r1, [pc, #56]	@ (8003544 <AT_ParseInfo+0xe8>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f009 f9ed 	bl	800c8ec <strtok>
 8003512:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3368      	adds	r3, #104	@ 0x68
 8003518:	2220      	movs	r2, #32
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f009 f9d2 	bl	800c8c6 <strncpy>
      break;
 8003522:	e000      	b.n	8003526 <AT_ParseInfo+0xca>

    default: break;
 8003524:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8003526:	4906      	ldr	r1, [pc, #24]	@ (8003540 <AT_ParseInfo+0xe4>)
 8003528:	2000      	movs	r0, #0
 800352a:	f009 f9df 	bl	800c8ec <strtok>
 800352e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1a1      	bne.n	800347a <AT_ParseInfo+0x1e>
  }
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	0800f850 	.word	0x0800f850
 8003544:	0800f854 	.word	0x0800f854

08003548 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3302      	adds	r3, #2
 800355a:	4952      	ldr	r1, [pc, #328]	@ (80036a4 <AT_ParseConnSettings+0x15c>)
 800355c:	4618      	mov	r0, r3
 800355e:	f009 f9c5 	bl	800c8ec <strtok>
 8003562:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8003564:	e095      	b.n	8003692 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	73fa      	strb	r2, [r7, #15]
 800356c:	2b0b      	cmp	r3, #11
 800356e:	d87f      	bhi.n	8003670 <AT_ParseConnSettings+0x128>
 8003570:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <AT_ParseConnSettings+0x30>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035b7 	.word	0x080035b7
 8003580:	080035c7 	.word	0x080035c7
 8003584:	080035db 	.word	0x080035db
 8003588:	080035ef 	.word	0x080035ef
 800358c:	08003603 	.word	0x08003603
 8003590:	08003611 	.word	0x08003611
 8003594:	0800361f 	.word	0x0800361f
 8003598:	0800362d 	.word	0x0800362d
 800359c:	0800363b 	.word	0x0800363b
 80035a0:	08003649 	.word	0x08003649
 80035a4:	0800365d 	.word	0x0800365d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2221      	movs	r2, #33	@ 0x21
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f009 f989 	bl	800c8c6 <strncpy>
      break;
 80035b4:	e05d      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	3321      	adds	r3, #33	@ 0x21
 80035ba:	2221      	movs	r2, #33	@ 0x21
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	4618      	mov	r0, r3
 80035c0:	f009 f981 	bl	800c8c6 <strncpy>
      break;
 80035c4:	e055      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80035c6:	2100      	movs	r1, #0
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f7ff feac 	bl	8003326 <ParseNumber>
 80035ce:	4603      	mov	r3, r0
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 80035d8:	e04b      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80035da:	2100      	movs	r1, #0
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f7ff fea2 	bl	8003326 <ParseNumber>
 80035e2:	4603      	mov	r3, r0
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 80035ec:	e041      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80035ee:	2100      	movs	r1, #0
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f7ff fe98 	bl	8003326 <ParseNumber>
 80035f6:	4603      	mov	r3, r0
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8003600:	e037      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	3348      	adds	r3, #72	@ 0x48
 8003606:	4619      	mov	r1, r3
 8003608:	68b8      	ldr	r0, [r7, #8]
 800360a:	f7ff fefb 	bl	8003404 <ParseIP>
      break;
 800360e:	e030      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	334c      	adds	r3, #76	@ 0x4c
 8003614:	4619      	mov	r1, r3
 8003616:	68b8      	ldr	r0, [r7, #8]
 8003618:	f7ff fef4 	bl	8003404 <ParseIP>
      break;
 800361c:	e029      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	3350      	adds	r3, #80	@ 0x50
 8003622:	4619      	mov	r1, r3
 8003624:	68b8      	ldr	r0, [r7, #8]
 8003626:	f7ff feed 	bl	8003404 <ParseIP>
      break;
 800362a:	e022      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3354      	adds	r3, #84	@ 0x54
 8003630:	4619      	mov	r1, r3
 8003632:	68b8      	ldr	r0, [r7, #8]
 8003634:	f7ff fee6 	bl	8003404 <ParseIP>
      break;
 8003638:	e01b      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	3358      	adds	r3, #88	@ 0x58
 800363e:	4619      	mov	r1, r3
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f7ff fedf 	bl	8003404 <ParseIP>
      break;
 8003646:	e014      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8003648:	2100      	movs	r1, #0
 800364a:	68b8      	ldr	r0, [r7, #8]
 800364c:	f7ff fe6b 	bl	8003326 <ParseNumber>
 8003650:	4603      	mov	r3, r0
 8003652:	b2da      	uxtb	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 800365a:	e00a      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 800365c:	2100      	movs	r1, #0
 800365e:	68b8      	ldr	r0, [r7, #8]
 8003660:	f7ff fe61 	bl	8003326 <ParseNumber>
 8003664:	4603      	mov	r3, r0
 8003666:	b2da      	uxtb	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 800366e:	e000      	b.n	8003672 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8003670:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8003672:	490c      	ldr	r1, [pc, #48]	@ (80036a4 <AT_ParseConnSettings+0x15c>)
 8003674:	2000      	movs	r0, #0
 8003676:	f009 f939 	bl	800c8ec <strtok>
 800367a:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <AT_ParseConnSettings+0x14a>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3b01      	subs	r3, #1
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b2c      	cmp	r3, #44	@ 0x2c
 800368a:	d102      	bne.n	8003692 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af66 	bne.w	8003566 <AT_ParseConnSettings+0x1e>
    }
  }
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	0800f850 	.word	0x0800f850

080036a8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3302      	adds	r3, #2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b31      	cmp	r3, #49	@ 0x31
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	701a      	strb	r2, [r3, #0]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	f7fc fdd6 	bl	80002a0 <strlen>
 80036f4:	4603      	mov	r3, r0
 80036f6:	b299      	uxth	r1, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 80036fe:	461a      	mov	r2, r3
 8003700:	68b8      	ldr	r0, [r7, #8]
 8003702:	47a0      	blx	r4
 8003704:	4603      	mov	r3, r0
 8003706:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	dd3e      	ble.n	800378c <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 800371a:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	4603      	mov	r3, r0
 8003724:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8003726:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd27      	ble.n	800377e <AT_ExecuteCommand+0xaa>
 800372e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003732:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8003736:	dc22      	bgt.n	800377e <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8003738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800373c:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8003740:	d105      	bne.n	800374e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8003742:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29b      	uxth	r3, r3
 800374c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800374e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 800375a:	490f      	ldr	r1, [pc, #60]	@ (8003798 <AT_ExecuteCommand+0xc4>)
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f009 f921 	bl	800c9a4 <strstr>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e010      	b.n	800378e <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800376c:	490b      	ldr	r1, [pc, #44]	@ (800379c <AT_ExecuteCommand+0xc8>)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f009 f918 	bl	800c9a4 <strstr>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800377a:	2305      	movs	r3, #5
 800377c:	e007      	b.n	800378e <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 800377e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003782:	f113 0f04 	cmn.w	r3, #4
 8003786:	d101      	bne.n	800378c <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8003788:	2306      	movs	r3, #6
 800378a:	e000      	b.n	800378e <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800378c:	2304      	movs	r3, #4
}
 800378e:	4618      	mov	r0, r3
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	0800f864 	.word	0x0800f864
 800379c:	0800f870 	.word	0x0800f870

080037a0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f7fc fd70 	bl	80002a0 <strlen>
 80037c0:	4603      	mov	r3, r0
 80037c2:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80037c4:	8a7b      	ldrh	r3, [r7, #18]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <AT_RequestSendData+0x32>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e053      	b.n	800387a <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80037de:	8a79      	ldrh	r1, [r7, #18]
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	4798      	blx	r3
 80037e4:	4603      	mov	r3, r0
 80037e6:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80037e8:	8a3a      	ldrh	r2, [r7, #16]
 80037ea:	8a7b      	ldrh	r3, [r7, #18]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d143      	bne.n	8003878 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80037fc:	8879      	ldrh	r1, [r7, #2]
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	4798      	blx	r3
 8003802:	4603      	mov	r3, r0
 8003804:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8003806:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	429a      	cmp	r2, r3
 800380e:	d131      	bne.n	8003874 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 800381c:	2100      	movs	r1, #0
 800381e:	6a38      	ldr	r0, [r7, #32]
 8003820:	4798      	blx	r3
 8003822:	4603      	mov	r3, r0
 8003824:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8003826:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	dd19      	ble.n	8003862 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800382e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800383a:	4912      	ldr	r1, [pc, #72]	@ (8003884 <AT_RequestSendData+0xe4>)
 800383c:	6a38      	ldr	r0, [r7, #32]
 800383e:	f009 f8b1 	bl	800c9a4 <strstr>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e016      	b.n	800387a <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800384c:	490e      	ldr	r1, [pc, #56]	@ (8003888 <AT_RequestSendData+0xe8>)
 800384e:	6a38      	ldr	r0, [r7, #32]
 8003850:	f009 f8a8 	bl	800c9a4 <strstr>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800385a:	2305      	movs	r3, #5
 800385c:	e00d      	b.n	800387a <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 800385e:	2302      	movs	r3, #2
 8003860:	e00b      	b.n	800387a <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003862:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003866:	f113 0f04 	cmn.w	r3, #4
 800386a:	d101      	bne.n	8003870 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 800386c:	2306      	movs	r3, #6
 800386e:	e004      	b.n	800387a <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8003870:	2302      	movs	r3, #2
 8003872:	e002      	b.n	800387a <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8003874:	2302      	movs	r3, #2
 8003876:	e000      	b.n	800387a <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003878:	2304      	movs	r3, #4
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	0800f864 	.word	0x0800f864
 8003888:	0800f870 	.word	0x0800f870

0800388c <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80038a0:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 80038a8:	68b8      	ldr	r0, [r7, #8]
 80038aa:	f7fc fcf9 	bl	80002a0 <strlen>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 80038b8:	461a      	mov	r2, r3
 80038ba:	68b8      	ldr	r0, [r7, #8]
 80038bc:	47a0      	blx	r4
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dd6f      	ble.n	80039a4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 80038d0:	2100      	movs	r1, #0
 80038d2:	6938      	ldr	r0, [r7, #16]
 80038d4:	4798      	blx	r3
 80038d6:	4603      	mov	r3, r0
 80038d8:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f113 0f04 	cmn.w	r3, #4
 80038e0:	d101      	bne.n	80038e6 <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 80038e2:	2306      	movs	r3, #6
 80038e4:	e05f      	b.n	80039a6 <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b0d      	cmp	r3, #13
 80038ec:	d104      	bne.n	80038f8 <AT_RequestReceiveData+0x6c>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3301      	adds	r3, #1
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b0a      	cmp	r3, #10
 80038f6:	d001      	beq.n	80038fc <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80038f8:	2304      	movs	r3, #4
 80038fa:	e054      	b.n	80039a6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3b02      	subs	r3, #2
 8003900:	617b      	str	r3, [r7, #20]
    p+=2;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3302      	adds	r3, #2
 8003906:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b07      	cmp	r3, #7
 800390c:	d94a      	bls.n	80039a4 <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 800390e:	e002      	b.n	8003916 <AT_RequestReceiveData+0x8a>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3b01      	subs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <AT_RequestReceiveData+0x9e>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3b01      	subs	r3, #1
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b15      	cmp	r3, #21
 8003928:	d0f2      	beq.n	8003910 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	3b08      	subs	r3, #8
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	491c      	ldr	r1, [pc, #112]	@ (80039b0 <AT_RequestReceiveData+0x124>)
 800393e:	4618      	mov	r0, r3
 8003940:	f009 f830 	bl	800c9a4 <strstr>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b08      	subs	r3, #8
 8003950:	b29a      	uxth	r2, r3
 8003952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003954:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8003956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	429a      	cmp	r2, r3
 800395e:	d202      	bcs.n	8003966 <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	6939      	ldr	r1, [r7, #16]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f009 f8b5 	bl	800cade <memcpy>
       return ES_WIFI_STATUS_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e016      	b.n	80039a6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3b04      	subs	r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	2204      	movs	r2, #4
 8003982:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <AT_RequestReceiveData+0x128>)
 8003984:	4618      	mov	r0, r3
 8003986:	f008 ff59 	bl	800c83c <memcmp>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003996:	2305      	movs	r3, #5
 8003998:	e005      	b.n	80039a6 <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	2200      	movs	r2, #0
 800399e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80039a0:	2305      	movs	r3, #5
 80039a2:	e000      	b.n	80039a6 <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80039a4:	2304      	movs	r3, #4
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd90      	pop	{r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	0800f864 	.word	0x0800f864
 80039b4:	0800f878 	.word	0x0800f878

080039b8 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80039c0:	2302      	movs	r3, #2
 80039c2:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039ca:	f8c3 26a0 	str.w	r2, [r3, #1696]	@ 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80039d4:	2000      	movs	r0, #0
 80039d6:	4798      	blx	r3
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d113      	bne.n	8003a06 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80039e4:	461a      	mov	r2, r3
 80039e6:	490a      	ldr	r1, [pc, #40]	@ (8003a10 <ES_WIFI_Init+0x58>)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fe73 	bl	80036d4 <AT_ExecuteCommand>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80039fe:	4619      	mov	r1, r3
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fd2b 	bl	800345c <AT_ParseInfo>
    }
  }
  return ret;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	0800f880 	.word	0x0800f880

08003a14 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00b      	beq.n	8003a40 <ES_WIFI_RegisterBusIO+0x2c>
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <ES_WIFI_RegisterBusIO+0x2c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <ES_WIFI_RegisterBusIO+0x2c>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <ES_WIFI_RegisterBusIO+0x2c>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e014      	b.n	8003a6e <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <ES_WIFI_Connect+0x1a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8003a96:	2302      	movs	r3, #2
 8003a98:	75fb      	strb	r3, [r7, #23]
 8003a9a:	e062      	b.n	8003b62 <ES_WIFI_Connect+0xe6>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4931      	ldr	r1, [pc, #196]	@ (8003b6c <ES_WIFI_Connect+0xf0>)
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f008 fdd0 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff fe0a 	bl	80036d4 <AT_ExecuteCommand>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8003ac4:	7dfb      	ldrb	r3, [r7, #23]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d14b      	bne.n	8003b62 <ES_WIFI_Connect+0xe6>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4927      	ldr	r1, [pc, #156]	@ (8003b70 <ES_WIFI_Connect+0xf4>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f008 fdb9 	bl	800c64c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f7ff fdf3 	bl	80036d4 <AT_ExecuteCommand>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d134      	bne.n	8003b62 <ES_WIFI_Connect+0xe6>
      {
        Obj->Security = SecType;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	491a      	ldr	r1, [pc, #104]	@ (8003b74 <ES_WIFI_Connect+0xf8>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 fd9e 	bl	800c64c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff fdd8 	bl	80036d4 <AT_ExecuteCommand>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d119      	bne.n	8003b62 <ES_WIFI_Connect+0xe6>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b34:	4910      	ldr	r1, [pc, #64]	@ (8003b78 <ES_WIFI_Connect+0xfc>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f008 fd88 	bl	800c64c <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b48:	461a      	mov	r2, r3
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff fdc2 	bl	80036d4 <AT_ExecuteCommand>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <ES_WIFI_Connect+0xe6>
          {
            Obj->NetSettings.IsConnected = 1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	0800f898 	.word	0x0800f898
 8003b70:	0800f8a0 	.word	0x0800f8a0
 8003b74:	0800f8a8 	.word	0x0800f8a8
 8003b78:	0800f8b0 	.word	0x0800f8b0

08003b7c <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b8a:	4911      	ldr	r1, [pc, #68]	@ (8003bd0 <ES_WIFI_IsConnected+0x54>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f008 fd5d 	bl	800c64c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fd97 	bl	80036d4 <AT_ExecuteCommand>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d108      	bne.n	8003bc2 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	33d2      	adds	r3, #210	@ 0xd2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7ff fd73 	bl	80036a8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	0800f8b4 	.word	0x0800f8b4

08003bd4 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003be2:	4910      	ldr	r1, [pc, #64]	@ (8003c24 <ES_WIFI_GetNetworkSettings+0x50>)
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 fd31 	bl	800c64c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fd6b 	bl	80036d4 <AT_ExecuteCommand>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	338d      	adds	r3, #141	@ 0x8d
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7ff fc97 	bl	8003548 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	0800f8bc 	.word	0x0800f8bc

08003c28 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c38:	4912      	ldr	r1, [pc, #72]	@ (8003c84 <ES_WIFI_GetMACAddress+0x5c>)
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f008 fd06 	bl	800c64c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fd40 	bl	80036d4 <AT_ExecuteCommand>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003c64:	3302      	adds	r3, #2
 8003c66:	4908      	ldr	r1, [pc, #32]	@ (8003c88 <ES_WIFI_GetMACAddress+0x60>)
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f008 fe3f 	bl	800c8ec <strtok>
 8003c6e:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8003c70:	6839      	ldr	r1, [r7, #0]
 8003c72:	68b8      	ldr	r0, [r7, #8]
 8003c74:	f7ff fb9b 	bl	80033ae <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	0800f90c 	.word	0x0800f90c
 8003c88:	0800f910 	.word	0x0800f910

08003c8c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <ES_WIFI_StartClientConnection+0x1e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d105      	bne.n	8003cb6 <ES_WIFI_StartClientConnection+0x2a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <ES_WIFI_StartClientConnection+0x2a>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0dd      	b.n	8003e72 <ES_WIFI_StartClientConnection+0x1e6>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	789b      	ldrb	r3, [r3, #2]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	496e      	ldr	r1, [pc, #440]	@ (8003e7c <ES_WIFI_StartClientConnection+0x1f0>)
 8003cc4:	f008 fcc2 	bl	800c64c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fcfc 	bl	80036d4 <AT_ExecuteCommand>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4963      	ldr	r1, [pc, #396]	@ (8003e80 <ES_WIFI_StartClientConnection+0x1f4>)
 8003cf4:	f008 fcaa 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d04:	461a      	mov	r2, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fce4 	bl	80036d4 <AT_ExecuteCommand>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d114      	bne.n	8003d40 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	88db      	ldrh	r3, [r3, #6]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4958      	ldr	r1, [pc, #352]	@ (8003e84 <ES_WIFI_StartClientConnection+0x1f8>)
 8003d24:	f008 fc92 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d34:	461a      	mov	r2, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fccc 	bl	80036d4 <AT_ExecuteCommand>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11c      	bne.n	8003d80 <ES_WIFI_StartClientConnection+0xf4>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <ES_WIFI_StartClientConnection+0xca>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d114      	bne.n	8003d80 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	889b      	ldrh	r3, [r3, #4]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4949      	ldr	r1, [pc, #292]	@ (8003e88 <ES_WIFI_StartClientConnection+0x1fc>)
 8003d64:	f008 fc72 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d74:	461a      	mov	r2, r3
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff fcac 	bl	80036d4 <AT_ExecuteCommand>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d128      	bne.n	8003dd8 <ES_WIFI_StartClientConnection+0x14c>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <ES_WIFI_StartClientConnection+0x10a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d120      	bne.n	8003dd8 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	7a1b      	ldrb	r3, [r3, #8]
 8003da0:	4619      	mov	r1, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	7a5b      	ldrb	r3, [r3, #9]
 8003da6:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	7a9b      	ldrb	r3, [r3, #10]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8003dac:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	7adb      	ldrb	r3, [r3, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	9200      	str	r2, [sp, #0]
 8003db6:	4623      	mov	r3, r4
 8003db8:	460a      	mov	r2, r1
 8003dba:	4934      	ldr	r1, [pc, #208]	@ (8003e8c <ES_WIFI_StartClientConnection+0x200>)
 8003dbc:	f008 fc46 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fc80 	bl	80036d4 <AT_ExecuteCommand>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d118      	bne.n	8003e10 <ES_WIFI_StartClientConnection+0x184>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d114      	bne.n	8003e10 <ES_WIFI_StartClientConnection+0x184>
  {
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	461a      	mov	r2, r3
 8003df2:	4927      	ldr	r1, [pc, #156]	@ (8003e90 <ES_WIFI_StartClientConnection+0x204>)
 8003df4:	f008 fc2a 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e04:	461a      	mov	r2, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fc64 	bl	80036d4 <AT_ExecuteCommand>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <ES_WIFI_StartClientConnection+0x1b8>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d112      	bne.n	8003e44 <ES_WIFI_StartClientConnection+0x1b8>
  {
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e24:	491b      	ldr	r1, [pc, #108]	@ (8003e94 <ES_WIFI_StartClientConnection+0x208>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f008 fc10 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fc4a 	bl	80036d4 <AT_ExecuteCommand>
 8003e40:	4603      	mov	r3, r0
 8003e42:	73fb      	strb	r3, [r7, #15]
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d112      	bne.n	8003e70 <ES_WIFI_StartClientConnection+0x1e4>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e50:	4911      	ldr	r1, [pc, #68]	@ (8003e98 <ES_WIFI_StartClientConnection+0x20c>)
 8003e52:	4618      	mov	r0, r3
 8003e54:	f008 fbfa 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003e64:	461a      	mov	r2, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fc34 	bl	80036d4 <AT_ExecuteCommand>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd90      	pop	{r4, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	0800f974 	.word	0x0800f974
 8003e80:	0800f97c 	.word	0x0800f97c
 8003e84:	0800f984 	.word	0x0800f984
 8003e88:	0800f98c 	.word	0x0800f98c
 8003e8c:	0800f994 	.word	0x0800f994
 8003e90:	0800f9a4 	.word	0x0800f9a4
 8003e94:	0800f9ac 	.word	0x0800f9ac
 8003e98:	0800f9b4 	.word	0x0800f9b4

08003e9c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	72fb      	strb	r3, [r7, #11]
 8003eac:	4613      	mov	r3, r2
 8003eae:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d102      	bne.n	8003ec0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	e001      	b.n	8003ec4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003eca:	d302      	bcc.n	8003ed2 <ES_WIFI_SendData+0x36>
 8003ecc:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8003ed0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ede:	7afa      	ldrb	r2, [r7, #11]
 8003ee0:	492d      	ldr	r1, [pc, #180]	@ (8003f98 <ES_WIFI_SendData+0xfc>)
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f008 fbb2 	bl	800c64c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff fbec 	bl	80036d4 <AT_ExecuteCommand>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d13c      	bne.n	8003f80 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4923      	ldr	r1, [pc, #140]	@ (8003f9c <ES_WIFI_SendData+0x100>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f008 fb9b 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f22:	461a      	mov	r2, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fbd5 	bl	80036d4 <AT_ExecuteCommand>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d125      	bne.n	8003f80 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f3a:	893a      	ldrh	r2, [r7, #8]
 8003f3c:	4918      	ldr	r1, [pc, #96]	@ (8003fa0 <ES_WIFI_SendData+0x104>)
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f008 fb84 	bl	800c64c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f50:	893a      	ldrh	r2, [r7, #8]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fc21 	bl	80037a0 <AT_RequestSendData>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f6e:	490d      	ldr	r1, [pc, #52]	@ (8003fa4 <ES_WIFI_SendData+0x108>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f008 fd17 	bl	800c9a4 <strstr>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d102      	bne.n	8003f8c <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0800f974 	.word	0x0800f974
 8003f9c:	0800fa58 	.word	0x0800fa58
 8003fa0:	0800fa60 	.word	0x0800fa60
 8003fa4:	0800fa6c 	.word	0x0800fa6c

08003fa8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	72fb      	strb	r3, [r7, #11]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e001      	b.n	8003fd0 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8003fd6:	d862      	bhi.n	800409e <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fde:	7afa      	ldrb	r2, [r7, #11]
 8003fe0:	4931      	ldr	r1, [pc, #196]	@ (80040a8 <ES_WIFI_ReceiveData+0x100>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f008 fb32 	bl	800c64c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fb6c 	bl	80036d4 <AT_ExecuteCommand>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d146      	bne.n	8004094 <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800400c:	893a      	ldrh	r2, [r7, #8]
 800400e:	4927      	ldr	r1, [pc, #156]	@ (80040ac <ES_WIFI_ReceiveData+0x104>)
 8004010:	4618      	mov	r0, r3
 8004012:	f008 fb1b 	bl	800c64c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004022:	461a      	mov	r2, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fb55 	bl	80036d4 <AT_ExecuteCommand>
 800402a:	4603      	mov	r3, r0
 800402c:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d12b      	bne.n	800408c <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	491c      	ldr	r1, [pc, #112]	@ (80040b0 <ES_WIFI_ReceiveData+0x108>)
 800403e:	4618      	mov	r0, r3
 8004040:	f008 fb04 	bl	800c64c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004050:	461a      	mov	r2, r3
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff fb3e 	bl	80036d4 <AT_ExecuteCommand>
 8004058:	4603      	mov	r3, r0
 800405a:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d11d      	bne.n	800409e <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004068:	4912      	ldr	r1, [pc, #72]	@ (80040b4 <ES_WIFI_ReceiveData+0x10c>)
 800406a:	4618      	mov	r0, r3
 800406c:	f008 faee 	bl	800c64c <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004076:	893a      	ldrh	r2, [r7, #8]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fc03 	bl	800388c <AT_RequestReceiveData>
 8004086:	4603      	mov	r3, r0
 8004088:	74fb      	strb	r3, [r7, #19]
 800408a:	e008      	b.n	800409e <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2200      	movs	r2, #0
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e004      	b.n	800409e <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 8004094:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <ES_WIFI_ReceiveData+0x110>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a07      	ldr	r2, [pc, #28]	@ (80040b8 <ES_WIFI_ReceiveData+0x110>)
 800409c:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	0800f974 	.word	0x0800f974
 80040ac:	0800fa74 	.word	0x0800fa74
 80040b0:	0800fa7c 	.word	0x0800fa7c
 80040b4:	0800fa84 	.word	0x0800fa84
 80040b8:	200009f0 	.word	0x200009f0

080040bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c6:	2003      	movs	r0, #3
 80040c8:	f001 f846 	bl	8005158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040cc:	2000      	movs	r0, #0
 80040ce:	f000 f80d 	bl	80040ec <HAL_InitTick>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	e001      	b.n	80040e2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040de:	f7fe fbd5 	bl	800288c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040e2:	79fb      	ldrb	r3, [r7, #7]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80040f8:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <HAL_InitTick+0x6c>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d023      	beq.n	8004148 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004100:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_InitTick+0x70>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b14      	ldr	r3, [pc, #80]	@ (8004158 <HAL_InitTick+0x6c>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800410e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4618      	mov	r0, r3
 8004118:	f001 f853 	bl	80051c2 <HAL_SYSTICK_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d809      	bhi.n	800413c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004128:	2200      	movs	r2, #0
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f001 f81d 	bl	800516e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004134:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <HAL_InitTick+0x74>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e007      	b.n	800414c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e004      	b.n	800414c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	e001      	b.n	800414c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000008 	.word	0x20000008
 800415c:	20000000 	.word	0x20000000
 8004160:	20000004 	.word	0x20000004

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000008 	.word	0x20000008
 8004188:	200009f4 	.word	0x200009f4

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	200009f4 	.word	0x200009f4

080041a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d005      	beq.n	80041ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80041be:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <HAL_Delay+0x44>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ca:	bf00      	nop
 80041cc:	f7ff ffde 	bl	800418c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d8f7      	bhi.n	80041cc <HAL_Delay+0x28>
  {
  }
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000008 	.word	0x20000008

080041ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3360      	adds	r3, #96	@ 0x60
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <LL_ADC_SetOffset+0x44>)
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	03fff000 	.word	0x03fff000

0800429c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3360      	adds	r3, #96	@ 0x60
 80042aa:	461a      	mov	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3360      	adds	r3, #96	@ 0x60
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	615a      	str	r2, [r3, #20]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3330      	adds	r3, #48	@ 0x30
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	4413      	add	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	211f      	movs	r1, #31
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	401a      	ands	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0e9b      	lsrs	r3, r3, #26
 800435c:	f003 011f 	and.w	r1, r3, #31
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3314      	adds	r3, #20
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0e5b      	lsrs	r3, r3, #25
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	0d1b      	lsrs	r3, r3, #20
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2107      	movs	r1, #7
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	401a      	ands	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	0d1b      	lsrs	r3, r3, #20
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	431a      	orrs	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f003 0318 	and.w	r3, r3, #24
 80043f6:	4908      	ldr	r1, [pc, #32]	@ (8004418 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043f8:	40d9      	lsrs	r1, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	400b      	ands	r3, r1
 80043fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004402:	431a      	orrs	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	0007ffff 	.word	0x0007ffff

0800441c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800442c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6093      	str	r3, [r2, #8]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004454:	d101      	bne.n	800445a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800447c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044a4:	d101      	bne.n	80044aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_IsEnabled+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_IsEnabled+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d101      	bne.n	800451c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e12f      	b.n	80047a6 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fe f9bd 	bl	80028d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff67 	bl	8004440 <LL_ADC_IsDeepPowerDownEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff4d 	bl	800441c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff82 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d115      	bne.n	80045be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff66 	bl	8004468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459c:	4b84      	ldr	r3, [pc, #528]	@ (80047b0 <HAL_ADC_Init+0x284>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	4a84      	ldr	r2, [pc, #528]	@ (80047b4 <HAL_ADC_Init+0x288>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	3301      	adds	r3, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045b0:	e002      	b.n	80045b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff64 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10d      	bne.n	80045ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d2:	f043 0210 	orr.w	r2, r3, #16
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff75 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80045f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 80c8 	bne.w	8004794 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 80c4 	bne.w	8004794 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004614:	f043 0202 	orr.w	r2, r3, #2
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff49 	bl	80044b8 <LL_ADC_IsEnabled>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800462c:	4862      	ldr	r0, [pc, #392]	@ (80047b8 <HAL_ADC_Init+0x28c>)
 800462e:	f7ff ff43 	bl	80044b8 <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d105      	bne.n	8004644 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4619      	mov	r1, r3
 800463e:	485f      	ldr	r0, [pc, #380]	@ (80047bc <HAL_ADC_Init+0x290>)
 8004640:	f7ff fdd4 	bl	80041ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7e5b      	ldrb	r3, [r3, #25]
 8004648:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800464e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004654:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800465a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004662:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004664:	4313      	orrs	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d106      	bne.n	8004680 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	3b01      	subs	r3, #1
 8004678:	045b      	lsls	r3, r3, #17
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004694:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	4b47      	ldr	r3, [pc, #284]	@ (80047c0 <HAL_ADC_Init+0x294>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	69b9      	ldr	r1, [r7, #24]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff12 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80046ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff1f 	bl	8004504 <LL_ADC_INJ_IsConversionOngoing>
 80046c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d140      	bne.n	8004750 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d13d      	bne.n	8004750 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7e1b      	ldrb	r3, [r3, #24]
 80046dc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80046de:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046f6:	f023 0306 	bic.w	r3, r3, #6
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	430b      	orrs	r3, r1
 8004702:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800470a:	2b01      	cmp	r3, #1
 800470c:	d118      	bne.n	8004740 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004718:	f023 0304 	bic.w	r3, r3, #4
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004724:	4311      	orrs	r1, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800472a:	4311      	orrs	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004730:	430a      	orrs	r2, r1
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	611a      	str	r2, [r3, #16]
 800473e:	e007      	b.n	8004750 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10c      	bne.n	8004772 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f023 010f 	bic.w	r1, r3, #15
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004770:	e007      	b.n	8004782 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 020f 	bic.w	r2, r2, #15
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	659a      	str	r2, [r3, #88]	@ 0x58
 8004792:	e007      	b.n	80047a4 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000000 	.word	0x20000000
 80047b4:	053e2d63 	.word	0x053e2d63
 80047b8:	50040000 	.word	0x50040000
 80047bc:	50040300 	.word	0x50040300
 80047c0:	fff0c007 	.word	0xfff0c007

080047c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0b6      	sub	sp, #216	@ 0xd8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x22>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e3d3      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x7ca>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fe73 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 83b8 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d824      	bhi.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	3b02      	subs	r3, #2
 800480e:	2b03      	cmp	r3, #3
 8004810:	d81b      	bhi.n	800484a <HAL_ADC_ConfigChannel+0x86>
 8004812:	a201      	add	r2, pc, #4	@ (adr r2, 8004818 <HAL_ADC_ConfigChannel+0x54>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004829 	.word	0x08004829
 800481c:	08004831 	.word	0x08004831
 8004820:	08004839 	.word	0x08004839
 8004824:	08004841 	.word	0x08004841
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	220c      	movs	r2, #12
 800482c:	605a      	str	r2, [r3, #4]
          break;
 800482e:	e010      	b.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2212      	movs	r2, #18
 8004834:	605a      	str	r2, [r3, #4]
          break;
 8004836:	e00c      	b.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2218      	movs	r2, #24
 800483c:	605a      	str	r2, [r3, #4]
          break;
 800483e:	e008      	b.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004846:	605a      	str	r2, [r3, #4]
          break;
 8004848:	e003      	b.n	8004852 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2206      	movs	r2, #6
 800484e:	605a      	str	r2, [r3, #4]
          break;
 8004850:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7ff fd60 	bl	8004324 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fe38 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 800486e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fe44 	bl	8004504 <LL_ADC_INJ_IsConversionOngoing>
 800487c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004884:	2b00      	cmp	r3, #0
 8004886:	f040 81c1 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800488a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 81bc 	bne.w	8004c0c <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800489c:	d10f      	bne.n	80048be <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	4619      	mov	r1, r3
 80048aa:	f7ff fd67 	bl	800437c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff fd21 	bl	80042fe <LL_ADC_SetSamplingTimeCommonConfig>
 80048bc:	e00e      	b.n	80048dc <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7ff fd56 	bl	800437c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2100      	movs	r1, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff fd11 	bl	80042fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00a      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	6919      	ldr	r1, [r3, #16]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800490e:	f7ff fca1 	bl	8004254 <LL_ADC_SetOffset>
 8004912:	e17b      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fcbe 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004920:	4603      	mov	r3, r0
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x17c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fcb3 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 021f 	and.w	r2, r3, #31
 800493e:	e01e      	b.n	800497e <HAL_ADC_ConfigChannel+0x1ba>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fca8 	bl	800429c <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004956:	fa93 f3a3 	rbit	r3, r3
 800495a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800495e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004966:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 800496e:	2320      	movs	r3, #32
 8004970:	e004      	b.n	800497c <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8004972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x1d2>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	0e9b      	lsrs	r3, r3, #26
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	e018      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x204>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80049be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fc77 	bl	80042c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fc5b 	bl	800429c <LL_ADC_GetOffsetChannel>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x242>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fc50 	bl	800429c <LL_ADC_GetOffsetChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0e9b      	lsrs	r3, r3, #26
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	e01e      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x280>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fc45 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e004      	b.n	8004a42 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8004a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a3c:	fab3 f383 	clz	r3, r3
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x298>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	e018      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2ca>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e004      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8004a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d106      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fc14 	bl	80042c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fbf8 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x308>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fbed 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	0e9b      	lsrs	r3, r3, #26
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	e01e      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x346>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fbe2 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8004afa:	2320      	movs	r3, #32
 8004afc:	e004      	b.n	8004b08 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8004afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b02:	fab3 f383 	clz	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x35e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	0e9b      	lsrs	r3, r3, #26
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	e016      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x38c>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8004b42:	2320      	movs	r3, #32
 8004b44:	e004      	b.n	8004b50 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d106      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fbb3 	bl	80042c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2103      	movs	r1, #3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fb97 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x3ca>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2103      	movs	r1, #3
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fb8c 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	0e9b      	lsrs	r3, r3, #26
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	e017      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x3fa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2103      	movs	r1, #3
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fb81 	bl	800429c <LL_ADC_GetOffsetChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e003      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <HAL_ADC_ConfigChannel+0x412>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	0e9b      	lsrs	r3, r3, #26
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	e011      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x436>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bde:	fa93 f3a3 	rbit	r3, r3
 8004be2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e003      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d106      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2103      	movs	r1, #3
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fb5e 	bl	80042c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fc51 	bl	80044b8 <LL_ADC_IsEnabled>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 813f 	bne.w	8004e9c <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7ff fbd2 	bl	80043d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a8e      	ldr	r2, [pc, #568]	@ (8004e70 <HAL_ADC_ConfigChannel+0x6ac>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f040 8130 	bne.w	8004e9c <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x4a0>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	bf94      	ite	ls
 8004c5c:	2301      	movls	r3, #1
 8004c5e:	2300      	movhi	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e019      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x4d4>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c74:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8004c80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	bf94      	ite	ls
 8004c92:	2301      	movls	r3, #1
 8004c94:	2300      	movhi	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d079      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x4f4>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e9b      	lsrs	r3, r3, #26
 8004cae:	3301      	adds	r3, #1
 8004cb0:	069b      	lsls	r3, r3, #26
 8004cb2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cb6:	e015      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x520>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	e003      	b.n	8004cdc <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8004cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd6:	fab3 f383 	clz	r3, r3
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	069b      	lsls	r3, r3, #26
 8004ce0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x540>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0e9b      	lsrs	r3, r3, #26
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004d02:	e017      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x570>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0c:	fa93 f3a3 	rbit	r3, r3
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	e003      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8004d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x596>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	051b      	lsls	r3, r3, #20
 8004d58:	e018      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x5c8>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8004d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 021f 	and.w	r2, r3, #31
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	e080      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x5e8>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	0e9b      	lsrs	r3, r3, #26
 8004da2:	3301      	adds	r3, #1
 8004da4:	069b      	lsls	r3, r3, #26
 8004da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004daa:	e015      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x614>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	e003      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	069b      	lsls	r3, r3, #26
 8004dd4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x634>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	3301      	adds	r3, #1
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2101      	movs	r1, #1
 8004df2:	fa01 f303 	lsl.w	r3, r1, r3
 8004df6:	e017      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x664>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	fa93 f3a3 	rbit	r3, r3
 8004e04:	61fb      	str	r3, [r7, #28]
  return result;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8004e10:	2320      	movs	r3, #32
 8004e12:	e003      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8004e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2101      	movs	r1, #1
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	ea42 0103 	orr.w	r1, r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x690>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	4613      	mov	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b1e      	subs	r3, #30
 8004e4c:	051b      	lsls	r3, r3, #20
 8004e4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	e01d      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x6cc>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	613b      	str	r3, [r7, #16]
  return result;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8004e6c:	2320      	movs	r3, #32
 8004e6e:	e005      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x6b8>
 8004e70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f003 021f 	and.w	r2, r3, #31
 8004e82:	4613      	mov	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	3b1e      	subs	r3, #30
 8004e8a:	051b      	lsls	r3, r3, #20
 8004e8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e90:	430b      	orrs	r3, r1
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7ff fa70 	bl	800437c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8004f98 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d06c      	beq.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea8:	483c      	ldr	r0, [pc, #240]	@ (8004f9c <HAL_ADC_ConfigChannel+0x7d8>)
 8004eaa:	f7ff f9c5 	bl	8004238 <LL_ADC_GetCommonPathInternalCh>
 8004eae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d127      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d121      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d157      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ed6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eda:	4619      	mov	r1, r3
 8004edc:	482f      	ldr	r0, [pc, #188]	@ (8004f9c <HAL_ADC_ConfigChannel+0x7d8>)
 8004ede:	f7ff f998 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <HAL_ADC_ConfigChannel+0x7e4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	4a30      	ldr	r2, [pc, #192]	@ (8004fac <HAL_ADC_ConfigChannel+0x7e8>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	099b      	lsrs	r3, r3, #6
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004efc:	e002      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f9      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f0a:	e03a      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a27      	ldr	r2, [pc, #156]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x7ec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d113      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x77a>
 8004f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d12a      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f34:	4619      	mov	r1, r3
 8004f36:	4819      	ldr	r0, [pc, #100]	@ (8004f9c <HAL_ADC_ConfigChannel+0x7d8>)
 8004f38:	f7ff f96b 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f3c:	e021      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x7f0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d11c      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d116      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d111      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f66:	4619      	mov	r1, r3
 8004f68:	480c      	ldr	r0, [pc, #48]	@ (8004f9c <HAL_ADC_ConfigChannel+0x7d8>)
 8004f6a:	f7ff f952 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
 8004f6e:	e008      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004f8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	37d8      	adds	r7, #216	@ 0xd8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	80080000 	.word	0x80080000
 8004f9c:	50040300 	.word	0x50040300
 8004fa0:	c7520000 	.word	0xc7520000
 8004fa4:	50040000 	.word	0x50040000
 8004fa8:	20000000 	.word	0x20000000
 8004fac:	053e2d63 	.word	0x053e2d63
 8004fb0:	cb840000 	.word	0xcb840000
 8004fb4:	80000001 	.word	0x80000001

08004fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <__NVIC_SetPriorityGrouping+0x44>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fea:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <__NVIC_SetPriorityGrouping+0x44>)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	60d3      	str	r3, [r2, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <__NVIC_GetPriorityGrouping+0x18>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	0a1b      	lsrs	r3, r3, #8
 800500a:	f003 0307 	and.w	r3, r3, #7
}
 800500e:	4618      	mov	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db0b      	blt.n	8005046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	f003 021f 	and.w	r2, r3, #31
 8005034:	4907      	ldr	r1, [pc, #28]	@ (8005054 <__NVIC_EnableIRQ+0x38>)
 8005036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2001      	movs	r0, #1
 800503e:	fa00 f202 	lsl.w	r2, r0, r2
 8005042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	e000e100 	.word	0xe000e100

08005058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	2b00      	cmp	r3, #0
 800506a:	db0a      	blt.n	8005082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	490c      	ldr	r1, [pc, #48]	@ (80050a4 <__NVIC_SetPriority+0x4c>)
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	0112      	lsls	r2, r2, #4
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	440b      	add	r3, r1
 800507c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005080:	e00a      	b.n	8005098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	4908      	ldr	r1, [pc, #32]	@ (80050a8 <__NVIC_SetPriority+0x50>)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3b04      	subs	r3, #4
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	440b      	add	r3, r1
 8005096:	761a      	strb	r2, [r3, #24]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	e000e100 	.word	0xe000e100
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	@ 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f1c3 0307 	rsb	r3, r3, #7
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	bf28      	it	cs
 80050ca:	2304      	movcs	r3, #4
 80050cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2b06      	cmp	r3, #6
 80050d4:	d902      	bls.n	80050dc <NVIC_EncodePriority+0x30>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	3b03      	subs	r3, #3
 80050da:	e000      	b.n	80050de <NVIC_EncodePriority+0x32>
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43da      	mvns	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	401a      	ands	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f4:	f04f 31ff 	mov.w	r1, #4294967295
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	43d9      	mvns	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005104:	4313      	orrs	r3, r2
         );
}
 8005106:	4618      	mov	r0, r3
 8005108:	3724      	adds	r7, #36	@ 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3b01      	subs	r3, #1
 8005120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005124:	d301      	bcc.n	800512a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005126:	2301      	movs	r3, #1
 8005128:	e00f      	b.n	800514a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800512a:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <SysTick_Config+0x40>)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3b01      	subs	r3, #1
 8005130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005132:	210f      	movs	r1, #15
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	f7ff ff8e 	bl	8005058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800513c:	4b05      	ldr	r3, [pc, #20]	@ (8005154 <SysTick_Config+0x40>)
 800513e:	2200      	movs	r2, #0
 8005140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005142:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <SysTick_Config+0x40>)
 8005144:	2207      	movs	r2, #7
 8005146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	e000e010 	.word	0xe000e010

08005158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff29 	bl	8004fb8 <__NVIC_SetPriorityGrouping>
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	4603      	mov	r3, r0
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005180:	f7ff ff3e 	bl	8005000 <__NVIC_GetPriorityGrouping>
 8005184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	6978      	ldr	r0, [r7, #20]
 800518c:	f7ff ff8e 	bl	80050ac <NVIC_EncodePriority>
 8005190:	4602      	mov	r2, r0
 8005192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005196:	4611      	mov	r1, r2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff ff5d 	bl	8005058 <__NVIC_SetPriority>
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	4603      	mov	r3, r0
 80051ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff31 	bl	800501c <__NVIC_EnableIRQ>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ffa2 	bl	8005114 <SysTick_Config>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0ac      	b.n	8005348 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f8b2 	bl	800535c <DFSDM_GetChannelFromInstance>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4a55      	ldr	r2, [pc, #340]	@ (8005350 <HAL_DFSDM_ChannelInit+0x174>)
 80051fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e09f      	b.n	8005348 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fd fba3 	bl	8002954 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800520e:	4b51      	ldr	r3, [pc, #324]	@ (8005354 <HAL_DFSDM_ChannelInit+0x178>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a4f      	ldr	r2, [pc, #316]	@ (8005354 <HAL_DFSDM_ChannelInit+0x178>)
 8005216:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005218:	4b4e      	ldr	r3, [pc, #312]	@ (8005354 <HAL_DFSDM_ChannelInit+0x178>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d125      	bne.n	800526c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005220:	4b4d      	ldr	r3, [pc, #308]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4c      	ldr	r2, [pc, #304]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005226:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800522a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800522c:	4b4a      	ldr	r3, [pc, #296]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4948      	ldr	r1, [pc, #288]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800523a:	4b47      	ldr	r3, [pc, #284]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a46      	ldr	r2, [pc, #280]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005240:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8005244:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	791b      	ldrb	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d108      	bne.n	8005260 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800524e:	4b42      	ldr	r3, [pc, #264]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	493f      	ldr	r1, [pc, #252]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005260:	4b3d      	ldr	r3, [pc, #244]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3c      	ldr	r2, [pc, #240]	@ (8005358 <HAL_DFSDM_ChannelInit+0x17c>)
 8005266:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800526a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800527a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6819      	ldr	r1, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800528a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005290:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 020f 	bic.w	r2, r2, #15
 80052a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6819      	ldr	r1, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80052b8:	431a      	orrs	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80052d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6899      	ldr	r1, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f002 0207 	and.w	r2, r2, #7
 80052fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005308:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005328:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f810 	bl	800535c <DFSDM_GetChannelFromInstance>
 800533c:	4602      	mov	r2, r0
 800533e:	4904      	ldr	r1, [pc, #16]	@ (8005350 <HAL_DFSDM_ChannelInit+0x174>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200009fc 	.word	0x200009fc
 8005354:	200009f8 	.word	0x200009f8
 8005358:	40016000 	.word	0x40016000

0800535c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1c      	ldr	r2, [pc, #112]	@ (80053d8 <DFSDM_GetChannelFromInstance+0x7c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d102      	bne.n	8005372 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e02b      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a19      	ldr	r2, [pc, #100]	@ (80053dc <DFSDM_GetChannelFromInstance+0x80>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d102      	bne.n	8005380 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e024      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a17      	ldr	r2, [pc, #92]	@ (80053e0 <DFSDM_GetChannelFromInstance+0x84>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d102      	bne.n	800538e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005388:	2302      	movs	r3, #2
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	e01d      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <DFSDM_GetChannelFromInstance+0x88>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d102      	bne.n	800539c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8005396:	2304      	movs	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e016      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a12      	ldr	r2, [pc, #72]	@ (80053e8 <DFSDM_GetChannelFromInstance+0x8c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d102      	bne.n	80053aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80053a4:	2305      	movs	r3, #5
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00f      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a0f      	ldr	r2, [pc, #60]	@ (80053ec <DFSDM_GetChannelFromInstance+0x90>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d102      	bne.n	80053b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80053b2:	2306      	movs	r3, #6
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e008      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <DFSDM_GetChannelFromInstance+0x94>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d102      	bne.n	80053c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80053c0:	2307      	movs	r3, #7
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e001      	b.n	80053ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80053c6:	2303      	movs	r3, #3
 80053c8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80053ca:	68fb      	ldr	r3, [r7, #12]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	40016000 	.word	0x40016000
 80053dc:	40016020 	.word	0x40016020
 80053e0:	40016040 	.word	0x40016040
 80053e4:	40016080 	.word	0x40016080
 80053e8:	400160a0 	.word	0x400160a0
 80053ec:	400160c0 	.word	0x400160c0
 80053f0:	400160e0 	.word	0x400160e0

080053f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d005      	beq.n	8005418 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2204      	movs	r2, #4
 8005410:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
 8005416:	e047      	b.n	80054a8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 020e 	bic.w	r2, r2, #14
 8005426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005442:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544c:	f003 021c 	and.w	r2, r3, #28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	2101      	movs	r1, #1
 8005456:	fa01 f202 	lsl.w	r2, r1, r2
 800545a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005464:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800547c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005486:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	4798      	blx	r3
    }
  }
  return status;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054c2:	e166      	b.n	8005792 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	2101      	movs	r1, #1
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	4013      	ands	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8158 	beq.w	800578c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d005      	beq.n	80054f4 <HAL_GPIO_Init+0x40>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d130      	bne.n	8005556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	2203      	movs	r2, #3
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4013      	ands	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800552a:	2201      	movs	r2, #1
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	f003 0201 	and.w	r2, r3, #1
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d017      	beq.n	8005592 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	2203      	movs	r2, #3
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d123      	bne.n	80055e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	08da      	lsrs	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3208      	adds	r2, #8
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	220f      	movs	r2, #15
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	08da      	lsrs	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3208      	adds	r2, #8
 80055e0:	6939      	ldr	r1, [r7, #16]
 80055e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	2203      	movs	r2, #3
 80055f2:	fa02 f303 	lsl.w	r3, r2, r3
 80055f6:	43db      	mvns	r3, r3
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4013      	ands	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80b2 	beq.w	800578c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005628:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <HAL_GPIO_Init+0x2fc>)
 800562a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562c:	4a60      	ldr	r2, [pc, #384]	@ (80057b0 <HAL_GPIO_Init+0x2fc>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6613      	str	r3, [r2, #96]	@ 0x60
 8005634:	4b5e      	ldr	r3, [pc, #376]	@ (80057b0 <HAL_GPIO_Init+0x2fc>)
 8005636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005640:	4a5c      	ldr	r2, [pc, #368]	@ (80057b4 <HAL_GPIO_Init+0x300>)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	089b      	lsrs	r3, r3, #2
 8005646:	3302      	adds	r3, #2
 8005648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	220f      	movs	r2, #15
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800566a:	d02b      	beq.n	80056c4 <HAL_GPIO_Init+0x210>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a52      	ldr	r2, [pc, #328]	@ (80057b8 <HAL_GPIO_Init+0x304>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d025      	beq.n	80056c0 <HAL_GPIO_Init+0x20c>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a51      	ldr	r2, [pc, #324]	@ (80057bc <HAL_GPIO_Init+0x308>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01f      	beq.n	80056bc <HAL_GPIO_Init+0x208>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a50      	ldr	r2, [pc, #320]	@ (80057c0 <HAL_GPIO_Init+0x30c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d019      	beq.n	80056b8 <HAL_GPIO_Init+0x204>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a4f      	ldr	r2, [pc, #316]	@ (80057c4 <HAL_GPIO_Init+0x310>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_GPIO_Init+0x200>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a4e      	ldr	r2, [pc, #312]	@ (80057c8 <HAL_GPIO_Init+0x314>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00d      	beq.n	80056b0 <HAL_GPIO_Init+0x1fc>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a4d      	ldr	r2, [pc, #308]	@ (80057cc <HAL_GPIO_Init+0x318>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <HAL_GPIO_Init+0x1f8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a4c      	ldr	r2, [pc, #304]	@ (80057d0 <HAL_GPIO_Init+0x31c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d101      	bne.n	80056a8 <HAL_GPIO_Init+0x1f4>
 80056a4:	2307      	movs	r3, #7
 80056a6:	e00e      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056a8:	2308      	movs	r3, #8
 80056aa:	e00c      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056ac:	2306      	movs	r3, #6
 80056ae:	e00a      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056b0:	2305      	movs	r3, #5
 80056b2:	e008      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056b4:	2304      	movs	r3, #4
 80056b6:	e006      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056b8:	2303      	movs	r3, #3
 80056ba:	e004      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056bc:	2302      	movs	r3, #2
 80056be:	e002      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_GPIO_Init+0x212>
 80056c4:	2300      	movs	r3, #0
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	f002 0203 	and.w	r2, r2, #3
 80056cc:	0092      	lsls	r2, r2, #2
 80056ce:	4093      	lsls	r3, r2
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056d6:	4937      	ldr	r1, [pc, #220]	@ (80057b4 <HAL_GPIO_Init+0x300>)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	089b      	lsrs	r3, r3, #2
 80056dc:	3302      	adds	r3, #2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056e4:	4b3b      	ldr	r3, [pc, #236]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	43db      	mvns	r3, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005708:	4a32      	ldr	r2, [pc, #200]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800570e:	4b31      	ldr	r3, [pc, #196]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	43db      	mvns	r3, r3
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4013      	ands	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005732:	4a28      	ldr	r2, [pc, #160]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005738:	4b26      	ldr	r3, [pc, #152]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	43db      	mvns	r3, r3
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005762:	4b1c      	ldr	r3, [pc, #112]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	43db      	mvns	r3, r3
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005786:	4a13      	ldr	r2, [pc, #76]	@ (80057d4 <HAL_GPIO_Init+0x320>)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3301      	adds	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f ae91 	bne.w	80054c4 <HAL_GPIO_Init+0x10>
  }
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40010000 	.word	0x40010000
 80057b8:	48000400 	.word	0x48000400
 80057bc:	48000800 	.word	0x48000800
 80057c0:	48000c00 	.word	0x48000c00
 80057c4:	48001000 	.word	0x48001000
 80057c8:	48001400 	.word	0x48001400
 80057cc:	48001800 	.word	0x48001800
 80057d0:	48001c00 	.word	0x48001c00
 80057d4:	40010400 	.word	0x40010400

080057d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80057e6:	e0c9      	b.n	800597c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80057e8:	2201      	movs	r2, #1
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80bc 	beq.w	8005976 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80057fe:	4a66      	ldr	r2, [pc, #408]	@ (8005998 <HAL_GPIO_DeInit+0x1c0>)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	220f      	movs	r2, #15
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005826:	d02b      	beq.n	8005880 <HAL_GPIO_DeInit+0xa8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a5c      	ldr	r2, [pc, #368]	@ (800599c <HAL_GPIO_DeInit+0x1c4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d025      	beq.n	800587c <HAL_GPIO_DeInit+0xa4>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a5b      	ldr	r2, [pc, #364]	@ (80059a0 <HAL_GPIO_DeInit+0x1c8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01f      	beq.n	8005878 <HAL_GPIO_DeInit+0xa0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a5a      	ldr	r2, [pc, #360]	@ (80059a4 <HAL_GPIO_DeInit+0x1cc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d019      	beq.n	8005874 <HAL_GPIO_DeInit+0x9c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a59      	ldr	r2, [pc, #356]	@ (80059a8 <HAL_GPIO_DeInit+0x1d0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <HAL_GPIO_DeInit+0x98>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a58      	ldr	r2, [pc, #352]	@ (80059ac <HAL_GPIO_DeInit+0x1d4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00d      	beq.n	800586c <HAL_GPIO_DeInit+0x94>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a57      	ldr	r2, [pc, #348]	@ (80059b0 <HAL_GPIO_DeInit+0x1d8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <HAL_GPIO_DeInit+0x90>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a56      	ldr	r2, [pc, #344]	@ (80059b4 <HAL_GPIO_DeInit+0x1dc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_GPIO_DeInit+0x8c>
 8005860:	2307      	movs	r3, #7
 8005862:	e00e      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005864:	2308      	movs	r3, #8
 8005866:	e00c      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005868:	2306      	movs	r3, #6
 800586a:	e00a      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 800586c:	2305      	movs	r3, #5
 800586e:	e008      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005870:	2304      	movs	r3, #4
 8005872:	e006      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005874:	2303      	movs	r3, #3
 8005876:	e004      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005878:	2302      	movs	r3, #2
 800587a:	e002      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <HAL_GPIO_DeInit+0xaa>
 8005880:	2300      	movs	r3, #0
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	f002 0203 	and.w	r2, r2, #3
 8005888:	0092      	lsls	r2, r2, #2
 800588a:	4093      	lsls	r3, r2
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	429a      	cmp	r2, r3
 8005890:	d132      	bne.n	80058f8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005892:	4b49      	ldr	r3, [pc, #292]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	43db      	mvns	r3, r3
 800589a:	4947      	ldr	r1, [pc, #284]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 800589c:	4013      	ands	r3, r2
 800589e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	4943      	ldr	r1, [pc, #268]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80058ae:	4b42      	ldr	r3, [pc, #264]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	4940      	ldr	r1, [pc, #256]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80058bc:	4b3e      	ldr	r3, [pc, #248]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	43db      	mvns	r3, r3
 80058c4:	493c      	ldr	r1, [pc, #240]	@ (80059b8 <HAL_GPIO_DeInit+0x1e0>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	220f      	movs	r2, #15
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80058da:	4a2f      	ldr	r2, [pc, #188]	@ (8005998 <HAL_GPIO_DeInit+0x1c0>)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	3302      	adds	r3, #2
 80058e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	43da      	mvns	r2, r3
 80058ea:	482b      	ldr	r0, [pc, #172]	@ (8005998 <HAL_GPIO_DeInit+0x1c0>)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	400a      	ands	r2, r1
 80058f2:	3302      	adds	r3, #2
 80058f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	2103      	movs	r1, #3
 8005902:	fa01 f303 	lsl.w	r3, r1, r3
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	08da      	lsrs	r2, r3, #3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3208      	adds	r2, #8
 8005914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	220f      	movs	r2, #15
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43db      	mvns	r3, r3
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	08d2      	lsrs	r2, r2, #3
 800592c:	4019      	ands	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3208      	adds	r2, #8
 8005932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689a      	ldr	r2, [r3, #8]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	2103      	movs	r1, #3
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	2101      	movs	r1, #1
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2103      	movs	r1, #3
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	401a      	ands	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	3301      	adds	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f af2f 	bne.w	80057e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40010000 	.word	0x40010000
 800599c:	48000400 	.word	0x48000400
 80059a0:	48000800 	.word	0x48000800
 80059a4:	48000c00 	.word	0x48000c00
 80059a8:	48001000 	.word	0x48001000
 80059ac:	48001400 	.word	0x48001400
 80059b0:	48001800 	.word	0x48001800
 80059b4:	48001c00 	.word	0x48001c00
 80059b8:	40010400 	.word	0x40010400

080059bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e001      	b.n	80059de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
 80059f8:	4613      	mov	r3, r2
 80059fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059fc:	787b      	ldrb	r3, [r7, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a08:	e002      	b.n	8005a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a0a:	887a      	ldrh	r2, [r7, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a26:	4b08      	ldr	r3, [pc, #32]	@ (8005a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a32:	4a05      	ldr	r2, [pc, #20]	@ (8005a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fc fed8 	bl	80027f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40010400 	.word	0x40010400

08005a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e081      	b.n	8005b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc ffd2 	bl	8002a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	@ 0x24
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d107      	bne.n	8005ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	e006      	b.n	8005ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d104      	bne.n	8005ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d138      	bne.n	8005bf2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e032      	b.n	8005bf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	@ 0x24
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005bbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6819      	ldr	r1, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d139      	bne.n	8005c8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e033      	b.n	8005c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2224      	movs	r2, #36	@ 0x24
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005ca4:	f7fe fa72 	bl	800418c <HAL_GetTick>
 8005ca8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
 8005cb4:	e092      	b.n	8005ddc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f040 808b 	bne.w	8005ddc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fc ff4a 	bl	8002b60 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8005ccc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f88b 	bl	8005dec <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	4b42      	ldr	r3, [pc, #264]	@ (8005de8 <HAL_OSPI_Init+0x150>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	68d1      	ldr	r1, [r2, #12]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6912      	ldr	r2, [r2, #16]
 8005ce8:	3a01      	subs	r2, #1
 8005cea:	0412      	lsls	r2, r2, #16
 8005cec:	4311      	orrs	r1, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6952      	ldr	r2, [r2, #20]
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	0212      	lsls	r2, r2, #8
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005cfc:	4311      	orrs	r1, r2
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	69d2      	ldr	r2, [r2, #28]
 8005d02:	4311      	orrs	r1, r2
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	0412      	lsls	r2, r2, #16
 8005d16:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2120      	movs	r1, #32
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fb98 	bl	8006474 <OSPI_WaitFlagStateUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d146      	bne.n	8005ddc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	1e5a      	subs	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d84:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d107      	bne.n	8005dc4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0202 	orr.w	r2, r2, #2
 8005dc2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dcc:	d103      	bne.n	8005dd6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8005dd4:	e002      	b.n	8005ddc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	f8e0f8f4 	.word	0xf8e0f8f4

08005dec <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
	...

08005e0c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b092      	sub	sp, #72	@ 0x48
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a08      	ldr	r2, [pc, #32]	@ (8005e4c <HAL_OSPIM_Config+0x40>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d105      	bne.n	8005e3a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8005e38:	e004      	b.n	8005e44 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e4a:	e01f      	b.n	8005e8c <HAL_OSPIM_Config+0x80>
 8005e4c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8005e50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e54:	3301      	adds	r3, #1
 8005e56:	b2d8      	uxtb	r0, r3
 8005e58:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005e5c:	f107 0114 	add.w	r1, r7, #20
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	440b      	add	r3, r1
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	f000 fb3a 	bl	80064e4 <OSPIM_GetConfig>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005e82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e86:	3301      	adds	r3, #1
 8005e88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005e8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d9dd      	bls.n	8005e50 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005e94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 82de 	bne.w	800645a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005e9e:	4bc6      	ldr	r3, [pc, #792]	@ (80061b8 <HAL_OSPIM_Config+0x3ac>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005eaa:	4bc3      	ldr	r3, [pc, #780]	@ (80061b8 <HAL_OSPIM_Config+0x3ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4ac2      	ldr	r2, [pc, #776]	@ (80061b8 <HAL_OSPIM_Config+0x3ac>)
 8005eb0:	f023 0301 	bic.w	r3, r3, #1
 8005eb4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005eb6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005ec2:	4bbe      	ldr	r3, [pc, #760]	@ (80061bc <HAL_OSPIM_Config+0x3b0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005ece:	4bbb      	ldr	r3, [pc, #748]	@ (80061bc <HAL_OSPIM_Config+0x3b0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4aba      	ldr	r2, [pc, #744]	@ (80061bc <HAL_OSPIM_Config+0x3b0>)
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005eda:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005ede:	f043 0302 	orr.w	r3, r3, #2
 8005ee2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8005ee6:	49b6      	ldr	r1, [pc, #728]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3348      	adds	r3, #72	@ 0x48
 8005ef4:	443b      	add	r3, r7
 8005ef6:	3b2c      	subs	r3, #44	@ 0x2c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	6859      	ldr	r1, [r3, #4]
 8005f02:	48af      	ldr	r0, [pc, #700]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005f04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	3348      	adds	r3, #72	@ 0x48
 8005f10:	443b      	add	r3, r7
 8005f12:	3b2c      	subs	r3, #44	@ 0x2c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4403      	add	r3, r0
 8005f20:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	3348      	adds	r3, #72	@ 0x48
 8005f2e:	443b      	add	r3, r7
 8005f30:	3b34      	subs	r3, #52	@ 0x34
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a1 	beq.w	800607c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8005f3a:	49a1      	ldr	r1, [pc, #644]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	3348      	adds	r3, #72	@ 0x48
 8005f48:	443b      	add	r3, r7
 8005f4a:	3b34      	subs	r3, #52	@ 0x34
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	6859      	ldr	r1, [r3, #4]
 8005f56:	489a      	ldr	r0, [pc, #616]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	3348      	adds	r3, #72	@ 0x48
 8005f64:	443b      	add	r3, r7
 8005f66:	3b34      	subs	r3, #52	@ 0x34
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	f021 0201 	bic.w	r2, r1, #1
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4403      	add	r3, r0
 8005f74:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005f76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	3348      	adds	r3, #72	@ 0x48
 8005f82:	443b      	add	r3, r7
 8005f84:	3b30      	subs	r3, #48	@ 0x30
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8005f8c:	498c      	ldr	r1, [pc, #560]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	3348      	adds	r3, #72	@ 0x48
 8005f9a:	443b      	add	r3, r7
 8005f9c:	3b30      	subs	r3, #48	@ 0x30
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	4885      	ldr	r0, [pc, #532]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005faa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	3348      	adds	r3, #72	@ 0x48
 8005fb6:	443b      	add	r3, r7
 8005fb8:	3b30      	subs	r3, #48	@ 0x30
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	f021 0210 	bic.w	r2, r1, #16
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4403      	add	r3, r0
 8005fc6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005fc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	3348      	adds	r3, #72	@ 0x48
 8005fd4:	443b      	add	r3, r7
 8005fd6:	3b28      	subs	r3, #40	@ 0x28
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d021      	beq.n	8006022 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005fde:	4978      	ldr	r1, [pc, #480]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8005fe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3348      	adds	r3, #72	@ 0x48
 8005fec:	443b      	add	r3, r7
 8005fee:	3b28      	subs	r3, #40	@ 0x28
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	4870      	ldr	r0, [pc, #448]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8006000:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	3348      	adds	r3, #72	@ 0x48
 800600c:	443b      	add	r3, r7
 800600e:	3b28      	subs	r3, #40	@ 0x28
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b01      	subs	r3, #1
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4403      	add	r3, r0
 8006020:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	3348      	adds	r3, #72	@ 0x48
 800602e:	443b      	add	r3, r7
 8006030:	3b24      	subs	r3, #36	@ 0x24
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d021      	beq.n	800607c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006038:	4961      	ldr	r1, [pc, #388]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 800603a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	3348      	adds	r3, #72	@ 0x48
 8006046:	443b      	add	r3, r7
 8006048:	3b24      	subs	r3, #36	@ 0x24
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3b01      	subs	r3, #1
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	4859      	ldr	r0, [pc, #356]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 800605a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	3348      	adds	r3, #72	@ 0x48
 8006066:	443b      	add	r3, r7
 8006068:	3b24      	subs	r3, #36	@ 0x24
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3b01      	subs	r3, #1
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4403      	add	r3, r0
 800607a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6819      	ldr	r1, [r3, #0]
 8006080:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	3348      	adds	r3, #72	@ 0x48
 800608e:	443b      	add	r3, r7
 8006090:	3b34      	subs	r3, #52	@ 0x34
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4299      	cmp	r1, r3
 8006096:	d038      	beq.n	800610a <HAL_OSPIM_Config+0x2fe>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6859      	ldr	r1, [r3, #4]
 800609c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	3348      	adds	r3, #72	@ 0x48
 80060aa:	443b      	add	r3, r7
 80060ac:	3b30      	subs	r3, #48	@ 0x30
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4299      	cmp	r1, r3
 80060b2:	d02a      	beq.n	800610a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	3348      	adds	r3, #72	@ 0x48
 80060c6:	443b      	add	r3, r7
 80060c8:	3b2c      	subs	r3, #44	@ 0x2c
 80060ca:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80060cc:	4299      	cmp	r1, r3
 80060ce:	d01c      	beq.n	800610a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68d9      	ldr	r1, [r3, #12]
 80060d4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	3348      	adds	r3, #72	@ 0x48
 80060e2:	443b      	add	r3, r7
 80060e4:	3b28      	subs	r3, #40	@ 0x28
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4299      	cmp	r1, r3
 80060ea:	d00e      	beq.n	800610a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	6919      	ldr	r1, [r3, #16]
 80060f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	3348      	adds	r3, #72	@ 0x48
 80060fe:	443b      	add	r3, r7
 8006100:	3b24      	subs	r3, #36	@ 0x24
 8006102:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006104:	4299      	cmp	r1, r3
 8006106:	f040 80d3 	bne.w	80062b0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800610a:	492d      	ldr	r1, [pc, #180]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 800610c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	3348      	adds	r3, #72	@ 0x48
 800611a:	443b      	add	r3, r7
 800611c:	3b34      	subs	r3, #52	@ 0x34
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	4825      	ldr	r0, [pc, #148]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 800612a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	3348      	adds	r3, #72	@ 0x48
 8006138:	443b      	add	r3, r7
 800613a:	3b34      	subs	r3, #52	@ 0x34
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3b01      	subs	r3, #1
 8006140:	f021 0201 	bic.w	r2, r1, #1
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4403      	add	r3, r0
 8006148:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800614a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	3348      	adds	r3, #72	@ 0x48
 8006158:	443b      	add	r3, r7
 800615a:	3b30      	subs	r3, #48	@ 0x30
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01f      	beq.n	80061a2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006162:	4917      	ldr	r1, [pc, #92]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8006164:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	3348      	adds	r3, #72	@ 0x48
 8006172:	443b      	add	r3, r7
 8006174:	3b30      	subs	r3, #48	@ 0x30
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3b01      	subs	r3, #1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	480f      	ldr	r0, [pc, #60]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 8006182:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	3348      	adds	r3, #72	@ 0x48
 8006190:	443b      	add	r3, r7
 8006192:	3b30      	subs	r3, #48	@ 0x30
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	f021 0210 	bic.w	r2, r1, #16
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4403      	add	r3, r0
 80061a0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80061a2:	4907      	ldr	r1, [pc, #28]	@ (80061c0 <HAL_OSPIM_Config+0x3b4>)
 80061a4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	3348      	adds	r3, #72	@ 0x48
 80061b2:	443b      	add	r3, r7
 80061b4:	3b2c      	subs	r3, #44	@ 0x2c
 80061b6:	e005      	b.n	80061c4 <HAL_OSPIM_Config+0x3b8>
 80061b8:	a0001000 	.word	0xa0001000
 80061bc:	a0001400 	.word	0xa0001400
 80061c0:	50061c00 	.word	0x50061c00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	48a6      	ldr	r0, [pc, #664]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80061d0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	3348      	adds	r3, #72	@ 0x48
 80061de:	443b      	add	r3, r7
 80061e0:	3b2c      	subs	r3, #44	@ 0x2c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4403      	add	r3, r0
 80061ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80061f0:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3348      	adds	r3, #72	@ 0x48
 80061fe:	443b      	add	r3, r7
 8006200:	3b28      	subs	r3, #40	@ 0x28
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d023      	beq.n	8006250 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006208:	4997      	ldr	r1, [pc, #604]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800620a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	3348      	adds	r3, #72	@ 0x48
 8006218:	443b      	add	r3, r7
 800621a:	3b28      	subs	r3, #40	@ 0x28
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	6859      	ldr	r1, [r3, #4]
 800622a:	488f      	ldr	r0, [pc, #572]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800622c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	3348      	adds	r3, #72	@ 0x48
 800623a:	443b      	add	r3, r7
 800623c:	3b28      	subs	r3, #40	@ 0x28
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4403      	add	r3, r0
 800624e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006250:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3348      	adds	r3, #72	@ 0x48
 800625e:	443b      	add	r3, r7
 8006260:	3b24      	subs	r3, #36	@ 0x24
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d023      	beq.n	80062b0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006268:	497f      	ldr	r1, [pc, #508]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800626a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	3348      	adds	r3, #72	@ 0x48
 8006278:	443b      	add	r3, r7
 800627a:	3b24      	subs	r3, #36	@ 0x24
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	3b01      	subs	r3, #1
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	440b      	add	r3, r1
 8006288:	6859      	ldr	r1, [r3, #4]
 800628a:	4877      	ldr	r0, [pc, #476]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800628c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	3348      	adds	r3, #72	@ 0x48
 800629a:	443b      	add	r3, r7
 800629c:	3b24      	subs	r3, #36	@ 0x24
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4403      	add	r3, r0
 80062ae:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80062b0:	4a6d      	ldr	r2, [pc, #436]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c4:	025b      	lsls	r3, r3, #9
 80062c6:	431a      	orrs	r2, r3
 80062c8:	4967      	ldr	r1, [pc, #412]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80062da:	4a63      	ldr	r2, [pc, #396]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f023 0203 	bic.w	r2, r3, #3
 80062ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	495d      	ldr	r1, [pc, #372]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d014      	beq.n	8006336 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800630c:	4a56      	ldr	r2, [pc, #344]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800631e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006320:	015b      	lsls	r3, r3, #5
 8006322:	431a      	orrs	r2, r3
 8006324:	4950      	ldr	r1, [pc, #320]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	3b01      	subs	r3, #1
 800632c:	f042 0210 	orr.w	r2, r2, #16
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d019      	beq.n	8006376 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006342:	4a49      	ldr	r2, [pc, #292]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	3b01      	subs	r3, #1
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635a:	049b      	lsls	r3, r3, #18
 800635c:	431a      	orrs	r2, r3
 800635e:	4942      	ldr	r1, [pc, #264]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	3b01      	subs	r3, #1
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	e01c      	b.n	80063b0 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d018      	beq.n	80063b0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800637e:	4a3a      	ldr	r2, [pc, #232]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	3b01      	subs	r3, #1
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006396:	069b      	lsls	r3, r3, #26
 8006398:	431a      	orrs	r2, r3
 800639a:	4933      	ldr	r1, [pc, #204]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d019      	beq.n	80063f0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80063bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80063d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d4:	049b      	lsls	r3, r3, #18
 80063d6:	431a      	orrs	r2, r3
 80063d8:	4923      	ldr	r1, [pc, #140]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	3b01      	subs	r3, #1
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e01c      	b.n	800642a <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d018      	beq.n	800642a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80063f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	3b01      	subs	r3, #1
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4413      	add	r3, r2
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800640e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006410:	069b      	lsls	r3, r3, #26
 8006412:	431a      	orrs	r2, r3
 8006414:	4914      	ldr	r1, [pc, #80]	@ (8006468 <HAL_OSPIM_Config+0x65c>)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	3b01      	subs	r3, #1
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800642a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <HAL_OSPIM_Config+0x660>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a0c      	ldr	r2, [pc, #48]	@ (800646c <HAL_OSPIM_Config+0x660>)
 800643c:	f043 0301 	orr.w	r3, r3, #1
 8006440:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006442:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800644e:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <HAL_OSPIM_Config+0x664>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a07      	ldr	r2, [pc, #28]	@ (8006470 <HAL_OSPIM_Config+0x664>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800645a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800645e:	4618      	mov	r0, r3
 8006460:	3748      	adds	r7, #72	@ 0x48
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	50061c00 	.word	0x50061c00
 800646c:	a0001000 	.word	0xa0001000
 8006470:	a0001400 	.word	0xa0001400

08006474 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006484:	e01a      	b.n	80064bc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648c:	d016      	beq.n	80064bc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648e:	f7fd fe7d 	bl	800418c <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	429a      	cmp	r2, r3
 800649c:	d302      	bcc.n	80064a4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064b0:	f043 0201 	orr.w	r2, r3, #1
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e00e      	b.n	80064da <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf14      	ite	ne
 80064ca:	2301      	movne	r3, #1
 80064cc:	2300      	moveq	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d1d6      	bne.n	8006486 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	6039      	str	r1, [r7, #0]
 80064ee:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <OSPIM_GetConfig+0x26>
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d802      	bhi.n	800650a <OSPIM_GetConfig+0x26>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
 800650e:	e08e      	b.n	800662e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2200      	movs	r2, #0
 8006526:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d101      	bne.n	8006538 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006534:	4b41      	ldr	r3, [pc, #260]	@ (800663c <OSPIM_GetConfig+0x158>)
 8006536:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e074      	b.n	8006628 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800653e:	4a40      	ldr	r2, [pc, #256]	@ (8006640 <OSPIM_GetConfig+0x15c>)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4053      	eors	r3, r2
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4053      	eors	r3, r2
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4053      	eors	r3, r2
 800659a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d018      	beq.n	80065e6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4053      	eors	r3, r2
 80065ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d111      	bne.n	80065e6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d106      	bne.n	80065da <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	60da      	str	r2, [r3, #12]
 80065d8:	e005      	b.n	80065e6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d018      	beq.n	8006622 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4053      	eors	r3, r2
 80065f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d111      	bne.n	8006622 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	611a      	str	r2, [r3, #16]
 8006614:	e005      	b.n	8006622 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3301      	adds	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d987      	bls.n	800653e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	04040222 	.word	0x04040222
 8006640:	50061c00 	.word	0x50061c00

08006644 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a04      	ldr	r2, [pc, #16]	@ (8006660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006652:	6013      	str	r3, [r2, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40007000 	.word	0x40007000

08006664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006668:	4b0d      	ldr	r3, [pc, #52]	@ (80066a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006674:	d102      	bne.n	800667c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800667a:	e00b      	b.n	8006694 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800667c:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800667e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800668a:	d102      	bne.n	8006692 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800668c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006690:	e000      	b.n	8006694 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8006692:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8006694:	4618      	mov	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40007000 	.word	0x40007000

080066a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d141      	bne.n	8006736 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066b2:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d131      	bne.n	8006724 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066c0:	4b47      	ldr	r3, [pc, #284]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c6:	4a46      	ldr	r2, [pc, #280]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066d0:	4b43      	ldr	r3, [pc, #268]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066d8:	4a41      	ldr	r2, [pc, #260]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80066e0:	4b40      	ldr	r3, [pc, #256]	@ (80067e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2232      	movs	r2, #50	@ 0x32
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	4a3f      	ldr	r2, [pc, #252]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066ec:	fba2 2303 	umull	r2, r3, r2, r3
 80066f0:	0c9b      	lsrs	r3, r3, #18
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066f6:	e002      	b.n	80066fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066fe:	4b38      	ldr	r3, [pc, #224]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800670a:	d102      	bne.n	8006712 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f2      	bne.n	80066f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006712:	4b33      	ldr	r3, [pc, #204]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800671e:	d158      	bne.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e057      	b.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006724:	4b2e      	ldr	r3, [pc, #184]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672a:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800672c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006734:	e04d      	b.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800673c:	d141      	bne.n	80067c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800673e:	4b28      	ldr	r3, [pc, #160]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674a:	d131      	bne.n	80067b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800674c:	4b24      	ldr	r3, [pc, #144]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006752:	4a23      	ldr	r2, [pc, #140]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006758:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800675c:	4b20      	ldr	r3, [pc, #128]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006764:	4a1e      	ldr	r2, [pc, #120]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800676a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800676c:	4b1d      	ldr	r3, [pc, #116]	@ (80067e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2232      	movs	r2, #50	@ 0x32
 8006772:	fb02 f303 	mul.w	r3, r2, r3
 8006776:	4a1c      	ldr	r2, [pc, #112]	@ (80067e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	0c9b      	lsrs	r3, r3, #18
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006782:	e002      	b.n	800678a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b01      	subs	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800678a:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006796:	d102      	bne.n	800679e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f2      	bne.n	8006784 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800679e:	4b10      	ldr	r3, [pc, #64]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067aa:	d112      	bne.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e011      	b.n	80067d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b6:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067c0:	e007      	b.n	80067d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80067c2:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067ca:	4a05      	ldr	r2, [pc, #20]	@ (80067e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80067d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40007000 	.word	0x40007000
 80067e4:	20000000 	.word	0x20000000
 80067e8:	431bde83 	.word	0x431bde83

080067ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f000 bc08 	b.w	8007010 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006800:	4b96      	ldr	r3, [pc, #600]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 030c 	and.w	r3, r3, #12
 8006808:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800680a:	4b94      	ldr	r3, [pc, #592]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80e4 	beq.w	80069ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <HAL_RCC_OscConfig+0x4c>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b0c      	cmp	r3, #12
 800682c:	f040 808b 	bne.w	8006946 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	f040 8087 	bne.w	8006946 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006838:	4b88      	ldr	r3, [pc, #544]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x64>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e3df      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	4b81      	ldr	r3, [pc, #516]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_RCC_OscConfig+0x7e>
 8006860:	4b7e      	ldr	r3, [pc, #504]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006868:	e005      	b.n	8006876 <HAL_RCC_OscConfig+0x8a>
 800686a:	4b7c      	ldr	r3, [pc, #496]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006876:	4293      	cmp	r3, r2
 8006878:	d223      	bcs.n	80068c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fdcc 	bl	800741c <RCC_SetFlashLatencyFromMSIRange>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e3c0      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800688e:	4b73      	ldr	r3, [pc, #460]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a72      	ldr	r2, [pc, #456]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006894:	f043 0308 	orr.w	r3, r3, #8
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b70      	ldr	r3, [pc, #448]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	496d      	ldr	r1, [pc, #436]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ac:	4b6b      	ldr	r3, [pc, #428]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	4968      	ldr	r1, [pc, #416]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	604b      	str	r3, [r1, #4]
 80068c0:	e025      	b.n	800690e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068c2:	4b66      	ldr	r3, [pc, #408]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a65      	ldr	r2, [pc, #404]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068c8:	f043 0308 	orr.w	r3, r3, #8
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	4b63      	ldr	r3, [pc, #396]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	4960      	ldr	r1, [pc, #384]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068e0:	4b5e      	ldr	r3, [pc, #376]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	495b      	ldr	r1, [pc, #364]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fd8c 	bl	800741c <RCC_SetFlashLatencyFromMSIRange>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e380      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800690e:	f000 fcc1 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b51      	ldr	r3, [pc, #324]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	4950      	ldr	r1, [pc, #320]	@ (8006a60 <HAL_RCC_OscConfig+0x274>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	4a4e      	ldr	r2, [pc, #312]	@ (8006a64 <HAL_RCC_OscConfig+0x278>)
 800692c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800692e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a68 <HAL_RCC_OscConfig+0x27c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fbda 	bl	80040ec <HAL_InitTick>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d052      	beq.n	80069e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	e364      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d032      	beq.n	80069b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800694e:	4b43      	ldr	r3, [pc, #268]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a42      	ldr	r2, [pc, #264]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800695a:	f7fd fc17 	bl	800418c <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006962:	f7fd fc13 	bl	800418c <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e34d      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006974:	4b39      	ldr	r3, [pc, #228]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006980:	4b36      	ldr	r3, [pc, #216]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a35      	ldr	r2, [pc, #212]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	4b33      	ldr	r3, [pc, #204]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	4930      	ldr	r1, [pc, #192]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 800699a:	4313      	orrs	r3, r2
 800699c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800699e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	492b      	ldr	r1, [pc, #172]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	604b      	str	r3, [r1, #4]
 80069b2:	e01a      	b.n	80069ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069b4:	4b29      	ldr	r3, [pc, #164]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a28      	ldr	r2, [pc, #160]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069c0:	f7fd fbe4 	bl	800418c <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069c8:	f7fd fbe0 	bl	800418c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e31a      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80069da:	4b20      	ldr	r3, [pc, #128]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x1dc>
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d073      	beq.n	8006ade <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_OscConfig+0x21c>
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b0c      	cmp	r3, #12
 8006a00:	d10e      	bne.n	8006a20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d10b      	bne.n	8006a20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a08:	4b14      	ldr	r3, [pc, #80]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d063      	beq.n	8006adc <HAL_RCC_OscConfig+0x2f0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d15f      	bne.n	8006adc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e2f7      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a28:	d106      	bne.n	8006a38 <HAL_RCC_OscConfig+0x24c>
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e025      	b.n	8006a84 <HAL_RCC_OscConfig+0x298>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a40:	d114      	bne.n	8006a6c <HAL_RCC_OscConfig+0x280>
 8006a42:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a05      	ldr	r2, [pc, #20]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b03      	ldr	r3, [pc, #12]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a02      	ldr	r2, [pc, #8]	@ (8006a5c <HAL_RCC_OscConfig+0x270>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e013      	b.n	8006a84 <HAL_RCC_OscConfig+0x298>
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	0800fac4 	.word	0x0800fac4
 8006a64:	20000000 	.word	0x20000000
 8006a68:	20000004 	.word	0x20000004
 8006a6c:	4ba0      	ldr	r3, [pc, #640]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a9f      	ldr	r2, [pc, #636]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b9d      	ldr	r3, [pc, #628]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a9c      	ldr	r2, [pc, #624]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fd fb7e 	bl	800418c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fd fb7a 	bl	800418c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	@ 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e2b4      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa6:	4b92      	ldr	r3, [pc, #584]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x2a8>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fd fb6a 	bl	800418c <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fd fb66 	bl	800418c <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	@ 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e2a0      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ace:	4b88      	ldr	r3, [pc, #544]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0x2d0>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d060      	beq.n	8006bac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_OscConfig+0x310>
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d119      	bne.n	8006b2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d116      	bne.n	8006b2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006afc:	4b7c      	ldr	r3, [pc, #496]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_OscConfig+0x328>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e27d      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	4b76      	ldr	r3, [pc, #472]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	4973      	ldr	r1, [pc, #460]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b28:	e040      	b.n	8006bac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d023      	beq.n	8006b7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b32:	4b6f      	ldr	r3, [pc, #444]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3e:	f7fd fb25 	bl	800418c <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b44:	e008      	b.n	8006b58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b46:	f7fd fb21 	bl	800418c <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e25b      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b58:	4b65      	ldr	r3, [pc, #404]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0f0      	beq.n	8006b46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b64:	4b62      	ldr	r3, [pc, #392]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	061b      	lsls	r3, r3, #24
 8006b72:	495f      	ldr	r1, [pc, #380]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	e018      	b.n	8006bac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fd fb01 	bl	800418c <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fd fafd 	bl	800418c <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e237      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ba0:	4b53      	ldr	r3, [pc, #332]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1f0      	bne.n	8006b8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d03c      	beq.n	8006c32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01c      	beq.n	8006bfa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fd fadc 	bl	800418c <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fd fad8 	bl	800418c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e212      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bea:	4b41      	ldr	r3, [pc, #260]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x3ec>
 8006bf8:	e01b      	b.n	8006c32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c00:	4a3b      	ldr	r2, [pc, #236]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fd fabf 	bl	800418c <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c12:	f7fd fabb 	bl	800418c <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e1f5      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c24:	4b32      	ldr	r3, [pc, #200]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1ef      	bne.n	8006c12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80a6 	beq.w	8006d8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c40:	2300      	movs	r3, #0
 8006c42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c44:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10d      	bne.n	8006c6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c54:	4a26      	ldr	r2, [pc, #152]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c5c:	4b24      	ldr	r3, [pc, #144]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c6c:	4b21      	ldr	r3, [pc, #132]	@ (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d118      	bne.n	8006caa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c78:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c84:	f7fd fa82 	bl	800418c <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c8c:	f7fd fa7e 	bl	800418c <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e1b8      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c9e:	4b15      	ldr	r3, [pc, #84]	@ (8006cf4 <HAL_RCC_OscConfig+0x508>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x4d8>
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cc2:	e029      	b.n	8006d18 <HAL_RCC_OscConfig+0x52c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	2b05      	cmp	r3, #5
 8006cca:	d115      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x50c>
 8006ccc:	4b08      	ldr	r3, [pc, #32]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd2:	4a07      	ldr	r2, [pc, #28]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cd4:	f043 0304 	orr.w	r3, r3, #4
 8006cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce2:	4a03      	ldr	r2, [pc, #12]	@ (8006cf0 <HAL_RCC_OscConfig+0x504>)
 8006ce4:	f043 0301 	orr.w	r3, r3, #1
 8006ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006cec:	e014      	b.n	8006d18 <HAL_RCC_OscConfig+0x52c>
 8006cee:	bf00      	nop
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	40007000 	.word	0x40007000
 8006cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfe:	4a9c      	ldr	r2, [pc, #624]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d08:	4b99      	ldr	r3, [pc, #612]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0e:	4a98      	ldr	r2, [pc, #608]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d10:	f023 0304 	bic.w	r3, r3, #4
 8006d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d016      	beq.n	8006d4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fd fa34 	bl	800418c <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d26:	e00a      	b.n	8006d3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d28:	f7fd fa30 	bl	800418c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e168      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3e:	4b8c      	ldr	r3, [pc, #560]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0ed      	beq.n	8006d28 <HAL_RCC_OscConfig+0x53c>
 8006d4c:	e015      	b.n	8006d7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d4e:	f7fd fa1d 	bl	800418c <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d56:	f7fd fa19 	bl	800418c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e151      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d6c:	4b80      	ldr	r3, [pc, #512]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ed      	bne.n	8006d56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d7a:	7ffb      	ldrb	r3, [r7, #31]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d105      	bne.n	8006d8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d80:	4b7b      	ldr	r3, [pc, #492]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d84:	4a7a      	ldr	r2, [pc, #488]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d03c      	beq.n	8006e12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01c      	beq.n	8006dda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006da0:	4b73      	ldr	r3, [pc, #460]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006da6:	4a72      	ldr	r2, [pc, #456]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006db0:	f7fd f9ec 	bl	800418c <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006db8:	f7fd f9e8 	bl	800418c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e122      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dca:	4b69      	ldr	r3, [pc, #420]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0ef      	beq.n	8006db8 <HAL_RCC_OscConfig+0x5cc>
 8006dd8:	e01b      	b.n	8006e12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dda:	4b65      	ldr	r3, [pc, #404]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006de0:	4a63      	ldr	r2, [pc, #396]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dea:	f7fd f9cf 	bl	800418c <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df2:	f7fd f9cb 	bl	800418c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e105      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e04:	4b5a      	ldr	r3, [pc, #360]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ef      	bne.n	8006df2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80f9 	beq.w	800700e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	f040 80cf 	bne.w	8006fc4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e26:	4b52      	ldr	r3, [pc, #328]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f003 0203 	and.w	r2, r3, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d12c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	3b01      	subs	r3, #1
 8006e46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d123      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d11b      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d113      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d109      	bne.n	8006e94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d071      	beq.n	8006f78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b0c      	cmp	r3, #12
 8006e98:	d068      	beq.n	8006f6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006e9a:	4b35      	ldr	r3, [pc, #212]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d105      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ea6:	4b32      	ldr	r3, [pc, #200]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0ac      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2d      	ldr	r2, [pc, #180]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ec0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ec2:	f7fd f963 	bl	800418c <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eca:	f7fd f95f 	bl	800418c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e099      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006edc:	4b24      	ldr	r3, [pc, #144]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ee8:	4b21      	ldr	r3, [pc, #132]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	4b21      	ldr	r3, [pc, #132]	@ (8006f74 <HAL_RCC_OscConfig+0x788>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ef8:	3a01      	subs	r2, #1
 8006efa:	0112      	lsls	r2, r2, #4
 8006efc:	4311      	orrs	r1, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f02:	0212      	lsls	r2, r2, #8
 8006f04:	4311      	orrs	r1, r2
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f0a:	0852      	lsrs	r2, r2, #1
 8006f0c:	3a01      	subs	r2, #1
 8006f0e:	0552      	lsls	r2, r2, #21
 8006f10:	4311      	orrs	r1, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f16:	0852      	lsrs	r2, r2, #1
 8006f18:	3a01      	subs	r2, #1
 8006f1a:	0652      	lsls	r2, r2, #25
 8006f1c:	4311      	orrs	r1, r2
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f22:	06d2      	lsls	r2, r2, #27
 8006f24:	430a      	orrs	r2, r1
 8006f26:	4912      	ldr	r1, [pc, #72]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f2c:	4b10      	ldr	r3, [pc, #64]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0f      	ldr	r2, [pc, #60]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f38:	4b0d      	ldr	r3, [pc, #52]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f44:	f7fd f922 	bl	800418c <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f4c:	f7fd f91e 	bl	800418c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e058      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f5e:	4b04      	ldr	r3, [pc, #16]	@ (8006f70 <HAL_RCC_OscConfig+0x784>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f6a:	e050      	b.n	800700e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e04f      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
 8006f70:	40021000 	.word	0x40021000
 8006f74:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f78:	4b27      	ldr	r3, [pc, #156]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d144      	bne.n	800700e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f84:	4b24      	ldr	r3, [pc, #144]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a23      	ldr	r2, [pc, #140]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f90:	4b21      	ldr	r3, [pc, #132]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4a20      	ldr	r2, [pc, #128]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f9c:	f7fd f8f6 	bl	800418c <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa4:	f7fd f8f2 	bl	800418c <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e02c      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb6:	4b18      	ldr	r3, [pc, #96]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x7b8>
 8006fc2:	e024      	b.n	800700e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b0c      	cmp	r3, #12
 8006fc8:	d01f      	beq.n	800700a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fca:	4b13      	ldr	r3, [pc, #76]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a12      	ldr	r2, [pc, #72]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd6:	f7fd f8d9 	bl	800418c <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fd f8d5 	bl	800418c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e00f      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ff0:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ffc:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	4905      	ldr	r1, [pc, #20]	@ (8007018 <HAL_RCC_OscConfig+0x82c>)
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_RCC_OscConfig+0x830>)
 8007004:	4013      	ands	r3, r2
 8007006:	60cb      	str	r3, [r1, #12]
 8007008:	e001      	b.n	800700e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40021000 	.word	0x40021000
 800701c:	feeefffc 	.word	0xfeeefffc

08007020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e11d      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007038:	4b90      	ldr	r3, [pc, #576]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d910      	bls.n	8007068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b8d      	ldr	r3, [pc, #564]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 020f 	bic.w	r2, r3, #15
 800704e:	498b      	ldr	r1, [pc, #556]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b89      	ldr	r3, [pc, #548]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e105      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d010      	beq.n	8007096 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	4b81      	ldr	r3, [pc, #516]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007080:	429a      	cmp	r2, r3
 8007082:	d908      	bls.n	8007096 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b7e      	ldr	r3, [pc, #504]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	497b      	ldr	r1, [pc, #492]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d079      	beq.n	8007196 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d11e      	bne.n	80070e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070aa:	4b75      	ldr	r3, [pc, #468]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e0dc      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80070ba:	f000 fa09 	bl	80074d0 <RCC_GetSysClockFreqFromPLLSource>
 80070be:	4603      	mov	r3, r0
 80070c0:	4a70      	ldr	r2, [pc, #448]	@ (8007284 <HAL_RCC_ClockConfig+0x264>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d946      	bls.n	8007154 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80070c6:	4b6e      	ldr	r3, [pc, #440]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d140      	bne.n	8007154 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070d2:	4b6b      	ldr	r3, [pc, #428]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070da:	4a69      	ldr	r2, [pc, #420]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e035      	b.n	8007154 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d107      	bne.n	8007100 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f0:	4b63      	ldr	r3, [pc, #396]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d115      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0b9      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d107      	bne.n	8007118 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007108:	4b5d      	ldr	r3, [pc, #372]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d109      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e0ad      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007118:	4b59      	ldr	r3, [pc, #356]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0a5      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007128:	f000 f8b4 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 800712c:	4603      	mov	r3, r0
 800712e:	4a55      	ldr	r2, [pc, #340]	@ (8007284 <HAL_RCC_ClockConfig+0x264>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d90f      	bls.n	8007154 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007134:	4b52      	ldr	r3, [pc, #328]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007140:	4b4f      	ldr	r3, [pc, #316]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007148:	4a4d      	ldr	r2, [pc, #308]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800714a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007150:	2380      	movs	r3, #128	@ 0x80
 8007152:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007154:	4b4a      	ldr	r3, [pc, #296]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f023 0203 	bic.w	r2, r3, #3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4947      	ldr	r1, [pc, #284]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007162:	4313      	orrs	r3, r2
 8007164:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007166:	f7fd f811 	bl	800418c <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716c:	e00a      	b.n	8007184 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716e:	f7fd f80d 	bl	800418c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e077      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007184:	4b3e      	ldr	r3, [pc, #248]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 020c 	and.w	r2, r3, #12
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	429a      	cmp	r2, r3
 8007194:	d1eb      	bne.n	800716e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b80      	cmp	r3, #128	@ 0x80
 800719a:	d105      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800719c:	4b38      	ldr	r3, [pc, #224]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4a37      	ldr	r2, [pc, #220]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d010      	beq.n	80071d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	4b31      	ldr	r3, [pc, #196]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d208      	bcs.n	80071d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	492b      	ldr	r1, [pc, #172]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071d6:	4b29      	ldr	r3, [pc, #164]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d210      	bcs.n	8007206 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e4:	4b25      	ldr	r3, [pc, #148]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f023 020f 	bic.w	r2, r3, #15
 80071ec:	4923      	ldr	r1, [pc, #140]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071f4:	4b21      	ldr	r3, [pc, #132]	@ (800727c <HAL_RCC_ClockConfig+0x25c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d001      	beq.n	8007206 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e036      	b.n	8007274 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d008      	beq.n	8007224 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007212:	4b1b      	ldr	r3, [pc, #108]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	4918      	ldr	r1, [pc, #96]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007220:	4313      	orrs	r3, r2
 8007222:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d009      	beq.n	8007244 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007230:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	4910      	ldr	r1, [pc, #64]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 8007240:	4313      	orrs	r3, r2
 8007242:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007244:	f000 f826 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8007248:	4602      	mov	r2, r0
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <HAL_RCC_ClockConfig+0x260>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	490c      	ldr	r1, [pc, #48]	@ (8007288 <HAL_RCC_ClockConfig+0x268>)
 8007256:	5ccb      	ldrb	r3, [r1, r3]
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	4a0a      	ldr	r2, [pc, #40]	@ (800728c <HAL_RCC_ClockConfig+0x26c>)
 8007262:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007264:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <HAL_RCC_ClockConfig+0x270>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4618      	mov	r0, r3
 800726a:	f7fc ff3f 	bl	80040ec <HAL_InitTick>
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]

  return status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40022000 	.word	0x40022000
 8007280:	40021000 	.word	0x40021000
 8007284:	04c4b400 	.word	0x04c4b400
 8007288:	0800fac4 	.word	0x0800fac4
 800728c:	20000000 	.word	0x20000000
 8007290:	20000004 	.word	0x20000004

08007294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007294:	b480      	push	{r7}
 8007296:	b089      	sub	sp, #36	@ 0x24
 8007298:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a2:	4b3e      	ldr	r3, [pc, #248]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
 80072aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072ac:	4b3b      	ldr	r3, [pc, #236]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_GetSysClockFreq+0x34>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b0c      	cmp	r3, #12
 80072c0:	d121      	bne.n	8007306 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d11e      	bne.n	8007306 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80072c8:	4b34      	ldr	r3, [pc, #208]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80072d4:	4b31      	ldr	r3, [pc, #196]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	e005      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072e4:	4b2d      	ldr	r3, [pc, #180]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 030f 	and.w	r3, r3, #15
 80072ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072f0:	4a2b      	ldr	r2, [pc, #172]	@ (80073a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007304:	e00a      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d102      	bne.n	8007312 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800730c:	4b25      	ldr	r3, [pc, #148]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	e004      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d101      	bne.n	800731c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007318:	4b23      	ldr	r3, [pc, #140]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800731a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d134      	bne.n	800738c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b1e      	ldr	r3, [pc, #120]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b02      	cmp	r3, #2
 8007330:	d003      	beq.n	800733a <HAL_RCC_GetSysClockFreq+0xa6>
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d003      	beq.n	8007340 <HAL_RCC_GetSysClockFreq+0xac>
 8007338:	e005      	b.n	8007346 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800733a:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800733c:	617b      	str	r3, [r7, #20]
      break;
 800733e:	e005      	b.n	800734c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007340:	4b19      	ldr	r3, [pc, #100]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007342:	617b      	str	r3, [r7, #20]
      break;
 8007344:	e002      	b.n	800734c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	617b      	str	r3, [r7, #20]
      break;
 800734a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800734c:	4b13      	ldr	r3, [pc, #76]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	091b      	lsrs	r3, r3, #4
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	3301      	adds	r3, #1
 8007358:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800735a:	4b10      	ldr	r3, [pc, #64]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	0a1b      	lsrs	r3, r3, #8
 8007360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	fb03 f202 	mul.w	r2, r3, r2
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <HAL_RCC_GetSysClockFreq+0x108>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	0e5b      	lsrs	r3, r3, #25
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	3301      	adds	r3, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800738c:	69bb      	ldr	r3, [r7, #24]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3724      	adds	r7, #36	@ 0x24
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40021000 	.word	0x40021000
 80073a0:	0800fadc 	.word	0x0800fadc
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	007a1200 	.word	0x007a1200

080073ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b0:	4b03      	ldr	r3, [pc, #12]	@ (80073c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000000 	.word	0x20000000

080073c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073c8:	f7ff fff0 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b06      	ldr	r3, [pc, #24]	@ (80073e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	4904      	ldr	r1, [pc, #16]	@ (80073ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80073da:	5ccb      	ldrb	r3, [r1, r3]
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40021000 	.word	0x40021000
 80073ec:	0800fad4 	.word	0x0800fad4

080073f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073f4:	f7ff ffda 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b06      	ldr	r3, [pc, #24]	@ (8007414 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	0adb      	lsrs	r3, r3, #11
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	4904      	ldr	r1, [pc, #16]	@ (8007418 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007406:	5ccb      	ldrb	r3, [r1, r3]
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40021000 	.word	0x40021000
 8007418:	0800fad4 	.word	0x0800fad4

0800741c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007424:	2300      	movs	r3, #0
 8007426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007428:	4b27      	ldr	r3, [pc, #156]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007434:	f7ff f916 	bl	8006664 <HAL_PWREx_GetVoltageRange>
 8007438:	6178      	str	r0, [r7, #20]
 800743a:	e014      	b.n	8007466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800743c:	4b22      	ldr	r3, [pc, #136]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800743e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007440:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007446:	6593      	str	r3, [r2, #88]	@ 0x58
 8007448:	4b1f      	ldr	r3, [pc, #124]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800744a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007454:	f7ff f906 	bl	8006664 <HAL_PWREx_GetVoltageRange>
 8007458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800745a:	4b1b      	ldr	r3, [pc, #108]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745e:	4a1a      	ldr	r2, [pc, #104]	@ (80074c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007464:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800746c:	d10b      	bne.n	8007486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b80      	cmp	r3, #128	@ 0x80
 8007472:	d913      	bls.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2ba0      	cmp	r3, #160	@ 0xa0
 8007478:	d902      	bls.n	8007480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800747a:	2302      	movs	r3, #2
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	e00d      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007480:	2301      	movs	r3, #1
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	e00a      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b7f      	cmp	r3, #127	@ 0x7f
 800748a:	d902      	bls.n	8007492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800748c:	2302      	movs	r3, #2
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	e004      	b.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b70      	cmp	r3, #112	@ 0x70
 8007496:	d101      	bne.n	800749c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007498:	2301      	movs	r3, #1
 800749a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800749c:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f023 020f 	bic.w	r2, r3, #15
 80074a4:	4909      	ldr	r1, [pc, #36]	@ (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074ac:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d001      	beq.n	80074be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40022000 	.word	0x40022000

080074d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074d6:	4b2d      	ldr	r3, [pc, #180]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d00b      	beq.n	80074fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d825      	bhi.n	8007538 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d008      	beq.n	8007504 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d11f      	bne.n	8007538 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80074f8:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80074fa:	613b      	str	r3, [r7, #16]
    break;
 80074fc:	e01f      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80074fe:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007500:	613b      	str	r3, [r7, #16]
    break;
 8007502:	e01c      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007504:	4b21      	ldr	r3, [pc, #132]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007510:	4b1e      	ldr	r3, [pc, #120]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007512:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	e005      	b.n	800752c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007520:	4b1a      	ldr	r3, [pc, #104]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800752c:	4a1a      	ldr	r2, [pc, #104]	@ (8007598 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007534:	613b      	str	r3, [r7, #16]
    break;
 8007536:	e002      	b.n	800753e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]
    break;
 800753c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800753e:	4b13      	ldr	r3, [pc, #76]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	3301      	adds	r3, #1
 800754a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800754c:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	fb03 f202 	mul.w	r2, r3, r2
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007564:	4b09      	ldr	r3, [pc, #36]	@ (800758c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	0e5b      	lsrs	r3, r3, #25
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	3301      	adds	r3, #1
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800757e:	683b      	ldr	r3, [r7, #0]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40021000 	.word	0x40021000
 8007590:	00f42400 	.word	0x00f42400
 8007594:	007a1200 	.word	0x007a1200
 8007598:	0800fadc 	.word	0x0800fadc

0800759c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075a4:	2300      	movs	r3, #0
 80075a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075a8:	2300      	movs	r3, #0
 80075aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d040      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075bc:	2b80      	cmp	r3, #128	@ 0x80
 80075be:	d02a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d825      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075c4:	2b60      	cmp	r3, #96	@ 0x60
 80075c6:	d026      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80075c8:	2b60      	cmp	r3, #96	@ 0x60
 80075ca:	d821      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075cc:	2b40      	cmp	r3, #64	@ 0x40
 80075ce:	d006      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x42>
 80075d0:	2b40      	cmp	r3, #64	@ 0x40
 80075d2:	d81d      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d009      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x50>
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d010      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x62>
 80075dc:	e018      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075de:	4b89      	ldr	r3, [pc, #548]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	4a88      	ldr	r2, [pc, #544]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075ea:	e015      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fb12 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80075fc:	e00c      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3320      	adds	r3, #32
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fbfd 	bl	8007e04 <RCCEx_PLLSAI2_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800760e:	e003      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	74fb      	strb	r3, [r7, #19]
      break;
 8007614:	e000      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800761e:	4b79      	ldr	r3, [pc, #484]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007620:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007624:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762c:	4975      	ldr	r1, [pc, #468]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8007634:	e001      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007636:	7cfb      	ldrb	r3, [r7, #19]
 8007638:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d047      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764e:	d030      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007654:	d82a      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800765a:	d02a      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800765c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007660:	d824      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007666:	d008      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766c:	d81e      	bhi.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007676:	d010      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007678:	e018      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800767a:	4b62      	ldr	r3, [pc, #392]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4a61      	ldr	r2, [pc, #388]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007684:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007686:	e015      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fac4 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007698:	e00c      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3320      	adds	r3, #32
 800769e:	2100      	movs	r1, #0
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fbaf 	bl	8007e04 <RCCEx_PLLSAI2_Config>
 80076a6:	4603      	mov	r3, r0
 80076a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80076aa:	e003      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	74fb      	strb	r3, [r7, #19]
      break;
 80076b0:	e000      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80076b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076ba:	4b52      	ldr	r3, [pc, #328]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c8:	494e      	ldr	r1, [pc, #312]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80076d0:	e001      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	7cfb      	ldrb	r3, [r7, #19]
 80076d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 809f 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076e4:	2300      	movs	r3, #0
 80076e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076e8:	4b46      	ldr	r3, [pc, #280]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80076f4:	2301      	movs	r3, #1
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80076f8:	2300      	movs	r3, #0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	4b41      	ldr	r3, [pc, #260]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	4a40      	ldr	r2, [pc, #256]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007708:	6593      	str	r3, [r2, #88]	@ 0x58
 800770a:	4b3e      	ldr	r3, [pc, #248]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007712:	60bb      	str	r3, [r7, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007716:	2301      	movs	r3, #1
 8007718:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800771a:	4b3b      	ldr	r3, [pc, #236]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a3a      	ldr	r2, [pc, #232]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007724:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007726:	f7fc fd31 	bl	800418c <HAL_GetTick>
 800772a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800772c:	e009      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800772e:	f7fc fd2d 	bl	800418c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d902      	bls.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	74fb      	strb	r3, [r7, #19]
        break;
 8007740:	e005      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007742:	4b31      	ldr	r3, [pc, #196]	@ (8007808 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ef      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800774e:	7cfb      	ldrb	r3, [r7, #19]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d15b      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007754:	4b2b      	ldr	r3, [pc, #172]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01f      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d019      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007772:	4b24      	ldr	r3, [pc, #144]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800777e:	4b21      	ldr	r3, [pc, #132]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007784:	4a1f      	ldr	r2, [pc, #124]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800778a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800778e:	4b1d      	ldr	r3, [pc, #116]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007794:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800779e:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d016      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b0:	f7fc fcec 	bl	800418c <HAL_GetTick>
 80077b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077b6:	e00b      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b8:	f7fc fce8 	bl	800418c <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d902      	bls.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	74fb      	strb	r3, [r7, #19]
            break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ec      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077e4:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f4:	4903      	ldr	r1, [pc, #12]	@ (8007804 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80077fc:	e008      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	74bb      	strb	r3, [r7, #18]
 8007802:	e005      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007804:	40021000 	.word	0x40021000
 8007808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007810:	7c7b      	ldrb	r3, [r7, #17]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d105      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007816:	4ba0      	ldr	r3, [pc, #640]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781a:	4a9f      	ldr	r2, [pc, #636]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800781c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007820:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800782e:	4b9a      	ldr	r3, [pc, #616]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f023 0203 	bic.w	r2, r3, #3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783c:	4996      	ldr	r1, [pc, #600]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007850:	4b91      	ldr	r3, [pc, #580]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007856:	f023 020c 	bic.w	r2, r3, #12
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785e:	498e      	ldr	r1, [pc, #568]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00a      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007872:	4b89      	ldr	r3, [pc, #548]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007878:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007880:	4985      	ldr	r1, [pc, #532]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007894:	4b80      	ldr	r3, [pc, #512]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800789a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078a2:	497d      	ldr	r1, [pc, #500]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078b6:	4b78      	ldr	r3, [pc, #480]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078c4:	4974      	ldr	r1, [pc, #464]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80078d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e6:	496c      	ldr	r1, [pc, #432]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078fa:	4b67      	ldr	r3, [pc, #412]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007900:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007908:	4963      	ldr	r1, [pc, #396]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800791c:	4b5e      	ldr	r3, [pc, #376]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800792a:	495b      	ldr	r1, [pc, #364]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800793e:	4b56      	ldr	r3, [pc, #344]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007944:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794c:	4952      	ldr	r1, [pc, #328]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007960:	4b4d      	ldr	r3, [pc, #308]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007966:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796e:	494a      	ldr	r1, [pc, #296]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007970:	4313      	orrs	r3, r2
 8007972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007982:	4b45      	ldr	r3, [pc, #276]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007988:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007990:	4941      	ldr	r1, [pc, #260]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007992:	4313      	orrs	r3, r2
 8007994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079aa:	f023 0203 	bic.w	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079b2:	4939      	ldr	r1, [pc, #228]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d028      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079c6:	4b34      	ldr	r3, [pc, #208]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079d4:	4930      	ldr	r1, [pc, #192]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079e4:	d106      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4a2b      	ldr	r2, [pc, #172]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079f0:	60d3      	str	r3, [r2, #12]
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2101      	movs	r1, #1
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f909 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007a0e:	7cfb      	ldrb	r3, [r7, #19]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007a14:	7cfb      	ldrb	r3, [r7, #19]
 8007a16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d04d      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a2c:	d108      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a34:	4a18      	ldr	r2, [pc, #96]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a3a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007a3e:	e012      	b.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007a40:	4b15      	ldr	r3, [pc, #84]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a46:	4a14      	ldr	r2, [pc, #80]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8007a50:	4b11      	ldr	r3, [pc, #68]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a5e:	490e      	ldr	r1, [pc, #56]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a6e:	d106      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a70:	4b09      	ldr	r3, [pc, #36]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4a08      	ldr	r2, [pc, #32]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a7a:	60d3      	str	r3, [r2, #12]
 8007a7c:	e020      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a86:	d109      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a88:	4b03      	ldr	r3, [pc, #12]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	4a02      	ldr	r2, [pc, #8]	@ (8007a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a92:	60d3      	str	r3, [r2, #12]
 8007a94:	e014      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007a96:	bf00      	nop
 8007a98:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f8b5 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ab6:	7cfb      	ldrb	r3, [r7, #19]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007abc:	7cfb      	ldrb	r3, [r7, #19]
 8007abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d028      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007acc:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ada:	4947      	ldr	r1, [pc, #284]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007aea:	d106      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aec:	4b42      	ldr	r3, [pc, #264]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a41      	ldr	r2, [pc, #260]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007af6:	60d3      	str	r3, [r2, #12]
 8007af8:	e011      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007afe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3304      	adds	r3, #4
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f886 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007b1a:	7cfb      	ldrb	r3, [r7, #19]
 8007b1c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01e      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2a:	4b33      	ldr	r3, [pc, #204]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b30:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b3a:	492f      	ldr	r1, [pc, #188]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b4c:	d10c      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3304      	adds	r3, #4
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 f861 	bl	8007c1c <RCCEx_PLLSAI1_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b5e:	7cfb      	ldrb	r3, [r7, #19]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007b64:	7cfb      	ldrb	r3, [r7, #19]
 8007b66:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b74:	4b20      	ldr	r3, [pc, #128]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b7a:	f023 0204 	bic.w	r2, r3, #4
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b84:	491c      	ldr	r1, [pc, #112]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b98:	4b17      	ldr	r3, [pc, #92]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b9e:	f023 0218 	bic.w	r2, r3, #24
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba8:	4913      	ldr	r1, [pc, #76]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bcc:	490a      	ldr	r1, [pc, #40]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	4a04      	ldr	r2, [pc, #16]	@ (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007bec:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40021000 	.word	0x40021000

08007bfc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a04      	ldr	r2, [pc, #16]	@ (8007c18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007c06:	f043 0304 	orr.w	r3, r3, #4
 8007c0a:	6013      	str	r3, [r2, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40021000 	.word	0x40021000

08007c1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c2a:	4b72      	ldr	r3, [pc, #456]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00e      	beq.n	8007c54 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007c36:	4b6f      	ldr	r3, [pc, #444]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0203 	and.w	r2, r3, #3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d103      	bne.n	8007c4e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
       ||
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d142      	bne.n	8007cd4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e03f      	b.n	8007cd4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d018      	beq.n	8007c8e <RCCEx_PLLSAI1_Config+0x72>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d825      	bhi.n	8007cac <RCCEx_PLLSAI1_Config+0x90>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d002      	beq.n	8007c6a <RCCEx_PLLSAI1_Config+0x4e>
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d009      	beq.n	8007c7c <RCCEx_PLLSAI1_Config+0x60>
 8007c68:	e020      	b.n	8007cac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c6a:	4b62      	ldr	r3, [pc, #392]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11d      	bne.n	8007cb2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c7a:	e01a      	b.n	8007cb2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d116      	bne.n	8007cb6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c8c:	e013      	b.n	8007cb6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c8e:	4b59      	ldr	r3, [pc, #356]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c9a:	4b56      	ldr	r3, [pc, #344]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007caa:	e006      	b.n	8007cba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e004      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d108      	bne.n	8007cd4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 0203 	bic.w	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4949      	ldr	r1, [pc, #292]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 8086 	bne.w	8007de8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007cdc:	4b45      	ldr	r3, [pc, #276]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a44      	ldr	r2, [pc, #272]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ce2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce8:	f7fc fa50 	bl	800418c <HAL_GetTick>
 8007cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007cee:	e009      	b.n	8007d04 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cf0:	f7fc fa4c 	bl	800418c <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d902      	bls.n	8007d04 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	73fb      	strb	r3, [r7, #15]
        break;
 8007d02:	e005      	b.n	8007d10 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d04:	4b3b      	ldr	r3, [pc, #236]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1ef      	bne.n	8007cf0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d168      	bne.n	8007de8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d113      	bne.n	8007d44 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d1c:	4b35      	ldr	r3, [pc, #212]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	4b35      	ldr	r3, [pc, #212]	@ (8007df8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6892      	ldr	r2, [r2, #8]
 8007d28:	0211      	lsls	r1, r2, #8
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	68d2      	ldr	r2, [r2, #12]
 8007d2e:	06d2      	lsls	r2, r2, #27
 8007d30:	4311      	orrs	r1, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6852      	ldr	r2, [r2, #4]
 8007d36:	3a01      	subs	r2, #1
 8007d38:	0112      	lsls	r2, r2, #4
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	492d      	ldr	r1, [pc, #180]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	610b      	str	r3, [r1, #16]
 8007d42:	e02d      	b.n	8007da0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d115      	bne.n	8007d76 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8007dfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6892      	ldr	r2, [r2, #8]
 8007d56:	0211      	lsls	r1, r2, #8
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6912      	ldr	r2, [r2, #16]
 8007d5c:	0852      	lsrs	r2, r2, #1
 8007d5e:	3a01      	subs	r2, #1
 8007d60:	0552      	lsls	r2, r2, #21
 8007d62:	4311      	orrs	r1, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6852      	ldr	r2, [r2, #4]
 8007d68:	3a01      	subs	r2, #1
 8007d6a:	0112      	lsls	r2, r2, #4
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	4921      	ldr	r1, [pc, #132]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	610b      	str	r3, [r1, #16]
 8007d74:	e014      	b.n	8007da0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d76:	4b1f      	ldr	r3, [pc, #124]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	4b21      	ldr	r3, [pc, #132]	@ (8007e00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6892      	ldr	r2, [r2, #8]
 8007d82:	0211      	lsls	r1, r2, #8
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6952      	ldr	r2, [r2, #20]
 8007d88:	0852      	lsrs	r2, r2, #1
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	0652      	lsls	r2, r2, #25
 8007d8e:	4311      	orrs	r1, r2
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6852      	ldr	r2, [r2, #4]
 8007d94:	3a01      	subs	r2, #1
 8007d96:	0112      	lsls	r2, r2, #4
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	4916      	ldr	r1, [pc, #88]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007da0:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a13      	ldr	r2, [pc, #76]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007da6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dac:	f7fc f9ee 	bl	800418c <HAL_GetTick>
 8007db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007db2:	e009      	b.n	8007dc8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007db4:	f7fc f9ea 	bl	800418c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d902      	bls.n	8007dc8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	73fb      	strb	r3, [r7, #15]
          break;
 8007dc6:	e005      	b.n	8007dd4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0ef      	beq.n	8007db4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d106      	bne.n	8007de8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007dda:	4b06      	ldr	r3, [pc, #24]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	4904      	ldr	r1, [pc, #16]	@ (8007df4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40021000 	.word	0x40021000
 8007df8:	07ff800f 	.word	0x07ff800f
 8007dfc:	ff9f800f 	.word	0xff9f800f
 8007e00:	f9ff800f 	.word	0xf9ff800f

08007e04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e12:	4b72      	ldr	r3, [pc, #456]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0203 	and.w	r2, r3, #3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d103      	bne.n	8007e36 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
       ||
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d142      	bne.n	8007ebc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e03f      	b.n	8007ebc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d018      	beq.n	8007e76 <RCCEx_PLLSAI2_Config+0x72>
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d825      	bhi.n	8007e94 <RCCEx_PLLSAI2_Config+0x90>
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d002      	beq.n	8007e52 <RCCEx_PLLSAI2_Config+0x4e>
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d009      	beq.n	8007e64 <RCCEx_PLLSAI2_Config+0x60>
 8007e50:	e020      	b.n	8007e94 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e52:	4b62      	ldr	r3, [pc, #392]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11d      	bne.n	8007e9a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e62:	e01a      	b.n	8007e9a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e64:	4b5d      	ldr	r3, [pc, #372]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d116      	bne.n	8007e9e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e74:	e013      	b.n	8007e9e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e76:	4b59      	ldr	r3, [pc, #356]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10f      	bne.n	8007ea2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e82:	4b56      	ldr	r3, [pc, #344]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e92:	e006      	b.n	8007ea2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	e004      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e002      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007ea2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d108      	bne.n	8007ebc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f023 0203 	bic.w	r2, r3, #3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4949      	ldr	r1, [pc, #292]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 8086 	bne.w	8007fd0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007ec4:	4b45      	ldr	r3, [pc, #276]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a44      	ldr	r2, [pc, #272]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ed0:	f7fc f95c 	bl	800418c <HAL_GetTick>
 8007ed4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007ed6:	e009      	b.n	8007eec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ed8:	f7fc f958 	bl	800418c <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d902      	bls.n	8007eec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8007eea:	e005      	b.n	8007ef8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007eec:	4b3b      	ldr	r3, [pc, #236]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1ef      	bne.n	8007ed8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d168      	bne.n	8007fd0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d113      	bne.n	8007f2c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f04:	4b35      	ldr	r3, [pc, #212]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f06:	695a      	ldr	r2, [r3, #20]
 8007f08:	4b35      	ldr	r3, [pc, #212]	@ (8007fe0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	6892      	ldr	r2, [r2, #8]
 8007f10:	0211      	lsls	r1, r2, #8
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68d2      	ldr	r2, [r2, #12]
 8007f16:	06d2      	lsls	r2, r2, #27
 8007f18:	4311      	orrs	r1, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6852      	ldr	r2, [r2, #4]
 8007f1e:	3a01      	subs	r2, #1
 8007f20:	0112      	lsls	r2, r2, #4
 8007f22:	430a      	orrs	r2, r1
 8007f24:	492d      	ldr	r1, [pc, #180]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	614b      	str	r3, [r1, #20]
 8007f2a:	e02d      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d115      	bne.n	8007f5e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f32:	4b2a      	ldr	r3, [pc, #168]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f34:	695a      	ldr	r2, [r3, #20]
 8007f36:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	6892      	ldr	r2, [r2, #8]
 8007f3e:	0211      	lsls	r1, r2, #8
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	6912      	ldr	r2, [r2, #16]
 8007f44:	0852      	lsrs	r2, r2, #1
 8007f46:	3a01      	subs	r2, #1
 8007f48:	0552      	lsls	r2, r2, #21
 8007f4a:	4311      	orrs	r1, r2
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6852      	ldr	r2, [r2, #4]
 8007f50:	3a01      	subs	r2, #1
 8007f52:	0112      	lsls	r2, r2, #4
 8007f54:	430a      	orrs	r2, r1
 8007f56:	4921      	ldr	r1, [pc, #132]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	614b      	str	r3, [r1, #20]
 8007f5c:	e014      	b.n	8007f88 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	4b21      	ldr	r3, [pc, #132]	@ (8007fe8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	6892      	ldr	r2, [r2, #8]
 8007f6a:	0211      	lsls	r1, r2, #8
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6952      	ldr	r2, [r2, #20]
 8007f70:	0852      	lsrs	r2, r2, #1
 8007f72:	3a01      	subs	r2, #1
 8007f74:	0652      	lsls	r2, r2, #25
 8007f76:	4311      	orrs	r1, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6852      	ldr	r2, [r2, #4]
 8007f7c:	3a01      	subs	r2, #1
 8007f7e:	0112      	lsls	r2, r2, #4
 8007f80:	430a      	orrs	r2, r1
 8007f82:	4916      	ldr	r1, [pc, #88]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007f88:	4b14      	ldr	r3, [pc, #80]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a13      	ldr	r2, [pc, #76]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f94:	f7fc f8fa 	bl	800418c <HAL_GetTick>
 8007f98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007f9a:	e009      	b.n	8007fb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f9c:	f7fc f8f6 	bl	800418c <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d902      	bls.n	8007fb0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	73fb      	strb	r3, [r7, #15]
          break;
 8007fae:	e005      	b.n	8007fbc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0ef      	beq.n	8007f9c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007fc2:	4b06      	ldr	r3, [pc, #24]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fc4:	695a      	ldr	r2, [r3, #20]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	4904      	ldr	r1, [pc, #16]	@ (8007fdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	40021000 	.word	0x40021000
 8007fe0:	07ff800f 	.word	0x07ff800f
 8007fe4:	ff9f800f 	.word	0xff9f800f
 8007fe8:	f9ff800f 	.word	0xf9ff800f

08007fec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e054      	b.n	80080a8 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7a5b      	ldrb	r3, [r3, #9]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fa fe12 	bl	8002c38 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f023 0120 	bic.w	r1, r3, #32
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0204 	orr.w	r2, r2, #4
 800803e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800804a:	2b40      	cmp	r3, #64	@ 0x40
 800804c:	d104      	bne.n	8008058 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2204      	movs	r2, #4
 8008052:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e027      	b.n	80080a8 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008058:	f7fc f898 	bl	800418c <HAL_GetTick>
 800805c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800805e:	e015      	b.n	800808c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008060:	f7fc f894 	bl	800418c <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d90e      	bls.n	800808c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 0304 	and.w	r3, r3, #4
 8008078:	2b04      	cmp	r3, #4
 800807a:	d107      	bne.n	800808c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2204      	movs	r2, #4
 8008080:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2202      	movs	r2, #2
 8008086:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e00d      	b.n	80080a8 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d0e2      	beq.n	8008060 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e095      	b.n	80081ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080d2:	d009      	beq.n	80080e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	61da      	str	r2, [r3, #28]
 80080da:	e005      	b.n	80080e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fa fdb8 	bl	8002c78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800811e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008128:	d902      	bls.n	8008130 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e002      	b.n	8008136 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008134:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800813e:	d007      	beq.n	8008150 <HAL_SPI_Init+0xa0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0301 	and.w	r3, r3, #1
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008192:	ea42 0103 	orr.w	r1, r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	f003 0204 	and.w	r2, r3, #4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081be:	f003 0308 	and.w	r3, r3, #8
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80081cc:	ea42 0103 	orr.w	r1, r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e01a      	b.n	800823e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800821e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7fa fd6b 	bl	8002cfc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008262:	d112      	bne.n	800828a <HAL_SPI_Receive+0x44>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10e      	bne.n	800828a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2204      	movs	r2, #4
 8008270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008274:	88fa      	ldrh	r2, [r7, #6]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	4613      	mov	r3, r2
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 f910 	bl	80084a6 <HAL_SPI_TransmitReceive>
 8008286:	4603      	mov	r3, r0
 8008288:	e109      	b.n	800849e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_SPI_Receive+0x52>
 8008294:	2302      	movs	r3, #2
 8008296:	e102      	b.n	800849e <HAL_SPI_Receive+0x258>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082a0:	f7fb ff74 	bl	800418c <HAL_GetTick>
 80082a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d002      	beq.n	80082b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082b2:	2302      	movs	r3, #2
 80082b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082b6:	e0e9      	b.n	800848c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <HAL_SPI_Receive+0x7e>
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d102      	bne.n	80082ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082c8:	e0e0      	b.n	800848c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2204      	movs	r2, #4
 80082ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	88fa      	ldrh	r2, [r7, #6]
 80082e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	88fa      	ldrh	r2, [r7, #6]
 80082ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008314:	d908      	bls.n	8008328 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	e007      	b.n	8008338 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008340:	d10f      	bne.n	8008362 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008350:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008360:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836c:	2b40      	cmp	r3, #64	@ 0x40
 800836e:	d007      	beq.n	8008380 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800837e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008388:	d867      	bhi.n	800845a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800838a:	e030      	b.n	80083ee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b01      	cmp	r3, #1
 8008398:	d117      	bne.n	80083ca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f103 020c 	add.w	r2, r3, #12
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80083c8:	e011      	b.n	80083ee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ca:	f7fb fedf 	bl	800418c <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d803      	bhi.n	80083e2 <HAL_SPI_Receive+0x19c>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e0:	d102      	bne.n	80083e8 <HAL_SPI_Receive+0x1a2>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80083ec:	e04e      	b.n	800848c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1c8      	bne.n	800838c <HAL_SPI_Receive+0x146>
 80083fa:	e034      	b.n	8008466 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d115      	bne.n	8008436 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	b292      	uxth	r2, r2
 8008416:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008434:	e011      	b.n	800845a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008436:	f7fb fea9 	bl	800418c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d803      	bhi.n	800844e <HAL_SPI_Receive+0x208>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844c:	d102      	bne.n	8008454 <HAL_SPI_Receive+0x20e>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008458:	e018      	b.n	800848c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1ca      	bne.n	80083fc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fff6 	bl	800945c <SPI_EndRxTransaction>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	75fb      	strb	r3, [r7, #23]
 8008488:	e000      	b.n	800848c <HAL_SPI_Receive+0x246>
  }

error :
 800848a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b08a      	sub	sp, #40	@ 0x28
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084b4:	2301      	movs	r3, #1
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d101      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x26>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e1fb      	b.n	80088c4 <HAL_SPI_TransmitReceive+0x41e>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084d4:	f7fb fe5a 	bl	800418c <HAL_GetTick>
 80084d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80084e8:	887b      	ldrh	r3, [r7, #2]
 80084ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80084ec:	887b      	ldrh	r3, [r7, #2]
 80084ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084f0:	7efb      	ldrb	r3, [r7, #27]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d00e      	beq.n	8008514 <HAL_SPI_TransmitReceive+0x6e>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084fc:	d106      	bne.n	800850c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <HAL_SPI_TransmitReceive+0x66>
 8008506:	7efb      	ldrb	r3, [r7, #27]
 8008508:	2b04      	cmp	r3, #4
 800850a:	d003      	beq.n	8008514 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800850c:	2302      	movs	r3, #2
 800850e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008512:	e1cd      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_SPI_TransmitReceive+0x80>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <HAL_SPI_TransmitReceive+0x80>
 8008520:	887b      	ldrh	r3, [r7, #2]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d103      	bne.n	800852e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800852c:	e1c0      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b04      	cmp	r3, #4
 8008538:	d003      	beq.n	8008542 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2205      	movs	r2, #5
 800853e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	887a      	ldrh	r2, [r7, #2]
 8008552:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	887a      	ldrh	r2, [r7, #2]
 800855a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	887a      	ldrh	r2, [r7, #2]
 8008568:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	887a      	ldrh	r2, [r7, #2]
 800856e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008584:	d802      	bhi.n	800858c <HAL_SPI_TransmitReceive+0xe6>
 8008586:	8a3b      	ldrh	r3, [r7, #16]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d908      	bls.n	800859e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e007      	b.n	80085ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b8:	2b40      	cmp	r3, #64	@ 0x40
 80085ba:	d007      	beq.n	80085cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80085d4:	d97c      	bls.n	80086d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <HAL_SPI_TransmitReceive+0x13e>
 80085de:	8a7b      	ldrh	r3, [r7, #18]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d169      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e8:	881a      	ldrh	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	1c9a      	adds	r2, r3, #2
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008608:	e056      	b.n	80086b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d11b      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x1aa>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d016      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x1aa>
 8008622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008624:	2b01      	cmp	r3, #1
 8008626:	d113      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	1c9a      	adds	r2, r3, #2
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d11c      	bne.n	8008698 <HAL_SPI_TransmitReceive+0x1f2>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	b292      	uxth	r2, r2
 8008676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867c:	1c9a      	adds	r2, r3, #2
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008688:	b29b      	uxth	r3, r3
 800868a:	3b01      	subs	r3, #1
 800868c:	b29a      	uxth	r2, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008694:	2301      	movs	r3, #1
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008698:	f7fb fd78 	bl	800418c <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d807      	bhi.n	80086b8 <HAL_SPI_TransmitReceive+0x212>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d003      	beq.n	80086b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80086b6:	e0fb      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1a3      	bne.n	800860a <HAL_SPI_TransmitReceive+0x164>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d19d      	bne.n	800860a <HAL_SPI_TransmitReceive+0x164>
 80086ce:	e0df      	b.n	8008890 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_SPI_TransmitReceive+0x23a>
 80086d8:	8a7b      	ldrh	r3, [r7, #18]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	f040 80cb 	bne.w	8008876 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d912      	bls.n	8008710 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ee:	881a      	ldrh	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fa:	1c9a      	adds	r2, r3, #2
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008704:	b29b      	uxth	r3, r3
 8008706:	3b02      	subs	r3, #2
 8008708:	b29a      	uxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800870e:	e0b2      	b.n	8008876 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	330c      	adds	r3, #12
 800871a:	7812      	ldrb	r2, [r2, #0]
 800871c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872c:	b29b      	uxth	r3, r3
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008736:	e09e      	b.n	8008876 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d134      	bne.n	80087b0 <HAL_SPI_TransmitReceive+0x30a>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d02f      	beq.n	80087b0 <HAL_SPI_TransmitReceive+0x30a>
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	2b01      	cmp	r3, #1
 8008754:	d12c      	bne.n	80087b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800875a:	b29b      	uxth	r3, r3
 800875c:	2b01      	cmp	r3, #1
 800875e:	d912      	bls.n	8008786 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008764:	881a      	ldrh	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	1c9a      	adds	r2, r3, #2
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800877a:	b29b      	uxth	r3, r3
 800877c:	3b02      	subs	r3, #2
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008784:	e012      	b.n	80087ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	330c      	adds	r3, #12
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087ac:	2300      	movs	r3, #0
 80087ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d148      	bne.n	8008850 <HAL_SPI_TransmitReceive+0x3aa>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d042      	beq.n	8008850 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d923      	bls.n	800881e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	b292      	uxth	r2, r2
 80087e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	1c9a      	adds	r2, r3, #2
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3b02      	subs	r3, #2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d81f      	bhi.n	800884c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800881a:	605a      	str	r2, [r3, #4]
 800881c:	e016      	b.n	800884c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f103 020c 	add.w	r2, r3, #12
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	b2d2      	uxtb	r2, r2
 800882e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	1c5a      	adds	r2, r3, #1
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800884c:	2301      	movs	r3, #1
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008850:	f7fb fc9c 	bl	800418c <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885c:	429a      	cmp	r2, r3
 800885e:	d803      	bhi.n	8008868 <HAL_SPI_TransmitReceive+0x3c2>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d102      	bne.n	800886e <HAL_SPI_TransmitReceive+0x3c8>
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8008874:	e01c      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f47f af5b 	bne.w	8008738 <HAL_SPI_TransmitReceive+0x292>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008888:	b29b      	uxth	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	f47f af54 	bne.w	8008738 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fe39 	bl	800950c <SPI_EndRxTxTransaction>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80088ac:	e000      	b.n	80088b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80088ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80088c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3728      	adds	r7, #40	@ 0x28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4613      	mov	r3, r2
 80088d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_SPI_Transmit_IT+0x20>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e072      	b.n	80089d2 <HAL_SPI_Transmit_IT+0x106>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_SPI_Transmit_IT+0x34>
 80088fa:	88fb      	ldrh	r3, [r7, #6]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008904:	e060      	b.n	80089c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	d002      	beq.n	8008918 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8008912:	2302      	movs	r3, #2
 8008914:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008916:	e057      	b.n	80089c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2203      	movs	r2, #3
 800891c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	88fa      	ldrh	r2, [r7, #6]
 8008930:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800895c:	d903      	bls.n	8008966 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4a1f      	ldr	r2, [pc, #124]	@ (80089e0 <HAL_SPI_Transmit_IT+0x114>)
 8008962:	651a      	str	r2, [r3, #80]	@ 0x50
 8008964:	e002      	b.n	800896c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4a1e      	ldr	r2, [pc, #120]	@ (80089e4 <HAL_SPI_Transmit_IT+0x118>)
 800896a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008974:	d10f      	bne.n	8008996 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008994:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80089a4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b0:	2b40      	cmp	r3, #64	@ 0x40
 80089b2:	d008      	beq.n	80089c6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e000      	b.n	80089c8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80089c6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	080091db 	.word	0x080091db
 80089e4:	08009195 	.word	0x08009195

080089e8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d110      	bne.n	8008a24 <HAL_SPI_Receive_IT+0x3c>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a0a:	d10b      	bne.n	8008a24 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2204      	movs	r2, #4
 8008a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f894 	bl	8008b48 <HAL_SPI_TransmitReceive_IT>
 8008a20:	4603      	mov	r3, r0
 8008a22:	e089      	b.n	8008b38 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_SPI_Receive_IT+0x4a>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e082      	b.n	8008b38 <HAL_SPI_Receive_IT+0x150>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d002      	beq.n	8008a4c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8008a46:	2302      	movs	r3, #2
 8008a48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a4a:	e070      	b.n	8008b2e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_SPI_Receive_IT+0x70>
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a5c:	e067      	b.n	8008b2e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2204      	movs	r2, #4
 8008a62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	88fa      	ldrh	r2, [r7, #6]
 8008a76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	88fa      	ldrh	r2, [r7, #6]
 8008a7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008aa2:	d90b      	bls.n	8008abc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ab2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a22      	ldr	r2, [pc, #136]	@ (8008b40 <HAL_SPI_Receive_IT+0x158>)
 8008ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008aba:	e00a      	b.n	8008ad2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008aca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <HAL_SPI_Receive_IT+0x15c>)
 8008ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ada:	d10f      	bne.n	8008afc <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008afa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008b0a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b16:	2b40      	cmp	r3, #64	@ 0x40
 8008b18:	d008      	beq.n	8008b2c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e000      	b.n	8008b2e <HAL_SPI_Receive_IT+0x146>
  }

error :
 8008b2c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	08009149 	.word	0x08009149
 8008b44:	080090f9 	.word	0x080090f9

08008b48 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_SPI_TransmitReceive_IT+0x20>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e091      	b.n	8008c8c <HAL_SPI_TransmitReceive_IT+0x144>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b76:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b7e:	7dbb      	ldrb	r3, [r7, #22]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00d      	beq.n	8008ba0 <HAL_SPI_TransmitReceive_IT+0x58>
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b8a:	d106      	bne.n	8008b9a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <HAL_SPI_TransmitReceive_IT+0x52>
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d002      	beq.n	8008ba0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b9e:	e070      	b.n	8008c82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <HAL_SPI_TransmitReceive_IT+0x6a>
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008bb6:	e064      	b.n	8008c82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d003      	beq.n	8008bcc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2205      	movs	r2, #5
 8008bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	887a      	ldrh	r2, [r7, #2]
 8008bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	887a      	ldrh	r2, [r7, #2]
 8008be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	887a      	ldrh	r2, [r7, #2]
 8008bee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	887a      	ldrh	r2, [r7, #2]
 8008bf6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c02:	d906      	bls.n	8008c12 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4a24      	ldr	r2, [pc, #144]	@ (8008c98 <HAL_SPI_TransmitReceive_IT+0x150>)
 8008c08:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4a23      	ldr	r2, [pc, #140]	@ (8008c9c <HAL_SPI_TransmitReceive_IT+0x154>)
 8008c0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008c10:	e005      	b.n	8008c1e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4a22      	ldr	r2, [pc, #136]	@ (8008ca0 <HAL_SPI_TransmitReceive_IT+0x158>)
 8008c16:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a22      	ldr	r2, [pc, #136]	@ (8008ca4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8008c1c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008c26:	d802      	bhi.n	8008c2e <HAL_SPI_TransmitReceive_IT+0xe6>
 8008c28:	887b      	ldrh	r3, [r7, #2]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d908      	bls.n	8008c40 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008c3c:	605a      	str	r2, [r3, #4]
 8008c3e:	e007      	b.n	8008c50 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008c4e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8008c5e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6a:	2b40      	cmp	r3, #64	@ 0x40
 8008c6c:	d008      	beq.n	8008c80 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e000      	b.n	8008c82 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8008c80:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	371c      	adds	r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	08009033 	.word	0x08009033
 8008c9c:	08009099 	.word	0x08009099
 8008ca0:	08008ee3 	.word	0x08008ee3
 8008ca4:	08008fa1 	.word	0x08008fa1

08008ca8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10e      	bne.n	8008ce8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d004      	beq.n	8008ce8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
    return;
 8008ce6:	e0ce      	b.n	8008e86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <HAL_SPI_IRQHandler+0x5e>
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
    return;
 8008d04:	e0bf      	b.n	8008e86 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f003 0320 	and.w	r3, r3, #32
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <HAL_SPI_IRQHandler+0x7e>
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d105      	bne.n	8008d26 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80b0 	beq.w	8008e86 <HAL_SPI_IRQHandler+0x1de>
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80aa 	beq.w	8008e86 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d023      	beq.n	8008d84 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d011      	beq.n	8008d6c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d4c:	f043 0204 	orr.w	r2, r3, #4
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	e00b      	b.n	8008d84 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	613b      	str	r3, [r7, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	693b      	ldr	r3, [r7, #16]
        return;
 8008d82:	e080      	b.n	8008e86 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d014      	beq.n	8008db8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d92:	f043 0201 	orr.w	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60fb      	str	r3, [r7, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00c      	beq.n	8008ddc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc6:	f043 0208 	orr.w	r2, r3, #8
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d04f      	beq.n	8008e84 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008df2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <HAL_SPI_IRQHandler+0x168>
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d034      	beq.n	8008e7a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0203 	bic.w	r2, r2, #3
 8008e1e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d011      	beq.n	8008e4c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2c:	4a17      	ldr	r2, [pc, #92]	@ (8008e8c <HAL_SPI_IRQHandler+0x1e4>)
 8008e2e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fc fadd 	bl	80053f4 <HAL_DMA_Abort_IT>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d016      	beq.n	8008e82 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e58:	4a0c      	ldr	r2, [pc, #48]	@ (8008e8c <HAL_SPI_IRQHandler+0x1e4>)
 8008e5a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fc fac7 	bl	80053f4 <HAL_DMA_Abort_IT>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00a      	beq.n	8008e82 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008e78:	e003      	b.n	8008e82 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f812 	bl	8008ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008e80:	e000      	b.n	8008e84 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008e82:	bf00      	nop
    return;
 8008e84:	bf00      	nop
  }
}
 8008e86:	3720      	adds	r7, #32
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	08008eb9 	.word	0x08008eb9

08008e90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff ffe5 	bl	8008ea4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d923      	bls.n	8008f3e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	b292      	uxth	r2, r2
 8008f02:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f08:	1c9a      	adds	r2, r3, #2
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b02      	subs	r3, #2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d11f      	bne.n	8008f6c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	e016      	b.n	8008f6c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f103 020c 	add.w	r2, r3, #12
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008f86:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fb00 	bl	8009598 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d912      	bls.n	8008fd8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	1c9a      	adds	r2, r3, #2
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b02      	subs	r3, #2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fd6:	e012      	b.n	8008ffe <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d110      	bne.n	800902a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009016:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fab7 	bl	8009598 <SPI_CloseRxTx_ISR>
    }
  }
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009044:	b292      	uxth	r2, r2
 8009046:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904c:	1c9a      	adds	r2, r3, #2
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800906a:	b29b      	uxth	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10f      	bne.n	8009090 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800907e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d102      	bne.n	8009090 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa84 	bl	8009598 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009090:	bf00      	nop
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	881a      	ldrh	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	1c9a      	adds	r2, r3, #2
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d110      	bne.n	80090f0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa54 	bl	8009598 <SPI_CloseRxTx_ISR>
    }
  }
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f103 020c 	add.w	r2, r3, #12
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910c:	7812      	ldrb	r2, [r2, #0]
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009122:	b29b      	uxth	r3, r3
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa6e 	bl	800961c <SPI_CloseRx_ISR>
  }
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915a:	b292      	uxth	r2, r2
 800915c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800916e:	b29b      	uxth	r3, r3
 8009170:	3b01      	subs	r3, #1
 8009172:	b29a      	uxth	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009180:	b29b      	uxth	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa48 	bl	800961c <SPI_CloseRx_ISR>
  }
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	330c      	adds	r3, #12
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d102      	bne.n	80091d2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa55 	bl	800967c <SPI_CloseTx_ISR>
  }
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	1c9a      	adds	r2, r3, #2
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800920a:	b29b      	uxth	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fa33 	bl	800967c <SPI_CloseTx_ISR>
  }
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4613      	mov	r3, r2
 800922e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009230:	f7fa ffac 	bl	800418c <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4413      	add	r3, r2
 800923e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009240:	f7fa ffa4 	bl	800418c <HAL_GetTick>
 8009244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009246:	4b39      	ldr	r3, [pc, #228]	@ (800932c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	015b      	lsls	r3, r3, #5
 800924c:	0d1b      	lsrs	r3, r3, #20
 800924e:	69fa      	ldr	r2, [r7, #28]
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009256:	e054      	b.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d050      	beq.n	8009302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009260:	f7fa ff94 	bl	800418c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	429a      	cmp	r2, r3
 800926e:	d902      	bls.n	8009276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d13d      	bne.n	80092f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800928e:	d111      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009298:	d004      	beq.n	80092a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a2:	d107      	bne.n	80092b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092bc:	d10f      	bne.n	80092de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80092dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e017      	b.n	8009322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	3b01      	subs	r3, #1
 8009300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	4013      	ands	r3, r2
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	bf0c      	ite	eq
 8009312:	2301      	moveq	r3, #1
 8009314:	2300      	movne	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	429a      	cmp	r2, r3
 800931e:	d19b      	bne.n	8009258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3720      	adds	r7, #32
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000000 	.word	0x20000000

08009330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	@ 0x28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009342:	f7fa ff23 	bl	800418c <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	4413      	add	r3, r2
 8009350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009352:	f7fa ff1b 	bl	800418c <HAL_GetTick>
 8009356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	330c      	adds	r3, #12
 800935e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009360:	4b3d      	ldr	r3, [pc, #244]	@ (8009458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	00da      	lsls	r2, r3, #3
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	0d1b      	lsrs	r3, r3, #20
 8009370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009378:	e060      	b.n	800943c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009380:	d107      	bne.n	8009392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b2db      	uxtb	r3, r3
 800938e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d050      	beq.n	800943c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800939a:	f7fa fef7 	bl	800418c <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d902      	bls.n	80093b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d13d      	bne.n	800942c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093c8:	d111      	bne.n	80093ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d2:	d004      	beq.n	80093de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093dc:	d107      	bne.n	80093ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093f6:	d10f      	bne.n	8009418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e010      	b.n	800944e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3b01      	subs	r3, #1
 800943a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689a      	ldr	r2, [r3, #8]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4013      	ands	r3, r2
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	429a      	cmp	r2, r3
 800944a:	d196      	bne.n	800937a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3728      	adds	r7, #40	@ 0x28
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000000 	.word	0x20000000

0800945c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af02      	add	r7, sp, #8
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009470:	d111      	bne.n	8009496 <SPI_EndRxTransaction+0x3a>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800947a:	d004      	beq.n	8009486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009484:	d107      	bne.n	8009496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009494:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2200      	movs	r2, #0
 800949e:	2180      	movs	r1, #128	@ 0x80
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff febd 	bl	8009220 <SPI_WaitFlagStateUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094b0:	f043 0220 	orr.w	r2, r3, #32
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e023      	b.n	8009504 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094c4:	d11d      	bne.n	8009502 <SPI_EndRxTransaction+0xa6>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ce:	d004      	beq.n	80094da <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d8:	d113      	bne.n	8009502 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f7ff ff22 	bl	8009330 <SPI_WaitFifoStateUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094f6:	f043 0220 	orr.w	r2, r3, #32
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e000      	b.n	8009504 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2200      	movs	r2, #0
 8009520:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7ff ff03 	bl	8009330 <SPI_WaitFifoStateUntilTimeout>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009534:	f043 0220 	orr.w	r2, r3, #32
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e027      	b.n	8009590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2200      	movs	r2, #0
 8009548:	2180      	movs	r1, #128	@ 0x80
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fe68 	bl	8009220 <SPI_WaitFlagStateUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955a:	f043 0220 	orr.w	r2, r3, #32
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e014      	b.n	8009590 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fedc 	bl	8009330 <SPI_WaitFifoStateUntilTimeout>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d007      	beq.n	800958e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009582:	f043 0220 	orr.w	r2, r3, #32
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e000      	b.n	8009590 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095a0:	f7fa fdf4 	bl	800418c <HAL_GetTick>
 80095a4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0220 	bic.w	r2, r2, #32
 80095b4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	2164      	movs	r1, #100	@ 0x64
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff ffa6 	bl	800950c <SPI_EndRxTxTransaction>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d005      	beq.n	80095d2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ca:	f043 0220 	orr.w	r2, r3, #32
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d115      	bne.n	8009606 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d107      	bne.n	80095f6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f8 f86c 	bl	80016cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80095f4:	e00e      	b.n	8009614 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff fc46 	bl	8008e90 <HAL_SPI_TxRxCpltCallback>
}
 8009604:	e006      	b.n	8009614 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff fc48 	bl	8008ea4 <HAL_SPI_ErrorCallback>
}
 8009614:	bf00      	nop
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009632:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009634:	f7fa fdaa 	bl	800418c <HAL_GetTick>
 8009638:	4603      	mov	r3, r0
 800963a:	461a      	mov	r2, r3
 800963c:	2164      	movs	r1, #100	@ 0x64
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff ff0c 	bl	800945c <SPI_EndRxTransaction>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800964e:	f043 0220 	orr.w	r2, r3, #32
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7f8 f830 	bl	80016cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800966c:	e002      	b.n	8009674 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fc18 	bl	8008ea4 <HAL_SPI_ErrorCallback>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009684:	f7fa fd82 	bl	800418c <HAL_GetTick>
 8009688:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009698:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	2164      	movs	r1, #100	@ 0x64
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff ff34 	bl	800950c <SPI_EndRxTxTransaction>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d005      	beq.n	80096b6 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ae:	f043 0220 	orr.w	r2, r3, #32
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	60bb      	str	r3, [r7, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	60bb      	str	r3, [r7, #8]
 80096d2:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fbdd 	bl	8008ea4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80096ea:	e002      	b.n	80096f2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7f8 f801 	bl	80016f4 <HAL_SPI_TxCpltCallback>
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e042      	b.n	8009792 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7f9 fb08 	bl	8002d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2224      	movs	r2, #36	@ 0x24
 8009728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f022 0201 	bic.w	r2, r2, #1
 800973a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f997 	bl	8009a70 <UART_SetConfig>
 8009742:	4603      	mov	r3, r0
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e022      	b.n	8009792 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fc87 	bl	800a068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0201 	orr.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fd0e 	bl	800a1ac <UART_CheckIdleState>
 8009790:	4603      	mov	r3, r0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b08a      	sub	sp, #40	@ 0x28
 800979e:	af02      	add	r7, sp, #8
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	603b      	str	r3, [r7, #0]
 80097a6:	4613      	mov	r3, r2
 80097a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	f040 8083 	bne.w	80098bc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <HAL_UART_Transmit+0x28>
 80097bc:	88fb      	ldrh	r3, [r7, #6]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e07b      	b.n	80098be <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_UART_Transmit+0x3a>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e074      	b.n	80098be <HAL_UART_Transmit+0x124>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2221      	movs	r2, #33	@ 0x21
 80097e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097ec:	f7fa fcce 	bl	800418c <HAL_GetTick>
 80097f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	88fa      	ldrh	r2, [r7, #6]
 80097fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800980a:	d108      	bne.n	800981e <HAL_UART_Transmit+0x84>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d104      	bne.n	800981e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009814:	2300      	movs	r3, #0
 8009816:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	e003      	b.n	8009826 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800982e:	e02c      	b.n	800988a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	2180      	movs	r1, #128	@ 0x80
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 fd01 	bl	800a242 <UART_WaitOnFlagUntilTimeout>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e039      	b.n	80098be <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10b      	bne.n	8009868 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	881a      	ldrh	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800985c:	b292      	uxth	r2, r2
 800985e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	3302      	adds	r3, #2
 8009864:	61bb      	str	r3, [r7, #24]
 8009866:	e007      	b.n	8009878 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	781a      	ldrb	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	3301      	adds	r3, #1
 8009876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009890:	b29b      	uxth	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1cc      	bne.n	8009830 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2200      	movs	r2, #0
 800989e:	2140      	movs	r1, #64	@ 0x40
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fcce 	bl	800a242 <UART_WaitOnFlagUntilTimeout>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e006      	b.n	80098be <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80098bc:	2302      	movs	r3, #2
  }
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b08a      	sub	sp, #40	@ 0x28
 80098ca:	af02      	add	r7, sp, #8
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	603b      	str	r3, [r7, #0]
 80098d2:	4613      	mov	r3, r2
 80098d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098dc:	2b20      	cmp	r3, #32
 80098de:	f040 80c1 	bne.w	8009a64 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <HAL_UART_Receive+0x28>
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e0b9      	b.n	8009a66 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_UART_Receive+0x3a>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e0b2      	b.n	8009a66 <HAL_UART_Receive+0x1a0>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2222      	movs	r2, #34	@ 0x22
 8009914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800991e:	f7fa fc35 	bl	800418c <HAL_GetTick>
 8009922:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	88fa      	ldrh	r2, [r7, #6]
 8009928:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	88fa      	ldrh	r2, [r7, #6]
 8009930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800993c:	d10e      	bne.n	800995c <HAL_UART_Receive+0x96>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <HAL_UART_Receive+0x8c>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800994c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009950:	e02d      	b.n	80099ae <HAL_UART_Receive+0xe8>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	22ff      	movs	r2, #255	@ 0xff
 8009956:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800995a:	e028      	b.n	80099ae <HAL_UART_Receive+0xe8>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10d      	bne.n	8009980 <HAL_UART_Receive+0xba>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <HAL_UART_Receive+0xb0>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	22ff      	movs	r2, #255	@ 0xff
 8009970:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009974:	e01b      	b.n	80099ae <HAL_UART_Receive+0xe8>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	227f      	movs	r2, #127	@ 0x7f
 800997a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800997e:	e016      	b.n	80099ae <HAL_UART_Receive+0xe8>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009988:	d10d      	bne.n	80099a6 <HAL_UART_Receive+0xe0>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <HAL_UART_Receive+0xd6>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	227f      	movs	r2, #127	@ 0x7f
 8009996:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800999a:	e008      	b.n	80099ae <HAL_UART_Receive+0xe8>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	223f      	movs	r2, #63	@ 0x3f
 80099a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099a4:	e003      	b.n	80099ae <HAL_UART_Receive+0xe8>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80099b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099be:	d108      	bne.n	80099d2 <HAL_UART_Receive+0x10c>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d104      	bne.n	80099d2 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	61bb      	str	r3, [r7, #24]
 80099d0:	e003      	b.n	80099da <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80099e2:	e033      	b.n	8009a4c <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2200      	movs	r2, #0
 80099ec:	2120      	movs	r1, #32
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fc27 	bl	800a242 <UART_WaitOnFlagUntilTimeout>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e033      	b.n	8009a66 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10c      	bne.n	8009a1e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	8a7b      	ldrh	r3, [r7, #18]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	3302      	adds	r3, #2
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	e00d      	b.n	8009a3a <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	8a7b      	ldrh	r3, [r7, #18]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	3301      	adds	r3, #1
 8009a38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	3b01      	subs	r3, #1
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1c5      	bne.n	80099e4 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	e000      	b.n	8009a66 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8009a64:	2302      	movs	r3, #2
  }
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a74:	b08c      	sub	sp, #48	@ 0x30
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4baa      	ldr	r3, [pc, #680]	@ (8009d48 <UART_SetConfig+0x2d8>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a9f      	ldr	r2, [pc, #636]	@ (8009d4c <UART_SetConfig+0x2dc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d004      	beq.n	8009adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009ae6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afa:	f023 010f 	bic.w	r1, r3, #15
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a90      	ldr	r2, [pc, #576]	@ (8009d50 <UART_SetConfig+0x2e0>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d125      	bne.n	8009b60 <UART_SetConfig+0xf0>
 8009b14:	4b8f      	ldr	r3, [pc, #572]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d81a      	bhi.n	8009b58 <UART_SetConfig+0xe8>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0xb8>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b41 	.word	0x08009b41
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b3e:	e116      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009b40:	2302      	movs	r3, #2
 8009b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b46:	e112      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b4e:	e10e      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b56:	e10a      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e106      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a7c      	ldr	r2, [pc, #496]	@ (8009d58 <UART_SetConfig+0x2e8>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d138      	bne.n	8009bdc <UART_SetConfig+0x16c>
 8009b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b70:	f003 030c 	and.w	r3, r3, #12
 8009b74:	2b0c      	cmp	r3, #12
 8009b76:	d82d      	bhi.n	8009bd4 <UART_SetConfig+0x164>
 8009b78:	a201      	add	r2, pc, #4	@ (adr r2, 8009b80 <UART_SetConfig+0x110>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009bb5 	.word	0x08009bb5
 8009b84:	08009bd5 	.word	0x08009bd5
 8009b88:	08009bd5 	.word	0x08009bd5
 8009b8c:	08009bd5 	.word	0x08009bd5
 8009b90:	08009bc5 	.word	0x08009bc5
 8009b94:	08009bd5 	.word	0x08009bd5
 8009b98:	08009bd5 	.word	0x08009bd5
 8009b9c:	08009bd5 	.word	0x08009bd5
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bd5 	.word	0x08009bd5
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bba:	e0d8      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc2:	e0d4      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bca:	e0d0      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd2:	e0cc      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bda:	e0c8      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a5e      	ldr	r2, [pc, #376]	@ (8009d5c <UART_SetConfig+0x2ec>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d125      	bne.n	8009c32 <UART_SetConfig+0x1c2>
 8009be6:	4b5b      	ldr	r3, [pc, #364]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009bf0:	2b30      	cmp	r3, #48	@ 0x30
 8009bf2:	d016      	beq.n	8009c22 <UART_SetConfig+0x1b2>
 8009bf4:	2b30      	cmp	r3, #48	@ 0x30
 8009bf6:	d818      	bhi.n	8009c2a <UART_SetConfig+0x1ba>
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d00a      	beq.n	8009c12 <UART_SetConfig+0x1a2>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d814      	bhi.n	8009c2a <UART_SetConfig+0x1ba>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <UART_SetConfig+0x19a>
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d008      	beq.n	8009c1a <UART_SetConfig+0x1aa>
 8009c08:	e00f      	b.n	8009c2a <UART_SetConfig+0x1ba>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c10:	e0ad      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c12:	2302      	movs	r3, #2
 8009c14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c18:	e0a9      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c20:	e0a5      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c22:	2308      	movs	r3, #8
 8009c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c28:	e0a1      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c30:	e09d      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a4a      	ldr	r2, [pc, #296]	@ (8009d60 <UART_SetConfig+0x2f0>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d125      	bne.n	8009c88 <UART_SetConfig+0x218>
 8009c3c:	4b45      	ldr	r3, [pc, #276]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c48:	d016      	beq.n	8009c78 <UART_SetConfig+0x208>
 8009c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c4c:	d818      	bhi.n	8009c80 <UART_SetConfig+0x210>
 8009c4e:	2b80      	cmp	r3, #128	@ 0x80
 8009c50:	d00a      	beq.n	8009c68 <UART_SetConfig+0x1f8>
 8009c52:	2b80      	cmp	r3, #128	@ 0x80
 8009c54:	d814      	bhi.n	8009c80 <UART_SetConfig+0x210>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d002      	beq.n	8009c60 <UART_SetConfig+0x1f0>
 8009c5a:	2b40      	cmp	r3, #64	@ 0x40
 8009c5c:	d008      	beq.n	8009c70 <UART_SetConfig+0x200>
 8009c5e:	e00f      	b.n	8009c80 <UART_SetConfig+0x210>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c66:	e082      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6e:	e07e      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c70:	2304      	movs	r3, #4
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c76:	e07a      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c78:	2308      	movs	r3, #8
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c7e:	e076      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c80:	2310      	movs	r3, #16
 8009c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c86:	e072      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a35      	ldr	r2, [pc, #212]	@ (8009d64 <UART_SetConfig+0x2f4>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d12a      	bne.n	8009ce8 <UART_SetConfig+0x278>
 8009c92:	4b30      	ldr	r3, [pc, #192]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca0:	d01a      	beq.n	8009cd8 <UART_SetConfig+0x268>
 8009ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca6:	d81b      	bhi.n	8009ce0 <UART_SetConfig+0x270>
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cac:	d00c      	beq.n	8009cc8 <UART_SetConfig+0x258>
 8009cae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb2:	d815      	bhi.n	8009ce0 <UART_SetConfig+0x270>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <UART_SetConfig+0x250>
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cbc:	d008      	beq.n	8009cd0 <UART_SetConfig+0x260>
 8009cbe:	e00f      	b.n	8009ce0 <UART_SetConfig+0x270>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cc6:	e052      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cce:	e04e      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd6:	e04a      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cde:	e046      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce6:	e042      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a17      	ldr	r2, [pc, #92]	@ (8009d4c <UART_SetConfig+0x2dc>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d13a      	bne.n	8009d68 <UART_SetConfig+0x2f8>
 8009cf2:	4b18      	ldr	r3, [pc, #96]	@ (8009d54 <UART_SetConfig+0x2e4>)
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d00:	d01a      	beq.n	8009d38 <UART_SetConfig+0x2c8>
 8009d02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d06:	d81b      	bhi.n	8009d40 <UART_SetConfig+0x2d0>
 8009d08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d0c:	d00c      	beq.n	8009d28 <UART_SetConfig+0x2b8>
 8009d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d12:	d815      	bhi.n	8009d40 <UART_SetConfig+0x2d0>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <UART_SetConfig+0x2b0>
 8009d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d1c:	d008      	beq.n	8009d30 <UART_SetConfig+0x2c0>
 8009d1e:	e00f      	b.n	8009d40 <UART_SetConfig+0x2d0>
 8009d20:	2300      	movs	r3, #0
 8009d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d26:	e022      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d2e:	e01e      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d36:	e01a      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d3e:	e016      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d46:	e012      	b.n	8009d6e <UART_SetConfig+0x2fe>
 8009d48:	cfff69f3 	.word	0xcfff69f3
 8009d4c:	40008000 	.word	0x40008000
 8009d50:	40013800 	.word	0x40013800
 8009d54:	40021000 	.word	0x40021000
 8009d58:	40004400 	.word	0x40004400
 8009d5c:	40004800 	.word	0x40004800
 8009d60:	40004c00 	.word	0x40004c00
 8009d64:	40005000 	.word	0x40005000
 8009d68:	2310      	movs	r3, #16
 8009d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4aae      	ldr	r2, [pc, #696]	@ (800a02c <UART_SetConfig+0x5bc>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f040 8097 	bne.w	8009ea8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d7e:	2b08      	cmp	r3, #8
 8009d80:	d823      	bhi.n	8009dca <UART_SetConfig+0x35a>
 8009d82:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0x318>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009dcb 	.word	0x08009dcb
 8009d90:	08009db5 	.word	0x08009db5
 8009d94:	08009dcb 	.word	0x08009dcb
 8009d98:	08009dbb 	.word	0x08009dbb
 8009d9c:	08009dcb 	.word	0x08009dcb
 8009da0:	08009dcb 	.word	0x08009dcb
 8009da4:	08009dcb 	.word	0x08009dcb
 8009da8:	08009dc3 	.word	0x08009dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dac:	f7fd fb0a 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8009db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009db2:	e010      	b.n	8009dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009db4:	4b9e      	ldr	r3, [pc, #632]	@ (800a030 <UART_SetConfig+0x5c0>)
 8009db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009db8:	e00d      	b.n	8009dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dba:	f7fd fa6b 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8009dbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dc0:	e009      	b.n	8009dd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009dc8:	e005      	b.n	8009dd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009dd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8130 	beq.w	800a03e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de2:	4a94      	ldr	r2, [pc, #592]	@ (800a034 <UART_SetConfig+0x5c4>)
 8009de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009de8:	461a      	mov	r2, r3
 8009dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009df0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	4413      	add	r3, r2
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d305      	bcc.n	8009e0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d903      	bls.n	8009e16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e14:	e113      	b.n	800a03e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e18:	2200      	movs	r2, #0
 8009e1a:	60bb      	str	r3, [r7, #8]
 8009e1c:	60fa      	str	r2, [r7, #12]
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e22:	4a84      	ldr	r2, [pc, #528]	@ (800a034 <UART_SetConfig+0x5c4>)
 8009e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	603b      	str	r3, [r7, #0]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e38:	f7f6 ff3e 	bl	8000cb8 <__aeabi_uldivmod>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4610      	mov	r0, r2
 8009e42:	4619      	mov	r1, r3
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	020b      	lsls	r3, r1, #8
 8009e4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e52:	0202      	lsls	r2, r0, #8
 8009e54:	6979      	ldr	r1, [r7, #20]
 8009e56:	6849      	ldr	r1, [r1, #4]
 8009e58:	0849      	lsrs	r1, r1, #1
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4605      	mov	r5, r0
 8009e60:	eb12 0804 	adds.w	r8, r2, r4
 8009e64:	eb43 0905 	adc.w	r9, r3, r5
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	469a      	mov	sl, r3
 8009e70:	4693      	mov	fp, r2
 8009e72:	4652      	mov	r2, sl
 8009e74:	465b      	mov	r3, fp
 8009e76:	4640      	mov	r0, r8
 8009e78:	4649      	mov	r1, r9
 8009e7a:	f7f6 ff1d 	bl	8000cb8 <__aeabi_uldivmod>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4613      	mov	r3, r2
 8009e84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e8c:	d308      	bcc.n	8009ea0 <UART_SetConfig+0x430>
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e94:	d204      	bcs.n	8009ea0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6a3a      	ldr	r2, [r7, #32]
 8009e9c:	60da      	str	r2, [r3, #12]
 8009e9e:	e0ce      	b.n	800a03e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ea6:	e0ca      	b.n	800a03e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eb0:	d166      	bne.n	8009f80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d827      	bhi.n	8009f0a <UART_SetConfig+0x49a>
 8009eba:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <UART_SetConfig+0x450>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	08009f0b 	.word	0x08009f0b
 8009ed0:	08009efb 	.word	0x08009efb
 8009ed4:	08009f0b 	.word	0x08009f0b
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f0b 	.word	0x08009f0b
 8009ee0:	08009f03 	.word	0x08009f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ee4:	f7fd fa6e 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8009ee8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009eea:	e014      	b.n	8009f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eec:	f7fd fa80 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 8009ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ef2:	e010      	b.n	8009f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ef4:	4b4e      	ldr	r3, [pc, #312]	@ (800a030 <UART_SetConfig+0x5c0>)
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ef8:	e00d      	b.n	8009f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009efa:	f7fd f9cb 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8009efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f00:	e009      	b.n	8009f16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f08:	e005      	b.n	8009f16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 8090 	beq.w	800a03e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f22:	4a44      	ldr	r2, [pc, #272]	@ (800a034 <UART_SetConfig+0x5c4>)
 8009f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f30:	005a      	lsls	r2, r3, #1
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	085b      	lsrs	r3, r3, #1
 8009f38:	441a      	add	r2, r3
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f42:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d916      	bls.n	8009f78 <UART_SetConfig+0x508>
 8009f4a:	6a3b      	ldr	r3, [r7, #32]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f50:	d212      	bcs.n	8009f78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	f023 030f 	bic.w	r3, r3, #15
 8009f5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	085b      	lsrs	r3, r3, #1
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	8bfb      	ldrh	r3, [r7, #30]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	8bfa      	ldrh	r2, [r7, #30]
 8009f74:	60da      	str	r2, [r3, #12]
 8009f76:	e062      	b.n	800a03e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f7e:	e05e      	b.n	800a03e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d828      	bhi.n	8009fda <UART_SetConfig+0x56a>
 8009f88:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <UART_SetConfig+0x520>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fb5 	.word	0x08009fb5
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fc5 	.word	0x08009fc5
 8009f9c:	08009fdb 	.word	0x08009fdb
 8009fa0:	08009fcb 	.word	0x08009fcb
 8009fa4:	08009fdb 	.word	0x08009fdb
 8009fa8:	08009fdb 	.word	0x08009fdb
 8009fac:	08009fdb 	.word	0x08009fdb
 8009fb0:	08009fd3 	.word	0x08009fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb4:	f7fd fa06 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8009fb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fba:	e014      	b.n	8009fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fbc:	f7fd fa18 	bl	80073f0 <HAL_RCC_GetPCLK2Freq>
 8009fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fc2:	e010      	b.n	8009fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fc4:	4b1a      	ldr	r3, [pc, #104]	@ (800a030 <UART_SetConfig+0x5c0>)
 8009fc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fc8:	e00d      	b.n	8009fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fca:	f7fd f963 	bl	8007294 <HAL_RCC_GetSysClockFreq>
 8009fce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009fd0:	e009      	b.n	8009fe6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009fd8:	e005      	b.n	8009fe6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8009fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d028      	beq.n	800a03e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	4a10      	ldr	r2, [pc, #64]	@ (800a034 <UART_SetConfig+0x5c4>)
 8009ff2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffa:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	085b      	lsrs	r3, r3, #1
 800a004:	441a      	add	r2, r3
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a00e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2b0f      	cmp	r3, #15
 800a014:	d910      	bls.n	800a038 <UART_SetConfig+0x5c8>
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a01c:	d20c      	bcs.n	800a038 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	b29a      	uxth	r2, r3
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60da      	str	r2, [r3, #12]
 800a028:	e009      	b.n	800a03e <UART_SetConfig+0x5ce>
 800a02a:	bf00      	nop
 800a02c:	40008000 	.word	0x40008000
 800a030:	00f42400 	.word	0x00f42400
 800a034:	0800fb0c 	.word	0x0800fb0c
      }
      else
      {
        ret = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2201      	movs	r2, #1
 800a042:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2201      	movs	r2, #1
 800a04a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2200      	movs	r2, #0
 800a052:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800a05a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3730      	adds	r7, #48	@ 0x30
 800a062:	46bd      	mov	sp, r7
 800a064:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	f003 0302 	and.w	r3, r3, #2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0da:	f003 0308 	and.w	r3, r3, #8
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0fc:	f003 0310 	and.w	r3, r3, #16
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d01a      	beq.n	800a17e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a166:	d10a      	bne.n	800a17e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	605a      	str	r2, [r3, #4]
  }
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1bc:	f7f9 ffe6 	bl	800418c <HAL_GetTick>
 800a1c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d10e      	bne.n	800a1ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f82f 	bl	800a242 <UART_WaitOnFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e025      	b.n	800a23a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d10e      	bne.n	800a21a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f819 	bl	800a242 <UART_WaitOnFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a216:	2303      	movs	r3, #3
 800a218:	e00f      	b.n	800a23a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b09c      	sub	sp, #112	@ 0x70
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4613      	mov	r3, r2
 800a250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a252:	e0a9      	b.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	f000 80a5 	beq.w	800a3a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a25e:	f7f9 ff95 	bl	800418c <HAL_GetTick>
 800a262:	4602      	mov	r2, r0
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <UART_WaitOnFlagUntilTimeout+0x32>
 800a26e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a270:	2b00      	cmp	r3, #0
 800a272:	d140      	bne.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a284:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a288:	667b      	str	r3, [r7, #100]	@ 0x64
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a292:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a294:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a298:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a2a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e6      	bne.n	800a274 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b0:	e853 3f00 	ldrex	r3, [r3]
 800a2b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b8:	f023 0301 	bic.w	r3, r3, #1
 800a2bc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2c6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a2c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ce:	e841 2300 	strex	r3, r2, [r1]
 800a2d2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1e5      	bne.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e069      	b.n	800a3ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d051      	beq.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a30e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a312:	d149      	bne.n	800a3a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a31c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a326:	e853 3f00 	ldrex	r3, [r3]
 800a32a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	461a      	mov	r2, r3
 800a33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a33c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a33e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e6      	bne.n	800a31e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3308      	adds	r3, #8
 800a356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	e853 3f00 	ldrex	r3, [r3]
 800a35e:	613b      	str	r3, [r7, #16]
   return(result);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	f023 0301 	bic.w	r3, r3, #1
 800a366:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a370:	623a      	str	r2, [r7, #32]
 800a372:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a374:	69f9      	ldr	r1, [r7, #28]
 800a376:	6a3a      	ldr	r2, [r7, #32]
 800a378:	e841 2300 	strex	r3, r2, [r1]
 800a37c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e5      	bne.n	800a350 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2220      	movs	r2, #32
 800a388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2220      	movs	r2, #32
 800a390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2220      	movs	r2, #32
 800a398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e010      	b.n	800a3ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69da      	ldr	r2, [r3, #28]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	bf0c      	ite	eq
 800a3b8:	2301      	moveq	r3, #1
 800a3ba:	2300      	movne	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	f43f af46 	beq.w	800a254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3770      	adds	r7, #112	@ 0x70
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e027      	b.n	800a438 <HAL_UARTEx_DisableFifoMode+0x66>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2224      	movs	r2, #36	@ 0x24
 800a3f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0201 	bic.w	r2, r2, #1
 800a40e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a416:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2220      	movs	r2, #32
 800a42a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a454:	2b01      	cmp	r3, #1
 800a456:	d101      	bne.n	800a45c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a458:	2302      	movs	r3, #2
 800a45a:	e02d      	b.n	800a4b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2224      	movs	r2, #36	@ 0x24
 800a468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0201 	bic.w	r2, r2, #1
 800a482:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f84f 	bl	800a53c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d101      	bne.n	800a4d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	e02d      	b.n	800a534 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2224      	movs	r2, #36	@ 0x24
 800a4e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0201 	bic.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f811 	bl	800a53c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d108      	bne.n	800a55e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a55c:	e031      	b.n	800a5c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a55e:	2308      	movs	r3, #8
 800a560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a562:	2308      	movs	r3, #8
 800a564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	0e5b      	lsrs	r3, r3, #25
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 0307 	and.w	r3, r3, #7
 800a574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	0f5b      	lsrs	r3, r3, #29
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0307 	and.w	r3, r3, #7
 800a584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	7b3a      	ldrb	r2, [r7, #12]
 800a58a:	4911      	ldr	r1, [pc, #68]	@ (800a5d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a58c:	5c8a      	ldrb	r2, [r1, r2]
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a592:	7b3a      	ldrb	r2, [r7, #12]
 800a594:	490f      	ldr	r1, [pc, #60]	@ (800a5d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a598:	fb93 f3f2 	sdiv	r3, r3, r2
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5a4:	7bfb      	ldrb	r3, [r7, #15]
 800a5a6:	7b7a      	ldrb	r2, [r7, #13]
 800a5a8:	4909      	ldr	r1, [pc, #36]	@ (800a5d0 <UARTEx_SetNbDataToProcess+0x94>)
 800a5aa:	5c8a      	ldrb	r2, [r1, r2]
 800a5ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5b0:	7b7a      	ldrb	r2, [r7, #13]
 800a5b2:	4908      	ldr	r1, [pc, #32]	@ (800a5d4 <UARTEx_SetNbDataToProcess+0x98>)
 800a5b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	0800fb24 	.word	0x0800fb24
 800a5d4:	0800fb2c 	.word	0x0800fb2c

0800a5d8 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800a5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a618 <WIFI_Init+0x40>)
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a61c <WIFI_Init+0x44>)
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800a620 <WIFI_Init+0x48>)
 800a5ec:	4a0d      	ldr	r2, [pc, #52]	@ (800a624 <WIFI_Init+0x4c>)
 800a5ee:	490e      	ldr	r1, [pc, #56]	@ (800a628 <WIFI_Init+0x50>)
 800a5f0:	480e      	ldr	r0, [pc, #56]	@ (800a62c <WIFI_Init+0x54>)
 800a5f2:	f7f9 fa0f 	bl	8003a14 <ES_WIFI_RegisterBusIO>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d107      	bne.n	800a60c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a5fc:	480b      	ldr	r0, [pc, #44]	@ (800a62c <WIFI_Init+0x54>)
 800a5fe:	f7f9 f9db 	bl	80039b8 <ES_WIFI_Init>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800a60c:	79fb      	ldrb	r3, [r7, #7]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	08001441 	.word	0x08001441
 800a61c:	08001535 	.word	0x08001535
 800a620:	08001611 	.word	0x08001611
 800a624:	08001329 	.word	0x08001329
 800a628:	0800118d 	.word	0x0800118d
 800a62c:	20000a1c 	.word	0x20000a1c

0800a630 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	4809      	ldr	r0, [pc, #36]	@ (800a670 <WIFI_Connect+0x40>)
 800a64a:	f7f9 fa17 	bl	8003a7c <ES_WIFI_Connect>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d107      	bne.n	800a664 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800a654:	4806      	ldr	r0, [pc, #24]	@ (800a670 <WIFI_Connect+0x40>)
 800a656:	f7f9 fabd 	bl	8003bd4 <ES_WIFI_GetNetworkSettings>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800a664:	7dfb      	ldrb	r3, [r7, #23]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20000a1c 	.word	0x20000a1c

0800a674 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800a680:	6879      	ldr	r1, [r7, #4]
 800a682:	4806      	ldr	r0, [pc, #24]	@ (800a69c <WIFI_GetMAC_Address+0x28>)
 800a684:	f7f9 fad0 	bl	8003c28 <ES_WIFI_GetMACAddress>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000a1c 	.word	0x20000a1c

0800a6a0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800a6ac:	4809      	ldr	r0, [pc, #36]	@ (800a6d4 <WIFI_GetIP_Address+0x34>)
 800a6ae:	f7f9 fa65 	bl	8003b7c <ES_WIFI_IsConnected>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d107      	bne.n	800a6c8 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800a6b8:	4b06      	ldr	r3, [pc, #24]	@ (800a6d4 <WIFI_GetIP_Address+0x34>)
 800a6ba:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000a1c 	.word	0x20000a1c

0800a6d8 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	@ 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	607a      	str	r2, [r7, #4]
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	74bb      	strb	r3, [r7, #18]
  conn.RemotePort = port;
 800a6f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a6f6:	82bb      	strh	r3, [r7, #20]
  conn.LocalPort = local_port;
 800a6f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a6fa:	82fb      	strh	r3, [r7, #22]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	bf14      	ite	ne
 800a702:	2301      	movne	r3, #1
 800a704:	2300      	moveq	r3, #0
 800a706:	b2db      	uxtb	r3, r3
 800a708:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[1] = ipaddr[1];
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	767b      	strb	r3, [r7, #25]
  conn.RemoteIP[2] = ipaddr[2];
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	789b      	ldrb	r3, [r3, #2]
 800a71a:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[3] = ipaddr[3];
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	78db      	ldrb	r3, [r3, #3]
 800a720:	76fb      	strb	r3, [r7, #27]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800a722:	f107 0310 	add.w	r3, r7, #16
 800a726:	4619      	mov	r1, r3
 800a728:	4807      	ldr	r0, [pc, #28]	@ (800a748 <WIFI_OpenClientConnection+0x70>)
 800a72a:	f7f9 faaf 	bl	8003c8c <ES_WIFI_StartClientConnection>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800a73a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3728      	adds	r7, #40	@ 0x28
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000a1c 	.word	0x20000a1c

0800a74c <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af02      	add	r7, sp, #8
 800a752:	60b9      	str	r1, [r7, #8]
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
 800a75a:	4613      	mov	r3, r2
 800a75c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800a762:	89ba      	ldrh	r2, [r7, #12]
 800a764:	7bf9      	ldrb	r1, [r7, #15]
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	4613      	mov	r3, r2
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	4806      	ldr	r0, [pc, #24]	@ (800a78c <WIFI_SendData+0x40>)
 800a774:	f7f9 fb92 	bl	8003e9c <ES_WIFI_SendData>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000a1c 	.word	0x20000a1c

0800a790 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607b      	str	r3, [r7, #4]
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800a7a6:	89ba      	ldrh	r2, [r7, #12]
 800a7a8:	7bf9      	ldrb	r1, [r7, #15]
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	4806      	ldr	r0, [pc, #24]	@ (800a7d0 <WIFI_ReceiveData+0x40>)
 800a7b8:	f7f9 fbf6 	bl	8003fa8 <ES_WIFI_ReceiveData>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000a1c 	.word	0x20000a1c

0800a7d4 <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800a7e0:	2218      	movs	r2, #24
 800a7e2:	4905      	ldr	r1, [pc, #20]	@ (800a7f8 <WIFI_GetModuleFwRevision+0x24>)
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f002 f86e 	bl	800c8c6 <strncpy>
    ret = WIFI_STATUS_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000a3c 	.word	0x20000a3c

0800a7fc <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 800a808:	2220      	movs	r2, #32
 800a80a:	4905      	ldr	r1, [pc, #20]	@ (800a820 <WIFI_GetModuleID+0x24>)
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f002 f85a 	bl	800c8c6 <strncpy>
    ret = WIFI_STATUS_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a816:	7bfb      	ldrb	r3, [r7, #15]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20000a1c 	.word	0x20000a1c

0800a824 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 800a830:	2220      	movs	r2, #32
 800a832:	4905      	ldr	r1, [pc, #20]	@ (800a848 <WIFI_GetModuleName+0x24>)
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f002 f846 	bl	800c8c6 <strncpy>
    ret = WIFI_STATUS_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20000a84 	.word	0x20000a84

0800a84c <atof>:
 800a84c:	2100      	movs	r1, #0
 800a84e:	f000 becd 	b.w	800b5ec <strtod>

0800a852 <atoi>:
 800a852:	220a      	movs	r2, #10
 800a854:	2100      	movs	r1, #0
 800a856:	f000 bf51 	b.w	800b6fc <strtol>
	...

0800a85c <malloc>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	@ (800a868 <malloc+0xc>)
 800a85e:	4601      	mov	r1, r0
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f000 b82d 	b.w	800a8c0 <_malloc_r>
 800a866:	bf00      	nop
 800a868:	20000184 	.word	0x20000184

0800a86c <free>:
 800a86c:	4b02      	ldr	r3, [pc, #8]	@ (800a878 <free+0xc>)
 800a86e:	4601      	mov	r1, r0
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	f002 bfbd 	b.w	800d7f0 <_free_r>
 800a876:	bf00      	nop
 800a878:	20000184 	.word	0x20000184

0800a87c <sbrk_aligned>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4e0f      	ldr	r6, [pc, #60]	@ (800a8bc <sbrk_aligned+0x40>)
 800a880:	460c      	mov	r4, r1
 800a882:	6831      	ldr	r1, [r6, #0]
 800a884:	4605      	mov	r5, r0
 800a886:	b911      	cbnz	r1, 800a88e <sbrk_aligned+0x12>
 800a888:	f002 f8da 	bl	800ca40 <_sbrk_r>
 800a88c:	6030      	str	r0, [r6, #0]
 800a88e:	4621      	mov	r1, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f002 f8d5 	bl	800ca40 <_sbrk_r>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d103      	bne.n	800a8a2 <sbrk_aligned+0x26>
 800a89a:	f04f 34ff 	mov.w	r4, #4294967295
 800a89e:	4620      	mov	r0, r4
 800a8a0:	bd70      	pop	{r4, r5, r6, pc}
 800a8a2:	1cc4      	adds	r4, r0, #3
 800a8a4:	f024 0403 	bic.w	r4, r4, #3
 800a8a8:	42a0      	cmp	r0, r4
 800a8aa:	d0f8      	beq.n	800a89e <sbrk_aligned+0x22>
 800a8ac:	1a21      	subs	r1, r4, r0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f002 f8c6 	bl	800ca40 <_sbrk_r>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1f2      	bne.n	800a89e <sbrk_aligned+0x22>
 800a8b8:	e7ef      	b.n	800a89a <sbrk_aligned+0x1e>
 800a8ba:	bf00      	nop
 800a8bc:	200010c4 	.word	0x200010c4

0800a8c0 <_malloc_r>:
 800a8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	1ccd      	adds	r5, r1, #3
 800a8c6:	f025 0503 	bic.w	r5, r5, #3
 800a8ca:	3508      	adds	r5, #8
 800a8cc:	2d0c      	cmp	r5, #12
 800a8ce:	bf38      	it	cc
 800a8d0:	250c      	movcc	r5, #12
 800a8d2:	2d00      	cmp	r5, #0
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	db01      	blt.n	800a8dc <_malloc_r+0x1c>
 800a8d8:	42a9      	cmp	r1, r5
 800a8da:	d904      	bls.n	800a8e6 <_malloc_r+0x26>
 800a8dc:	230c      	movs	r3, #12
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9bc <_malloc_r+0xfc>
 800a8ea:	f000 f869 	bl	800a9c0 <__malloc_lock>
 800a8ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	bb44      	cbnz	r4, 800a948 <_malloc_r+0x88>
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f7ff ffbf 	bl	800a87c <sbrk_aligned>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	4604      	mov	r4, r0
 800a902:	d158      	bne.n	800a9b6 <_malloc_r+0xf6>
 800a904:	f8d8 4000 	ldr.w	r4, [r8]
 800a908:	4627      	mov	r7, r4
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d143      	bne.n	800a996 <_malloc_r+0xd6>
 800a90e:	2c00      	cmp	r4, #0
 800a910:	d04b      	beq.n	800a9aa <_malloc_r+0xea>
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	4639      	mov	r1, r7
 800a916:	4630      	mov	r0, r6
 800a918:	eb04 0903 	add.w	r9, r4, r3
 800a91c:	f002 f890 	bl	800ca40 <_sbrk_r>
 800a920:	4581      	cmp	r9, r0
 800a922:	d142      	bne.n	800a9aa <_malloc_r+0xea>
 800a924:	6821      	ldr	r1, [r4, #0]
 800a926:	1a6d      	subs	r5, r5, r1
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff ffa6 	bl	800a87c <sbrk_aligned>
 800a930:	3001      	adds	r0, #1
 800a932:	d03a      	beq.n	800a9aa <_malloc_r+0xea>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	442b      	add	r3, r5
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	f8d8 3000 	ldr.w	r3, [r8]
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	bb62      	cbnz	r2, 800a99c <_malloc_r+0xdc>
 800a942:	f8c8 7000 	str.w	r7, [r8]
 800a946:	e00f      	b.n	800a968 <_malloc_r+0xa8>
 800a948:	6822      	ldr	r2, [r4, #0]
 800a94a:	1b52      	subs	r2, r2, r5
 800a94c:	d420      	bmi.n	800a990 <_malloc_r+0xd0>
 800a94e:	2a0b      	cmp	r2, #11
 800a950:	d917      	bls.n	800a982 <_malloc_r+0xc2>
 800a952:	1961      	adds	r1, r4, r5
 800a954:	42a3      	cmp	r3, r4
 800a956:	6025      	str	r5, [r4, #0]
 800a958:	bf18      	it	ne
 800a95a:	6059      	strne	r1, [r3, #4]
 800a95c:	6863      	ldr	r3, [r4, #4]
 800a95e:	bf08      	it	eq
 800a960:	f8c8 1000 	streq.w	r1, [r8]
 800a964:	5162      	str	r2, [r4, r5]
 800a966:	604b      	str	r3, [r1, #4]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f82f 	bl	800a9cc <__malloc_unlock>
 800a96e:	f104 000b 	add.w	r0, r4, #11
 800a972:	1d23      	adds	r3, r4, #4
 800a974:	f020 0007 	bic.w	r0, r0, #7
 800a978:	1ac2      	subs	r2, r0, r3
 800a97a:	bf1c      	itt	ne
 800a97c:	1a1b      	subne	r3, r3, r0
 800a97e:	50a3      	strne	r3, [r4, r2]
 800a980:	e7af      	b.n	800a8e2 <_malloc_r+0x22>
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	42a3      	cmp	r3, r4
 800a986:	bf0c      	ite	eq
 800a988:	f8c8 2000 	streq.w	r2, [r8]
 800a98c:	605a      	strne	r2, [r3, #4]
 800a98e:	e7eb      	b.n	800a968 <_malloc_r+0xa8>
 800a990:	4623      	mov	r3, r4
 800a992:	6864      	ldr	r4, [r4, #4]
 800a994:	e7ae      	b.n	800a8f4 <_malloc_r+0x34>
 800a996:	463c      	mov	r4, r7
 800a998:	687f      	ldr	r7, [r7, #4]
 800a99a:	e7b6      	b.n	800a90a <_malloc_r+0x4a>
 800a99c:	461a      	mov	r2, r3
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	42a3      	cmp	r3, r4
 800a9a2:	d1fb      	bne.n	800a99c <_malloc_r+0xdc>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	6053      	str	r3, [r2, #4]
 800a9a8:	e7de      	b.n	800a968 <_malloc_r+0xa8>
 800a9aa:	230c      	movs	r3, #12
 800a9ac:	6033      	str	r3, [r6, #0]
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f000 f80c 	bl	800a9cc <__malloc_unlock>
 800a9b4:	e794      	b.n	800a8e0 <_malloc_r+0x20>
 800a9b6:	6005      	str	r5, [r0, #0]
 800a9b8:	e7d6      	b.n	800a968 <_malloc_r+0xa8>
 800a9ba:	bf00      	nop
 800a9bc:	200010c8 	.word	0x200010c8

0800a9c0 <__malloc_lock>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	@ (800a9c8 <__malloc_lock+0x8>)
 800a9c2:	f002 b88a 	b.w	800cada <__retarget_lock_acquire_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	2000120c 	.word	0x2000120c

0800a9cc <__malloc_unlock>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	@ (800a9d4 <__malloc_unlock+0x8>)
 800a9ce:	f002 b885 	b.w	800cadc <__retarget_lock_release_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	2000120c 	.word	0x2000120c

0800a9d8 <sulp>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460d      	mov	r5, r1
 800a9de:	ec45 4b10 	vmov	d0, r4, r5
 800a9e2:	4616      	mov	r6, r2
 800a9e4:	f003 fe0e 	bl	800e604 <__ulp>
 800a9e8:	ec51 0b10 	vmov	r0, r1, d0
 800a9ec:	b17e      	cbz	r6, 800aa0e <sulp+0x36>
 800a9ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a9f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dd09      	ble.n	800aa0e <sulp+0x36>
 800a9fa:	051b      	lsls	r3, r3, #20
 800a9fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa00:	2400      	movs	r4, #0
 800aa02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa06:	4622      	mov	r2, r4
 800aa08:	462b      	mov	r3, r5
 800aa0a:	f7f5 fe0d 	bl	8000628 <__aeabi_dmul>
 800aa0e:	ec41 0b10 	vmov	d0, r0, r1
 800aa12:	bd70      	pop	{r4, r5, r6, pc}
 800aa14:	0000      	movs	r0, r0
	...

0800aa18 <_strtod_l>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	b09f      	sub	sp, #124	@ 0x7c
 800aa1e:	460c      	mov	r4, r1
 800aa20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa22:	2200      	movs	r2, #0
 800aa24:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa26:	9005      	str	r0, [sp, #20]
 800aa28:	f04f 0a00 	mov.w	sl, #0
 800aa2c:	f04f 0b00 	mov.w	fp, #0
 800aa30:	460a      	mov	r2, r1
 800aa32:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa34:	7811      	ldrb	r1, [r2, #0]
 800aa36:	292b      	cmp	r1, #43	@ 0x2b
 800aa38:	d04a      	beq.n	800aad0 <_strtod_l+0xb8>
 800aa3a:	d838      	bhi.n	800aaae <_strtod_l+0x96>
 800aa3c:	290d      	cmp	r1, #13
 800aa3e:	d832      	bhi.n	800aaa6 <_strtod_l+0x8e>
 800aa40:	2908      	cmp	r1, #8
 800aa42:	d832      	bhi.n	800aaaa <_strtod_l+0x92>
 800aa44:	2900      	cmp	r1, #0
 800aa46:	d03b      	beq.n	800aac0 <_strtod_l+0xa8>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aa4e:	782a      	ldrb	r2, [r5, #0]
 800aa50:	2a30      	cmp	r2, #48	@ 0x30
 800aa52:	f040 80b3 	bne.w	800abbc <_strtod_l+0x1a4>
 800aa56:	786a      	ldrb	r2, [r5, #1]
 800aa58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa5c:	2a58      	cmp	r2, #88	@ 0x58
 800aa5e:	d16e      	bne.n	800ab3e <_strtod_l+0x126>
 800aa60:	9302      	str	r3, [sp, #8]
 800aa62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	4a8e      	ldr	r2, [pc, #568]	@ (800aca4 <_strtod_l+0x28c>)
 800aa6c:	9805      	ldr	r0, [sp, #20]
 800aa6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa70:	a919      	add	r1, sp, #100	@ 0x64
 800aa72:	f002 ff6f 	bl	800d954 <__gethex>
 800aa76:	f010 060f 	ands.w	r6, r0, #15
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	d005      	beq.n	800aa8a <_strtod_l+0x72>
 800aa7e:	2e06      	cmp	r6, #6
 800aa80:	d128      	bne.n	800aad4 <_strtod_l+0xbc>
 800aa82:	3501      	adds	r5, #1
 800aa84:	2300      	movs	r3, #0
 800aa86:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f040 858e 	bne.w	800b5ae <_strtod_l+0xb96>
 800aa92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa94:	b1cb      	cbz	r3, 800aaca <_strtod_l+0xb2>
 800aa96:	4652      	mov	r2, sl
 800aa98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa9c:	ec43 2b10 	vmov	d0, r2, r3
 800aaa0:	b01f      	add	sp, #124	@ 0x7c
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	2920      	cmp	r1, #32
 800aaa8:	d1ce      	bne.n	800aa48 <_strtod_l+0x30>
 800aaaa:	3201      	adds	r2, #1
 800aaac:	e7c1      	b.n	800aa32 <_strtod_l+0x1a>
 800aaae:	292d      	cmp	r1, #45	@ 0x2d
 800aab0:	d1ca      	bne.n	800aa48 <_strtod_l+0x30>
 800aab2:	2101      	movs	r1, #1
 800aab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aab6:	1c51      	adds	r1, r2, #1
 800aab8:	9119      	str	r1, [sp, #100]	@ 0x64
 800aaba:	7852      	ldrb	r2, [r2, #1]
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	d1c5      	bne.n	800aa4c <_strtod_l+0x34>
 800aac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aac2:	9419      	str	r4, [sp, #100]	@ 0x64
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f040 8570 	bne.w	800b5aa <_strtod_l+0xb92>
 800aaca:	4652      	mov	r2, sl
 800aacc:	465b      	mov	r3, fp
 800aace:	e7e5      	b.n	800aa9c <_strtod_l+0x84>
 800aad0:	2100      	movs	r1, #0
 800aad2:	e7ef      	b.n	800aab4 <_strtod_l+0x9c>
 800aad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aad6:	b13a      	cbz	r2, 800aae8 <_strtod_l+0xd0>
 800aad8:	2135      	movs	r1, #53	@ 0x35
 800aada:	a81c      	add	r0, sp, #112	@ 0x70
 800aadc:	f003 fe8c 	bl	800e7f8 <__copybits>
 800aae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aae2:	9805      	ldr	r0, [sp, #20]
 800aae4:	f003 fa5a 	bl	800df9c <_Bfree>
 800aae8:	3e01      	subs	r6, #1
 800aaea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aaec:	2e04      	cmp	r6, #4
 800aaee:	d806      	bhi.n	800aafe <_strtod_l+0xe6>
 800aaf0:	e8df f006 	tbb	[pc, r6]
 800aaf4:	201d0314 	.word	0x201d0314
 800aaf8:	14          	.byte	0x14
 800aaf9:	00          	.byte	0x00
 800aafa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aafe:	05e1      	lsls	r1, r4, #23
 800ab00:	bf48      	it	mi
 800ab02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab0a:	0d1b      	lsrs	r3, r3, #20
 800ab0c:	051b      	lsls	r3, r3, #20
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1bb      	bne.n	800aa8a <_strtod_l+0x72>
 800ab12:	f001 ffb7 	bl	800ca84 <__errno>
 800ab16:	2322      	movs	r3, #34	@ 0x22
 800ab18:	6003      	str	r3, [r0, #0]
 800ab1a:	e7b6      	b.n	800aa8a <_strtod_l+0x72>
 800ab1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab2c:	e7e7      	b.n	800aafe <_strtod_l+0xe6>
 800ab2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800acac <_strtod_l+0x294>
 800ab32:	e7e4      	b.n	800aafe <_strtod_l+0xe6>
 800ab34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ab38:	f04f 3aff 	mov.w	sl, #4294967295
 800ab3c:	e7df      	b.n	800aafe <_strtod_l+0xe6>
 800ab3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b30      	cmp	r3, #48	@ 0x30
 800ab48:	d0f9      	beq.n	800ab3e <_strtod_l+0x126>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d09d      	beq.n	800aa8a <_strtod_l+0x72>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab54:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab56:	2300      	movs	r3, #0
 800ab58:	9308      	str	r3, [sp, #32]
 800ab5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5c:	461f      	mov	r7, r3
 800ab5e:	220a      	movs	r2, #10
 800ab60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ab62:	7805      	ldrb	r5, [r0, #0]
 800ab64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab68:	b2d9      	uxtb	r1, r3
 800ab6a:	2909      	cmp	r1, #9
 800ab6c:	d928      	bls.n	800abc0 <_strtod_l+0x1a8>
 800ab6e:	494e      	ldr	r1, [pc, #312]	@ (800aca8 <_strtod_l+0x290>)
 800ab70:	2201      	movs	r2, #1
 800ab72:	f001 fe96 	bl	800c8a2 <strncmp>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d032      	beq.n	800abe0 <_strtod_l+0x1c8>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	4681      	mov	r9, r0
 800ab80:	463d      	mov	r5, r7
 800ab82:	4603      	mov	r3, r0
 800ab84:	2a65      	cmp	r2, #101	@ 0x65
 800ab86:	d001      	beq.n	800ab8c <_strtod_l+0x174>
 800ab88:	2a45      	cmp	r2, #69	@ 0x45
 800ab8a:	d114      	bne.n	800abb6 <_strtod_l+0x19e>
 800ab8c:	b91d      	cbnz	r5, 800ab96 <_strtod_l+0x17e>
 800ab8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab90:	4302      	orrs	r2, r0
 800ab92:	d095      	beq.n	800aac0 <_strtod_l+0xa8>
 800ab94:	2500      	movs	r5, #0
 800ab96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab98:	1c62      	adds	r2, r4, #1
 800ab9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab9c:	7862      	ldrb	r2, [r4, #1]
 800ab9e:	2a2b      	cmp	r2, #43	@ 0x2b
 800aba0:	d077      	beq.n	800ac92 <_strtod_l+0x27a>
 800aba2:	2a2d      	cmp	r2, #45	@ 0x2d
 800aba4:	d07b      	beq.n	800ac9e <_strtod_l+0x286>
 800aba6:	f04f 0c00 	mov.w	ip, #0
 800abaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800abae:	2909      	cmp	r1, #9
 800abb0:	f240 8082 	bls.w	800acb8 <_strtod_l+0x2a0>
 800abb4:	9419      	str	r4, [sp, #100]	@ 0x64
 800abb6:	f04f 0800 	mov.w	r8, #0
 800abba:	e0a2      	b.n	800ad02 <_strtod_l+0x2ea>
 800abbc:	2300      	movs	r3, #0
 800abbe:	e7c7      	b.n	800ab50 <_strtod_l+0x138>
 800abc0:	2f08      	cmp	r7, #8
 800abc2:	bfd5      	itete	le
 800abc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800abc6:	9908      	ldrgt	r1, [sp, #32]
 800abc8:	fb02 3301 	mlale	r3, r2, r1, r3
 800abcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800abd0:	f100 0001 	add.w	r0, r0, #1
 800abd4:	bfd4      	ite	le
 800abd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800abd8:	9308      	strgt	r3, [sp, #32]
 800abda:	3701      	adds	r7, #1
 800abdc:	9019      	str	r0, [sp, #100]	@ 0x64
 800abde:	e7bf      	b.n	800ab60 <_strtod_l+0x148>
 800abe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	9219      	str	r2, [sp, #100]	@ 0x64
 800abe6:	785a      	ldrb	r2, [r3, #1]
 800abe8:	b37f      	cbz	r7, 800ac4a <_strtod_l+0x232>
 800abea:	4681      	mov	r9, r0
 800abec:	463d      	mov	r5, r7
 800abee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	d912      	bls.n	800ac1c <_strtod_l+0x204>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e7c4      	b.n	800ab84 <_strtod_l+0x16c>
 800abfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac00:	785a      	ldrb	r2, [r3, #1]
 800ac02:	3001      	adds	r0, #1
 800ac04:	2a30      	cmp	r2, #48	@ 0x30
 800ac06:	d0f8      	beq.n	800abfa <_strtod_l+0x1e2>
 800ac08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	f200 84d3 	bhi.w	800b5b8 <_strtod_l+0xba0>
 800ac12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac14:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac16:	4681      	mov	r9, r0
 800ac18:	2000      	movs	r0, #0
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	3a30      	subs	r2, #48	@ 0x30
 800ac1e:	f100 0301 	add.w	r3, r0, #1
 800ac22:	d02a      	beq.n	800ac7a <_strtod_l+0x262>
 800ac24:	4499      	add	r9, r3
 800ac26:	eb00 0c05 	add.w	ip, r0, r5
 800ac2a:	462b      	mov	r3, r5
 800ac2c:	210a      	movs	r1, #10
 800ac2e:	4563      	cmp	r3, ip
 800ac30:	d10d      	bne.n	800ac4e <_strtod_l+0x236>
 800ac32:	1c69      	adds	r1, r5, #1
 800ac34:	4401      	add	r1, r0
 800ac36:	4428      	add	r0, r5
 800ac38:	2808      	cmp	r0, #8
 800ac3a:	dc16      	bgt.n	800ac6a <_strtod_l+0x252>
 800ac3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ac3e:	230a      	movs	r3, #10
 800ac40:	fb03 2300 	mla	r3, r3, r0, r2
 800ac44:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac46:	2300      	movs	r3, #0
 800ac48:	e018      	b.n	800ac7c <_strtod_l+0x264>
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	e7da      	b.n	800ac04 <_strtod_l+0x1ec>
 800ac4e:	2b08      	cmp	r3, #8
 800ac50:	f103 0301 	add.w	r3, r3, #1
 800ac54:	dc03      	bgt.n	800ac5e <_strtod_l+0x246>
 800ac56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac58:	434e      	muls	r6, r1
 800ac5a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ac5c:	e7e7      	b.n	800ac2e <_strtod_l+0x216>
 800ac5e:	2b10      	cmp	r3, #16
 800ac60:	bfde      	ittt	le
 800ac62:	9e08      	ldrle	r6, [sp, #32]
 800ac64:	434e      	mulle	r6, r1
 800ac66:	9608      	strle	r6, [sp, #32]
 800ac68:	e7e1      	b.n	800ac2e <_strtod_l+0x216>
 800ac6a:	280f      	cmp	r0, #15
 800ac6c:	dceb      	bgt.n	800ac46 <_strtod_l+0x22e>
 800ac6e:	9808      	ldr	r0, [sp, #32]
 800ac70:	230a      	movs	r3, #10
 800ac72:	fb03 2300 	mla	r3, r3, r0, r2
 800ac76:	9308      	str	r3, [sp, #32]
 800ac78:	e7e5      	b.n	800ac46 <_strtod_l+0x22e>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac7e:	1c50      	adds	r0, r2, #1
 800ac80:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac82:	7852      	ldrb	r2, [r2, #1]
 800ac84:	4618      	mov	r0, r3
 800ac86:	460d      	mov	r5, r1
 800ac88:	e7b1      	b.n	800abee <_strtod_l+0x1d6>
 800ac8a:	f04f 0900 	mov.w	r9, #0
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e77d      	b.n	800ab8e <_strtod_l+0x176>
 800ac92:	f04f 0c00 	mov.w	ip, #0
 800ac96:	1ca2      	adds	r2, r4, #2
 800ac98:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac9a:	78a2      	ldrb	r2, [r4, #2]
 800ac9c:	e785      	b.n	800abaa <_strtod_l+0x192>
 800ac9e:	f04f 0c01 	mov.w	ip, #1
 800aca2:	e7f8      	b.n	800ac96 <_strtod_l+0x27e>
 800aca4:	0800fb4c 	.word	0x0800fb4c
 800aca8:	0800fb34 	.word	0x0800fb34
 800acac:	7ff00000 	.word	0x7ff00000
 800acb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acb2:	1c51      	adds	r1, r2, #1
 800acb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800acb6:	7852      	ldrb	r2, [r2, #1]
 800acb8:	2a30      	cmp	r2, #48	@ 0x30
 800acba:	d0f9      	beq.n	800acb0 <_strtod_l+0x298>
 800acbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800acc0:	2908      	cmp	r1, #8
 800acc2:	f63f af78 	bhi.w	800abb6 <_strtod_l+0x19e>
 800acc6:	3a30      	subs	r2, #48	@ 0x30
 800acc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800acca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800accc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800acce:	f04f 080a 	mov.w	r8, #10
 800acd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800acd4:	1c56      	adds	r6, r2, #1
 800acd6:	9619      	str	r6, [sp, #100]	@ 0x64
 800acd8:	7852      	ldrb	r2, [r2, #1]
 800acda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800acde:	f1be 0f09 	cmp.w	lr, #9
 800ace2:	d939      	bls.n	800ad58 <_strtod_l+0x340>
 800ace4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ace6:	1a76      	subs	r6, r6, r1
 800ace8:	2e08      	cmp	r6, #8
 800acea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800acee:	dc03      	bgt.n	800acf8 <_strtod_l+0x2e0>
 800acf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acf2:	4588      	cmp	r8, r1
 800acf4:	bfa8      	it	ge
 800acf6:	4688      	movge	r8, r1
 800acf8:	f1bc 0f00 	cmp.w	ip, #0
 800acfc:	d001      	beq.n	800ad02 <_strtod_l+0x2ea>
 800acfe:	f1c8 0800 	rsb	r8, r8, #0
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	d14e      	bne.n	800ada4 <_strtod_l+0x38c>
 800ad06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad08:	4308      	orrs	r0, r1
 800ad0a:	f47f aebe 	bne.w	800aa8a <_strtod_l+0x72>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f47f aed6 	bne.w	800aac0 <_strtod_l+0xa8>
 800ad14:	2a69      	cmp	r2, #105	@ 0x69
 800ad16:	d028      	beq.n	800ad6a <_strtod_l+0x352>
 800ad18:	dc25      	bgt.n	800ad66 <_strtod_l+0x34e>
 800ad1a:	2a49      	cmp	r2, #73	@ 0x49
 800ad1c:	d025      	beq.n	800ad6a <_strtod_l+0x352>
 800ad1e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad20:	f47f aece 	bne.w	800aac0 <_strtod_l+0xa8>
 800ad24:	499b      	ldr	r1, [pc, #620]	@ (800af94 <_strtod_l+0x57c>)
 800ad26:	a819      	add	r0, sp, #100	@ 0x64
 800ad28:	f003 f836 	bl	800dd98 <__match>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	f43f aec7 	beq.w	800aac0 <_strtod_l+0xa8>
 800ad32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b28      	cmp	r3, #40	@ 0x28
 800ad38:	d12e      	bne.n	800ad98 <_strtod_l+0x380>
 800ad3a:	4997      	ldr	r1, [pc, #604]	@ (800af98 <_strtod_l+0x580>)
 800ad3c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad3e:	a819      	add	r0, sp, #100	@ 0x64
 800ad40:	f003 f83e 	bl	800ddc0 <__hexnan>
 800ad44:	2805      	cmp	r0, #5
 800ad46:	d127      	bne.n	800ad98 <_strtod_l+0x380>
 800ad48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ad4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ad4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ad52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ad56:	e698      	b.n	800aa8a <_strtod_l+0x72>
 800ad58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad5a:	fb08 2101 	mla	r1, r8, r1, r2
 800ad5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ad62:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad64:	e7b5      	b.n	800acd2 <_strtod_l+0x2ba>
 800ad66:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad68:	e7da      	b.n	800ad20 <_strtod_l+0x308>
 800ad6a:	498c      	ldr	r1, [pc, #560]	@ (800af9c <_strtod_l+0x584>)
 800ad6c:	a819      	add	r0, sp, #100	@ 0x64
 800ad6e:	f003 f813 	bl	800dd98 <__match>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f43f aea4 	beq.w	800aac0 <_strtod_l+0xa8>
 800ad78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad7a:	4989      	ldr	r1, [pc, #548]	@ (800afa0 <_strtod_l+0x588>)
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	a819      	add	r0, sp, #100	@ 0x64
 800ad80:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad82:	f003 f809 	bl	800dd98 <__match>
 800ad86:	b910      	cbnz	r0, 800ad8e <_strtod_l+0x376>
 800ad88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800afb0 <_strtod_l+0x598>
 800ad92:	f04f 0a00 	mov.w	sl, #0
 800ad96:	e678      	b.n	800aa8a <_strtod_l+0x72>
 800ad98:	4882      	ldr	r0, [pc, #520]	@ (800afa4 <_strtod_l+0x58c>)
 800ad9a:	f001 feb1 	bl	800cb00 <nan>
 800ad9e:	ec5b ab10 	vmov	sl, fp, d0
 800ada2:	e672      	b.n	800aa8a <_strtod_l+0x72>
 800ada4:	eba8 0309 	sub.w	r3, r8, r9
 800ada8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800adaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800adac:	2f00      	cmp	r7, #0
 800adae:	bf08      	it	eq
 800adb0:	462f      	moveq	r7, r5
 800adb2:	2d10      	cmp	r5, #16
 800adb4:	462c      	mov	r4, r5
 800adb6:	bfa8      	it	ge
 800adb8:	2410      	movge	r4, #16
 800adba:	f7f5 fbbb 	bl	8000534 <__aeabi_ui2d>
 800adbe:	2d09      	cmp	r5, #9
 800adc0:	4682      	mov	sl, r0
 800adc2:	468b      	mov	fp, r1
 800adc4:	dc13      	bgt.n	800adee <_strtod_l+0x3d6>
 800adc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f43f ae5e 	beq.w	800aa8a <_strtod_l+0x72>
 800adce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add0:	dd78      	ble.n	800aec4 <_strtod_l+0x4ac>
 800add2:	2b16      	cmp	r3, #22
 800add4:	dc5f      	bgt.n	800ae96 <_strtod_l+0x47e>
 800add6:	4974      	ldr	r1, [pc, #464]	@ (800afa8 <_strtod_l+0x590>)
 800add8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800addc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade0:	4652      	mov	r2, sl
 800ade2:	465b      	mov	r3, fp
 800ade4:	f7f5 fc20 	bl	8000628 <__aeabi_dmul>
 800ade8:	4682      	mov	sl, r0
 800adea:	468b      	mov	fp, r1
 800adec:	e64d      	b.n	800aa8a <_strtod_l+0x72>
 800adee:	4b6e      	ldr	r3, [pc, #440]	@ (800afa8 <_strtod_l+0x590>)
 800adf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800adf8:	f7f5 fc16 	bl	8000628 <__aeabi_dmul>
 800adfc:	4682      	mov	sl, r0
 800adfe:	9808      	ldr	r0, [sp, #32]
 800ae00:	468b      	mov	fp, r1
 800ae02:	f7f5 fb97 	bl	8000534 <__aeabi_ui2d>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	f7f5 fa55 	bl	80002bc <__adddf3>
 800ae12:	2d0f      	cmp	r5, #15
 800ae14:	4682      	mov	sl, r0
 800ae16:	468b      	mov	fp, r1
 800ae18:	ddd5      	ble.n	800adc6 <_strtod_l+0x3ae>
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	1b2c      	subs	r4, r5, r4
 800ae1e:	441c      	add	r4, r3
 800ae20:	2c00      	cmp	r4, #0
 800ae22:	f340 8096 	ble.w	800af52 <_strtod_l+0x53a>
 800ae26:	f014 030f 	ands.w	r3, r4, #15
 800ae2a:	d00a      	beq.n	800ae42 <_strtod_l+0x42a>
 800ae2c:	495e      	ldr	r1, [pc, #376]	@ (800afa8 <_strtod_l+0x590>)
 800ae2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae32:	4652      	mov	r2, sl
 800ae34:	465b      	mov	r3, fp
 800ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3a:	f7f5 fbf5 	bl	8000628 <__aeabi_dmul>
 800ae3e:	4682      	mov	sl, r0
 800ae40:	468b      	mov	fp, r1
 800ae42:	f034 040f 	bics.w	r4, r4, #15
 800ae46:	d073      	beq.n	800af30 <_strtod_l+0x518>
 800ae48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ae4c:	dd48      	ble.n	800aee0 <_strtod_l+0x4c8>
 800ae4e:	2400      	movs	r4, #0
 800ae50:	46a0      	mov	r8, r4
 800ae52:	940a      	str	r4, [sp, #40]	@ 0x28
 800ae54:	46a1      	mov	r9, r4
 800ae56:	9a05      	ldr	r2, [sp, #20]
 800ae58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800afb0 <_strtod_l+0x598>
 800ae5c:	2322      	movs	r3, #34	@ 0x22
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	f04f 0a00 	mov.w	sl, #0
 800ae64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f43f ae0f 	beq.w	800aa8a <_strtod_l+0x72>
 800ae6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae6e:	9805      	ldr	r0, [sp, #20]
 800ae70:	f003 f894 	bl	800df9c <_Bfree>
 800ae74:	9805      	ldr	r0, [sp, #20]
 800ae76:	4649      	mov	r1, r9
 800ae78:	f003 f890 	bl	800df9c <_Bfree>
 800ae7c:	9805      	ldr	r0, [sp, #20]
 800ae7e:	4641      	mov	r1, r8
 800ae80:	f003 f88c 	bl	800df9c <_Bfree>
 800ae84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae86:	9805      	ldr	r0, [sp, #20]
 800ae88:	f003 f888 	bl	800df9c <_Bfree>
 800ae8c:	9805      	ldr	r0, [sp, #20]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	f003 f884 	bl	800df9c <_Bfree>
 800ae94:	e5f9      	b.n	800aa8a <_strtod_l+0x72>
 800ae96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	dbbc      	blt.n	800ae1a <_strtod_l+0x402>
 800aea0:	4c41      	ldr	r4, [pc, #260]	@ (800afa8 <_strtod_l+0x590>)
 800aea2:	f1c5 050f 	rsb	r5, r5, #15
 800aea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aeaa:	4652      	mov	r2, sl
 800aeac:	465b      	mov	r3, fp
 800aeae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb2:	f7f5 fbb9 	bl	8000628 <__aeabi_dmul>
 800aeb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb8:	1b5d      	subs	r5, r3, r5
 800aeba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aec2:	e78f      	b.n	800ade4 <_strtod_l+0x3cc>
 800aec4:	3316      	adds	r3, #22
 800aec6:	dba8      	blt.n	800ae1a <_strtod_l+0x402>
 800aec8:	4b37      	ldr	r3, [pc, #220]	@ (800afa8 <_strtod_l+0x590>)
 800aeca:	eba9 0808 	sub.w	r8, r9, r8
 800aece:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aed2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aed6:	4650      	mov	r0, sl
 800aed8:	4659      	mov	r1, fp
 800aeda:	f7f5 fccf 	bl	800087c <__aeabi_ddiv>
 800aede:	e783      	b.n	800ade8 <_strtod_l+0x3d0>
 800aee0:	4b32      	ldr	r3, [pc, #200]	@ (800afac <_strtod_l+0x594>)
 800aee2:	9308      	str	r3, [sp, #32]
 800aee4:	2300      	movs	r3, #0
 800aee6:	1124      	asrs	r4, r4, #4
 800aee8:	4650      	mov	r0, sl
 800aeea:	4659      	mov	r1, fp
 800aeec:	461e      	mov	r6, r3
 800aeee:	2c01      	cmp	r4, #1
 800aef0:	dc21      	bgt.n	800af36 <_strtod_l+0x51e>
 800aef2:	b10b      	cbz	r3, 800aef8 <_strtod_l+0x4e0>
 800aef4:	4682      	mov	sl, r0
 800aef6:	468b      	mov	fp, r1
 800aef8:	492c      	ldr	r1, [pc, #176]	@ (800afac <_strtod_l+0x594>)
 800aefa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800aefe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af02:	4652      	mov	r2, sl
 800af04:	465b      	mov	r3, fp
 800af06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af0a:	f7f5 fb8d 	bl	8000628 <__aeabi_dmul>
 800af0e:	4b28      	ldr	r3, [pc, #160]	@ (800afb0 <_strtod_l+0x598>)
 800af10:	460a      	mov	r2, r1
 800af12:	400b      	ands	r3, r1
 800af14:	4927      	ldr	r1, [pc, #156]	@ (800afb4 <_strtod_l+0x59c>)
 800af16:	428b      	cmp	r3, r1
 800af18:	4682      	mov	sl, r0
 800af1a:	d898      	bhi.n	800ae4e <_strtod_l+0x436>
 800af1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af20:	428b      	cmp	r3, r1
 800af22:	bf86      	itte	hi
 800af24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800afb8 <_strtod_l+0x5a0>
 800af28:	f04f 3aff 	movhi.w	sl, #4294967295
 800af2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af30:	2300      	movs	r3, #0
 800af32:	9308      	str	r3, [sp, #32]
 800af34:	e07a      	b.n	800b02c <_strtod_l+0x614>
 800af36:	07e2      	lsls	r2, r4, #31
 800af38:	d505      	bpl.n	800af46 <_strtod_l+0x52e>
 800af3a:	9b08      	ldr	r3, [sp, #32]
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 fb72 	bl	8000628 <__aeabi_dmul>
 800af44:	2301      	movs	r3, #1
 800af46:	9a08      	ldr	r2, [sp, #32]
 800af48:	3208      	adds	r2, #8
 800af4a:	3601      	adds	r6, #1
 800af4c:	1064      	asrs	r4, r4, #1
 800af4e:	9208      	str	r2, [sp, #32]
 800af50:	e7cd      	b.n	800aeee <_strtod_l+0x4d6>
 800af52:	d0ed      	beq.n	800af30 <_strtod_l+0x518>
 800af54:	4264      	negs	r4, r4
 800af56:	f014 020f 	ands.w	r2, r4, #15
 800af5a:	d00a      	beq.n	800af72 <_strtod_l+0x55a>
 800af5c:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <_strtod_l+0x590>)
 800af5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af62:	4650      	mov	r0, sl
 800af64:	4659      	mov	r1, fp
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f7f5 fc87 	bl	800087c <__aeabi_ddiv>
 800af6e:	4682      	mov	sl, r0
 800af70:	468b      	mov	fp, r1
 800af72:	1124      	asrs	r4, r4, #4
 800af74:	d0dc      	beq.n	800af30 <_strtod_l+0x518>
 800af76:	2c1f      	cmp	r4, #31
 800af78:	dd20      	ble.n	800afbc <_strtod_l+0x5a4>
 800af7a:	2400      	movs	r4, #0
 800af7c:	46a0      	mov	r8, r4
 800af7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800af80:	46a1      	mov	r9, r4
 800af82:	9a05      	ldr	r2, [sp, #20]
 800af84:	2322      	movs	r3, #34	@ 0x22
 800af86:	f04f 0a00 	mov.w	sl, #0
 800af8a:	f04f 0b00 	mov.w	fp, #0
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	e768      	b.n	800ae64 <_strtod_l+0x44c>
 800af92:	bf00      	nop
 800af94:	0800fc96 	.word	0x0800fc96
 800af98:	0800fb38 	.word	0x0800fb38
 800af9c:	0800fc8e 	.word	0x0800fc8e
 800afa0:	0800fd7a 	.word	0x0800fd7a
 800afa4:	0800fd76 	.word	0x0800fd76
 800afa8:	0800fee0 	.word	0x0800fee0
 800afac:	0800feb8 	.word	0x0800feb8
 800afb0:	7ff00000 	.word	0x7ff00000
 800afb4:	7ca00000 	.word	0x7ca00000
 800afb8:	7fefffff 	.word	0x7fefffff
 800afbc:	f014 0310 	ands.w	r3, r4, #16
 800afc0:	bf18      	it	ne
 800afc2:	236a      	movne	r3, #106	@ 0x6a
 800afc4:	4ea9      	ldr	r6, [pc, #676]	@ (800b26c <_strtod_l+0x854>)
 800afc6:	9308      	str	r3, [sp, #32]
 800afc8:	4650      	mov	r0, sl
 800afca:	4659      	mov	r1, fp
 800afcc:	2300      	movs	r3, #0
 800afce:	07e2      	lsls	r2, r4, #31
 800afd0:	d504      	bpl.n	800afdc <_strtod_l+0x5c4>
 800afd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afd6:	f7f5 fb27 	bl	8000628 <__aeabi_dmul>
 800afda:	2301      	movs	r3, #1
 800afdc:	1064      	asrs	r4, r4, #1
 800afde:	f106 0608 	add.w	r6, r6, #8
 800afe2:	d1f4      	bne.n	800afce <_strtod_l+0x5b6>
 800afe4:	b10b      	cbz	r3, 800afea <_strtod_l+0x5d2>
 800afe6:	4682      	mov	sl, r0
 800afe8:	468b      	mov	fp, r1
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	b1b3      	cbz	r3, 800b01c <_strtod_l+0x604>
 800afee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	4659      	mov	r1, fp
 800affa:	dd0f      	ble.n	800b01c <_strtod_l+0x604>
 800affc:	2b1f      	cmp	r3, #31
 800affe:	dd55      	ble.n	800b0ac <_strtod_l+0x694>
 800b000:	2b34      	cmp	r3, #52	@ 0x34
 800b002:	bfde      	ittt	le
 800b004:	f04f 33ff 	movle.w	r3, #4294967295
 800b008:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b00c:	4093      	lslle	r3, r2
 800b00e:	f04f 0a00 	mov.w	sl, #0
 800b012:	bfcc      	ite	gt
 800b014:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b018:	ea03 0b01 	andle.w	fp, r3, r1
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	4650      	mov	r0, sl
 800b022:	4659      	mov	r1, fp
 800b024:	f7f5 fd68 	bl	8000af8 <__aeabi_dcmpeq>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1a6      	bne.n	800af7a <_strtod_l+0x562>
 800b02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b032:	9805      	ldr	r0, [sp, #20]
 800b034:	462b      	mov	r3, r5
 800b036:	463a      	mov	r2, r7
 800b038:	f003 f818 	bl	800e06c <__s2b>
 800b03c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f af05 	beq.w	800ae4e <_strtod_l+0x436>
 800b044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b046:	2a00      	cmp	r2, #0
 800b048:	eba9 0308 	sub.w	r3, r9, r8
 800b04c:	bfa8      	it	ge
 800b04e:	2300      	movge	r3, #0
 800b050:	9312      	str	r3, [sp, #72]	@ 0x48
 800b052:	2400      	movs	r4, #0
 800b054:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b058:	9316      	str	r3, [sp, #88]	@ 0x58
 800b05a:	46a0      	mov	r8, r4
 800b05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b05e:	9805      	ldr	r0, [sp, #20]
 800b060:	6859      	ldr	r1, [r3, #4]
 800b062:	f002 ff5b 	bl	800df1c <_Balloc>
 800b066:	4681      	mov	r9, r0
 800b068:	2800      	cmp	r0, #0
 800b06a:	f43f aef4 	beq.w	800ae56 <_strtod_l+0x43e>
 800b06e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b070:	691a      	ldr	r2, [r3, #16]
 800b072:	3202      	adds	r2, #2
 800b074:	f103 010c 	add.w	r1, r3, #12
 800b078:	0092      	lsls	r2, r2, #2
 800b07a:	300c      	adds	r0, #12
 800b07c:	f001 fd2f 	bl	800cade <memcpy>
 800b080:	ec4b ab10 	vmov	d0, sl, fp
 800b084:	9805      	ldr	r0, [sp, #20]
 800b086:	aa1c      	add	r2, sp, #112	@ 0x70
 800b088:	a91b      	add	r1, sp, #108	@ 0x6c
 800b08a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b08e:	f003 fb29 	bl	800e6e4 <__d2b>
 800b092:	901a      	str	r0, [sp, #104]	@ 0x68
 800b094:	2800      	cmp	r0, #0
 800b096:	f43f aede 	beq.w	800ae56 <_strtod_l+0x43e>
 800b09a:	9805      	ldr	r0, [sp, #20]
 800b09c:	2101      	movs	r1, #1
 800b09e:	f003 f87b 	bl	800e198 <__i2b>
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	b948      	cbnz	r0, 800b0ba <_strtod_l+0x6a2>
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	e6d4      	b.n	800ae56 <_strtod_l+0x43e>
 800b0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b4:	ea03 0a0a 	and.w	sl, r3, sl
 800b0b8:	e7b0      	b.n	800b01c <_strtod_l+0x604>
 800b0ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b0bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	bfab      	itete	ge
 800b0c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b0c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b0c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b0c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b0ca:	bfac      	ite	ge
 800b0cc:	18ef      	addge	r7, r5, r3
 800b0ce:	1b5e      	sublt	r6, r3, r5
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	1aed      	subs	r5, r5, r3
 800b0d4:	4415      	add	r5, r2
 800b0d6:	4b66      	ldr	r3, [pc, #408]	@ (800b270 <_strtod_l+0x858>)
 800b0d8:	3d01      	subs	r5, #1
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b0e0:	da50      	bge.n	800b184 <_strtod_l+0x76c>
 800b0e2:	1b5b      	subs	r3, r3, r5
 800b0e4:	2b1f      	cmp	r3, #31
 800b0e6:	eba2 0203 	sub.w	r2, r2, r3
 800b0ea:	f04f 0101 	mov.w	r1, #1
 800b0ee:	dc3d      	bgt.n	800b16c <_strtod_l+0x754>
 800b0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b0fa:	18bd      	adds	r5, r7, r2
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	42af      	cmp	r7, r5
 800b100:	4416      	add	r6, r2
 800b102:	441e      	add	r6, r3
 800b104:	463b      	mov	r3, r7
 800b106:	bfa8      	it	ge
 800b108:	462b      	movge	r3, r5
 800b10a:	42b3      	cmp	r3, r6
 800b10c:	bfa8      	it	ge
 800b10e:	4633      	movge	r3, r6
 800b110:	2b00      	cmp	r3, #0
 800b112:	bfc2      	ittt	gt
 800b114:	1aed      	subgt	r5, r5, r3
 800b116:	1af6      	subgt	r6, r6, r3
 800b118:	1aff      	subgt	r7, r7, r3
 800b11a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dd16      	ble.n	800b14e <_strtod_l+0x736>
 800b120:	4641      	mov	r1, r8
 800b122:	9805      	ldr	r0, [sp, #20]
 800b124:	461a      	mov	r2, r3
 800b126:	f003 f8f7 	bl	800e318 <__pow5mult>
 800b12a:	4680      	mov	r8, r0
 800b12c:	2800      	cmp	r0, #0
 800b12e:	d0ba      	beq.n	800b0a6 <_strtod_l+0x68e>
 800b130:	4601      	mov	r1, r0
 800b132:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b134:	9805      	ldr	r0, [sp, #20]
 800b136:	f003 f845 	bl	800e1c4 <__multiply>
 800b13a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b13c:	2800      	cmp	r0, #0
 800b13e:	f43f ae8a 	beq.w	800ae56 <_strtod_l+0x43e>
 800b142:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	f002 ff29 	bl	800df9c <_Bfree>
 800b14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b14e:	2d00      	cmp	r5, #0
 800b150:	dc1d      	bgt.n	800b18e <_strtod_l+0x776>
 800b152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	dd23      	ble.n	800b1a0 <_strtod_l+0x788>
 800b158:	4649      	mov	r1, r9
 800b15a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b15c:	9805      	ldr	r0, [sp, #20]
 800b15e:	f003 f8db 	bl	800e318 <__pow5mult>
 800b162:	4681      	mov	r9, r0
 800b164:	b9e0      	cbnz	r0, 800b1a0 <_strtod_l+0x788>
 800b166:	f04f 0900 	mov.w	r9, #0
 800b16a:	e674      	b.n	800ae56 <_strtod_l+0x43e>
 800b16c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b170:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b174:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b178:	35e2      	adds	r5, #226	@ 0xe2
 800b17a:	fa01 f305 	lsl.w	r3, r1, r5
 800b17e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b180:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b182:	e7ba      	b.n	800b0fa <_strtod_l+0x6e2>
 800b184:	2300      	movs	r3, #0
 800b186:	9310      	str	r3, [sp, #64]	@ 0x40
 800b188:	2301      	movs	r3, #1
 800b18a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b18c:	e7b5      	b.n	800b0fa <_strtod_l+0x6e2>
 800b18e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b190:	9805      	ldr	r0, [sp, #20]
 800b192:	462a      	mov	r2, r5
 800b194:	f003 f91a 	bl	800e3cc <__lshift>
 800b198:	901a      	str	r0, [sp, #104]	@ 0x68
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d1d9      	bne.n	800b152 <_strtod_l+0x73a>
 800b19e:	e65a      	b.n	800ae56 <_strtod_l+0x43e>
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	dd07      	ble.n	800b1b4 <_strtod_l+0x79c>
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	9805      	ldr	r0, [sp, #20]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	f003 f90f 	bl	800e3cc <__lshift>
 800b1ae:	4681      	mov	r9, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d0d8      	beq.n	800b166 <_strtod_l+0x74e>
 800b1b4:	2f00      	cmp	r7, #0
 800b1b6:	dd08      	ble.n	800b1ca <_strtod_l+0x7b2>
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	9805      	ldr	r0, [sp, #20]
 800b1bc:	463a      	mov	r2, r7
 800b1be:	f003 f905 	bl	800e3cc <__lshift>
 800b1c2:	4680      	mov	r8, r0
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f43f ae46 	beq.w	800ae56 <_strtod_l+0x43e>
 800b1ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1cc:	9805      	ldr	r0, [sp, #20]
 800b1ce:	464a      	mov	r2, r9
 800b1d0:	f003 f984 	bl	800e4dc <__mdiff>
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f ae3d 	beq.w	800ae56 <_strtod_l+0x43e>
 800b1dc:	68c3      	ldr	r3, [r0, #12]
 800b1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60c3      	str	r3, [r0, #12]
 800b1e4:	4641      	mov	r1, r8
 800b1e6:	f003 f95d 	bl	800e4a4 <__mcmp>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	da46      	bge.n	800b27c <_strtod_l+0x864>
 800b1ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1f0:	ea53 030a 	orrs.w	r3, r3, sl
 800b1f4:	d16c      	bne.n	800b2d0 <_strtod_l+0x8b8>
 800b1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d168      	bne.n	800b2d0 <_strtod_l+0x8b8>
 800b1fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b202:	0d1b      	lsrs	r3, r3, #20
 800b204:	051b      	lsls	r3, r3, #20
 800b206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b20a:	d961      	bls.n	800b2d0 <_strtod_l+0x8b8>
 800b20c:	6963      	ldr	r3, [r4, #20]
 800b20e:	b913      	cbnz	r3, 800b216 <_strtod_l+0x7fe>
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	2b01      	cmp	r3, #1
 800b214:	dd5c      	ble.n	800b2d0 <_strtod_l+0x8b8>
 800b216:	4621      	mov	r1, r4
 800b218:	2201      	movs	r2, #1
 800b21a:	9805      	ldr	r0, [sp, #20]
 800b21c:	f003 f8d6 	bl	800e3cc <__lshift>
 800b220:	4641      	mov	r1, r8
 800b222:	4604      	mov	r4, r0
 800b224:	f003 f93e 	bl	800e4a4 <__mcmp>
 800b228:	2800      	cmp	r0, #0
 800b22a:	dd51      	ble.n	800b2d0 <_strtod_l+0x8b8>
 800b22c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b230:	9a08      	ldr	r2, [sp, #32]
 800b232:	0d1b      	lsrs	r3, r3, #20
 800b234:	051b      	lsls	r3, r3, #20
 800b236:	2a00      	cmp	r2, #0
 800b238:	d06b      	beq.n	800b312 <_strtod_l+0x8fa>
 800b23a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b23e:	d868      	bhi.n	800b312 <_strtod_l+0x8fa>
 800b240:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b244:	f67f ae9d 	bls.w	800af82 <_strtod_l+0x56a>
 800b248:	4b0a      	ldr	r3, [pc, #40]	@ (800b274 <_strtod_l+0x85c>)
 800b24a:	4650      	mov	r0, sl
 800b24c:	4659      	mov	r1, fp
 800b24e:	2200      	movs	r2, #0
 800b250:	f7f5 f9ea 	bl	8000628 <__aeabi_dmul>
 800b254:	4b08      	ldr	r3, [pc, #32]	@ (800b278 <_strtod_l+0x860>)
 800b256:	400b      	ands	r3, r1
 800b258:	4682      	mov	sl, r0
 800b25a:	468b      	mov	fp, r1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f47f ae05 	bne.w	800ae6c <_strtod_l+0x454>
 800b262:	9a05      	ldr	r2, [sp, #20]
 800b264:	2322      	movs	r3, #34	@ 0x22
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	e600      	b.n	800ae6c <_strtod_l+0x454>
 800b26a:	bf00      	nop
 800b26c:	0800fb60 	.word	0x0800fb60
 800b270:	fffffc02 	.word	0xfffffc02
 800b274:	39500000 	.word	0x39500000
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b280:	d165      	bne.n	800b34e <_strtod_l+0x936>
 800b282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b288:	b35a      	cbz	r2, 800b2e2 <_strtod_l+0x8ca>
 800b28a:	4a9f      	ldr	r2, [pc, #636]	@ (800b508 <_strtod_l+0xaf0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d12b      	bne.n	800b2e8 <_strtod_l+0x8d0>
 800b290:	9b08      	ldr	r3, [sp, #32]
 800b292:	4651      	mov	r1, sl
 800b294:	b303      	cbz	r3, 800b2d8 <_strtod_l+0x8c0>
 800b296:	4b9d      	ldr	r3, [pc, #628]	@ (800b50c <_strtod_l+0xaf4>)
 800b298:	465a      	mov	r2, fp
 800b29a:	4013      	ands	r3, r2
 800b29c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	d81b      	bhi.n	800b2de <_strtod_l+0x8c6>
 800b2a6:	0d1b      	lsrs	r3, r3, #20
 800b2a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b0:	4299      	cmp	r1, r3
 800b2b2:	d119      	bne.n	800b2e8 <_strtod_l+0x8d0>
 800b2b4:	4b96      	ldr	r3, [pc, #600]	@ (800b510 <_strtod_l+0xaf8>)
 800b2b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d102      	bne.n	800b2c2 <_strtod_l+0x8aa>
 800b2bc:	3101      	adds	r1, #1
 800b2be:	f43f adca 	beq.w	800ae56 <_strtod_l+0x43e>
 800b2c2:	4b92      	ldr	r3, [pc, #584]	@ (800b50c <_strtod_l+0xaf4>)
 800b2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b2cc:	f04f 0a00 	mov.w	sl, #0
 800b2d0:	9b08      	ldr	r3, [sp, #32]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1b8      	bne.n	800b248 <_strtod_l+0x830>
 800b2d6:	e5c9      	b.n	800ae6c <_strtod_l+0x454>
 800b2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2dc:	e7e8      	b.n	800b2b0 <_strtod_l+0x898>
 800b2de:	4613      	mov	r3, r2
 800b2e0:	e7e6      	b.n	800b2b0 <_strtod_l+0x898>
 800b2e2:	ea53 030a 	orrs.w	r3, r3, sl
 800b2e6:	d0a1      	beq.n	800b22c <_strtod_l+0x814>
 800b2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2ea:	b1db      	cbz	r3, 800b324 <_strtod_l+0x90c>
 800b2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ee:	4213      	tst	r3, r2
 800b2f0:	d0ee      	beq.n	800b2d0 <_strtod_l+0x8b8>
 800b2f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	4659      	mov	r1, fp
 800b2fa:	b1bb      	cbz	r3, 800b32c <_strtod_l+0x914>
 800b2fc:	f7ff fb6c 	bl	800a9d8 <sulp>
 800b300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b304:	ec53 2b10 	vmov	r2, r3, d0
 800b308:	f7f4 ffd8 	bl	80002bc <__adddf3>
 800b30c:	4682      	mov	sl, r0
 800b30e:	468b      	mov	fp, r1
 800b310:	e7de      	b.n	800b2d0 <_strtod_l+0x8b8>
 800b312:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b316:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b31a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b31e:	f04f 3aff 	mov.w	sl, #4294967295
 800b322:	e7d5      	b.n	800b2d0 <_strtod_l+0x8b8>
 800b324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b326:	ea13 0f0a 	tst.w	r3, sl
 800b32a:	e7e1      	b.n	800b2f0 <_strtod_l+0x8d8>
 800b32c:	f7ff fb54 	bl	800a9d8 <sulp>
 800b330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b334:	ec53 2b10 	vmov	r2, r3, d0
 800b338:	f7f4 ffbe 	bl	80002b8 <__aeabi_dsub>
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	f7f5 fbd8 	bl	8000af8 <__aeabi_dcmpeq>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0c1      	beq.n	800b2d0 <_strtod_l+0x8b8>
 800b34c:	e619      	b.n	800af82 <_strtod_l+0x56a>
 800b34e:	4641      	mov	r1, r8
 800b350:	4620      	mov	r0, r4
 800b352:	f003 fa1f 	bl	800e794 <__ratio>
 800b356:	ec57 6b10 	vmov	r6, r7, d0
 800b35a:	2200      	movs	r2, #0
 800b35c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b360:	4630      	mov	r0, r6
 800b362:	4639      	mov	r1, r7
 800b364:	f7f5 fbdc 	bl	8000b20 <__aeabi_dcmple>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d06f      	beq.n	800b44c <_strtod_l+0xa34>
 800b36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d17a      	bne.n	800b468 <_strtod_l+0xa50>
 800b372:	f1ba 0f00 	cmp.w	sl, #0
 800b376:	d158      	bne.n	800b42a <_strtod_l+0xa12>
 800b378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b37a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d15a      	bne.n	800b438 <_strtod_l+0xa20>
 800b382:	4b64      	ldr	r3, [pc, #400]	@ (800b514 <_strtod_l+0xafc>)
 800b384:	2200      	movs	r2, #0
 800b386:	4630      	mov	r0, r6
 800b388:	4639      	mov	r1, r7
 800b38a:	f7f5 fbbf 	bl	8000b0c <__aeabi_dcmplt>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d159      	bne.n	800b446 <_strtod_l+0xa2e>
 800b392:	4630      	mov	r0, r6
 800b394:	4639      	mov	r1, r7
 800b396:	4b60      	ldr	r3, [pc, #384]	@ (800b518 <_strtod_l+0xb00>)
 800b398:	2200      	movs	r2, #0
 800b39a:	f7f5 f945 	bl	8000628 <__aeabi_dmul>
 800b39e:	4606      	mov	r6, r0
 800b3a0:	460f      	mov	r7, r1
 800b3a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b3a6:	9606      	str	r6, [sp, #24]
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3ae:	4d57      	ldr	r5, [pc, #348]	@ (800b50c <_strtod_l+0xaf4>)
 800b3b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b6:	401d      	ands	r5, r3
 800b3b8:	4b58      	ldr	r3, [pc, #352]	@ (800b51c <_strtod_l+0xb04>)
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	f040 80b2 	bne.w	800b524 <_strtod_l+0xb0c>
 800b3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b3c6:	ec4b ab10 	vmov	d0, sl, fp
 800b3ca:	f003 f91b 	bl	800e604 <__ulp>
 800b3ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3d2:	ec51 0b10 	vmov	r0, r1, d0
 800b3d6:	f7f5 f927 	bl	8000628 <__aeabi_dmul>
 800b3da:	4652      	mov	r2, sl
 800b3dc:	465b      	mov	r3, fp
 800b3de:	f7f4 ff6d 	bl	80002bc <__adddf3>
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4949      	ldr	r1, [pc, #292]	@ (800b50c <_strtod_l+0xaf4>)
 800b3e6:	4a4e      	ldr	r2, [pc, #312]	@ (800b520 <_strtod_l+0xb08>)
 800b3e8:	4019      	ands	r1, r3
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	4682      	mov	sl, r0
 800b3ee:	d942      	bls.n	800b476 <_strtod_l+0xa5e>
 800b3f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3f2:	4b47      	ldr	r3, [pc, #284]	@ (800b510 <_strtod_l+0xaf8>)
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d103      	bne.n	800b400 <_strtod_l+0x9e8>
 800b3f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	f43f ad2b 	beq.w	800ae56 <_strtod_l+0x43e>
 800b400:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b510 <_strtod_l+0xaf8>
 800b404:	f04f 3aff 	mov.w	sl, #4294967295
 800b408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b40a:	9805      	ldr	r0, [sp, #20]
 800b40c:	f002 fdc6 	bl	800df9c <_Bfree>
 800b410:	9805      	ldr	r0, [sp, #20]
 800b412:	4649      	mov	r1, r9
 800b414:	f002 fdc2 	bl	800df9c <_Bfree>
 800b418:	9805      	ldr	r0, [sp, #20]
 800b41a:	4641      	mov	r1, r8
 800b41c:	f002 fdbe 	bl	800df9c <_Bfree>
 800b420:	9805      	ldr	r0, [sp, #20]
 800b422:	4621      	mov	r1, r4
 800b424:	f002 fdba 	bl	800df9c <_Bfree>
 800b428:	e618      	b.n	800b05c <_strtod_l+0x644>
 800b42a:	f1ba 0f01 	cmp.w	sl, #1
 800b42e:	d103      	bne.n	800b438 <_strtod_l+0xa20>
 800b430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b432:	2b00      	cmp	r3, #0
 800b434:	f43f ada5 	beq.w	800af82 <_strtod_l+0x56a>
 800b438:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b4e8 <_strtod_l+0xad0>
 800b43c:	4f35      	ldr	r7, [pc, #212]	@ (800b514 <_strtod_l+0xafc>)
 800b43e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b442:	2600      	movs	r6, #0
 800b444:	e7b1      	b.n	800b3aa <_strtod_l+0x992>
 800b446:	4f34      	ldr	r7, [pc, #208]	@ (800b518 <_strtod_l+0xb00>)
 800b448:	2600      	movs	r6, #0
 800b44a:	e7aa      	b.n	800b3a2 <_strtod_l+0x98a>
 800b44c:	4b32      	ldr	r3, [pc, #200]	@ (800b518 <_strtod_l+0xb00>)
 800b44e:	4630      	mov	r0, r6
 800b450:	4639      	mov	r1, r7
 800b452:	2200      	movs	r2, #0
 800b454:	f7f5 f8e8 	bl	8000628 <__aeabi_dmul>
 800b458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45a:	4606      	mov	r6, r0
 800b45c:	460f      	mov	r7, r1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d09f      	beq.n	800b3a2 <_strtod_l+0x98a>
 800b462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b466:	e7a0      	b.n	800b3aa <_strtod_l+0x992>
 800b468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b4f0 <_strtod_l+0xad8>
 800b46c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b470:	ec57 6b17 	vmov	r6, r7, d7
 800b474:	e799      	b.n	800b3aa <_strtod_l+0x992>
 800b476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1c1      	bne.n	800b408 <_strtod_l+0x9f0>
 800b484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b488:	0d1b      	lsrs	r3, r3, #20
 800b48a:	051b      	lsls	r3, r3, #20
 800b48c:	429d      	cmp	r5, r3
 800b48e:	d1bb      	bne.n	800b408 <_strtod_l+0x9f0>
 800b490:	4630      	mov	r0, r6
 800b492:	4639      	mov	r1, r7
 800b494:	f7f5 fc28 	bl	8000ce8 <__aeabi_d2lz>
 800b498:	f7f5 f898 	bl	80005cc <__aeabi_l2d>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	4639      	mov	r1, r7
 800b4a4:	f7f4 ff08 	bl	80002b8 <__aeabi_dsub>
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b4b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4b6:	ea46 060a 	orr.w	r6, r6, sl
 800b4ba:	431e      	orrs	r6, r3
 800b4bc:	d06f      	beq.n	800b59e <_strtod_l+0xb86>
 800b4be:	a30e      	add	r3, pc, #56	@ (adr r3, 800b4f8 <_strtod_l+0xae0>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f5 fb22 	bl	8000b0c <__aeabi_dcmplt>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f47f accf 	bne.w	800ae6c <_strtod_l+0x454>
 800b4ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800b500 <_strtod_l+0xae8>)
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4d8:	f7f5 fb36 	bl	8000b48 <__aeabi_dcmpgt>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d093      	beq.n	800b408 <_strtod_l+0x9f0>
 800b4e0:	e4c4      	b.n	800ae6c <_strtod_l+0x454>
 800b4e2:	bf00      	nop
 800b4e4:	f3af 8000 	nop.w
 800b4e8:	00000000 	.word	0x00000000
 800b4ec:	bff00000 	.word	0xbff00000
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	94a03595 	.word	0x94a03595
 800b4fc:	3fdfffff 	.word	0x3fdfffff
 800b500:	35afe535 	.word	0x35afe535
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	000fffff 	.word	0x000fffff
 800b50c:	7ff00000 	.word	0x7ff00000
 800b510:	7fefffff 	.word	0x7fefffff
 800b514:	3ff00000 	.word	0x3ff00000
 800b518:	3fe00000 	.word	0x3fe00000
 800b51c:	7fe00000 	.word	0x7fe00000
 800b520:	7c9fffff 	.word	0x7c9fffff
 800b524:	9b08      	ldr	r3, [sp, #32]
 800b526:	b323      	cbz	r3, 800b572 <_strtod_l+0xb5a>
 800b528:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b52c:	d821      	bhi.n	800b572 <_strtod_l+0xb5a>
 800b52e:	a328      	add	r3, pc, #160	@ (adr r3, 800b5d0 <_strtod_l+0xbb8>)
 800b530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b534:	4630      	mov	r0, r6
 800b536:	4639      	mov	r1, r7
 800b538:	f7f5 faf2 	bl	8000b20 <__aeabi_dcmple>
 800b53c:	b1a0      	cbz	r0, 800b568 <_strtod_l+0xb50>
 800b53e:	4639      	mov	r1, r7
 800b540:	4630      	mov	r0, r6
 800b542:	f7f5 fb49 	bl	8000bd8 <__aeabi_d2uiz>
 800b546:	2801      	cmp	r0, #1
 800b548:	bf38      	it	cc
 800b54a:	2001      	movcc	r0, #1
 800b54c:	f7f4 fff2 	bl	8000534 <__aeabi_ui2d>
 800b550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	b9fb      	cbnz	r3, 800b598 <_strtod_l+0xb80>
 800b558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b55c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b55e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b564:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b568:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b56a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b56e:	1b5b      	subs	r3, r3, r5
 800b570:	9311      	str	r3, [sp, #68]	@ 0x44
 800b572:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b576:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b57a:	f003 f843 	bl	800e604 <__ulp>
 800b57e:	4650      	mov	r0, sl
 800b580:	ec53 2b10 	vmov	r2, r3, d0
 800b584:	4659      	mov	r1, fp
 800b586:	f7f5 f84f 	bl	8000628 <__aeabi_dmul>
 800b58a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b58e:	f7f4 fe95 	bl	80002bc <__adddf3>
 800b592:	4682      	mov	sl, r0
 800b594:	468b      	mov	fp, r1
 800b596:	e770      	b.n	800b47a <_strtod_l+0xa62>
 800b598:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b59c:	e7e0      	b.n	800b560 <_strtod_l+0xb48>
 800b59e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5d8 <_strtod_l+0xbc0>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7f5 fab2 	bl	8000b0c <__aeabi_dcmplt>
 800b5a8:	e798      	b.n	800b4dc <_strtod_l+0xac4>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5b2:	6013      	str	r3, [r2, #0]
 800b5b4:	f7ff ba6d 	b.w	800aa92 <_strtod_l+0x7a>
 800b5b8:	2a65      	cmp	r2, #101	@ 0x65
 800b5ba:	f43f ab66 	beq.w	800ac8a <_strtod_l+0x272>
 800b5be:	2a45      	cmp	r2, #69	@ 0x45
 800b5c0:	f43f ab63 	beq.w	800ac8a <_strtod_l+0x272>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f7ff bb9e 	b.w	800ad06 <_strtod_l+0x2ee>
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	ffc00000 	.word	0xffc00000
 800b5d4:	41dfffff 	.word	0x41dfffff
 800b5d8:	94a03595 	.word	0x94a03595
 800b5dc:	3fcfffff 	.word	0x3fcfffff

0800b5e0 <_strtod_r>:
 800b5e0:	4b01      	ldr	r3, [pc, #4]	@ (800b5e8 <_strtod_r+0x8>)
 800b5e2:	f7ff ba19 	b.w	800aa18 <_strtod_l>
 800b5e6:	bf00      	nop
 800b5e8:	20000018 	.word	0x20000018

0800b5ec <strtod>:
 800b5ec:	460a      	mov	r2, r1
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4802      	ldr	r0, [pc, #8]	@ (800b5fc <strtod+0x10>)
 800b5f2:	4b03      	ldr	r3, [pc, #12]	@ (800b600 <strtod+0x14>)
 800b5f4:	6800      	ldr	r0, [r0, #0]
 800b5f6:	f7ff ba0f 	b.w	800aa18 <_strtod_l>
 800b5fa:	bf00      	nop
 800b5fc:	20000184 	.word	0x20000184
 800b600:	20000018 	.word	0x20000018

0800b604 <_strtol_l.constprop.0>:
 800b604:	2b24      	cmp	r3, #36	@ 0x24
 800b606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60a:	4686      	mov	lr, r0
 800b60c:	4690      	mov	r8, r2
 800b60e:	d801      	bhi.n	800b614 <_strtol_l.constprop.0+0x10>
 800b610:	2b01      	cmp	r3, #1
 800b612:	d106      	bne.n	800b622 <_strtol_l.constprop.0+0x1e>
 800b614:	f001 fa36 	bl	800ca84 <__errno>
 800b618:	2316      	movs	r3, #22
 800b61a:	6003      	str	r3, [r0, #0]
 800b61c:	2000      	movs	r0, #0
 800b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b622:	4834      	ldr	r0, [pc, #208]	@ (800b6f4 <_strtol_l.constprop.0+0xf0>)
 800b624:	460d      	mov	r5, r1
 800b626:	462a      	mov	r2, r5
 800b628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b62c:	5d06      	ldrb	r6, [r0, r4]
 800b62e:	f016 0608 	ands.w	r6, r6, #8
 800b632:	d1f8      	bne.n	800b626 <_strtol_l.constprop.0+0x22>
 800b634:	2c2d      	cmp	r4, #45	@ 0x2d
 800b636:	d12d      	bne.n	800b694 <_strtol_l.constprop.0+0x90>
 800b638:	782c      	ldrb	r4, [r5, #0]
 800b63a:	2601      	movs	r6, #1
 800b63c:	1c95      	adds	r5, r2, #2
 800b63e:	f033 0210 	bics.w	r2, r3, #16
 800b642:	d109      	bne.n	800b658 <_strtol_l.constprop.0+0x54>
 800b644:	2c30      	cmp	r4, #48	@ 0x30
 800b646:	d12a      	bne.n	800b69e <_strtol_l.constprop.0+0x9a>
 800b648:	782a      	ldrb	r2, [r5, #0]
 800b64a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b64e:	2a58      	cmp	r2, #88	@ 0x58
 800b650:	d125      	bne.n	800b69e <_strtol_l.constprop.0+0x9a>
 800b652:	786c      	ldrb	r4, [r5, #1]
 800b654:	2310      	movs	r3, #16
 800b656:	3502      	adds	r5, #2
 800b658:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b65c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b660:	2200      	movs	r2, #0
 800b662:	fbbc f9f3 	udiv	r9, ip, r3
 800b666:	4610      	mov	r0, r2
 800b668:	fb03 ca19 	mls	sl, r3, r9, ip
 800b66c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b670:	2f09      	cmp	r7, #9
 800b672:	d81b      	bhi.n	800b6ac <_strtol_l.constprop.0+0xa8>
 800b674:	463c      	mov	r4, r7
 800b676:	42a3      	cmp	r3, r4
 800b678:	dd27      	ble.n	800b6ca <_strtol_l.constprop.0+0xc6>
 800b67a:	1c57      	adds	r7, r2, #1
 800b67c:	d007      	beq.n	800b68e <_strtol_l.constprop.0+0x8a>
 800b67e:	4581      	cmp	r9, r0
 800b680:	d320      	bcc.n	800b6c4 <_strtol_l.constprop.0+0xc0>
 800b682:	d101      	bne.n	800b688 <_strtol_l.constprop.0+0x84>
 800b684:	45a2      	cmp	sl, r4
 800b686:	db1d      	blt.n	800b6c4 <_strtol_l.constprop.0+0xc0>
 800b688:	fb00 4003 	mla	r0, r0, r3, r4
 800b68c:	2201      	movs	r2, #1
 800b68e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b692:	e7eb      	b.n	800b66c <_strtol_l.constprop.0+0x68>
 800b694:	2c2b      	cmp	r4, #43	@ 0x2b
 800b696:	bf04      	itt	eq
 800b698:	782c      	ldrbeq	r4, [r5, #0]
 800b69a:	1c95      	addeq	r5, r2, #2
 800b69c:	e7cf      	b.n	800b63e <_strtol_l.constprop.0+0x3a>
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1da      	bne.n	800b658 <_strtol_l.constprop.0+0x54>
 800b6a2:	2c30      	cmp	r4, #48	@ 0x30
 800b6a4:	bf0c      	ite	eq
 800b6a6:	2308      	moveq	r3, #8
 800b6a8:	230a      	movne	r3, #10
 800b6aa:	e7d5      	b.n	800b658 <_strtol_l.constprop.0+0x54>
 800b6ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b6b0:	2f19      	cmp	r7, #25
 800b6b2:	d801      	bhi.n	800b6b8 <_strtol_l.constprop.0+0xb4>
 800b6b4:	3c37      	subs	r4, #55	@ 0x37
 800b6b6:	e7de      	b.n	800b676 <_strtol_l.constprop.0+0x72>
 800b6b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b6bc:	2f19      	cmp	r7, #25
 800b6be:	d804      	bhi.n	800b6ca <_strtol_l.constprop.0+0xc6>
 800b6c0:	3c57      	subs	r4, #87	@ 0x57
 800b6c2:	e7d8      	b.n	800b676 <_strtol_l.constprop.0+0x72>
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c8:	e7e1      	b.n	800b68e <_strtol_l.constprop.0+0x8a>
 800b6ca:	1c53      	adds	r3, r2, #1
 800b6cc:	d108      	bne.n	800b6e0 <_strtol_l.constprop.0+0xdc>
 800b6ce:	2322      	movs	r3, #34	@ 0x22
 800b6d0:	f8ce 3000 	str.w	r3, [lr]
 800b6d4:	4660      	mov	r0, ip
 800b6d6:	f1b8 0f00 	cmp.w	r8, #0
 800b6da:	d0a0      	beq.n	800b61e <_strtol_l.constprop.0+0x1a>
 800b6dc:	1e69      	subs	r1, r5, #1
 800b6de:	e006      	b.n	800b6ee <_strtol_l.constprop.0+0xea>
 800b6e0:	b106      	cbz	r6, 800b6e4 <_strtol_l.constprop.0+0xe0>
 800b6e2:	4240      	negs	r0, r0
 800b6e4:	f1b8 0f00 	cmp.w	r8, #0
 800b6e8:	d099      	beq.n	800b61e <_strtol_l.constprop.0+0x1a>
 800b6ea:	2a00      	cmp	r2, #0
 800b6ec:	d1f6      	bne.n	800b6dc <_strtol_l.constprop.0+0xd8>
 800b6ee:	f8c8 1000 	str.w	r1, [r8]
 800b6f2:	e794      	b.n	800b61e <_strtol_l.constprop.0+0x1a>
 800b6f4:	0800fb89 	.word	0x0800fb89

0800b6f8 <_strtol_r>:
 800b6f8:	f7ff bf84 	b.w	800b604 <_strtol_l.constprop.0>

0800b6fc <strtol>:
 800b6fc:	4613      	mov	r3, r2
 800b6fe:	460a      	mov	r2, r1
 800b700:	4601      	mov	r1, r0
 800b702:	4802      	ldr	r0, [pc, #8]	@ (800b70c <strtol+0x10>)
 800b704:	6800      	ldr	r0, [r0, #0]
 800b706:	f7ff bf7d 	b.w	800b604 <_strtol_l.constprop.0>
 800b70a:	bf00      	nop
 800b70c:	20000184 	.word	0x20000184

0800b710 <__cvt>:
 800b710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	ec57 6b10 	vmov	r6, r7, d0
 800b718:	2f00      	cmp	r7, #0
 800b71a:	460c      	mov	r4, r1
 800b71c:	4619      	mov	r1, r3
 800b71e:	463b      	mov	r3, r7
 800b720:	bfbb      	ittet	lt
 800b722:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b726:	461f      	movlt	r7, r3
 800b728:	2300      	movge	r3, #0
 800b72a:	232d      	movlt	r3, #45	@ 0x2d
 800b72c:	700b      	strb	r3, [r1, #0]
 800b72e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b730:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b734:	4691      	mov	r9, r2
 800b736:	f023 0820 	bic.w	r8, r3, #32
 800b73a:	bfbc      	itt	lt
 800b73c:	4632      	movlt	r2, r6
 800b73e:	4616      	movlt	r6, r2
 800b740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b744:	d005      	beq.n	800b752 <__cvt+0x42>
 800b746:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b74a:	d100      	bne.n	800b74e <__cvt+0x3e>
 800b74c:	3401      	adds	r4, #1
 800b74e:	2102      	movs	r1, #2
 800b750:	e000      	b.n	800b754 <__cvt+0x44>
 800b752:	2103      	movs	r1, #3
 800b754:	ab03      	add	r3, sp, #12
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	ab02      	add	r3, sp, #8
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	ec47 6b10 	vmov	d0, r6, r7
 800b760:	4653      	mov	r3, sl
 800b762:	4622      	mov	r2, r4
 800b764:	f001 fa80 	bl	800cc68 <_dtoa_r>
 800b768:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b76c:	4605      	mov	r5, r0
 800b76e:	d119      	bne.n	800b7a4 <__cvt+0x94>
 800b770:	f019 0f01 	tst.w	r9, #1
 800b774:	d00e      	beq.n	800b794 <__cvt+0x84>
 800b776:	eb00 0904 	add.w	r9, r0, r4
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	4630      	mov	r0, r6
 800b780:	4639      	mov	r1, r7
 800b782:	f7f5 f9b9 	bl	8000af8 <__aeabi_dcmpeq>
 800b786:	b108      	cbz	r0, 800b78c <__cvt+0x7c>
 800b788:	f8cd 900c 	str.w	r9, [sp, #12]
 800b78c:	2230      	movs	r2, #48	@ 0x30
 800b78e:	9b03      	ldr	r3, [sp, #12]
 800b790:	454b      	cmp	r3, r9
 800b792:	d31e      	bcc.n	800b7d2 <__cvt+0xc2>
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b798:	1b5b      	subs	r3, r3, r5
 800b79a:	4628      	mov	r0, r5
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	b004      	add	sp, #16
 800b7a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7a8:	eb00 0904 	add.w	r9, r0, r4
 800b7ac:	d1e5      	bne.n	800b77a <__cvt+0x6a>
 800b7ae:	7803      	ldrb	r3, [r0, #0]
 800b7b0:	2b30      	cmp	r3, #48	@ 0x30
 800b7b2:	d10a      	bne.n	800b7ca <__cvt+0xba>
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f5 f99c 	bl	8000af8 <__aeabi_dcmpeq>
 800b7c0:	b918      	cbnz	r0, 800b7ca <__cvt+0xba>
 800b7c2:	f1c4 0401 	rsb	r4, r4, #1
 800b7c6:	f8ca 4000 	str.w	r4, [sl]
 800b7ca:	f8da 3000 	ldr.w	r3, [sl]
 800b7ce:	4499      	add	r9, r3
 800b7d0:	e7d3      	b.n	800b77a <__cvt+0x6a>
 800b7d2:	1c59      	adds	r1, r3, #1
 800b7d4:	9103      	str	r1, [sp, #12]
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	e7d9      	b.n	800b78e <__cvt+0x7e>

0800b7da <__exponent>:
 800b7da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	bfba      	itte	lt
 800b7e0:	4249      	neglt	r1, r1
 800b7e2:	232d      	movlt	r3, #45	@ 0x2d
 800b7e4:	232b      	movge	r3, #43	@ 0x2b
 800b7e6:	2909      	cmp	r1, #9
 800b7e8:	7002      	strb	r2, [r0, #0]
 800b7ea:	7043      	strb	r3, [r0, #1]
 800b7ec:	dd29      	ble.n	800b842 <__exponent+0x68>
 800b7ee:	f10d 0307 	add.w	r3, sp, #7
 800b7f2:	461d      	mov	r5, r3
 800b7f4:	270a      	movs	r7, #10
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7fc:	fb07 1416 	mls	r4, r7, r6, r1
 800b800:	3430      	adds	r4, #48	@ 0x30
 800b802:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b806:	460c      	mov	r4, r1
 800b808:	2c63      	cmp	r4, #99	@ 0x63
 800b80a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b80e:	4631      	mov	r1, r6
 800b810:	dcf1      	bgt.n	800b7f6 <__exponent+0x1c>
 800b812:	3130      	adds	r1, #48	@ 0x30
 800b814:	1e94      	subs	r4, r2, #2
 800b816:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b81a:	1c41      	adds	r1, r0, #1
 800b81c:	4623      	mov	r3, r4
 800b81e:	42ab      	cmp	r3, r5
 800b820:	d30a      	bcc.n	800b838 <__exponent+0x5e>
 800b822:	f10d 0309 	add.w	r3, sp, #9
 800b826:	1a9b      	subs	r3, r3, r2
 800b828:	42ac      	cmp	r4, r5
 800b82a:	bf88      	it	hi
 800b82c:	2300      	movhi	r3, #0
 800b82e:	3302      	adds	r3, #2
 800b830:	4403      	add	r3, r0
 800b832:	1a18      	subs	r0, r3, r0
 800b834:	b003      	add	sp, #12
 800b836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b838:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b83c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b840:	e7ed      	b.n	800b81e <__exponent+0x44>
 800b842:	2330      	movs	r3, #48	@ 0x30
 800b844:	3130      	adds	r1, #48	@ 0x30
 800b846:	7083      	strb	r3, [r0, #2]
 800b848:	70c1      	strb	r1, [r0, #3]
 800b84a:	1d03      	adds	r3, r0, #4
 800b84c:	e7f1      	b.n	800b832 <__exponent+0x58>
	...

0800b850 <_printf_float>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	b08d      	sub	sp, #52	@ 0x34
 800b856:	460c      	mov	r4, r1
 800b858:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b85c:	4616      	mov	r6, r2
 800b85e:	461f      	mov	r7, r3
 800b860:	4605      	mov	r5, r0
 800b862:	f001 f8b5 	bl	800c9d0 <_localeconv_r>
 800b866:	6803      	ldr	r3, [r0, #0]
 800b868:	9304      	str	r3, [sp, #16]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f4 fd18 	bl	80002a0 <strlen>
 800b870:	2300      	movs	r3, #0
 800b872:	930a      	str	r3, [sp, #40]	@ 0x28
 800b874:	f8d8 3000 	ldr.w	r3, [r8]
 800b878:	9005      	str	r0, [sp, #20]
 800b87a:	3307      	adds	r3, #7
 800b87c:	f023 0307 	bic.w	r3, r3, #7
 800b880:	f103 0208 	add.w	r2, r3, #8
 800b884:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b888:	f8d4 b000 	ldr.w	fp, [r4]
 800b88c:	f8c8 2000 	str.w	r2, [r8]
 800b890:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b894:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b898:	9307      	str	r3, [sp, #28]
 800b89a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b89e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b8a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8a6:	4b9c      	ldr	r3, [pc, #624]	@ (800bb18 <_printf_float+0x2c8>)
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ac:	f7f5 f956 	bl	8000b5c <__aeabi_dcmpun>
 800b8b0:	bb70      	cbnz	r0, 800b910 <_printf_float+0xc0>
 800b8b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b6:	4b98      	ldr	r3, [pc, #608]	@ (800bb18 <_printf_float+0x2c8>)
 800b8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8bc:	f7f5 f930 	bl	8000b20 <__aeabi_dcmple>
 800b8c0:	bb30      	cbnz	r0, 800b910 <_printf_float+0xc0>
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	f7f5 f91f 	bl	8000b0c <__aeabi_dcmplt>
 800b8ce:	b110      	cbz	r0, 800b8d6 <_printf_float+0x86>
 800b8d0:	232d      	movs	r3, #45	@ 0x2d
 800b8d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d6:	4a91      	ldr	r2, [pc, #580]	@ (800bb1c <_printf_float+0x2cc>)
 800b8d8:	4b91      	ldr	r3, [pc, #580]	@ (800bb20 <_printf_float+0x2d0>)
 800b8da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8de:	bf94      	ite	ls
 800b8e0:	4690      	movls	r8, r2
 800b8e2:	4698      	movhi	r8, r3
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	f02b 0304 	bic.w	r3, fp, #4
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	f04f 0900 	mov.w	r9, #0
 800b8f2:	9700      	str	r7, [sp, #0]
 800b8f4:	4633      	mov	r3, r6
 800b8f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f000 f9d2 	bl	800bca4 <_printf_common>
 800b900:	3001      	adds	r0, #1
 800b902:	f040 808d 	bne.w	800ba20 <_printf_float+0x1d0>
 800b906:	f04f 30ff 	mov.w	r0, #4294967295
 800b90a:	b00d      	add	sp, #52	@ 0x34
 800b90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b910:	4642      	mov	r2, r8
 800b912:	464b      	mov	r3, r9
 800b914:	4640      	mov	r0, r8
 800b916:	4649      	mov	r1, r9
 800b918:	f7f5 f920 	bl	8000b5c <__aeabi_dcmpun>
 800b91c:	b140      	cbz	r0, 800b930 <_printf_float+0xe0>
 800b91e:	464b      	mov	r3, r9
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfbc      	itt	lt
 800b924:	232d      	movlt	r3, #45	@ 0x2d
 800b926:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b92a:	4a7e      	ldr	r2, [pc, #504]	@ (800bb24 <_printf_float+0x2d4>)
 800b92c:	4b7e      	ldr	r3, [pc, #504]	@ (800bb28 <_printf_float+0x2d8>)
 800b92e:	e7d4      	b.n	800b8da <_printf_float+0x8a>
 800b930:	6863      	ldr	r3, [r4, #4]
 800b932:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b936:	9206      	str	r2, [sp, #24]
 800b938:	1c5a      	adds	r2, r3, #1
 800b93a:	d13b      	bne.n	800b9b4 <_printf_float+0x164>
 800b93c:	2306      	movs	r3, #6
 800b93e:	6063      	str	r3, [r4, #4]
 800b940:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b944:	2300      	movs	r3, #0
 800b946:	6022      	str	r2, [r4, #0]
 800b948:	9303      	str	r3, [sp, #12]
 800b94a:	ab0a      	add	r3, sp, #40	@ 0x28
 800b94c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b950:	ab09      	add	r3, sp, #36	@ 0x24
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	6861      	ldr	r1, [r4, #4]
 800b956:	ec49 8b10 	vmov	d0, r8, r9
 800b95a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b95e:	4628      	mov	r0, r5
 800b960:	f7ff fed6 	bl	800b710 <__cvt>
 800b964:	9b06      	ldr	r3, [sp, #24]
 800b966:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b968:	2b47      	cmp	r3, #71	@ 0x47
 800b96a:	4680      	mov	r8, r0
 800b96c:	d129      	bne.n	800b9c2 <_printf_float+0x172>
 800b96e:	1cc8      	adds	r0, r1, #3
 800b970:	db02      	blt.n	800b978 <_printf_float+0x128>
 800b972:	6863      	ldr	r3, [r4, #4]
 800b974:	4299      	cmp	r1, r3
 800b976:	dd41      	ble.n	800b9fc <_printf_float+0x1ac>
 800b978:	f1aa 0a02 	sub.w	sl, sl, #2
 800b97c:	fa5f fa8a 	uxtb.w	sl, sl
 800b980:	3901      	subs	r1, #1
 800b982:	4652      	mov	r2, sl
 800b984:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b988:	9109      	str	r1, [sp, #36]	@ 0x24
 800b98a:	f7ff ff26 	bl	800b7da <__exponent>
 800b98e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b990:	1813      	adds	r3, r2, r0
 800b992:	2a01      	cmp	r2, #1
 800b994:	4681      	mov	r9, r0
 800b996:	6123      	str	r3, [r4, #16]
 800b998:	dc02      	bgt.n	800b9a0 <_printf_float+0x150>
 800b99a:	6822      	ldr	r2, [r4, #0]
 800b99c:	07d2      	lsls	r2, r2, #31
 800b99e:	d501      	bpl.n	800b9a4 <_printf_float+0x154>
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	6123      	str	r3, [r4, #16]
 800b9a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d0a2      	beq.n	800b8f2 <_printf_float+0xa2>
 800b9ac:	232d      	movs	r3, #45	@ 0x2d
 800b9ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9b2:	e79e      	b.n	800b8f2 <_printf_float+0xa2>
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	2a47      	cmp	r2, #71	@ 0x47
 800b9b8:	d1c2      	bne.n	800b940 <_printf_float+0xf0>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1c0      	bne.n	800b940 <_printf_float+0xf0>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e7bd      	b.n	800b93e <_printf_float+0xee>
 800b9c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9c6:	d9db      	bls.n	800b980 <_printf_float+0x130>
 800b9c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b9cc:	d118      	bne.n	800ba00 <_printf_float+0x1b0>
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	dd0b      	ble.n	800b9ec <_printf_float+0x19c>
 800b9d4:	6121      	str	r1, [r4, #16]
 800b9d6:	b913      	cbnz	r3, 800b9de <_printf_float+0x18e>
 800b9d8:	6822      	ldr	r2, [r4, #0]
 800b9da:	07d0      	lsls	r0, r2, #31
 800b9dc:	d502      	bpl.n	800b9e4 <_printf_float+0x194>
 800b9de:	3301      	adds	r3, #1
 800b9e0:	440b      	add	r3, r1
 800b9e2:	6123      	str	r3, [r4, #16]
 800b9e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9e6:	f04f 0900 	mov.w	r9, #0
 800b9ea:	e7db      	b.n	800b9a4 <_printf_float+0x154>
 800b9ec:	b913      	cbnz	r3, 800b9f4 <_printf_float+0x1a4>
 800b9ee:	6822      	ldr	r2, [r4, #0]
 800b9f0:	07d2      	lsls	r2, r2, #31
 800b9f2:	d501      	bpl.n	800b9f8 <_printf_float+0x1a8>
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	e7f4      	b.n	800b9e2 <_printf_float+0x192>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7f2      	b.n	800b9e2 <_printf_float+0x192>
 800b9fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ba00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba02:	4299      	cmp	r1, r3
 800ba04:	db05      	blt.n	800ba12 <_printf_float+0x1c2>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	6121      	str	r1, [r4, #16]
 800ba0a:	07d8      	lsls	r0, r3, #31
 800ba0c:	d5ea      	bpl.n	800b9e4 <_printf_float+0x194>
 800ba0e:	1c4b      	adds	r3, r1, #1
 800ba10:	e7e7      	b.n	800b9e2 <_printf_float+0x192>
 800ba12:	2900      	cmp	r1, #0
 800ba14:	bfd4      	ite	le
 800ba16:	f1c1 0202 	rsble	r2, r1, #2
 800ba1a:	2201      	movgt	r2, #1
 800ba1c:	4413      	add	r3, r2
 800ba1e:	e7e0      	b.n	800b9e2 <_printf_float+0x192>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	055a      	lsls	r2, r3, #21
 800ba24:	d407      	bmi.n	800ba36 <_printf_float+0x1e6>
 800ba26:	6923      	ldr	r3, [r4, #16]
 800ba28:	4642      	mov	r2, r8
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	d12b      	bne.n	800ba8c <_printf_float+0x23c>
 800ba34:	e767      	b.n	800b906 <_printf_float+0xb6>
 800ba36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba3a:	f240 80dd 	bls.w	800bbf8 <_printf_float+0x3a8>
 800ba3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba42:	2200      	movs	r2, #0
 800ba44:	2300      	movs	r3, #0
 800ba46:	f7f5 f857 	bl	8000af8 <__aeabi_dcmpeq>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d033      	beq.n	800bab6 <_printf_float+0x266>
 800ba4e:	4a37      	ldr	r2, [pc, #220]	@ (800bb2c <_printf_float+0x2dc>)
 800ba50:	2301      	movs	r3, #1
 800ba52:	4631      	mov	r1, r6
 800ba54:	4628      	mov	r0, r5
 800ba56:	47b8      	blx	r7
 800ba58:	3001      	adds	r0, #1
 800ba5a:	f43f af54 	beq.w	800b906 <_printf_float+0xb6>
 800ba5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba62:	4543      	cmp	r3, r8
 800ba64:	db02      	blt.n	800ba6c <_printf_float+0x21c>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	07d8      	lsls	r0, r3, #31
 800ba6a:	d50f      	bpl.n	800ba8c <_printf_float+0x23c>
 800ba6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba70:	4631      	mov	r1, r6
 800ba72:	4628      	mov	r0, r5
 800ba74:	47b8      	blx	r7
 800ba76:	3001      	adds	r0, #1
 800ba78:	f43f af45 	beq.w	800b906 <_printf_float+0xb6>
 800ba7c:	f04f 0900 	mov.w	r9, #0
 800ba80:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba84:	f104 0a1a 	add.w	sl, r4, #26
 800ba88:	45c8      	cmp	r8, r9
 800ba8a:	dc09      	bgt.n	800baa0 <_printf_float+0x250>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	079b      	lsls	r3, r3, #30
 800ba90:	f100 8103 	bmi.w	800bc9a <_printf_float+0x44a>
 800ba94:	68e0      	ldr	r0, [r4, #12]
 800ba96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba98:	4298      	cmp	r0, r3
 800ba9a:	bfb8      	it	lt
 800ba9c:	4618      	movlt	r0, r3
 800ba9e:	e734      	b.n	800b90a <_printf_float+0xba>
 800baa0:	2301      	movs	r3, #1
 800baa2:	4652      	mov	r2, sl
 800baa4:	4631      	mov	r1, r6
 800baa6:	4628      	mov	r0, r5
 800baa8:	47b8      	blx	r7
 800baaa:	3001      	adds	r0, #1
 800baac:	f43f af2b 	beq.w	800b906 <_printf_float+0xb6>
 800bab0:	f109 0901 	add.w	r9, r9, #1
 800bab4:	e7e8      	b.n	800ba88 <_printf_float+0x238>
 800bab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dc39      	bgt.n	800bb30 <_printf_float+0x2e0>
 800babc:	4a1b      	ldr	r2, [pc, #108]	@ (800bb2c <_printf_float+0x2dc>)
 800babe:	2301      	movs	r3, #1
 800bac0:	4631      	mov	r1, r6
 800bac2:	4628      	mov	r0, r5
 800bac4:	47b8      	blx	r7
 800bac6:	3001      	adds	r0, #1
 800bac8:	f43f af1d 	beq.w	800b906 <_printf_float+0xb6>
 800bacc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bad0:	ea59 0303 	orrs.w	r3, r9, r3
 800bad4:	d102      	bne.n	800badc <_printf_float+0x28c>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	07d9      	lsls	r1, r3, #31
 800bada:	d5d7      	bpl.n	800ba8c <_printf_float+0x23c>
 800badc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bae0:	4631      	mov	r1, r6
 800bae2:	4628      	mov	r0, r5
 800bae4:	47b8      	blx	r7
 800bae6:	3001      	adds	r0, #1
 800bae8:	f43f af0d 	beq.w	800b906 <_printf_float+0xb6>
 800baec:	f04f 0a00 	mov.w	sl, #0
 800baf0:	f104 0b1a 	add.w	fp, r4, #26
 800baf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf6:	425b      	negs	r3, r3
 800baf8:	4553      	cmp	r3, sl
 800bafa:	dc01      	bgt.n	800bb00 <_printf_float+0x2b0>
 800bafc:	464b      	mov	r3, r9
 800bafe:	e793      	b.n	800ba28 <_printf_float+0x1d8>
 800bb00:	2301      	movs	r3, #1
 800bb02:	465a      	mov	r2, fp
 800bb04:	4631      	mov	r1, r6
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f43f aefb 	beq.w	800b906 <_printf_float+0xb6>
 800bb10:	f10a 0a01 	add.w	sl, sl, #1
 800bb14:	e7ee      	b.n	800baf4 <_printf_float+0x2a4>
 800bb16:	bf00      	nop
 800bb18:	7fefffff 	.word	0x7fefffff
 800bb1c:	0800fc89 	.word	0x0800fc89
 800bb20:	0800fc8d 	.word	0x0800fc8d
 800bb24:	0800fc91 	.word	0x0800fc91
 800bb28:	0800fc95 	.word	0x0800fc95
 800bb2c:	0800fc99 	.word	0x0800fc99
 800bb30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb36:	4553      	cmp	r3, sl
 800bb38:	bfa8      	it	ge
 800bb3a:	4653      	movge	r3, sl
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	4699      	mov	r9, r3
 800bb40:	dc36      	bgt.n	800bbb0 <_printf_float+0x360>
 800bb42:	f04f 0b00 	mov.w	fp, #0
 800bb46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb4a:	f104 021a 	add.w	r2, r4, #26
 800bb4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb50:	9306      	str	r3, [sp, #24]
 800bb52:	eba3 0309 	sub.w	r3, r3, r9
 800bb56:	455b      	cmp	r3, fp
 800bb58:	dc31      	bgt.n	800bbbe <_printf_float+0x36e>
 800bb5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5c:	459a      	cmp	sl, r3
 800bb5e:	dc3a      	bgt.n	800bbd6 <_printf_float+0x386>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	07da      	lsls	r2, r3, #31
 800bb64:	d437      	bmi.n	800bbd6 <_printf_float+0x386>
 800bb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb68:	ebaa 0903 	sub.w	r9, sl, r3
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	ebaa 0303 	sub.w	r3, sl, r3
 800bb72:	4599      	cmp	r9, r3
 800bb74:	bfa8      	it	ge
 800bb76:	4699      	movge	r9, r3
 800bb78:	f1b9 0f00 	cmp.w	r9, #0
 800bb7c:	dc33      	bgt.n	800bbe6 <_printf_float+0x396>
 800bb7e:	f04f 0800 	mov.w	r8, #0
 800bb82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb86:	f104 0b1a 	add.w	fp, r4, #26
 800bb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb8c:	ebaa 0303 	sub.w	r3, sl, r3
 800bb90:	eba3 0309 	sub.w	r3, r3, r9
 800bb94:	4543      	cmp	r3, r8
 800bb96:	f77f af79 	ble.w	800ba8c <_printf_float+0x23c>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	465a      	mov	r2, fp
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f aeae 	beq.w	800b906 <_printf_float+0xb6>
 800bbaa:	f108 0801 	add.w	r8, r8, #1
 800bbae:	e7ec      	b.n	800bb8a <_printf_float+0x33a>
 800bbb0:	4642      	mov	r2, r8
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	47b8      	blx	r7
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d1c2      	bne.n	800bb42 <_printf_float+0x2f2>
 800bbbc:	e6a3      	b.n	800b906 <_printf_float+0xb6>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	9206      	str	r2, [sp, #24]
 800bbc6:	47b8      	blx	r7
 800bbc8:	3001      	adds	r0, #1
 800bbca:	f43f ae9c 	beq.w	800b906 <_printf_float+0xb6>
 800bbce:	9a06      	ldr	r2, [sp, #24]
 800bbd0:	f10b 0b01 	add.w	fp, fp, #1
 800bbd4:	e7bb      	b.n	800bb4e <_printf_float+0x2fe>
 800bbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d1c0      	bne.n	800bb66 <_printf_float+0x316>
 800bbe4:	e68f      	b.n	800b906 <_printf_float+0xb6>
 800bbe6:	9a06      	ldr	r2, [sp, #24]
 800bbe8:	464b      	mov	r3, r9
 800bbea:	4442      	add	r2, r8
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d1c3      	bne.n	800bb7e <_printf_float+0x32e>
 800bbf6:	e686      	b.n	800b906 <_printf_float+0xb6>
 800bbf8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbfc:	f1ba 0f01 	cmp.w	sl, #1
 800bc00:	dc01      	bgt.n	800bc06 <_printf_float+0x3b6>
 800bc02:	07db      	lsls	r3, r3, #31
 800bc04:	d536      	bpl.n	800bc74 <_printf_float+0x424>
 800bc06:	2301      	movs	r3, #1
 800bc08:	4642      	mov	r2, r8
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	47b8      	blx	r7
 800bc10:	3001      	adds	r0, #1
 800bc12:	f43f ae78 	beq.w	800b906 <_printf_float+0xb6>
 800bc16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f ae70 	beq.w	800b906 <_printf_float+0xb6>
 800bc26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc32:	f7f4 ff61 	bl	8000af8 <__aeabi_dcmpeq>
 800bc36:	b9c0      	cbnz	r0, 800bc6a <_printf_float+0x41a>
 800bc38:	4653      	mov	r3, sl
 800bc3a:	f108 0201 	add.w	r2, r8, #1
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	d10c      	bne.n	800bc62 <_printf_float+0x412>
 800bc48:	e65d      	b.n	800b906 <_printf_float+0xb6>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	465a      	mov	r2, fp
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4628      	mov	r0, r5
 800bc52:	47b8      	blx	r7
 800bc54:	3001      	adds	r0, #1
 800bc56:	f43f ae56 	beq.w	800b906 <_printf_float+0xb6>
 800bc5a:	f108 0801 	add.w	r8, r8, #1
 800bc5e:	45d0      	cmp	r8, sl
 800bc60:	dbf3      	blt.n	800bc4a <_printf_float+0x3fa>
 800bc62:	464b      	mov	r3, r9
 800bc64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc68:	e6df      	b.n	800ba2a <_printf_float+0x1da>
 800bc6a:	f04f 0800 	mov.w	r8, #0
 800bc6e:	f104 0b1a 	add.w	fp, r4, #26
 800bc72:	e7f4      	b.n	800bc5e <_printf_float+0x40e>
 800bc74:	2301      	movs	r3, #1
 800bc76:	4642      	mov	r2, r8
 800bc78:	e7e1      	b.n	800bc3e <_printf_float+0x3ee>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	464a      	mov	r2, r9
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	f43f ae3e 	beq.w	800b906 <_printf_float+0xb6>
 800bc8a:	f108 0801 	add.w	r8, r8, #1
 800bc8e:	68e3      	ldr	r3, [r4, #12]
 800bc90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc92:	1a5b      	subs	r3, r3, r1
 800bc94:	4543      	cmp	r3, r8
 800bc96:	dcf0      	bgt.n	800bc7a <_printf_float+0x42a>
 800bc98:	e6fc      	b.n	800ba94 <_printf_float+0x244>
 800bc9a:	f04f 0800 	mov.w	r8, #0
 800bc9e:	f104 0919 	add.w	r9, r4, #25
 800bca2:	e7f4      	b.n	800bc8e <_printf_float+0x43e>

0800bca4 <_printf_common>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	4616      	mov	r6, r2
 800bcaa:	4698      	mov	r8, r3
 800bcac:	688a      	ldr	r2, [r1, #8]
 800bcae:	690b      	ldr	r3, [r1, #16]
 800bcb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	bfb8      	it	lt
 800bcb8:	4613      	movlt	r3, r2
 800bcba:	6033      	str	r3, [r6, #0]
 800bcbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcc0:	4607      	mov	r7, r0
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	b10a      	cbz	r2, 800bcca <_printf_common+0x26>
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	6033      	str	r3, [r6, #0]
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	0699      	lsls	r1, r3, #26
 800bcce:	bf42      	ittt	mi
 800bcd0:	6833      	ldrmi	r3, [r6, #0]
 800bcd2:	3302      	addmi	r3, #2
 800bcd4:	6033      	strmi	r3, [r6, #0]
 800bcd6:	6825      	ldr	r5, [r4, #0]
 800bcd8:	f015 0506 	ands.w	r5, r5, #6
 800bcdc:	d106      	bne.n	800bcec <_printf_common+0x48>
 800bcde:	f104 0a19 	add.w	sl, r4, #25
 800bce2:	68e3      	ldr	r3, [r4, #12]
 800bce4:	6832      	ldr	r2, [r6, #0]
 800bce6:	1a9b      	subs	r3, r3, r2
 800bce8:	42ab      	cmp	r3, r5
 800bcea:	dc26      	bgt.n	800bd3a <_printf_common+0x96>
 800bcec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcf0:	6822      	ldr	r2, [r4, #0]
 800bcf2:	3b00      	subs	r3, #0
 800bcf4:	bf18      	it	ne
 800bcf6:	2301      	movne	r3, #1
 800bcf8:	0692      	lsls	r2, r2, #26
 800bcfa:	d42b      	bmi.n	800bd54 <_printf_common+0xb0>
 800bcfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd00:	4641      	mov	r1, r8
 800bd02:	4638      	mov	r0, r7
 800bd04:	47c8      	blx	r9
 800bd06:	3001      	adds	r0, #1
 800bd08:	d01e      	beq.n	800bd48 <_printf_common+0xa4>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	6922      	ldr	r2, [r4, #16]
 800bd0e:	f003 0306 	and.w	r3, r3, #6
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	bf02      	ittt	eq
 800bd16:	68e5      	ldreq	r5, [r4, #12]
 800bd18:	6833      	ldreq	r3, [r6, #0]
 800bd1a:	1aed      	subeq	r5, r5, r3
 800bd1c:	68a3      	ldr	r3, [r4, #8]
 800bd1e:	bf0c      	ite	eq
 800bd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd24:	2500      	movne	r5, #0
 800bd26:	4293      	cmp	r3, r2
 800bd28:	bfc4      	itt	gt
 800bd2a:	1a9b      	subgt	r3, r3, r2
 800bd2c:	18ed      	addgt	r5, r5, r3
 800bd2e:	2600      	movs	r6, #0
 800bd30:	341a      	adds	r4, #26
 800bd32:	42b5      	cmp	r5, r6
 800bd34:	d11a      	bne.n	800bd6c <_printf_common+0xc8>
 800bd36:	2000      	movs	r0, #0
 800bd38:	e008      	b.n	800bd4c <_printf_common+0xa8>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	4641      	mov	r1, r8
 800bd40:	4638      	mov	r0, r7
 800bd42:	47c8      	blx	r9
 800bd44:	3001      	adds	r0, #1
 800bd46:	d103      	bne.n	800bd50 <_printf_common+0xac>
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd50:	3501      	adds	r5, #1
 800bd52:	e7c6      	b.n	800bce2 <_printf_common+0x3e>
 800bd54:	18e1      	adds	r1, r4, r3
 800bd56:	1c5a      	adds	r2, r3, #1
 800bd58:	2030      	movs	r0, #48	@ 0x30
 800bd5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd5e:	4422      	add	r2, r4
 800bd60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd68:	3302      	adds	r3, #2
 800bd6a:	e7c7      	b.n	800bcfc <_printf_common+0x58>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	4622      	mov	r2, r4
 800bd70:	4641      	mov	r1, r8
 800bd72:	4638      	mov	r0, r7
 800bd74:	47c8      	blx	r9
 800bd76:	3001      	adds	r0, #1
 800bd78:	d0e6      	beq.n	800bd48 <_printf_common+0xa4>
 800bd7a:	3601      	adds	r6, #1
 800bd7c:	e7d9      	b.n	800bd32 <_printf_common+0x8e>
	...

0800bd80 <_printf_i>:
 800bd80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	7e0f      	ldrb	r7, [r1, #24]
 800bd86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd88:	2f78      	cmp	r7, #120	@ 0x78
 800bd8a:	4691      	mov	r9, r2
 800bd8c:	4680      	mov	r8, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	469a      	mov	sl, r3
 800bd92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd96:	d807      	bhi.n	800bda8 <_printf_i+0x28>
 800bd98:	2f62      	cmp	r7, #98	@ 0x62
 800bd9a:	d80a      	bhi.n	800bdb2 <_printf_i+0x32>
 800bd9c:	2f00      	cmp	r7, #0
 800bd9e:	f000 80d2 	beq.w	800bf46 <_printf_i+0x1c6>
 800bda2:	2f58      	cmp	r7, #88	@ 0x58
 800bda4:	f000 80b9 	beq.w	800bf1a <_printf_i+0x19a>
 800bda8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bdb0:	e03a      	b.n	800be28 <_printf_i+0xa8>
 800bdb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bdb6:	2b15      	cmp	r3, #21
 800bdb8:	d8f6      	bhi.n	800bda8 <_printf_i+0x28>
 800bdba:	a101      	add	r1, pc, #4	@ (adr r1, 800bdc0 <_printf_i+0x40>)
 800bdbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdc0:	0800be19 	.word	0x0800be19
 800bdc4:	0800be2d 	.word	0x0800be2d
 800bdc8:	0800bda9 	.word	0x0800bda9
 800bdcc:	0800bda9 	.word	0x0800bda9
 800bdd0:	0800bda9 	.word	0x0800bda9
 800bdd4:	0800bda9 	.word	0x0800bda9
 800bdd8:	0800be2d 	.word	0x0800be2d
 800bddc:	0800bda9 	.word	0x0800bda9
 800bde0:	0800bda9 	.word	0x0800bda9
 800bde4:	0800bda9 	.word	0x0800bda9
 800bde8:	0800bda9 	.word	0x0800bda9
 800bdec:	0800bf2d 	.word	0x0800bf2d
 800bdf0:	0800be57 	.word	0x0800be57
 800bdf4:	0800bee7 	.word	0x0800bee7
 800bdf8:	0800bda9 	.word	0x0800bda9
 800bdfc:	0800bda9 	.word	0x0800bda9
 800be00:	0800bf4f 	.word	0x0800bf4f
 800be04:	0800bda9 	.word	0x0800bda9
 800be08:	0800be57 	.word	0x0800be57
 800be0c:	0800bda9 	.word	0x0800bda9
 800be10:	0800bda9 	.word	0x0800bda9
 800be14:	0800beef 	.word	0x0800beef
 800be18:	6833      	ldr	r3, [r6, #0]
 800be1a:	1d1a      	adds	r2, r3, #4
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6032      	str	r2, [r6, #0]
 800be20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be28:	2301      	movs	r3, #1
 800be2a:	e09d      	b.n	800bf68 <_printf_i+0x1e8>
 800be2c:	6833      	ldr	r3, [r6, #0]
 800be2e:	6820      	ldr	r0, [r4, #0]
 800be30:	1d19      	adds	r1, r3, #4
 800be32:	6031      	str	r1, [r6, #0]
 800be34:	0606      	lsls	r6, r0, #24
 800be36:	d501      	bpl.n	800be3c <_printf_i+0xbc>
 800be38:	681d      	ldr	r5, [r3, #0]
 800be3a:	e003      	b.n	800be44 <_printf_i+0xc4>
 800be3c:	0645      	lsls	r5, r0, #25
 800be3e:	d5fb      	bpl.n	800be38 <_printf_i+0xb8>
 800be40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be44:	2d00      	cmp	r5, #0
 800be46:	da03      	bge.n	800be50 <_printf_i+0xd0>
 800be48:	232d      	movs	r3, #45	@ 0x2d
 800be4a:	426d      	negs	r5, r5
 800be4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be50:	4859      	ldr	r0, [pc, #356]	@ (800bfb8 <_printf_i+0x238>)
 800be52:	230a      	movs	r3, #10
 800be54:	e011      	b.n	800be7a <_printf_i+0xfa>
 800be56:	6821      	ldr	r1, [r4, #0]
 800be58:	6833      	ldr	r3, [r6, #0]
 800be5a:	0608      	lsls	r0, r1, #24
 800be5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800be60:	d402      	bmi.n	800be68 <_printf_i+0xe8>
 800be62:	0649      	lsls	r1, r1, #25
 800be64:	bf48      	it	mi
 800be66:	b2ad      	uxthmi	r5, r5
 800be68:	2f6f      	cmp	r7, #111	@ 0x6f
 800be6a:	4853      	ldr	r0, [pc, #332]	@ (800bfb8 <_printf_i+0x238>)
 800be6c:	6033      	str	r3, [r6, #0]
 800be6e:	bf14      	ite	ne
 800be70:	230a      	movne	r3, #10
 800be72:	2308      	moveq	r3, #8
 800be74:	2100      	movs	r1, #0
 800be76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be7a:	6866      	ldr	r6, [r4, #4]
 800be7c:	60a6      	str	r6, [r4, #8]
 800be7e:	2e00      	cmp	r6, #0
 800be80:	bfa2      	ittt	ge
 800be82:	6821      	ldrge	r1, [r4, #0]
 800be84:	f021 0104 	bicge.w	r1, r1, #4
 800be88:	6021      	strge	r1, [r4, #0]
 800be8a:	b90d      	cbnz	r5, 800be90 <_printf_i+0x110>
 800be8c:	2e00      	cmp	r6, #0
 800be8e:	d04b      	beq.n	800bf28 <_printf_i+0x1a8>
 800be90:	4616      	mov	r6, r2
 800be92:	fbb5 f1f3 	udiv	r1, r5, r3
 800be96:	fb03 5711 	mls	r7, r3, r1, r5
 800be9a:	5dc7      	ldrb	r7, [r0, r7]
 800be9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bea0:	462f      	mov	r7, r5
 800bea2:	42bb      	cmp	r3, r7
 800bea4:	460d      	mov	r5, r1
 800bea6:	d9f4      	bls.n	800be92 <_printf_i+0x112>
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d10b      	bne.n	800bec4 <_printf_i+0x144>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	07df      	lsls	r7, r3, #31
 800beb0:	d508      	bpl.n	800bec4 <_printf_i+0x144>
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	6861      	ldr	r1, [r4, #4]
 800beb6:	4299      	cmp	r1, r3
 800beb8:	bfde      	ittt	le
 800beba:	2330      	movle	r3, #48	@ 0x30
 800bebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bec4:	1b92      	subs	r2, r2, r6
 800bec6:	6122      	str	r2, [r4, #16]
 800bec8:	f8cd a000 	str.w	sl, [sp]
 800becc:	464b      	mov	r3, r9
 800bece:	aa03      	add	r2, sp, #12
 800bed0:	4621      	mov	r1, r4
 800bed2:	4640      	mov	r0, r8
 800bed4:	f7ff fee6 	bl	800bca4 <_printf_common>
 800bed8:	3001      	adds	r0, #1
 800beda:	d14a      	bne.n	800bf72 <_printf_i+0x1f2>
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	b004      	add	sp, #16
 800bee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	f043 0320 	orr.w	r3, r3, #32
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	4833      	ldr	r0, [pc, #204]	@ (800bfbc <_printf_i+0x23c>)
 800bef0:	2778      	movs	r7, #120	@ 0x78
 800bef2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bef6:	6823      	ldr	r3, [r4, #0]
 800bef8:	6831      	ldr	r1, [r6, #0]
 800befa:	061f      	lsls	r7, r3, #24
 800befc:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf00:	d402      	bmi.n	800bf08 <_printf_i+0x188>
 800bf02:	065f      	lsls	r7, r3, #25
 800bf04:	bf48      	it	mi
 800bf06:	b2ad      	uxthmi	r5, r5
 800bf08:	6031      	str	r1, [r6, #0]
 800bf0a:	07d9      	lsls	r1, r3, #31
 800bf0c:	bf44      	itt	mi
 800bf0e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf12:	6023      	strmi	r3, [r4, #0]
 800bf14:	b11d      	cbz	r5, 800bf1e <_printf_i+0x19e>
 800bf16:	2310      	movs	r3, #16
 800bf18:	e7ac      	b.n	800be74 <_printf_i+0xf4>
 800bf1a:	4827      	ldr	r0, [pc, #156]	@ (800bfb8 <_printf_i+0x238>)
 800bf1c:	e7e9      	b.n	800bef2 <_printf_i+0x172>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	f023 0320 	bic.w	r3, r3, #32
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	e7f6      	b.n	800bf16 <_printf_i+0x196>
 800bf28:	4616      	mov	r6, r2
 800bf2a:	e7bd      	b.n	800bea8 <_printf_i+0x128>
 800bf2c:	6833      	ldr	r3, [r6, #0]
 800bf2e:	6825      	ldr	r5, [r4, #0]
 800bf30:	6961      	ldr	r1, [r4, #20]
 800bf32:	1d18      	adds	r0, r3, #4
 800bf34:	6030      	str	r0, [r6, #0]
 800bf36:	062e      	lsls	r6, r5, #24
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	d501      	bpl.n	800bf40 <_printf_i+0x1c0>
 800bf3c:	6019      	str	r1, [r3, #0]
 800bf3e:	e002      	b.n	800bf46 <_printf_i+0x1c6>
 800bf40:	0668      	lsls	r0, r5, #25
 800bf42:	d5fb      	bpl.n	800bf3c <_printf_i+0x1bc>
 800bf44:	8019      	strh	r1, [r3, #0]
 800bf46:	2300      	movs	r3, #0
 800bf48:	6123      	str	r3, [r4, #16]
 800bf4a:	4616      	mov	r6, r2
 800bf4c:	e7bc      	b.n	800bec8 <_printf_i+0x148>
 800bf4e:	6833      	ldr	r3, [r6, #0]
 800bf50:	1d1a      	adds	r2, r3, #4
 800bf52:	6032      	str	r2, [r6, #0]
 800bf54:	681e      	ldr	r6, [r3, #0]
 800bf56:	6862      	ldr	r2, [r4, #4]
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7f4 f950 	bl	8000200 <memchr>
 800bf60:	b108      	cbz	r0, 800bf66 <_printf_i+0x1e6>
 800bf62:	1b80      	subs	r0, r0, r6
 800bf64:	6060      	str	r0, [r4, #4]
 800bf66:	6863      	ldr	r3, [r4, #4]
 800bf68:	6123      	str	r3, [r4, #16]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf70:	e7aa      	b.n	800bec8 <_printf_i+0x148>
 800bf72:	6923      	ldr	r3, [r4, #16]
 800bf74:	4632      	mov	r2, r6
 800bf76:	4649      	mov	r1, r9
 800bf78:	4640      	mov	r0, r8
 800bf7a:	47d0      	blx	sl
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d0ad      	beq.n	800bedc <_printf_i+0x15c>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	079b      	lsls	r3, r3, #30
 800bf84:	d413      	bmi.n	800bfae <_printf_i+0x22e>
 800bf86:	68e0      	ldr	r0, [r4, #12]
 800bf88:	9b03      	ldr	r3, [sp, #12]
 800bf8a:	4298      	cmp	r0, r3
 800bf8c:	bfb8      	it	lt
 800bf8e:	4618      	movlt	r0, r3
 800bf90:	e7a6      	b.n	800bee0 <_printf_i+0x160>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4632      	mov	r2, r6
 800bf96:	4649      	mov	r1, r9
 800bf98:	4640      	mov	r0, r8
 800bf9a:	47d0      	blx	sl
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d09d      	beq.n	800bedc <_printf_i+0x15c>
 800bfa0:	3501      	adds	r5, #1
 800bfa2:	68e3      	ldr	r3, [r4, #12]
 800bfa4:	9903      	ldr	r1, [sp, #12]
 800bfa6:	1a5b      	subs	r3, r3, r1
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	dcf2      	bgt.n	800bf92 <_printf_i+0x212>
 800bfac:	e7eb      	b.n	800bf86 <_printf_i+0x206>
 800bfae:	2500      	movs	r5, #0
 800bfb0:	f104 0619 	add.w	r6, r4, #25
 800bfb4:	e7f5      	b.n	800bfa2 <_printf_i+0x222>
 800bfb6:	bf00      	nop
 800bfb8:	0800fc9b 	.word	0x0800fc9b
 800bfbc:	0800fcac 	.word	0x0800fcac

0800bfc0 <_scanf_float>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	b087      	sub	sp, #28
 800bfc6:	4617      	mov	r7, r2
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	688b      	ldr	r3, [r1, #8]
 800bfcc:	1e5a      	subs	r2, r3, #1
 800bfce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bfd2:	bf81      	itttt	hi
 800bfd4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bfd8:	eb03 0b05 	addhi.w	fp, r3, r5
 800bfdc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bfe0:	608b      	strhi	r3, [r1, #8]
 800bfe2:	680b      	ldr	r3, [r1, #0]
 800bfe4:	460a      	mov	r2, r1
 800bfe6:	f04f 0500 	mov.w	r5, #0
 800bfea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bfee:	f842 3b1c 	str.w	r3, [r2], #28
 800bff2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bff6:	4680      	mov	r8, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	bf98      	it	ls
 800bffc:	f04f 0b00 	movls.w	fp, #0
 800c000:	9201      	str	r2, [sp, #4]
 800c002:	4616      	mov	r6, r2
 800c004:	46aa      	mov	sl, r5
 800c006:	46a9      	mov	r9, r5
 800c008:	9502      	str	r5, [sp, #8]
 800c00a:	68a2      	ldr	r2, [r4, #8]
 800c00c:	b152      	cbz	r2, 800c024 <_scanf_float+0x64>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b4e      	cmp	r3, #78	@ 0x4e
 800c014:	d864      	bhi.n	800c0e0 <_scanf_float+0x120>
 800c016:	2b40      	cmp	r3, #64	@ 0x40
 800c018:	d83c      	bhi.n	800c094 <_scanf_float+0xd4>
 800c01a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c01e:	b2c8      	uxtb	r0, r1
 800c020:	280e      	cmp	r0, #14
 800c022:	d93a      	bls.n	800c09a <_scanf_float+0xda>
 800c024:	f1b9 0f00 	cmp.w	r9, #0
 800c028:	d003      	beq.n	800c032 <_scanf_float+0x72>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c036:	f1ba 0f01 	cmp.w	sl, #1
 800c03a:	f200 8117 	bhi.w	800c26c <_scanf_float+0x2ac>
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	429e      	cmp	r6, r3
 800c042:	f200 8108 	bhi.w	800c256 <_scanf_float+0x296>
 800c046:	2001      	movs	r0, #1
 800c048:	b007      	add	sp, #28
 800c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c052:	2a0d      	cmp	r2, #13
 800c054:	d8e6      	bhi.n	800c024 <_scanf_float+0x64>
 800c056:	a101      	add	r1, pc, #4	@ (adr r1, 800c05c <_scanf_float+0x9c>)
 800c058:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c05c:	0800c1a3 	.word	0x0800c1a3
 800c060:	0800c025 	.word	0x0800c025
 800c064:	0800c025 	.word	0x0800c025
 800c068:	0800c025 	.word	0x0800c025
 800c06c:	0800c203 	.word	0x0800c203
 800c070:	0800c1db 	.word	0x0800c1db
 800c074:	0800c025 	.word	0x0800c025
 800c078:	0800c025 	.word	0x0800c025
 800c07c:	0800c1b1 	.word	0x0800c1b1
 800c080:	0800c025 	.word	0x0800c025
 800c084:	0800c025 	.word	0x0800c025
 800c088:	0800c025 	.word	0x0800c025
 800c08c:	0800c025 	.word	0x0800c025
 800c090:	0800c169 	.word	0x0800c169
 800c094:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c098:	e7db      	b.n	800c052 <_scanf_float+0x92>
 800c09a:	290e      	cmp	r1, #14
 800c09c:	d8c2      	bhi.n	800c024 <_scanf_float+0x64>
 800c09e:	a001      	add	r0, pc, #4	@ (adr r0, 800c0a4 <_scanf_float+0xe4>)
 800c0a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c0a4:	0800c159 	.word	0x0800c159
 800c0a8:	0800c025 	.word	0x0800c025
 800c0ac:	0800c159 	.word	0x0800c159
 800c0b0:	0800c1ef 	.word	0x0800c1ef
 800c0b4:	0800c025 	.word	0x0800c025
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c13f 	.word	0x0800c13f
 800c0c0:	0800c13f 	.word	0x0800c13f
 800c0c4:	0800c13f 	.word	0x0800c13f
 800c0c8:	0800c13f 	.word	0x0800c13f
 800c0cc:	0800c13f 	.word	0x0800c13f
 800c0d0:	0800c13f 	.word	0x0800c13f
 800c0d4:	0800c13f 	.word	0x0800c13f
 800c0d8:	0800c13f 	.word	0x0800c13f
 800c0dc:	0800c13f 	.word	0x0800c13f
 800c0e0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c0e2:	d809      	bhi.n	800c0f8 <_scanf_float+0x138>
 800c0e4:	2b60      	cmp	r3, #96	@ 0x60
 800c0e6:	d8b2      	bhi.n	800c04e <_scanf_float+0x8e>
 800c0e8:	2b54      	cmp	r3, #84	@ 0x54
 800c0ea:	d07b      	beq.n	800c1e4 <_scanf_float+0x224>
 800c0ec:	2b59      	cmp	r3, #89	@ 0x59
 800c0ee:	d199      	bne.n	800c024 <_scanf_float+0x64>
 800c0f0:	2d07      	cmp	r5, #7
 800c0f2:	d197      	bne.n	800c024 <_scanf_float+0x64>
 800c0f4:	2508      	movs	r5, #8
 800c0f6:	e02c      	b.n	800c152 <_scanf_float+0x192>
 800c0f8:	2b74      	cmp	r3, #116	@ 0x74
 800c0fa:	d073      	beq.n	800c1e4 <_scanf_float+0x224>
 800c0fc:	2b79      	cmp	r3, #121	@ 0x79
 800c0fe:	e7f6      	b.n	800c0ee <_scanf_float+0x12e>
 800c100:	6821      	ldr	r1, [r4, #0]
 800c102:	05c8      	lsls	r0, r1, #23
 800c104:	d51b      	bpl.n	800c13e <_scanf_float+0x17e>
 800c106:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c10a:	6021      	str	r1, [r4, #0]
 800c10c:	f109 0901 	add.w	r9, r9, #1
 800c110:	f1bb 0f00 	cmp.w	fp, #0
 800c114:	d003      	beq.n	800c11e <_scanf_float+0x15e>
 800c116:	3201      	adds	r2, #1
 800c118:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c11c:	60a2      	str	r2, [r4, #8]
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	3b01      	subs	r3, #1
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	3301      	adds	r3, #1
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	3b01      	subs	r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	607b      	str	r3, [r7, #4]
 800c132:	f340 8087 	ble.w	800c244 <_scanf_float+0x284>
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	603b      	str	r3, [r7, #0]
 800c13c:	e765      	b.n	800c00a <_scanf_float+0x4a>
 800c13e:	eb1a 0105 	adds.w	r1, sl, r5
 800c142:	f47f af6f 	bne.w	800c024 <_scanf_float+0x64>
 800c146:	6822      	ldr	r2, [r4, #0]
 800c148:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c14c:	6022      	str	r2, [r4, #0]
 800c14e:	460d      	mov	r5, r1
 800c150:	468a      	mov	sl, r1
 800c152:	f806 3b01 	strb.w	r3, [r6], #1
 800c156:	e7e2      	b.n	800c11e <_scanf_float+0x15e>
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	0610      	lsls	r0, r2, #24
 800c15c:	f57f af62 	bpl.w	800c024 <_scanf_float+0x64>
 800c160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c164:	6022      	str	r2, [r4, #0]
 800c166:	e7f4      	b.n	800c152 <_scanf_float+0x192>
 800c168:	f1ba 0f00 	cmp.w	sl, #0
 800c16c:	d10e      	bne.n	800c18c <_scanf_float+0x1cc>
 800c16e:	f1b9 0f00 	cmp.w	r9, #0
 800c172:	d10e      	bne.n	800c192 <_scanf_float+0x1d2>
 800c174:	6822      	ldr	r2, [r4, #0]
 800c176:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c17a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c17e:	d108      	bne.n	800c192 <_scanf_float+0x1d2>
 800c180:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c184:	6022      	str	r2, [r4, #0]
 800c186:	f04f 0a01 	mov.w	sl, #1
 800c18a:	e7e2      	b.n	800c152 <_scanf_float+0x192>
 800c18c:	f1ba 0f02 	cmp.w	sl, #2
 800c190:	d055      	beq.n	800c23e <_scanf_float+0x27e>
 800c192:	2d01      	cmp	r5, #1
 800c194:	d002      	beq.n	800c19c <_scanf_float+0x1dc>
 800c196:	2d04      	cmp	r5, #4
 800c198:	f47f af44 	bne.w	800c024 <_scanf_float+0x64>
 800c19c:	3501      	adds	r5, #1
 800c19e:	b2ed      	uxtb	r5, r5
 800c1a0:	e7d7      	b.n	800c152 <_scanf_float+0x192>
 800c1a2:	f1ba 0f01 	cmp.w	sl, #1
 800c1a6:	f47f af3d 	bne.w	800c024 <_scanf_float+0x64>
 800c1aa:	f04f 0a02 	mov.w	sl, #2
 800c1ae:	e7d0      	b.n	800c152 <_scanf_float+0x192>
 800c1b0:	b97d      	cbnz	r5, 800c1d2 <_scanf_float+0x212>
 800c1b2:	f1b9 0f00 	cmp.w	r9, #0
 800c1b6:	f47f af38 	bne.w	800c02a <_scanf_float+0x6a>
 800c1ba:	6822      	ldr	r2, [r4, #0]
 800c1bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c1c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c1c4:	f040 8108 	bne.w	800c3d8 <_scanf_float+0x418>
 800c1c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c1cc:	6022      	str	r2, [r4, #0]
 800c1ce:	2501      	movs	r5, #1
 800c1d0:	e7bf      	b.n	800c152 <_scanf_float+0x192>
 800c1d2:	2d03      	cmp	r5, #3
 800c1d4:	d0e2      	beq.n	800c19c <_scanf_float+0x1dc>
 800c1d6:	2d05      	cmp	r5, #5
 800c1d8:	e7de      	b.n	800c198 <_scanf_float+0x1d8>
 800c1da:	2d02      	cmp	r5, #2
 800c1dc:	f47f af22 	bne.w	800c024 <_scanf_float+0x64>
 800c1e0:	2503      	movs	r5, #3
 800c1e2:	e7b6      	b.n	800c152 <_scanf_float+0x192>
 800c1e4:	2d06      	cmp	r5, #6
 800c1e6:	f47f af1d 	bne.w	800c024 <_scanf_float+0x64>
 800c1ea:	2507      	movs	r5, #7
 800c1ec:	e7b1      	b.n	800c152 <_scanf_float+0x192>
 800c1ee:	6822      	ldr	r2, [r4, #0]
 800c1f0:	0591      	lsls	r1, r2, #22
 800c1f2:	f57f af17 	bpl.w	800c024 <_scanf_float+0x64>
 800c1f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c1fa:	6022      	str	r2, [r4, #0]
 800c1fc:	f8cd 9008 	str.w	r9, [sp, #8]
 800c200:	e7a7      	b.n	800c152 <_scanf_float+0x192>
 800c202:	6822      	ldr	r2, [r4, #0]
 800c204:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c208:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c20c:	d006      	beq.n	800c21c <_scanf_float+0x25c>
 800c20e:	0550      	lsls	r0, r2, #21
 800c210:	f57f af08 	bpl.w	800c024 <_scanf_float+0x64>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	f000 80de 	beq.w	800c3d8 <_scanf_float+0x418>
 800c21c:	0591      	lsls	r1, r2, #22
 800c21e:	bf58      	it	pl
 800c220:	9902      	ldrpl	r1, [sp, #8]
 800c222:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c226:	bf58      	it	pl
 800c228:	eba9 0101 	subpl.w	r1, r9, r1
 800c22c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c230:	bf58      	it	pl
 800c232:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c236:	6022      	str	r2, [r4, #0]
 800c238:	f04f 0900 	mov.w	r9, #0
 800c23c:	e789      	b.n	800c152 <_scanf_float+0x192>
 800c23e:	f04f 0a03 	mov.w	sl, #3
 800c242:	e786      	b.n	800c152 <_scanf_float+0x192>
 800c244:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c248:	4639      	mov	r1, r7
 800c24a:	4640      	mov	r0, r8
 800c24c:	4798      	blx	r3
 800c24e:	2800      	cmp	r0, #0
 800c250:	f43f aedb 	beq.w	800c00a <_scanf_float+0x4a>
 800c254:	e6e6      	b.n	800c024 <_scanf_float+0x64>
 800c256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c25a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c25e:	463a      	mov	r2, r7
 800c260:	4640      	mov	r0, r8
 800c262:	4798      	blx	r3
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	3b01      	subs	r3, #1
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	e6e8      	b.n	800c03e <_scanf_float+0x7e>
 800c26c:	1e6b      	subs	r3, r5, #1
 800c26e:	2b06      	cmp	r3, #6
 800c270:	d824      	bhi.n	800c2bc <_scanf_float+0x2fc>
 800c272:	2d02      	cmp	r5, #2
 800c274:	d836      	bhi.n	800c2e4 <_scanf_float+0x324>
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	429e      	cmp	r6, r3
 800c27a:	f67f aee4 	bls.w	800c046 <_scanf_float+0x86>
 800c27e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c286:	463a      	mov	r2, r7
 800c288:	4640      	mov	r0, r8
 800c28a:	4798      	blx	r3
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	3b01      	subs	r3, #1
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	e7f0      	b.n	800c276 <_scanf_float+0x2b6>
 800c294:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c298:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c29c:	463a      	mov	r2, r7
 800c29e:	4640      	mov	r0, r8
 800c2a0:	4798      	blx	r3
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c2b0:	f1ba 0f02 	cmp.w	sl, #2
 800c2b4:	d1ee      	bne.n	800c294 <_scanf_float+0x2d4>
 800c2b6:	3d03      	subs	r5, #3
 800c2b8:	b2ed      	uxtb	r5, r5
 800c2ba:	1b76      	subs	r6, r6, r5
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	05da      	lsls	r2, r3, #23
 800c2c0:	d530      	bpl.n	800c324 <_scanf_float+0x364>
 800c2c2:	055b      	lsls	r3, r3, #21
 800c2c4:	d511      	bpl.n	800c2ea <_scanf_float+0x32a>
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	429e      	cmp	r6, r3
 800c2ca:	f67f aebc 	bls.w	800c046 <_scanf_float+0x86>
 800c2ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2d6:	463a      	mov	r2, r7
 800c2d8:	4640      	mov	r0, r8
 800c2da:	4798      	blx	r3
 800c2dc:	6923      	ldr	r3, [r4, #16]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	6123      	str	r3, [r4, #16]
 800c2e2:	e7f0      	b.n	800c2c6 <_scanf_float+0x306>
 800c2e4:	46aa      	mov	sl, r5
 800c2e6:	46b3      	mov	fp, r6
 800c2e8:	e7de      	b.n	800c2a8 <_scanf_float+0x2e8>
 800c2ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	2965      	cmp	r1, #101	@ 0x65
 800c2f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c2fa:	6123      	str	r3, [r4, #16]
 800c2fc:	d00c      	beq.n	800c318 <_scanf_float+0x358>
 800c2fe:	2945      	cmp	r1, #69	@ 0x45
 800c300:	d00a      	beq.n	800c318 <_scanf_float+0x358>
 800c302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c306:	463a      	mov	r2, r7
 800c308:	4640      	mov	r0, r8
 800c30a:	4798      	blx	r3
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c312:	3b01      	subs	r3, #1
 800c314:	1eb5      	subs	r5, r6, #2
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c31c:	463a      	mov	r2, r7
 800c31e:	4640      	mov	r0, r8
 800c320:	4798      	blx	r3
 800c322:	462e      	mov	r6, r5
 800c324:	6822      	ldr	r2, [r4, #0]
 800c326:	f012 0210 	ands.w	r2, r2, #16
 800c32a:	d001      	beq.n	800c330 <_scanf_float+0x370>
 800c32c:	2000      	movs	r0, #0
 800c32e:	e68b      	b.n	800c048 <_scanf_float+0x88>
 800c330:	7032      	strb	r2, [r6, #0]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c33c:	d11c      	bne.n	800c378 <_scanf_float+0x3b8>
 800c33e:	9b02      	ldr	r3, [sp, #8]
 800c340:	454b      	cmp	r3, r9
 800c342:	eba3 0209 	sub.w	r2, r3, r9
 800c346:	d123      	bne.n	800c390 <_scanf_float+0x3d0>
 800c348:	9901      	ldr	r1, [sp, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	4640      	mov	r0, r8
 800c34e:	f7ff f947 	bl	800b5e0 <_strtod_r>
 800c352:	9b03      	ldr	r3, [sp, #12]
 800c354:	6821      	ldr	r1, [r4, #0]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f011 0f02 	tst.w	r1, #2
 800c35c:	ec57 6b10 	vmov	r6, r7, d0
 800c360:	f103 0204 	add.w	r2, r3, #4
 800c364:	d01f      	beq.n	800c3a6 <_scanf_float+0x3e6>
 800c366:	9903      	ldr	r1, [sp, #12]
 800c368:	600a      	str	r2, [r1, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	e9c3 6700 	strd	r6, r7, [r3]
 800c370:	68e3      	ldr	r3, [r4, #12]
 800c372:	3301      	adds	r3, #1
 800c374:	60e3      	str	r3, [r4, #12]
 800c376:	e7d9      	b.n	800c32c <_scanf_float+0x36c>
 800c378:	9b04      	ldr	r3, [sp, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0e4      	beq.n	800c348 <_scanf_float+0x388>
 800c37e:	9905      	ldr	r1, [sp, #20]
 800c380:	230a      	movs	r3, #10
 800c382:	3101      	adds	r1, #1
 800c384:	4640      	mov	r0, r8
 800c386:	f7ff f9b7 	bl	800b6f8 <_strtol_r>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	9e05      	ldr	r6, [sp, #20]
 800c38e:	1ac2      	subs	r2, r0, r3
 800c390:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c394:	429e      	cmp	r6, r3
 800c396:	bf28      	it	cs
 800c398:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c39c:	4910      	ldr	r1, [pc, #64]	@ (800c3e0 <_scanf_float+0x420>)
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 f954 	bl	800c64c <siprintf>
 800c3a4:	e7d0      	b.n	800c348 <_scanf_float+0x388>
 800c3a6:	f011 0f04 	tst.w	r1, #4
 800c3aa:	9903      	ldr	r1, [sp, #12]
 800c3ac:	600a      	str	r2, [r1, #0]
 800c3ae:	d1dc      	bne.n	800c36a <_scanf_float+0x3aa>
 800c3b0:	681d      	ldr	r5, [r3, #0]
 800c3b2:	4632      	mov	r2, r6
 800c3b4:	463b      	mov	r3, r7
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	4639      	mov	r1, r7
 800c3ba:	f7f4 fbcf 	bl	8000b5c <__aeabi_dcmpun>
 800c3be:	b128      	cbz	r0, 800c3cc <_scanf_float+0x40c>
 800c3c0:	4808      	ldr	r0, [pc, #32]	@ (800c3e4 <_scanf_float+0x424>)
 800c3c2:	f000 fba5 	bl	800cb10 <nanf>
 800c3c6:	ed85 0a00 	vstr	s0, [r5]
 800c3ca:	e7d1      	b.n	800c370 <_scanf_float+0x3b0>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	f7f4 fc22 	bl	8000c18 <__aeabi_d2f>
 800c3d4:	6028      	str	r0, [r5, #0]
 800c3d6:	e7cb      	b.n	800c370 <_scanf_float+0x3b0>
 800c3d8:	f04f 0900 	mov.w	r9, #0
 800c3dc:	e629      	b.n	800c032 <_scanf_float+0x72>
 800c3de:	bf00      	nop
 800c3e0:	0800fcbd 	.word	0x0800fcbd
 800c3e4:	0800fd76 	.word	0x0800fd76

0800c3e8 <std>:
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	b510      	push	{r4, lr}
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c3f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3f6:	6083      	str	r3, [r0, #8]
 800c3f8:	8181      	strh	r1, [r0, #12]
 800c3fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c3fc:	81c2      	strh	r2, [r0, #14]
 800c3fe:	6183      	str	r3, [r0, #24]
 800c400:	4619      	mov	r1, r3
 800c402:	2208      	movs	r2, #8
 800c404:	305c      	adds	r0, #92	@ 0x5c
 800c406:	f000 fa29 	bl	800c85c <memset>
 800c40a:	4b0d      	ldr	r3, [pc, #52]	@ (800c440 <std+0x58>)
 800c40c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c40e:	4b0d      	ldr	r3, [pc, #52]	@ (800c444 <std+0x5c>)
 800c410:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c412:	4b0d      	ldr	r3, [pc, #52]	@ (800c448 <std+0x60>)
 800c414:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c416:	4b0d      	ldr	r3, [pc, #52]	@ (800c44c <std+0x64>)
 800c418:	6323      	str	r3, [r4, #48]	@ 0x30
 800c41a:	4b0d      	ldr	r3, [pc, #52]	@ (800c450 <std+0x68>)
 800c41c:	6224      	str	r4, [r4, #32]
 800c41e:	429c      	cmp	r4, r3
 800c420:	d006      	beq.n	800c430 <std+0x48>
 800c422:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c426:	4294      	cmp	r4, r2
 800c428:	d002      	beq.n	800c430 <std+0x48>
 800c42a:	33d0      	adds	r3, #208	@ 0xd0
 800c42c:	429c      	cmp	r4, r3
 800c42e:	d105      	bne.n	800c43c <std+0x54>
 800c430:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c438:	f000 bb4e 	b.w	800cad8 <__retarget_lock_init_recursive>
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	bf00      	nop
 800c440:	0800c68d 	.word	0x0800c68d
 800c444:	0800c6af 	.word	0x0800c6af
 800c448:	0800c6e7 	.word	0x0800c6e7
 800c44c:	0800c70b 	.word	0x0800c70b
 800c450:	200010cc 	.word	0x200010cc

0800c454 <stdio_exit_handler>:
 800c454:	4a02      	ldr	r2, [pc, #8]	@ (800c460 <stdio_exit_handler+0xc>)
 800c456:	4903      	ldr	r1, [pc, #12]	@ (800c464 <stdio_exit_handler+0x10>)
 800c458:	4803      	ldr	r0, [pc, #12]	@ (800c468 <stdio_exit_handler+0x14>)
 800c45a:	f000 b869 	b.w	800c530 <_fwalk_sglue>
 800c45e:	bf00      	nop
 800c460:	2000000c 	.word	0x2000000c
 800c464:	0800eed5 	.word	0x0800eed5
 800c468:	20000188 	.word	0x20000188

0800c46c <cleanup_stdio>:
 800c46c:	6841      	ldr	r1, [r0, #4]
 800c46e:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a0 <cleanup_stdio+0x34>)
 800c470:	4299      	cmp	r1, r3
 800c472:	b510      	push	{r4, lr}
 800c474:	4604      	mov	r4, r0
 800c476:	d001      	beq.n	800c47c <cleanup_stdio+0x10>
 800c478:	f002 fd2c 	bl	800eed4 <_fflush_r>
 800c47c:	68a1      	ldr	r1, [r4, #8]
 800c47e:	4b09      	ldr	r3, [pc, #36]	@ (800c4a4 <cleanup_stdio+0x38>)
 800c480:	4299      	cmp	r1, r3
 800c482:	d002      	beq.n	800c48a <cleanup_stdio+0x1e>
 800c484:	4620      	mov	r0, r4
 800c486:	f002 fd25 	bl	800eed4 <_fflush_r>
 800c48a:	68e1      	ldr	r1, [r4, #12]
 800c48c:	4b06      	ldr	r3, [pc, #24]	@ (800c4a8 <cleanup_stdio+0x3c>)
 800c48e:	4299      	cmp	r1, r3
 800c490:	d004      	beq.n	800c49c <cleanup_stdio+0x30>
 800c492:	4620      	mov	r0, r4
 800c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c498:	f002 bd1c 	b.w	800eed4 <_fflush_r>
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	200010cc 	.word	0x200010cc
 800c4a4:	20001134 	.word	0x20001134
 800c4a8:	2000119c 	.word	0x2000119c

0800c4ac <global_stdio_init.part.0>:
 800c4ac:	b510      	push	{r4, lr}
 800c4ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c4dc <global_stdio_init.part.0+0x30>)
 800c4b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c4e0 <global_stdio_init.part.0+0x34>)
 800c4b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c4e4 <global_stdio_init.part.0+0x38>)
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	f7ff ff94 	bl	800c3e8 <std>
 800c4c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	2109      	movs	r1, #9
 800c4c8:	f7ff ff8e 	bl	800c3e8 <std>
 800c4cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4d6:	2112      	movs	r1, #18
 800c4d8:	f7ff bf86 	b.w	800c3e8 <std>
 800c4dc:	20001204 	.word	0x20001204
 800c4e0:	200010cc 	.word	0x200010cc
 800c4e4:	0800c455 	.word	0x0800c455

0800c4e8 <__sfp_lock_acquire>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	@ (800c4f0 <__sfp_lock_acquire+0x8>)
 800c4ea:	f000 baf6 	b.w	800cada <__retarget_lock_acquire_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	2000120d 	.word	0x2000120d

0800c4f4 <__sfp_lock_release>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	@ (800c4fc <__sfp_lock_release+0x8>)
 800c4f6:	f000 baf1 	b.w	800cadc <__retarget_lock_release_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	2000120d 	.word	0x2000120d

0800c500 <__sinit>:
 800c500:	b510      	push	{r4, lr}
 800c502:	4604      	mov	r4, r0
 800c504:	f7ff fff0 	bl	800c4e8 <__sfp_lock_acquire>
 800c508:	6a23      	ldr	r3, [r4, #32]
 800c50a:	b11b      	cbz	r3, 800c514 <__sinit+0x14>
 800c50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c510:	f7ff bff0 	b.w	800c4f4 <__sfp_lock_release>
 800c514:	4b04      	ldr	r3, [pc, #16]	@ (800c528 <__sinit+0x28>)
 800c516:	6223      	str	r3, [r4, #32]
 800c518:	4b04      	ldr	r3, [pc, #16]	@ (800c52c <__sinit+0x2c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d1f5      	bne.n	800c50c <__sinit+0xc>
 800c520:	f7ff ffc4 	bl	800c4ac <global_stdio_init.part.0>
 800c524:	e7f2      	b.n	800c50c <__sinit+0xc>
 800c526:	bf00      	nop
 800c528:	0800c46d 	.word	0x0800c46d
 800c52c:	20001204 	.word	0x20001204

0800c530 <_fwalk_sglue>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4607      	mov	r7, r0
 800c536:	4688      	mov	r8, r1
 800c538:	4614      	mov	r4, r2
 800c53a:	2600      	movs	r6, #0
 800c53c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c540:	f1b9 0901 	subs.w	r9, r9, #1
 800c544:	d505      	bpl.n	800c552 <_fwalk_sglue+0x22>
 800c546:	6824      	ldr	r4, [r4, #0]
 800c548:	2c00      	cmp	r4, #0
 800c54a:	d1f7      	bne.n	800c53c <_fwalk_sglue+0xc>
 800c54c:	4630      	mov	r0, r6
 800c54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d907      	bls.n	800c568 <_fwalk_sglue+0x38>
 800c558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c55c:	3301      	adds	r3, #1
 800c55e:	d003      	beq.n	800c568 <_fwalk_sglue+0x38>
 800c560:	4629      	mov	r1, r5
 800c562:	4638      	mov	r0, r7
 800c564:	47c0      	blx	r8
 800c566:	4306      	orrs	r6, r0
 800c568:	3568      	adds	r5, #104	@ 0x68
 800c56a:	e7e9      	b.n	800c540 <_fwalk_sglue+0x10>

0800c56c <iprintf>:
 800c56c:	b40f      	push	{r0, r1, r2, r3}
 800c56e:	b507      	push	{r0, r1, r2, lr}
 800c570:	4906      	ldr	r1, [pc, #24]	@ (800c58c <iprintf+0x20>)
 800c572:	ab04      	add	r3, sp, #16
 800c574:	6808      	ldr	r0, [r1, #0]
 800c576:	f853 2b04 	ldr.w	r2, [r3], #4
 800c57a:	6881      	ldr	r1, [r0, #8]
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	f002 fb0d 	bl	800eb9c <_vfiprintf_r>
 800c582:	b003      	add	sp, #12
 800c584:	f85d eb04 	ldr.w	lr, [sp], #4
 800c588:	b004      	add	sp, #16
 800c58a:	4770      	bx	lr
 800c58c:	20000184 	.word	0x20000184

0800c590 <_puts_r>:
 800c590:	6a03      	ldr	r3, [r0, #32]
 800c592:	b570      	push	{r4, r5, r6, lr}
 800c594:	6884      	ldr	r4, [r0, #8]
 800c596:	4605      	mov	r5, r0
 800c598:	460e      	mov	r6, r1
 800c59a:	b90b      	cbnz	r3, 800c5a0 <_puts_r+0x10>
 800c59c:	f7ff ffb0 	bl	800c500 <__sinit>
 800c5a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5a2:	07db      	lsls	r3, r3, #31
 800c5a4:	d405      	bmi.n	800c5b2 <_puts_r+0x22>
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	0598      	lsls	r0, r3, #22
 800c5aa:	d402      	bmi.n	800c5b2 <_puts_r+0x22>
 800c5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ae:	f000 fa94 	bl	800cada <__retarget_lock_acquire_recursive>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	0719      	lsls	r1, r3, #28
 800c5b6:	d502      	bpl.n	800c5be <_puts_r+0x2e>
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d135      	bne.n	800c62a <_puts_r+0x9a>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 f8e5 	bl	800c790 <__swsetup_r>
 800c5c6:	b380      	cbz	r0, 800c62a <_puts_r+0x9a>
 800c5c8:	f04f 35ff 	mov.w	r5, #4294967295
 800c5cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5ce:	07da      	lsls	r2, r3, #31
 800c5d0:	d405      	bmi.n	800c5de <_puts_r+0x4e>
 800c5d2:	89a3      	ldrh	r3, [r4, #12]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	d402      	bmi.n	800c5de <_puts_r+0x4e>
 800c5d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5da:	f000 fa7f 	bl	800cadc <__retarget_lock_release_recursive>
 800c5de:	4628      	mov	r0, r5
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da04      	bge.n	800c5f0 <_puts_r+0x60>
 800c5e6:	69a2      	ldr	r2, [r4, #24]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	dc17      	bgt.n	800c61c <_puts_r+0x8c>
 800c5ec:	290a      	cmp	r1, #10
 800c5ee:	d015      	beq.n	800c61c <_puts_r+0x8c>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	6022      	str	r2, [r4, #0]
 800c5f6:	7019      	strb	r1, [r3, #0]
 800c5f8:	68a3      	ldr	r3, [r4, #8]
 800c5fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c5fe:	3b01      	subs	r3, #1
 800c600:	60a3      	str	r3, [r4, #8]
 800c602:	2900      	cmp	r1, #0
 800c604:	d1ed      	bne.n	800c5e2 <_puts_r+0x52>
 800c606:	2b00      	cmp	r3, #0
 800c608:	da11      	bge.n	800c62e <_puts_r+0x9e>
 800c60a:	4622      	mov	r2, r4
 800c60c:	210a      	movs	r1, #10
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 f87f 	bl	800c712 <__swbuf_r>
 800c614:	3001      	adds	r0, #1
 800c616:	d0d7      	beq.n	800c5c8 <_puts_r+0x38>
 800c618:	250a      	movs	r5, #10
 800c61a:	e7d7      	b.n	800c5cc <_puts_r+0x3c>
 800c61c:	4622      	mov	r2, r4
 800c61e:	4628      	mov	r0, r5
 800c620:	f000 f877 	bl	800c712 <__swbuf_r>
 800c624:	3001      	adds	r0, #1
 800c626:	d1e7      	bne.n	800c5f8 <_puts_r+0x68>
 800c628:	e7ce      	b.n	800c5c8 <_puts_r+0x38>
 800c62a:	3e01      	subs	r6, #1
 800c62c:	e7e4      	b.n	800c5f8 <_puts_r+0x68>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	6022      	str	r2, [r4, #0]
 800c634:	220a      	movs	r2, #10
 800c636:	701a      	strb	r2, [r3, #0]
 800c638:	e7ee      	b.n	800c618 <_puts_r+0x88>
	...

0800c63c <puts>:
 800c63c:	4b02      	ldr	r3, [pc, #8]	@ (800c648 <puts+0xc>)
 800c63e:	4601      	mov	r1, r0
 800c640:	6818      	ldr	r0, [r3, #0]
 800c642:	f7ff bfa5 	b.w	800c590 <_puts_r>
 800c646:	bf00      	nop
 800c648:	20000184 	.word	0x20000184

0800c64c <siprintf>:
 800c64c:	b40e      	push	{r1, r2, r3}
 800c64e:	b500      	push	{lr}
 800c650:	b09c      	sub	sp, #112	@ 0x70
 800c652:	ab1d      	add	r3, sp, #116	@ 0x74
 800c654:	9002      	str	r0, [sp, #8]
 800c656:	9006      	str	r0, [sp, #24]
 800c658:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c65c:	4809      	ldr	r0, [pc, #36]	@ (800c684 <siprintf+0x38>)
 800c65e:	9107      	str	r1, [sp, #28]
 800c660:	9104      	str	r1, [sp, #16]
 800c662:	4909      	ldr	r1, [pc, #36]	@ (800c688 <siprintf+0x3c>)
 800c664:	f853 2b04 	ldr.w	r2, [r3], #4
 800c668:	9105      	str	r1, [sp, #20]
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	a902      	add	r1, sp, #8
 800c670:	f002 f96e 	bl	800e950 <_svfiprintf_r>
 800c674:	9b02      	ldr	r3, [sp, #8]
 800c676:	2200      	movs	r2, #0
 800c678:	701a      	strb	r2, [r3, #0]
 800c67a:	b01c      	add	sp, #112	@ 0x70
 800c67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c680:	b003      	add	sp, #12
 800c682:	4770      	bx	lr
 800c684:	20000184 	.word	0x20000184
 800c688:	ffff0208 	.word	0xffff0208

0800c68c <__sread>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	460c      	mov	r4, r1
 800c690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c694:	f000 f9c2 	bl	800ca1c <_read_r>
 800c698:	2800      	cmp	r0, #0
 800c69a:	bfab      	itete	ge
 800c69c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c69e:	89a3      	ldrhlt	r3, [r4, #12]
 800c6a0:	181b      	addge	r3, r3, r0
 800c6a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6a6:	bfac      	ite	ge
 800c6a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6aa:	81a3      	strhlt	r3, [r4, #12]
 800c6ac:	bd10      	pop	{r4, pc}

0800c6ae <__swrite>:
 800c6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	898b      	ldrh	r3, [r1, #12]
 800c6b6:	05db      	lsls	r3, r3, #23
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	4616      	mov	r6, r2
 800c6be:	d505      	bpl.n	800c6cc <__swrite+0x1e>
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f000 f996 	bl	800c9f8 <_lseek_r>
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6d6:	81a3      	strh	r3, [r4, #12]
 800c6d8:	4632      	mov	r2, r6
 800c6da:	463b      	mov	r3, r7
 800c6dc:	4628      	mov	r0, r5
 800c6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e2:	f000 b9bd 	b.w	800ca60 <_write_r>

0800c6e6 <__sseek>:
 800c6e6:	b510      	push	{r4, lr}
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ee:	f000 f983 	bl	800c9f8 <_lseek_r>
 800c6f2:	1c43      	adds	r3, r0, #1
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	bf15      	itete	ne
 800c6f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c702:	81a3      	strheq	r3, [r4, #12]
 800c704:	bf18      	it	ne
 800c706:	81a3      	strhne	r3, [r4, #12]
 800c708:	bd10      	pop	{r4, pc}

0800c70a <__sclose>:
 800c70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70e:	f000 b963 	b.w	800c9d8 <_close_r>

0800c712 <__swbuf_r>:
 800c712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c714:	460e      	mov	r6, r1
 800c716:	4614      	mov	r4, r2
 800c718:	4605      	mov	r5, r0
 800c71a:	b118      	cbz	r0, 800c724 <__swbuf_r+0x12>
 800c71c:	6a03      	ldr	r3, [r0, #32]
 800c71e:	b90b      	cbnz	r3, 800c724 <__swbuf_r+0x12>
 800c720:	f7ff feee 	bl	800c500 <__sinit>
 800c724:	69a3      	ldr	r3, [r4, #24]
 800c726:	60a3      	str	r3, [r4, #8]
 800c728:	89a3      	ldrh	r3, [r4, #12]
 800c72a:	071a      	lsls	r2, r3, #28
 800c72c:	d501      	bpl.n	800c732 <__swbuf_r+0x20>
 800c72e:	6923      	ldr	r3, [r4, #16]
 800c730:	b943      	cbnz	r3, 800c744 <__swbuf_r+0x32>
 800c732:	4621      	mov	r1, r4
 800c734:	4628      	mov	r0, r5
 800c736:	f000 f82b 	bl	800c790 <__swsetup_r>
 800c73a:	b118      	cbz	r0, 800c744 <__swbuf_r+0x32>
 800c73c:	f04f 37ff 	mov.w	r7, #4294967295
 800c740:	4638      	mov	r0, r7
 800c742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	6922      	ldr	r2, [r4, #16]
 800c748:	1a98      	subs	r0, r3, r2
 800c74a:	6963      	ldr	r3, [r4, #20]
 800c74c:	b2f6      	uxtb	r6, r6
 800c74e:	4283      	cmp	r3, r0
 800c750:	4637      	mov	r7, r6
 800c752:	dc05      	bgt.n	800c760 <__swbuf_r+0x4e>
 800c754:	4621      	mov	r1, r4
 800c756:	4628      	mov	r0, r5
 800c758:	f002 fbbc 	bl	800eed4 <_fflush_r>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d1ed      	bne.n	800c73c <__swbuf_r+0x2a>
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	3b01      	subs	r3, #1
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	701e      	strb	r6, [r3, #0]
 800c76e:	6962      	ldr	r2, [r4, #20]
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	429a      	cmp	r2, r3
 800c774:	d004      	beq.n	800c780 <__swbuf_r+0x6e>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	07db      	lsls	r3, r3, #31
 800c77a:	d5e1      	bpl.n	800c740 <__swbuf_r+0x2e>
 800c77c:	2e0a      	cmp	r6, #10
 800c77e:	d1df      	bne.n	800c740 <__swbuf_r+0x2e>
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f002 fba6 	bl	800eed4 <_fflush_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0d9      	beq.n	800c740 <__swbuf_r+0x2e>
 800c78c:	e7d6      	b.n	800c73c <__swbuf_r+0x2a>
	...

0800c790 <__swsetup_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4b29      	ldr	r3, [pc, #164]	@ (800c838 <__swsetup_r+0xa8>)
 800c794:	4605      	mov	r5, r0
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	460c      	mov	r4, r1
 800c79a:	b118      	cbz	r0, 800c7a4 <__swsetup_r+0x14>
 800c79c:	6a03      	ldr	r3, [r0, #32]
 800c79e:	b90b      	cbnz	r3, 800c7a4 <__swsetup_r+0x14>
 800c7a0:	f7ff feae 	bl	800c500 <__sinit>
 800c7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a8:	0719      	lsls	r1, r3, #28
 800c7aa:	d422      	bmi.n	800c7f2 <__swsetup_r+0x62>
 800c7ac:	06da      	lsls	r2, r3, #27
 800c7ae:	d407      	bmi.n	800c7c0 <__swsetup_r+0x30>
 800c7b0:	2209      	movs	r2, #9
 800c7b2:	602a      	str	r2, [r5, #0]
 800c7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b8:	81a3      	strh	r3, [r4, #12]
 800c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c7be:	e033      	b.n	800c828 <__swsetup_r+0x98>
 800c7c0:	0758      	lsls	r0, r3, #29
 800c7c2:	d512      	bpl.n	800c7ea <__swsetup_r+0x5a>
 800c7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7c6:	b141      	cbz	r1, 800c7da <__swsetup_r+0x4a>
 800c7c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7cc:	4299      	cmp	r1, r3
 800c7ce:	d002      	beq.n	800c7d6 <__swsetup_r+0x46>
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	f001 f80d 	bl	800d7f0 <_free_r>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7e0:	81a3      	strh	r3, [r4, #12]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6063      	str	r3, [r4, #4]
 800c7e6:	6923      	ldr	r3, [r4, #16]
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	f043 0308 	orr.w	r3, r3, #8
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	6923      	ldr	r3, [r4, #16]
 800c7f4:	b94b      	cbnz	r3, 800c80a <__swsetup_r+0x7a>
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c7fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c800:	d003      	beq.n	800c80a <__swsetup_r+0x7a>
 800c802:	4621      	mov	r1, r4
 800c804:	4628      	mov	r0, r5
 800c806:	f002 fbc5 	bl	800ef94 <__smakebuf_r>
 800c80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c80e:	f013 0201 	ands.w	r2, r3, #1
 800c812:	d00a      	beq.n	800c82a <__swsetup_r+0x9a>
 800c814:	2200      	movs	r2, #0
 800c816:	60a2      	str	r2, [r4, #8]
 800c818:	6962      	ldr	r2, [r4, #20]
 800c81a:	4252      	negs	r2, r2
 800c81c:	61a2      	str	r2, [r4, #24]
 800c81e:	6922      	ldr	r2, [r4, #16]
 800c820:	b942      	cbnz	r2, 800c834 <__swsetup_r+0xa4>
 800c822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c826:	d1c5      	bne.n	800c7b4 <__swsetup_r+0x24>
 800c828:	bd38      	pop	{r3, r4, r5, pc}
 800c82a:	0799      	lsls	r1, r3, #30
 800c82c:	bf58      	it	pl
 800c82e:	6962      	ldrpl	r2, [r4, #20]
 800c830:	60a2      	str	r2, [r4, #8]
 800c832:	e7f4      	b.n	800c81e <__swsetup_r+0x8e>
 800c834:	2000      	movs	r0, #0
 800c836:	e7f7      	b.n	800c828 <__swsetup_r+0x98>
 800c838:	20000184 	.word	0x20000184

0800c83c <memcmp>:
 800c83c:	b510      	push	{r4, lr}
 800c83e:	3901      	subs	r1, #1
 800c840:	4402      	add	r2, r0
 800c842:	4290      	cmp	r0, r2
 800c844:	d101      	bne.n	800c84a <memcmp+0xe>
 800c846:	2000      	movs	r0, #0
 800c848:	e005      	b.n	800c856 <memcmp+0x1a>
 800c84a:	7803      	ldrb	r3, [r0, #0]
 800c84c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c850:	42a3      	cmp	r3, r4
 800c852:	d001      	beq.n	800c858 <memcmp+0x1c>
 800c854:	1b18      	subs	r0, r3, r4
 800c856:	bd10      	pop	{r4, pc}
 800c858:	3001      	adds	r0, #1
 800c85a:	e7f2      	b.n	800c842 <memcmp+0x6>

0800c85c <memset>:
 800c85c:	4402      	add	r2, r0
 800c85e:	4603      	mov	r3, r0
 800c860:	4293      	cmp	r3, r2
 800c862:	d100      	bne.n	800c866 <memset+0xa>
 800c864:	4770      	bx	lr
 800c866:	f803 1b01 	strb.w	r1, [r3], #1
 800c86a:	e7f9      	b.n	800c860 <memset+0x4>

0800c86c <strdup>:
 800c86c:	4b02      	ldr	r3, [pc, #8]	@ (800c878 <strdup+0xc>)
 800c86e:	4601      	mov	r1, r0
 800c870:	6818      	ldr	r0, [r3, #0]
 800c872:	f000 b803 	b.w	800c87c <_strdup_r>
 800c876:	bf00      	nop
 800c878:	20000184 	.word	0x20000184

0800c87c <_strdup_r>:
 800c87c:	b570      	push	{r4, r5, r6, lr}
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	460d      	mov	r5, r1
 800c884:	f7f3 fd0c 	bl	80002a0 <strlen>
 800c888:	1c46      	adds	r6, r0, #1
 800c88a:	4631      	mov	r1, r6
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7fe f817 	bl	800a8c0 <_malloc_r>
 800c892:	4604      	mov	r4, r0
 800c894:	b118      	cbz	r0, 800c89e <_strdup_r+0x22>
 800c896:	4632      	mov	r2, r6
 800c898:	4629      	mov	r1, r5
 800c89a:	f000 f920 	bl	800cade <memcpy>
 800c89e:	4620      	mov	r0, r4
 800c8a0:	bd70      	pop	{r4, r5, r6, pc}

0800c8a2 <strncmp>:
 800c8a2:	b510      	push	{r4, lr}
 800c8a4:	b16a      	cbz	r2, 800c8c2 <strncmp+0x20>
 800c8a6:	3901      	subs	r1, #1
 800c8a8:	1884      	adds	r4, r0, r2
 800c8aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d103      	bne.n	800c8be <strncmp+0x1c>
 800c8b6:	42a0      	cmp	r0, r4
 800c8b8:	d001      	beq.n	800c8be <strncmp+0x1c>
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	d1f5      	bne.n	800c8aa <strncmp+0x8>
 800c8be:	1ad0      	subs	r0, r2, r3
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	e7fc      	b.n	800c8c0 <strncmp+0x1e>

0800c8c6 <strncpy>:
 800c8c6:	b510      	push	{r4, lr}
 800c8c8:	3901      	subs	r1, #1
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	b132      	cbz	r2, 800c8dc <strncpy+0x16>
 800c8ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c8d2:	f803 4b01 	strb.w	r4, [r3], #1
 800c8d6:	3a01      	subs	r2, #1
 800c8d8:	2c00      	cmp	r4, #0
 800c8da:	d1f7      	bne.n	800c8cc <strncpy+0x6>
 800c8dc:	441a      	add	r2, r3
 800c8de:	2100      	movs	r1, #0
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <strncpy+0x20>
 800c8e4:	bd10      	pop	{r4, pc}
 800c8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ea:	e7f9      	b.n	800c8e0 <strncpy+0x1a>

0800c8ec <strtok>:
 800c8ec:	4b16      	ldr	r3, [pc, #88]	@ (800c948 <strtok+0x5c>)
 800c8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f2:	681f      	ldr	r7, [r3, #0]
 800c8f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	460e      	mov	r6, r1
 800c8fa:	b9ec      	cbnz	r4, 800c938 <strtok+0x4c>
 800c8fc:	2050      	movs	r0, #80	@ 0x50
 800c8fe:	f7fd ffad 	bl	800a85c <malloc>
 800c902:	4602      	mov	r2, r0
 800c904:	6478      	str	r0, [r7, #68]	@ 0x44
 800c906:	b920      	cbnz	r0, 800c912 <strtok+0x26>
 800c908:	4b10      	ldr	r3, [pc, #64]	@ (800c94c <strtok+0x60>)
 800c90a:	4811      	ldr	r0, [pc, #68]	@ (800c950 <strtok+0x64>)
 800c90c:	215b      	movs	r1, #91	@ 0x5b
 800c90e:	f000 f905 	bl	800cb1c <__assert_func>
 800c912:	e9c0 4400 	strd	r4, r4, [r0]
 800c916:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c91a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c91e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c922:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c926:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c92a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c92e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c932:	6184      	str	r4, [r0, #24]
 800c934:	7704      	strb	r4, [r0, #28]
 800c936:	6244      	str	r4, [r0, #36]	@ 0x24
 800c938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c93a:	4631      	mov	r1, r6
 800c93c:	4628      	mov	r0, r5
 800c93e:	2301      	movs	r3, #1
 800c940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	f000 b806 	b.w	800c954 <__strtok_r>
 800c948:	20000184 	.word	0x20000184
 800c94c:	0800fcc2 	.word	0x0800fcc2
 800c950:	0800fcd9 	.word	0x0800fcd9

0800c954 <__strtok_r>:
 800c954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c956:	4604      	mov	r4, r0
 800c958:	b908      	cbnz	r0, 800c95e <__strtok_r+0xa>
 800c95a:	6814      	ldr	r4, [r2, #0]
 800c95c:	b144      	cbz	r4, 800c970 <__strtok_r+0x1c>
 800c95e:	4620      	mov	r0, r4
 800c960:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c964:	460f      	mov	r7, r1
 800c966:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c96a:	b91e      	cbnz	r6, 800c974 <__strtok_r+0x20>
 800c96c:	b965      	cbnz	r5, 800c988 <__strtok_r+0x34>
 800c96e:	6015      	str	r5, [r2, #0]
 800c970:	2000      	movs	r0, #0
 800c972:	e005      	b.n	800c980 <__strtok_r+0x2c>
 800c974:	42b5      	cmp	r5, r6
 800c976:	d1f6      	bne.n	800c966 <__strtok_r+0x12>
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1f0      	bne.n	800c95e <__strtok_r+0xa>
 800c97c:	6014      	str	r4, [r2, #0]
 800c97e:	7003      	strb	r3, [r0, #0]
 800c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c982:	461c      	mov	r4, r3
 800c984:	e00c      	b.n	800c9a0 <__strtok_r+0x4c>
 800c986:	b915      	cbnz	r5, 800c98e <__strtok_r+0x3a>
 800c988:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c98c:	460e      	mov	r6, r1
 800c98e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c992:	42ab      	cmp	r3, r5
 800c994:	d1f7      	bne.n	800c986 <__strtok_r+0x32>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0f3      	beq.n	800c982 <__strtok_r+0x2e>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c9a0:	6014      	str	r4, [r2, #0]
 800c9a2:	e7ed      	b.n	800c980 <__strtok_r+0x2c>

0800c9a4 <strstr>:
 800c9a4:	780a      	ldrb	r2, [r1, #0]
 800c9a6:	b570      	push	{r4, r5, r6, lr}
 800c9a8:	b96a      	cbnz	r2, 800c9c6 <strstr+0x22>
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d109      	bne.n	800c9c4 <strstr+0x20>
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d0f6      	beq.n	800c9aa <strstr+0x6>
 800c9bc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c9c0:	429e      	cmp	r6, r3
 800c9c2:	d0f7      	beq.n	800c9b4 <strstr+0x10>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	7803      	ldrb	r3, [r0, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d1ef      	bne.n	800c9ac <strstr+0x8>
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	e7ec      	b.n	800c9aa <strstr+0x6>

0800c9d0 <_localeconv_r>:
 800c9d0:	4800      	ldr	r0, [pc, #0]	@ (800c9d4 <_localeconv_r+0x4>)
 800c9d2:	4770      	bx	lr
 800c9d4:	20000108 	.word	0x20000108

0800c9d8 <_close_r>:
 800c9d8:	b538      	push	{r3, r4, r5, lr}
 800c9da:	4d06      	ldr	r5, [pc, #24]	@ (800c9f4 <_close_r+0x1c>)
 800c9dc:	2300      	movs	r3, #0
 800c9de:	4604      	mov	r4, r0
 800c9e0:	4608      	mov	r0, r1
 800c9e2:	602b      	str	r3, [r5, #0]
 800c9e4:	f7f6 fb8f 	bl	8003106 <_close>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_close_r+0x1a>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_close_r+0x1a>
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	20001208 	.word	0x20001208

0800c9f8 <_lseek_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ca18 <_lseek_r+0x20>)
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	4608      	mov	r0, r1
 800ca00:	4611      	mov	r1, r2
 800ca02:	2200      	movs	r2, #0
 800ca04:	602a      	str	r2, [r5, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	f7f6 fba4 	bl	8003154 <_lseek>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_lseek_r+0x1e>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_lseek_r+0x1e>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	20001208 	.word	0x20001208

0800ca1c <_read_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d07      	ldr	r5, [pc, #28]	@ (800ca3c <_read_r+0x20>)
 800ca20:	4604      	mov	r4, r0
 800ca22:	4608      	mov	r0, r1
 800ca24:	4611      	mov	r1, r2
 800ca26:	2200      	movs	r2, #0
 800ca28:	602a      	str	r2, [r5, #0]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f7f6 fb32 	bl	8003094 <_read>
 800ca30:	1c43      	adds	r3, r0, #1
 800ca32:	d102      	bne.n	800ca3a <_read_r+0x1e>
 800ca34:	682b      	ldr	r3, [r5, #0]
 800ca36:	b103      	cbz	r3, 800ca3a <_read_r+0x1e>
 800ca38:	6023      	str	r3, [r4, #0]
 800ca3a:	bd38      	pop	{r3, r4, r5, pc}
 800ca3c:	20001208 	.word	0x20001208

0800ca40 <_sbrk_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	@ (800ca5c <_sbrk_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f7f6 fb90 	bl	8003170 <_sbrk>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_sbrk_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_sbrk_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20001208 	.word	0x20001208

0800ca60 <_write_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d07      	ldr	r5, [pc, #28]	@ (800ca80 <_write_r+0x20>)
 800ca64:	4604      	mov	r4, r0
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	602a      	str	r2, [r5, #0]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f7f6 fb2d 	bl	80030ce <_write>
 800ca74:	1c43      	adds	r3, r0, #1
 800ca76:	d102      	bne.n	800ca7e <_write_r+0x1e>
 800ca78:	682b      	ldr	r3, [r5, #0]
 800ca7a:	b103      	cbz	r3, 800ca7e <_write_r+0x1e>
 800ca7c:	6023      	str	r3, [r4, #0]
 800ca7e:	bd38      	pop	{r3, r4, r5, pc}
 800ca80:	20001208 	.word	0x20001208

0800ca84 <__errno>:
 800ca84:	4b01      	ldr	r3, [pc, #4]	@ (800ca8c <__errno+0x8>)
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20000184 	.word	0x20000184

0800ca90 <__libc_init_array>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	4d0d      	ldr	r5, [pc, #52]	@ (800cac8 <__libc_init_array+0x38>)
 800ca94:	4c0d      	ldr	r4, [pc, #52]	@ (800cacc <__libc_init_array+0x3c>)
 800ca96:	1b64      	subs	r4, r4, r5
 800ca98:	10a4      	asrs	r4, r4, #2
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	42a6      	cmp	r6, r4
 800ca9e:	d109      	bne.n	800cab4 <__libc_init_array+0x24>
 800caa0:	4d0b      	ldr	r5, [pc, #44]	@ (800cad0 <__libc_init_array+0x40>)
 800caa2:	4c0c      	ldr	r4, [pc, #48]	@ (800cad4 <__libc_init_array+0x44>)
 800caa4:	f002 fb84 	bl	800f1b0 <_init>
 800caa8:	1b64      	subs	r4, r4, r5
 800caaa:	10a4      	asrs	r4, r4, #2
 800caac:	2600      	movs	r6, #0
 800caae:	42a6      	cmp	r6, r4
 800cab0:	d105      	bne.n	800cabe <__libc_init_array+0x2e>
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cab8:	4798      	blx	r3
 800caba:	3601      	adds	r6, #1
 800cabc:	e7ee      	b.n	800ca9c <__libc_init_array+0xc>
 800cabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac2:	4798      	blx	r3
 800cac4:	3601      	adds	r6, #1
 800cac6:	e7f2      	b.n	800caae <__libc_init_array+0x1e>
 800cac8:	0800ffc4 	.word	0x0800ffc4
 800cacc:	0800ffc4 	.word	0x0800ffc4
 800cad0:	0800ffc4 	.word	0x0800ffc4
 800cad4:	0800ffc8 	.word	0x0800ffc8

0800cad8 <__retarget_lock_init_recursive>:
 800cad8:	4770      	bx	lr

0800cada <__retarget_lock_acquire_recursive>:
 800cada:	4770      	bx	lr

0800cadc <__retarget_lock_release_recursive>:
 800cadc:	4770      	bx	lr

0800cade <memcpy>:
 800cade:	440a      	add	r2, r1
 800cae0:	4291      	cmp	r1, r2
 800cae2:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae6:	d100      	bne.n	800caea <memcpy+0xc>
 800cae8:	4770      	bx	lr
 800caea:	b510      	push	{r4, lr}
 800caec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf4:	4291      	cmp	r1, r2
 800caf6:	d1f9      	bne.n	800caec <memcpy+0xe>
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	0000      	movs	r0, r0
 800cafc:	0000      	movs	r0, r0
	...

0800cb00 <nan>:
 800cb00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cb08 <nan+0x8>
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	7ff80000 	.word	0x7ff80000

0800cb10 <nanf>:
 800cb10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb18 <nanf+0x8>
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	7fc00000 	.word	0x7fc00000

0800cb1c <__assert_func>:
 800cb1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb1e:	4614      	mov	r4, r2
 800cb20:	461a      	mov	r2, r3
 800cb22:	4b09      	ldr	r3, [pc, #36]	@ (800cb48 <__assert_func+0x2c>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4605      	mov	r5, r0
 800cb28:	68d8      	ldr	r0, [r3, #12]
 800cb2a:	b954      	cbnz	r4, 800cb42 <__assert_func+0x26>
 800cb2c:	4b07      	ldr	r3, [pc, #28]	@ (800cb4c <__assert_func+0x30>)
 800cb2e:	461c      	mov	r4, r3
 800cb30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb34:	9100      	str	r1, [sp, #0]
 800cb36:	462b      	mov	r3, r5
 800cb38:	4905      	ldr	r1, [pc, #20]	@ (800cb50 <__assert_func+0x34>)
 800cb3a:	f002 f9f3 	bl	800ef24 <fiprintf>
 800cb3e:	f002 faa1 	bl	800f084 <abort>
 800cb42:	4b04      	ldr	r3, [pc, #16]	@ (800cb54 <__assert_func+0x38>)
 800cb44:	e7f4      	b.n	800cb30 <__assert_func+0x14>
 800cb46:	bf00      	nop
 800cb48:	20000184 	.word	0x20000184
 800cb4c:	0800fd76 	.word	0x0800fd76
 800cb50:	0800fd48 	.word	0x0800fd48
 800cb54:	0800fd3b 	.word	0x0800fd3b

0800cb58 <quorem>:
 800cb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	6903      	ldr	r3, [r0, #16]
 800cb5e:	690c      	ldr	r4, [r1, #16]
 800cb60:	42a3      	cmp	r3, r4
 800cb62:	4607      	mov	r7, r0
 800cb64:	db7e      	blt.n	800cc64 <quorem+0x10c>
 800cb66:	3c01      	subs	r4, #1
 800cb68:	f101 0814 	add.w	r8, r1, #20
 800cb6c:	00a3      	lsls	r3, r4, #2
 800cb6e:	f100 0514 	add.w	r5, r0, #20
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb78:	9301      	str	r3, [sp, #4]
 800cb7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb82:	3301      	adds	r3, #1
 800cb84:	429a      	cmp	r2, r3
 800cb86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb8e:	d32e      	bcc.n	800cbee <quorem+0x96>
 800cb90:	f04f 0a00 	mov.w	sl, #0
 800cb94:	46c4      	mov	ip, r8
 800cb96:	46ae      	mov	lr, r5
 800cb98:	46d3      	mov	fp, sl
 800cb9a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb9e:	b298      	uxth	r0, r3
 800cba0:	fb06 a000 	mla	r0, r6, r0, sl
 800cba4:	0c02      	lsrs	r2, r0, #16
 800cba6:	0c1b      	lsrs	r3, r3, #16
 800cba8:	fb06 2303 	mla	r3, r6, r3, r2
 800cbac:	f8de 2000 	ldr.w	r2, [lr]
 800cbb0:	b280      	uxth	r0, r0
 800cbb2:	b292      	uxth	r2, r2
 800cbb4:	1a12      	subs	r2, r2, r0
 800cbb6:	445a      	add	r2, fp
 800cbb8:	f8de 0000 	ldr.w	r0, [lr]
 800cbbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cbc6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cbca:	b292      	uxth	r2, r2
 800cbcc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cbd0:	45e1      	cmp	r9, ip
 800cbd2:	f84e 2b04 	str.w	r2, [lr], #4
 800cbd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cbda:	d2de      	bcs.n	800cb9a <quorem+0x42>
 800cbdc:	9b00      	ldr	r3, [sp, #0]
 800cbde:	58eb      	ldr	r3, [r5, r3]
 800cbe0:	b92b      	cbnz	r3, 800cbee <quorem+0x96>
 800cbe2:	9b01      	ldr	r3, [sp, #4]
 800cbe4:	3b04      	subs	r3, #4
 800cbe6:	429d      	cmp	r5, r3
 800cbe8:	461a      	mov	r2, r3
 800cbea:	d32f      	bcc.n	800cc4c <quorem+0xf4>
 800cbec:	613c      	str	r4, [r7, #16]
 800cbee:	4638      	mov	r0, r7
 800cbf0:	f001 fc58 	bl	800e4a4 <__mcmp>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	db25      	blt.n	800cc44 <quorem+0xec>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc00:	f8d1 c000 	ldr.w	ip, [r1]
 800cc04:	fa1f fe82 	uxth.w	lr, r2
 800cc08:	fa1f f38c 	uxth.w	r3, ip
 800cc0c:	eba3 030e 	sub.w	r3, r3, lr
 800cc10:	4403      	add	r3, r0
 800cc12:	0c12      	lsrs	r2, r2, #16
 800cc14:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc18:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc22:	45c1      	cmp	r9, r8
 800cc24:	f841 3b04 	str.w	r3, [r1], #4
 800cc28:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc2c:	d2e6      	bcs.n	800cbfc <quorem+0xa4>
 800cc2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc36:	b922      	cbnz	r2, 800cc42 <quorem+0xea>
 800cc38:	3b04      	subs	r3, #4
 800cc3a:	429d      	cmp	r5, r3
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	d30b      	bcc.n	800cc58 <quorem+0x100>
 800cc40:	613c      	str	r4, [r7, #16]
 800cc42:	3601      	adds	r6, #1
 800cc44:	4630      	mov	r0, r6
 800cc46:	b003      	add	sp, #12
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	6812      	ldr	r2, [r2, #0]
 800cc4e:	3b04      	subs	r3, #4
 800cc50:	2a00      	cmp	r2, #0
 800cc52:	d1cb      	bne.n	800cbec <quorem+0x94>
 800cc54:	3c01      	subs	r4, #1
 800cc56:	e7c6      	b.n	800cbe6 <quorem+0x8e>
 800cc58:	6812      	ldr	r2, [r2, #0]
 800cc5a:	3b04      	subs	r3, #4
 800cc5c:	2a00      	cmp	r2, #0
 800cc5e:	d1ef      	bne.n	800cc40 <quorem+0xe8>
 800cc60:	3c01      	subs	r4, #1
 800cc62:	e7ea      	b.n	800cc3a <quorem+0xe2>
 800cc64:	2000      	movs	r0, #0
 800cc66:	e7ee      	b.n	800cc46 <quorem+0xee>

0800cc68 <_dtoa_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	69c7      	ldr	r7, [r0, #28]
 800cc6e:	b099      	sub	sp, #100	@ 0x64
 800cc70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cc74:	ec55 4b10 	vmov	r4, r5, d0
 800cc78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cc7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc7c:	4683      	mov	fp, r0
 800cc7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc82:	b97f      	cbnz	r7, 800cca4 <_dtoa_r+0x3c>
 800cc84:	2010      	movs	r0, #16
 800cc86:	f7fd fde9 	bl	800a85c <malloc>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cc90:	b920      	cbnz	r0, 800cc9c <_dtoa_r+0x34>
 800cc92:	4ba7      	ldr	r3, [pc, #668]	@ (800cf30 <_dtoa_r+0x2c8>)
 800cc94:	21ef      	movs	r1, #239	@ 0xef
 800cc96:	48a7      	ldr	r0, [pc, #668]	@ (800cf34 <_dtoa_r+0x2cc>)
 800cc98:	f7ff ff40 	bl	800cb1c <__assert_func>
 800cc9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cca0:	6007      	str	r7, [r0, #0]
 800cca2:	60c7      	str	r7, [r0, #12]
 800cca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cca8:	6819      	ldr	r1, [r3, #0]
 800ccaa:	b159      	cbz	r1, 800ccc4 <_dtoa_r+0x5c>
 800ccac:	685a      	ldr	r2, [r3, #4]
 800ccae:	604a      	str	r2, [r1, #4]
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	4093      	lsls	r3, r2
 800ccb4:	608b      	str	r3, [r1, #8]
 800ccb6:	4658      	mov	r0, fp
 800ccb8:	f001 f970 	bl	800df9c <_Bfree>
 800ccbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	1e2b      	subs	r3, r5, #0
 800ccc6:	bfb9      	ittee	lt
 800ccc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cccc:	9303      	strlt	r3, [sp, #12]
 800ccce:	2300      	movge	r3, #0
 800ccd0:	6033      	strge	r3, [r6, #0]
 800ccd2:	9f03      	ldr	r7, [sp, #12]
 800ccd4:	4b98      	ldr	r3, [pc, #608]	@ (800cf38 <_dtoa_r+0x2d0>)
 800ccd6:	bfbc      	itt	lt
 800ccd8:	2201      	movlt	r2, #1
 800ccda:	6032      	strlt	r2, [r6, #0]
 800ccdc:	43bb      	bics	r3, r7
 800ccde:	d112      	bne.n	800cd06 <_dtoa_r+0x9e>
 800cce0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cce2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cce6:	6013      	str	r3, [r2, #0]
 800cce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccec:	4323      	orrs	r3, r4
 800ccee:	f000 854d 	beq.w	800d78c <_dtoa_r+0xb24>
 800ccf2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccf4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cf4c <_dtoa_r+0x2e4>
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f000 854f 	beq.w	800d79c <_dtoa_r+0xb34>
 800ccfe:	f10a 0303 	add.w	r3, sl, #3
 800cd02:	f000 bd49 	b.w	800d798 <_dtoa_r+0xb30>
 800cd06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	ec51 0b17 	vmov	r0, r1, d7
 800cd10:	2300      	movs	r3, #0
 800cd12:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cd16:	f7f3 feef 	bl	8000af8 <__aeabi_dcmpeq>
 800cd1a:	4680      	mov	r8, r0
 800cd1c:	b158      	cbz	r0, 800cd36 <_dtoa_r+0xce>
 800cd1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cd20:	2301      	movs	r3, #1
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd26:	b113      	cbz	r3, 800cd2e <_dtoa_r+0xc6>
 800cd28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cd2a:	4b84      	ldr	r3, [pc, #528]	@ (800cf3c <_dtoa_r+0x2d4>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cf50 <_dtoa_r+0x2e8>
 800cd32:	f000 bd33 	b.w	800d79c <_dtoa_r+0xb34>
 800cd36:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd3a:	aa16      	add	r2, sp, #88	@ 0x58
 800cd3c:	a917      	add	r1, sp, #92	@ 0x5c
 800cd3e:	4658      	mov	r0, fp
 800cd40:	f001 fcd0 	bl	800e6e4 <__d2b>
 800cd44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cd48:	4681      	mov	r9, r0
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d077      	beq.n	800ce3e <_dtoa_r+0x1d6>
 800cd4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd50:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cd54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd68:	4619      	mov	r1, r3
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4b74      	ldr	r3, [pc, #464]	@ (800cf40 <_dtoa_r+0x2d8>)
 800cd6e:	f7f3 faa3 	bl	80002b8 <__aeabi_dsub>
 800cd72:	a369      	add	r3, pc, #420	@ (adr r3, 800cf18 <_dtoa_r+0x2b0>)
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	f7f3 fc56 	bl	8000628 <__aeabi_dmul>
 800cd7c:	a368      	add	r3, pc, #416	@ (adr r3, 800cf20 <_dtoa_r+0x2b8>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	f7f3 fa9b 	bl	80002bc <__adddf3>
 800cd86:	4604      	mov	r4, r0
 800cd88:	4630      	mov	r0, r6
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	f7f3 fbe2 	bl	8000554 <__aeabi_i2d>
 800cd90:	a365      	add	r3, pc, #404	@ (adr r3, 800cf28 <_dtoa_r+0x2c0>)
 800cd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd96:	f7f3 fc47 	bl	8000628 <__aeabi_dmul>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4620      	mov	r0, r4
 800cda0:	4629      	mov	r1, r5
 800cda2:	f7f3 fa8b 	bl	80002bc <__adddf3>
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f7f3 feed 	bl	8000b88 <__aeabi_d2iz>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fea8 	bl	8000b0c <__aeabi_dcmplt>
 800cdbc:	b140      	cbz	r0, 800cdd0 <_dtoa_r+0x168>
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	f7f3 fbc8 	bl	8000554 <__aeabi_i2d>
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	462b      	mov	r3, r5
 800cdc8:	f7f3 fe96 	bl	8000af8 <__aeabi_dcmpeq>
 800cdcc:	b900      	cbnz	r0, 800cdd0 <_dtoa_r+0x168>
 800cdce:	3f01      	subs	r7, #1
 800cdd0:	2f16      	cmp	r7, #22
 800cdd2:	d851      	bhi.n	800ce78 <_dtoa_r+0x210>
 800cdd4:	4b5b      	ldr	r3, [pc, #364]	@ (800cf44 <_dtoa_r+0x2dc>)
 800cdd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cde2:	f7f3 fe93 	bl	8000b0c <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d048      	beq.n	800ce7c <_dtoa_r+0x214>
 800cdea:	3f01      	subs	r7, #1
 800cdec:	2300      	movs	r3, #0
 800cdee:	9312      	str	r3, [sp, #72]	@ 0x48
 800cdf0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cdf2:	1b9b      	subs	r3, r3, r6
 800cdf4:	1e5a      	subs	r2, r3, #1
 800cdf6:	bf44      	itt	mi
 800cdf8:	f1c3 0801 	rsbmi	r8, r3, #1
 800cdfc:	2300      	movmi	r3, #0
 800cdfe:	9208      	str	r2, [sp, #32]
 800ce00:	bf54      	ite	pl
 800ce02:	f04f 0800 	movpl.w	r8, #0
 800ce06:	9308      	strmi	r3, [sp, #32]
 800ce08:	2f00      	cmp	r7, #0
 800ce0a:	db39      	blt.n	800ce80 <_dtoa_r+0x218>
 800ce0c:	9b08      	ldr	r3, [sp, #32]
 800ce0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ce10:	443b      	add	r3, r7
 800ce12:	9308      	str	r3, [sp, #32]
 800ce14:	2300      	movs	r3, #0
 800ce16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce1a:	2b09      	cmp	r3, #9
 800ce1c:	d864      	bhi.n	800cee8 <_dtoa_r+0x280>
 800ce1e:	2b05      	cmp	r3, #5
 800ce20:	bfc4      	itt	gt
 800ce22:	3b04      	subgt	r3, #4
 800ce24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ce26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce28:	f1a3 0302 	sub.w	r3, r3, #2
 800ce2c:	bfcc      	ite	gt
 800ce2e:	2400      	movgt	r4, #0
 800ce30:	2401      	movle	r4, #1
 800ce32:	2b03      	cmp	r3, #3
 800ce34:	d863      	bhi.n	800cefe <_dtoa_r+0x296>
 800ce36:	e8df f003 	tbb	[pc, r3]
 800ce3a:	372a      	.short	0x372a
 800ce3c:	5535      	.short	0x5535
 800ce3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ce42:	441e      	add	r6, r3
 800ce44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ce48:	2b20      	cmp	r3, #32
 800ce4a:	bfc1      	itttt	gt
 800ce4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce50:	409f      	lslgt	r7, r3
 800ce52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce56:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce5a:	bfd6      	itet	le
 800ce5c:	f1c3 0320 	rsble	r3, r3, #32
 800ce60:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce64:	fa04 f003 	lslle.w	r0, r4, r3
 800ce68:	f7f3 fb64 	bl	8000534 <__aeabi_ui2d>
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce72:	3e01      	subs	r6, #1
 800ce74:	9214      	str	r2, [sp, #80]	@ 0x50
 800ce76:	e777      	b.n	800cd68 <_dtoa_r+0x100>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e7b8      	b.n	800cdee <_dtoa_r+0x186>
 800ce7c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ce7e:	e7b7      	b.n	800cdf0 <_dtoa_r+0x188>
 800ce80:	427b      	negs	r3, r7
 800ce82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce84:	2300      	movs	r3, #0
 800ce86:	eba8 0807 	sub.w	r8, r8, r7
 800ce8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce8c:	e7c4      	b.n	800ce18 <_dtoa_r+0x1b0>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dc35      	bgt.n	800cf04 <_dtoa_r+0x29c>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	9307      	str	r3, [sp, #28]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cea2:	e00b      	b.n	800cebc <_dtoa_r+0x254>
 800cea4:	2301      	movs	r3, #1
 800cea6:	e7f3      	b.n	800ce90 <_dtoa_r+0x228>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ceac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ceae:	18fb      	adds	r3, r7, r3
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	bfb8      	it	lt
 800ceba:	2301      	movlt	r3, #1
 800cebc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cec0:	2100      	movs	r1, #0
 800cec2:	2204      	movs	r2, #4
 800cec4:	f102 0514 	add.w	r5, r2, #20
 800cec8:	429d      	cmp	r5, r3
 800ceca:	d91f      	bls.n	800cf0c <_dtoa_r+0x2a4>
 800cecc:	6041      	str	r1, [r0, #4]
 800cece:	4658      	mov	r0, fp
 800ced0:	f001 f824 	bl	800df1c <_Balloc>
 800ced4:	4682      	mov	sl, r0
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d13c      	bne.n	800cf54 <_dtoa_r+0x2ec>
 800ceda:	4b1b      	ldr	r3, [pc, #108]	@ (800cf48 <_dtoa_r+0x2e0>)
 800cedc:	4602      	mov	r2, r0
 800cede:	f240 11af 	movw	r1, #431	@ 0x1af
 800cee2:	e6d8      	b.n	800cc96 <_dtoa_r+0x2e>
 800cee4:	2301      	movs	r3, #1
 800cee6:	e7e0      	b.n	800ceaa <_dtoa_r+0x242>
 800cee8:	2401      	movs	r4, #1
 800ceea:	2300      	movs	r3, #0
 800ceec:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cef0:	f04f 33ff 	mov.w	r3, #4294967295
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	9307      	str	r3, [sp, #28]
 800cef8:	2200      	movs	r2, #0
 800cefa:	2312      	movs	r3, #18
 800cefc:	e7d0      	b.n	800cea0 <_dtoa_r+0x238>
 800cefe:	2301      	movs	r3, #1
 800cf00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf02:	e7f5      	b.n	800cef0 <_dtoa_r+0x288>
 800cf04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	9307      	str	r3, [sp, #28]
 800cf0a:	e7d7      	b.n	800cebc <_dtoa_r+0x254>
 800cf0c:	3101      	adds	r1, #1
 800cf0e:	0052      	lsls	r2, r2, #1
 800cf10:	e7d8      	b.n	800cec4 <_dtoa_r+0x25c>
 800cf12:	bf00      	nop
 800cf14:	f3af 8000 	nop.w
 800cf18:	636f4361 	.word	0x636f4361
 800cf1c:	3fd287a7 	.word	0x3fd287a7
 800cf20:	8b60c8b3 	.word	0x8b60c8b3
 800cf24:	3fc68a28 	.word	0x3fc68a28
 800cf28:	509f79fb 	.word	0x509f79fb
 800cf2c:	3fd34413 	.word	0x3fd34413
 800cf30:	0800fcc2 	.word	0x0800fcc2
 800cf34:	0800fd84 	.word	0x0800fd84
 800cf38:	7ff00000 	.word	0x7ff00000
 800cf3c:	0800fc9a 	.word	0x0800fc9a
 800cf40:	3ff80000 	.word	0x3ff80000
 800cf44:	0800fee0 	.word	0x0800fee0
 800cf48:	0800fddc 	.word	0x0800fddc
 800cf4c:	0800fd80 	.word	0x0800fd80
 800cf50:	0800fc99 	.word	0x0800fc99
 800cf54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cf58:	6018      	str	r0, [r3, #0]
 800cf5a:	9b07      	ldr	r3, [sp, #28]
 800cf5c:	2b0e      	cmp	r3, #14
 800cf5e:	f200 80a4 	bhi.w	800d0aa <_dtoa_r+0x442>
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	f000 80a1 	beq.w	800d0aa <_dtoa_r+0x442>
 800cf68:	2f00      	cmp	r7, #0
 800cf6a:	dd33      	ble.n	800cfd4 <_dtoa_r+0x36c>
 800cf6c:	4bad      	ldr	r3, [pc, #692]	@ (800d224 <_dtoa_r+0x5bc>)
 800cf6e:	f007 020f 	and.w	r2, r7, #15
 800cf72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf76:	ed93 7b00 	vldr	d7, [r3]
 800cf7a:	05f8      	lsls	r0, r7, #23
 800cf7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cf80:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf84:	d516      	bpl.n	800cfb4 <_dtoa_r+0x34c>
 800cf86:	4ba8      	ldr	r3, [pc, #672]	@ (800d228 <_dtoa_r+0x5c0>)
 800cf88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf90:	f7f3 fc74 	bl	800087c <__aeabi_ddiv>
 800cf94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf98:	f004 040f 	and.w	r4, r4, #15
 800cf9c:	2603      	movs	r6, #3
 800cf9e:	4da2      	ldr	r5, [pc, #648]	@ (800d228 <_dtoa_r+0x5c0>)
 800cfa0:	b954      	cbnz	r4, 800cfb8 <_dtoa_r+0x350>
 800cfa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfaa:	f7f3 fc67 	bl	800087c <__aeabi_ddiv>
 800cfae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfb2:	e028      	b.n	800d006 <_dtoa_r+0x39e>
 800cfb4:	2602      	movs	r6, #2
 800cfb6:	e7f2      	b.n	800cf9e <_dtoa_r+0x336>
 800cfb8:	07e1      	lsls	r1, r4, #31
 800cfba:	d508      	bpl.n	800cfce <_dtoa_r+0x366>
 800cfbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfc4:	f7f3 fb30 	bl	8000628 <__aeabi_dmul>
 800cfc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfcc:	3601      	adds	r6, #1
 800cfce:	1064      	asrs	r4, r4, #1
 800cfd0:	3508      	adds	r5, #8
 800cfd2:	e7e5      	b.n	800cfa0 <_dtoa_r+0x338>
 800cfd4:	f000 80d2 	beq.w	800d17c <_dtoa_r+0x514>
 800cfd8:	427c      	negs	r4, r7
 800cfda:	4b92      	ldr	r3, [pc, #584]	@ (800d224 <_dtoa_r+0x5bc>)
 800cfdc:	4d92      	ldr	r5, [pc, #584]	@ (800d228 <_dtoa_r+0x5c0>)
 800cfde:	f004 020f 	and.w	r2, r4, #15
 800cfe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfee:	f7f3 fb1b 	bl	8000628 <__aeabi_dmul>
 800cff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cff6:	1124      	asrs	r4, r4, #4
 800cff8:	2300      	movs	r3, #0
 800cffa:	2602      	movs	r6, #2
 800cffc:	2c00      	cmp	r4, #0
 800cffe:	f040 80b2 	bne.w	800d166 <_dtoa_r+0x4fe>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1d3      	bne.n	800cfae <_dtoa_r+0x346>
 800d006:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d008:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f000 80b7 	beq.w	800d180 <_dtoa_r+0x518>
 800d012:	4b86      	ldr	r3, [pc, #536]	@ (800d22c <_dtoa_r+0x5c4>)
 800d014:	2200      	movs	r2, #0
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 fd77 	bl	8000b0c <__aeabi_dcmplt>
 800d01e:	2800      	cmp	r0, #0
 800d020:	f000 80ae 	beq.w	800d180 <_dtoa_r+0x518>
 800d024:	9b07      	ldr	r3, [sp, #28]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f000 80aa 	beq.w	800d180 <_dtoa_r+0x518>
 800d02c:	9b00      	ldr	r3, [sp, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	dd37      	ble.n	800d0a2 <_dtoa_r+0x43a>
 800d032:	1e7b      	subs	r3, r7, #1
 800d034:	9304      	str	r3, [sp, #16]
 800d036:	4620      	mov	r0, r4
 800d038:	4b7d      	ldr	r3, [pc, #500]	@ (800d230 <_dtoa_r+0x5c8>)
 800d03a:	2200      	movs	r2, #0
 800d03c:	4629      	mov	r1, r5
 800d03e:	f7f3 faf3 	bl	8000628 <__aeabi_dmul>
 800d042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d046:	9c00      	ldr	r4, [sp, #0]
 800d048:	3601      	adds	r6, #1
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7f3 fa82 	bl	8000554 <__aeabi_i2d>
 800d050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d054:	f7f3 fae8 	bl	8000628 <__aeabi_dmul>
 800d058:	4b76      	ldr	r3, [pc, #472]	@ (800d234 <_dtoa_r+0x5cc>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	f7f3 f92e 	bl	80002bc <__adddf3>
 800d060:	4605      	mov	r5, r0
 800d062:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d066:	2c00      	cmp	r4, #0
 800d068:	f040 808d 	bne.w	800d186 <_dtoa_r+0x51e>
 800d06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d070:	4b71      	ldr	r3, [pc, #452]	@ (800d238 <_dtoa_r+0x5d0>)
 800d072:	2200      	movs	r2, #0
 800d074:	f7f3 f920 	bl	80002b8 <__aeabi_dsub>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d080:	462a      	mov	r2, r5
 800d082:	4633      	mov	r3, r6
 800d084:	f7f3 fd60 	bl	8000b48 <__aeabi_dcmpgt>
 800d088:	2800      	cmp	r0, #0
 800d08a:	f040 828b 	bne.w	800d5a4 <_dtoa_r+0x93c>
 800d08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d092:	462a      	mov	r2, r5
 800d094:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d098:	f7f3 fd38 	bl	8000b0c <__aeabi_dcmplt>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f040 8128 	bne.w	800d2f2 <_dtoa_r+0x68a>
 800d0a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d0a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d0aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f2c0 815a 	blt.w	800d366 <_dtoa_r+0x6fe>
 800d0b2:	2f0e      	cmp	r7, #14
 800d0b4:	f300 8157 	bgt.w	800d366 <_dtoa_r+0x6fe>
 800d0b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d224 <_dtoa_r+0x5bc>)
 800d0ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0be:	ed93 7b00 	vldr	d7, [r3]
 800d0c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	ed8d 7b00 	vstr	d7, [sp]
 800d0ca:	da03      	bge.n	800d0d4 <_dtoa_r+0x46c>
 800d0cc:	9b07      	ldr	r3, [sp, #28]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f340 8101 	ble.w	800d2d6 <_dtoa_r+0x66e>
 800d0d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d0d8:	4656      	mov	r6, sl
 800d0da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0de:	4620      	mov	r0, r4
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	f7f3 fbcb 	bl	800087c <__aeabi_ddiv>
 800d0e6:	f7f3 fd4f 	bl	8000b88 <__aeabi_d2iz>
 800d0ea:	4680      	mov	r8, r0
 800d0ec:	f7f3 fa32 	bl	8000554 <__aeabi_i2d>
 800d0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f4:	f7f3 fa98 	bl	8000628 <__aeabi_dmul>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	4629      	mov	r1, r5
 800d100:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d104:	f7f3 f8d8 	bl	80002b8 <__aeabi_dsub>
 800d108:	f806 4b01 	strb.w	r4, [r6], #1
 800d10c:	9d07      	ldr	r5, [sp, #28]
 800d10e:	eba6 040a 	sub.w	r4, r6, sl
 800d112:	42a5      	cmp	r5, r4
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	f040 8117 	bne.w	800d34a <_dtoa_r+0x6e2>
 800d11c:	f7f3 f8ce 	bl	80002bc <__adddf3>
 800d120:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d124:	4604      	mov	r4, r0
 800d126:	460d      	mov	r5, r1
 800d128:	f7f3 fd0e 	bl	8000b48 <__aeabi_dcmpgt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f040 80f9 	bne.w	800d324 <_dtoa_r+0x6bc>
 800d132:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	f7f3 fcdd 	bl	8000af8 <__aeabi_dcmpeq>
 800d13e:	b118      	cbz	r0, 800d148 <_dtoa_r+0x4e0>
 800d140:	f018 0f01 	tst.w	r8, #1
 800d144:	f040 80ee 	bne.w	800d324 <_dtoa_r+0x6bc>
 800d148:	4649      	mov	r1, r9
 800d14a:	4658      	mov	r0, fp
 800d14c:	f000 ff26 	bl	800df9c <_Bfree>
 800d150:	2300      	movs	r3, #0
 800d152:	7033      	strb	r3, [r6, #0]
 800d154:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d156:	3701      	adds	r7, #1
 800d158:	601f      	str	r7, [r3, #0]
 800d15a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f000 831d 	beq.w	800d79c <_dtoa_r+0xb34>
 800d162:	601e      	str	r6, [r3, #0]
 800d164:	e31a      	b.n	800d79c <_dtoa_r+0xb34>
 800d166:	07e2      	lsls	r2, r4, #31
 800d168:	d505      	bpl.n	800d176 <_dtoa_r+0x50e>
 800d16a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d16e:	f7f3 fa5b 	bl	8000628 <__aeabi_dmul>
 800d172:	3601      	adds	r6, #1
 800d174:	2301      	movs	r3, #1
 800d176:	1064      	asrs	r4, r4, #1
 800d178:	3508      	adds	r5, #8
 800d17a:	e73f      	b.n	800cffc <_dtoa_r+0x394>
 800d17c:	2602      	movs	r6, #2
 800d17e:	e742      	b.n	800d006 <_dtoa_r+0x39e>
 800d180:	9c07      	ldr	r4, [sp, #28]
 800d182:	9704      	str	r7, [sp, #16]
 800d184:	e761      	b.n	800d04a <_dtoa_r+0x3e2>
 800d186:	4b27      	ldr	r3, [pc, #156]	@ (800d224 <_dtoa_r+0x5bc>)
 800d188:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d18a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d18e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d192:	4454      	add	r4, sl
 800d194:	2900      	cmp	r1, #0
 800d196:	d053      	beq.n	800d240 <_dtoa_r+0x5d8>
 800d198:	4928      	ldr	r1, [pc, #160]	@ (800d23c <_dtoa_r+0x5d4>)
 800d19a:	2000      	movs	r0, #0
 800d19c:	f7f3 fb6e 	bl	800087c <__aeabi_ddiv>
 800d1a0:	4633      	mov	r3, r6
 800d1a2:	462a      	mov	r2, r5
 800d1a4:	f7f3 f888 	bl	80002b8 <__aeabi_dsub>
 800d1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d1ac:	4656      	mov	r6, sl
 800d1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1b2:	f7f3 fce9 	bl	8000b88 <__aeabi_d2iz>
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	f7f3 f9cc 	bl	8000554 <__aeabi_i2d>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	460b      	mov	r3, r1
 800d1c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1c4:	f7f3 f878 	bl	80002b8 <__aeabi_dsub>
 800d1c8:	3530      	adds	r5, #48	@ 0x30
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1d2:	f806 5b01 	strb.w	r5, [r6], #1
 800d1d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1da:	f7f3 fc97 	bl	8000b0c <__aeabi_dcmplt>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d171      	bne.n	800d2c6 <_dtoa_r+0x65e>
 800d1e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1e6:	4911      	ldr	r1, [pc, #68]	@ (800d22c <_dtoa_r+0x5c4>)
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	f7f3 f865 	bl	80002b8 <__aeabi_dsub>
 800d1ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1f2:	f7f3 fc8b 	bl	8000b0c <__aeabi_dcmplt>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	f040 8095 	bne.w	800d326 <_dtoa_r+0x6be>
 800d1fc:	42a6      	cmp	r6, r4
 800d1fe:	f43f af50 	beq.w	800d0a2 <_dtoa_r+0x43a>
 800d202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d206:	4b0a      	ldr	r3, [pc, #40]	@ (800d230 <_dtoa_r+0x5c8>)
 800d208:	2200      	movs	r2, #0
 800d20a:	f7f3 fa0d 	bl	8000628 <__aeabi_dmul>
 800d20e:	4b08      	ldr	r3, [pc, #32]	@ (800d230 <_dtoa_r+0x5c8>)
 800d210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d214:	2200      	movs	r2, #0
 800d216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d21a:	f7f3 fa05 	bl	8000628 <__aeabi_dmul>
 800d21e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d222:	e7c4      	b.n	800d1ae <_dtoa_r+0x546>
 800d224:	0800fee0 	.word	0x0800fee0
 800d228:	0800feb8 	.word	0x0800feb8
 800d22c:	3ff00000 	.word	0x3ff00000
 800d230:	40240000 	.word	0x40240000
 800d234:	401c0000 	.word	0x401c0000
 800d238:	40140000 	.word	0x40140000
 800d23c:	3fe00000 	.word	0x3fe00000
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	f7f3 f9f0 	bl	8000628 <__aeabi_dmul>
 800d248:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d24c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d24e:	4656      	mov	r6, sl
 800d250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d254:	f7f3 fc98 	bl	8000b88 <__aeabi_d2iz>
 800d258:	4605      	mov	r5, r0
 800d25a:	f7f3 f97b 	bl	8000554 <__aeabi_i2d>
 800d25e:	4602      	mov	r2, r0
 800d260:	460b      	mov	r3, r1
 800d262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d266:	f7f3 f827 	bl	80002b8 <__aeabi_dsub>
 800d26a:	3530      	adds	r5, #48	@ 0x30
 800d26c:	f806 5b01 	strb.w	r5, [r6], #1
 800d270:	4602      	mov	r2, r0
 800d272:	460b      	mov	r3, r1
 800d274:	42a6      	cmp	r6, r4
 800d276:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d27a:	f04f 0200 	mov.w	r2, #0
 800d27e:	d124      	bne.n	800d2ca <_dtoa_r+0x662>
 800d280:	4bac      	ldr	r3, [pc, #688]	@ (800d534 <_dtoa_r+0x8cc>)
 800d282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d286:	f7f3 f819 	bl	80002bc <__adddf3>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d292:	f7f3 fc59 	bl	8000b48 <__aeabi_dcmpgt>
 800d296:	2800      	cmp	r0, #0
 800d298:	d145      	bne.n	800d326 <_dtoa_r+0x6be>
 800d29a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d29e:	49a5      	ldr	r1, [pc, #660]	@ (800d534 <_dtoa_r+0x8cc>)
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	f7f3 f809 	bl	80002b8 <__aeabi_dsub>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2ae:	f7f3 fc2d 	bl	8000b0c <__aeabi_dcmplt>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	f43f aef5 	beq.w	800d0a2 <_dtoa_r+0x43a>
 800d2b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d2ba:	1e73      	subs	r3, r6, #1
 800d2bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d2be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d2c2:	2b30      	cmp	r3, #48	@ 0x30
 800d2c4:	d0f8      	beq.n	800d2b8 <_dtoa_r+0x650>
 800d2c6:	9f04      	ldr	r7, [sp, #16]
 800d2c8:	e73e      	b.n	800d148 <_dtoa_r+0x4e0>
 800d2ca:	4b9b      	ldr	r3, [pc, #620]	@ (800d538 <_dtoa_r+0x8d0>)
 800d2cc:	f7f3 f9ac 	bl	8000628 <__aeabi_dmul>
 800d2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2d4:	e7bc      	b.n	800d250 <_dtoa_r+0x5e8>
 800d2d6:	d10c      	bne.n	800d2f2 <_dtoa_r+0x68a>
 800d2d8:	4b98      	ldr	r3, [pc, #608]	@ (800d53c <_dtoa_r+0x8d4>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2e0:	f7f3 f9a2 	bl	8000628 <__aeabi_dmul>
 800d2e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d2e8:	f7f3 fc24 	bl	8000b34 <__aeabi_dcmpge>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	f000 8157 	beq.w	800d5a0 <_dtoa_r+0x938>
 800d2f2:	2400      	movs	r4, #0
 800d2f4:	4625      	mov	r5, r4
 800d2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2f8:	43db      	mvns	r3, r3
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	4656      	mov	r6, sl
 800d2fe:	2700      	movs	r7, #0
 800d300:	4621      	mov	r1, r4
 800d302:	4658      	mov	r0, fp
 800d304:	f000 fe4a 	bl	800df9c <_Bfree>
 800d308:	2d00      	cmp	r5, #0
 800d30a:	d0dc      	beq.n	800d2c6 <_dtoa_r+0x65e>
 800d30c:	b12f      	cbz	r7, 800d31a <_dtoa_r+0x6b2>
 800d30e:	42af      	cmp	r7, r5
 800d310:	d003      	beq.n	800d31a <_dtoa_r+0x6b2>
 800d312:	4639      	mov	r1, r7
 800d314:	4658      	mov	r0, fp
 800d316:	f000 fe41 	bl	800df9c <_Bfree>
 800d31a:	4629      	mov	r1, r5
 800d31c:	4658      	mov	r0, fp
 800d31e:	f000 fe3d 	bl	800df9c <_Bfree>
 800d322:	e7d0      	b.n	800d2c6 <_dtoa_r+0x65e>
 800d324:	9704      	str	r7, [sp, #16]
 800d326:	4633      	mov	r3, r6
 800d328:	461e      	mov	r6, r3
 800d32a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d32e:	2a39      	cmp	r2, #57	@ 0x39
 800d330:	d107      	bne.n	800d342 <_dtoa_r+0x6da>
 800d332:	459a      	cmp	sl, r3
 800d334:	d1f8      	bne.n	800d328 <_dtoa_r+0x6c0>
 800d336:	9a04      	ldr	r2, [sp, #16]
 800d338:	3201      	adds	r2, #1
 800d33a:	9204      	str	r2, [sp, #16]
 800d33c:	2230      	movs	r2, #48	@ 0x30
 800d33e:	f88a 2000 	strb.w	r2, [sl]
 800d342:	781a      	ldrb	r2, [r3, #0]
 800d344:	3201      	adds	r2, #1
 800d346:	701a      	strb	r2, [r3, #0]
 800d348:	e7bd      	b.n	800d2c6 <_dtoa_r+0x65e>
 800d34a:	4b7b      	ldr	r3, [pc, #492]	@ (800d538 <_dtoa_r+0x8d0>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	f7f3 f96b 	bl	8000628 <__aeabi_dmul>
 800d352:	2200      	movs	r2, #0
 800d354:	2300      	movs	r3, #0
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	f7f3 fbcd 	bl	8000af8 <__aeabi_dcmpeq>
 800d35e:	2800      	cmp	r0, #0
 800d360:	f43f aebb 	beq.w	800d0da <_dtoa_r+0x472>
 800d364:	e6f0      	b.n	800d148 <_dtoa_r+0x4e0>
 800d366:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d368:	2a00      	cmp	r2, #0
 800d36a:	f000 80db 	beq.w	800d524 <_dtoa_r+0x8bc>
 800d36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d370:	2a01      	cmp	r2, #1
 800d372:	f300 80bf 	bgt.w	800d4f4 <_dtoa_r+0x88c>
 800d376:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d378:	2a00      	cmp	r2, #0
 800d37a:	f000 80b7 	beq.w	800d4ec <_dtoa_r+0x884>
 800d37e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d382:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d384:	4646      	mov	r6, r8
 800d386:	9a08      	ldr	r2, [sp, #32]
 800d388:	2101      	movs	r1, #1
 800d38a:	441a      	add	r2, r3
 800d38c:	4658      	mov	r0, fp
 800d38e:	4498      	add	r8, r3
 800d390:	9208      	str	r2, [sp, #32]
 800d392:	f000 ff01 	bl	800e198 <__i2b>
 800d396:	4605      	mov	r5, r0
 800d398:	b15e      	cbz	r6, 800d3b2 <_dtoa_r+0x74a>
 800d39a:	9b08      	ldr	r3, [sp, #32]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dd08      	ble.n	800d3b2 <_dtoa_r+0x74a>
 800d3a0:	42b3      	cmp	r3, r6
 800d3a2:	9a08      	ldr	r2, [sp, #32]
 800d3a4:	bfa8      	it	ge
 800d3a6:	4633      	movge	r3, r6
 800d3a8:	eba8 0803 	sub.w	r8, r8, r3
 800d3ac:	1af6      	subs	r6, r6, r3
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	9308      	str	r3, [sp, #32]
 800d3b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3b4:	b1f3      	cbz	r3, 800d3f4 <_dtoa_r+0x78c>
 800d3b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 80b7 	beq.w	800d52c <_dtoa_r+0x8c4>
 800d3be:	b18c      	cbz	r4, 800d3e4 <_dtoa_r+0x77c>
 800d3c0:	4629      	mov	r1, r5
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f000 ffa7 	bl	800e318 <__pow5mult>
 800d3ca:	464a      	mov	r2, r9
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	4658      	mov	r0, fp
 800d3d2:	f000 fef7 	bl	800e1c4 <__multiply>
 800d3d6:	4649      	mov	r1, r9
 800d3d8:	9004      	str	r0, [sp, #16]
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 fdde 	bl	800df9c <_Bfree>
 800d3e0:	9b04      	ldr	r3, [sp, #16]
 800d3e2:	4699      	mov	r9, r3
 800d3e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3e6:	1b1a      	subs	r2, r3, r4
 800d3e8:	d004      	beq.n	800d3f4 <_dtoa_r+0x78c>
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	4658      	mov	r0, fp
 800d3ee:	f000 ff93 	bl	800e318 <__pow5mult>
 800d3f2:	4681      	mov	r9, r0
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	4658      	mov	r0, fp
 800d3f8:	f000 fece 	bl	800e198 <__i2b>
 800d3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fe:	4604      	mov	r4, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 81cf 	beq.w	800d7a4 <_dtoa_r+0xb3c>
 800d406:	461a      	mov	r2, r3
 800d408:	4601      	mov	r1, r0
 800d40a:	4658      	mov	r0, fp
 800d40c:	f000 ff84 	bl	800e318 <__pow5mult>
 800d410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d412:	2b01      	cmp	r3, #1
 800d414:	4604      	mov	r4, r0
 800d416:	f300 8095 	bgt.w	800d544 <_dtoa_r+0x8dc>
 800d41a:	9b02      	ldr	r3, [sp, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f040 8087 	bne.w	800d530 <_dtoa_r+0x8c8>
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f040 8089 	bne.w	800d540 <_dtoa_r+0x8d8>
 800d42e:	9b03      	ldr	r3, [sp, #12]
 800d430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d434:	0d1b      	lsrs	r3, r3, #20
 800d436:	051b      	lsls	r3, r3, #20
 800d438:	b12b      	cbz	r3, 800d446 <_dtoa_r+0x7de>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	3301      	adds	r3, #1
 800d43e:	9308      	str	r3, [sp, #32]
 800d440:	f108 0801 	add.w	r8, r8, #1
 800d444:	2301      	movs	r3, #1
 800d446:	930a      	str	r3, [sp, #40]	@ 0x28
 800d448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f000 81b0 	beq.w	800d7b0 <_dtoa_r+0xb48>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d456:	6918      	ldr	r0, [r3, #16]
 800d458:	f000 fe52 	bl	800e100 <__hi0bits>
 800d45c:	f1c0 0020 	rsb	r0, r0, #32
 800d460:	9b08      	ldr	r3, [sp, #32]
 800d462:	4418      	add	r0, r3
 800d464:	f010 001f 	ands.w	r0, r0, #31
 800d468:	d077      	beq.n	800d55a <_dtoa_r+0x8f2>
 800d46a:	f1c0 0320 	rsb	r3, r0, #32
 800d46e:	2b04      	cmp	r3, #4
 800d470:	dd6b      	ble.n	800d54a <_dtoa_r+0x8e2>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	f1c0 001c 	rsb	r0, r0, #28
 800d478:	4403      	add	r3, r0
 800d47a:	4480      	add	r8, r0
 800d47c:	4406      	add	r6, r0
 800d47e:	9308      	str	r3, [sp, #32]
 800d480:	f1b8 0f00 	cmp.w	r8, #0
 800d484:	dd05      	ble.n	800d492 <_dtoa_r+0x82a>
 800d486:	4649      	mov	r1, r9
 800d488:	4642      	mov	r2, r8
 800d48a:	4658      	mov	r0, fp
 800d48c:	f000 ff9e 	bl	800e3cc <__lshift>
 800d490:	4681      	mov	r9, r0
 800d492:	9b08      	ldr	r3, [sp, #32]
 800d494:	2b00      	cmp	r3, #0
 800d496:	dd05      	ble.n	800d4a4 <_dtoa_r+0x83c>
 800d498:	4621      	mov	r1, r4
 800d49a:	461a      	mov	r2, r3
 800d49c:	4658      	mov	r0, fp
 800d49e:	f000 ff95 	bl	800e3cc <__lshift>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d059      	beq.n	800d55e <_dtoa_r+0x8f6>
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fff9 	bl	800e4a4 <__mcmp>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	da53      	bge.n	800d55e <_dtoa_r+0x8f6>
 800d4b6:	1e7b      	subs	r3, r7, #1
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	2300      	movs	r3, #0
 800d4be:	220a      	movs	r2, #10
 800d4c0:	4658      	mov	r0, fp
 800d4c2:	f000 fd8d 	bl	800dfe0 <__multadd>
 800d4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4c8:	4681      	mov	r9, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 8172 	beq.w	800d7b4 <_dtoa_r+0xb4c>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	220a      	movs	r2, #10
 800d4d6:	4658      	mov	r0, fp
 800d4d8:	f000 fd82 	bl	800dfe0 <__multadd>
 800d4dc:	9b00      	ldr	r3, [sp, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	dc67      	bgt.n	800d5b4 <_dtoa_r+0x94c>
 800d4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	dc41      	bgt.n	800d56e <_dtoa_r+0x906>
 800d4ea:	e063      	b.n	800d5b4 <_dtoa_r+0x94c>
 800d4ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4f2:	e746      	b.n	800d382 <_dtoa_r+0x71a>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	1e5c      	subs	r4, r3, #1
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4fa:	42a3      	cmp	r3, r4
 800d4fc:	bfbf      	itttt	lt
 800d4fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d500:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d502:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d504:	1ae3      	sublt	r3, r4, r3
 800d506:	bfb4      	ite	lt
 800d508:	18d2      	addlt	r2, r2, r3
 800d50a:	1b1c      	subge	r4, r3, r4
 800d50c:	9b07      	ldr	r3, [sp, #28]
 800d50e:	bfbc      	itt	lt
 800d510:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d512:	2400      	movlt	r4, #0
 800d514:	2b00      	cmp	r3, #0
 800d516:	bfb5      	itete	lt
 800d518:	eba8 0603 	sublt.w	r6, r8, r3
 800d51c:	9b07      	ldrge	r3, [sp, #28]
 800d51e:	2300      	movlt	r3, #0
 800d520:	4646      	movge	r6, r8
 800d522:	e730      	b.n	800d386 <_dtoa_r+0x71e>
 800d524:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d526:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d528:	4646      	mov	r6, r8
 800d52a:	e735      	b.n	800d398 <_dtoa_r+0x730>
 800d52c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d52e:	e75c      	b.n	800d3ea <_dtoa_r+0x782>
 800d530:	2300      	movs	r3, #0
 800d532:	e788      	b.n	800d446 <_dtoa_r+0x7de>
 800d534:	3fe00000 	.word	0x3fe00000
 800d538:	40240000 	.word	0x40240000
 800d53c:	40140000 	.word	0x40140000
 800d540:	9b02      	ldr	r3, [sp, #8]
 800d542:	e780      	b.n	800d446 <_dtoa_r+0x7de>
 800d544:	2300      	movs	r3, #0
 800d546:	930a      	str	r3, [sp, #40]	@ 0x28
 800d548:	e782      	b.n	800d450 <_dtoa_r+0x7e8>
 800d54a:	d099      	beq.n	800d480 <_dtoa_r+0x818>
 800d54c:	9a08      	ldr	r2, [sp, #32]
 800d54e:	331c      	adds	r3, #28
 800d550:	441a      	add	r2, r3
 800d552:	4498      	add	r8, r3
 800d554:	441e      	add	r6, r3
 800d556:	9208      	str	r2, [sp, #32]
 800d558:	e792      	b.n	800d480 <_dtoa_r+0x818>
 800d55a:	4603      	mov	r3, r0
 800d55c:	e7f6      	b.n	800d54c <_dtoa_r+0x8e4>
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	9704      	str	r7, [sp, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	dc20      	bgt.n	800d5a8 <_dtoa_r+0x940>
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	dd1e      	ble.n	800d5ac <_dtoa_r+0x944>
 800d56e:	9b00      	ldr	r3, [sp, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f47f aec0 	bne.w	800d2f6 <_dtoa_r+0x68e>
 800d576:	4621      	mov	r1, r4
 800d578:	2205      	movs	r2, #5
 800d57a:	4658      	mov	r0, fp
 800d57c:	f000 fd30 	bl	800dfe0 <__multadd>
 800d580:	4601      	mov	r1, r0
 800d582:	4604      	mov	r4, r0
 800d584:	4648      	mov	r0, r9
 800d586:	f000 ff8d 	bl	800e4a4 <__mcmp>
 800d58a:	2800      	cmp	r0, #0
 800d58c:	f77f aeb3 	ble.w	800d2f6 <_dtoa_r+0x68e>
 800d590:	4656      	mov	r6, sl
 800d592:	2331      	movs	r3, #49	@ 0x31
 800d594:	f806 3b01 	strb.w	r3, [r6], #1
 800d598:	9b04      	ldr	r3, [sp, #16]
 800d59a:	3301      	adds	r3, #1
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	e6ae      	b.n	800d2fe <_dtoa_r+0x696>
 800d5a0:	9c07      	ldr	r4, [sp, #28]
 800d5a2:	9704      	str	r7, [sp, #16]
 800d5a4:	4625      	mov	r5, r4
 800d5a6:	e7f3      	b.n	800d590 <_dtoa_r+0x928>
 800d5a8:	9b07      	ldr	r3, [sp, #28]
 800d5aa:	9300      	str	r3, [sp, #0]
 800d5ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f000 8104 	beq.w	800d7bc <_dtoa_r+0xb54>
 800d5b4:	2e00      	cmp	r6, #0
 800d5b6:	dd05      	ble.n	800d5c4 <_dtoa_r+0x95c>
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4632      	mov	r2, r6
 800d5bc:	4658      	mov	r0, fp
 800d5be:	f000 ff05 	bl	800e3cc <__lshift>
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d05a      	beq.n	800d680 <_dtoa_r+0xa18>
 800d5ca:	6869      	ldr	r1, [r5, #4]
 800d5cc:	4658      	mov	r0, fp
 800d5ce:	f000 fca5 	bl	800df1c <_Balloc>
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	b928      	cbnz	r0, 800d5e2 <_dtoa_r+0x97a>
 800d5d6:	4b84      	ldr	r3, [pc, #528]	@ (800d7e8 <_dtoa_r+0xb80>)
 800d5d8:	4602      	mov	r2, r0
 800d5da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5de:	f7ff bb5a 	b.w	800cc96 <_dtoa_r+0x2e>
 800d5e2:	692a      	ldr	r2, [r5, #16]
 800d5e4:	3202      	adds	r2, #2
 800d5e6:	0092      	lsls	r2, r2, #2
 800d5e8:	f105 010c 	add.w	r1, r5, #12
 800d5ec:	300c      	adds	r0, #12
 800d5ee:	f7ff fa76 	bl	800cade <memcpy>
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	4631      	mov	r1, r6
 800d5f6:	4658      	mov	r0, fp
 800d5f8:	f000 fee8 	bl	800e3cc <__lshift>
 800d5fc:	f10a 0301 	add.w	r3, sl, #1
 800d600:	9307      	str	r3, [sp, #28]
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	4453      	add	r3, sl
 800d606:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d608:	9b02      	ldr	r3, [sp, #8]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	462f      	mov	r7, r5
 800d610:	930a      	str	r3, [sp, #40]	@ 0x28
 800d612:	4605      	mov	r5, r0
 800d614:	9b07      	ldr	r3, [sp, #28]
 800d616:	4621      	mov	r1, r4
 800d618:	3b01      	subs	r3, #1
 800d61a:	4648      	mov	r0, r9
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	f7ff fa9b 	bl	800cb58 <quorem>
 800d622:	4639      	mov	r1, r7
 800d624:	9002      	str	r0, [sp, #8]
 800d626:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d62a:	4648      	mov	r0, r9
 800d62c:	f000 ff3a 	bl	800e4a4 <__mcmp>
 800d630:	462a      	mov	r2, r5
 800d632:	9008      	str	r0, [sp, #32]
 800d634:	4621      	mov	r1, r4
 800d636:	4658      	mov	r0, fp
 800d638:	f000 ff50 	bl	800e4dc <__mdiff>
 800d63c:	68c2      	ldr	r2, [r0, #12]
 800d63e:	4606      	mov	r6, r0
 800d640:	bb02      	cbnz	r2, 800d684 <_dtoa_r+0xa1c>
 800d642:	4601      	mov	r1, r0
 800d644:	4648      	mov	r0, r9
 800d646:	f000 ff2d 	bl	800e4a4 <__mcmp>
 800d64a:	4602      	mov	r2, r0
 800d64c:	4631      	mov	r1, r6
 800d64e:	4658      	mov	r0, fp
 800d650:	920e      	str	r2, [sp, #56]	@ 0x38
 800d652:	f000 fca3 	bl	800df9c <_Bfree>
 800d656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d65a:	9e07      	ldr	r6, [sp, #28]
 800d65c:	ea43 0102 	orr.w	r1, r3, r2
 800d660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d662:	4319      	orrs	r1, r3
 800d664:	d110      	bne.n	800d688 <_dtoa_r+0xa20>
 800d666:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d66a:	d029      	beq.n	800d6c0 <_dtoa_r+0xa58>
 800d66c:	9b08      	ldr	r3, [sp, #32]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd02      	ble.n	800d678 <_dtoa_r+0xa10>
 800d672:	9b02      	ldr	r3, [sp, #8]
 800d674:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d678:	9b00      	ldr	r3, [sp, #0]
 800d67a:	f883 8000 	strb.w	r8, [r3]
 800d67e:	e63f      	b.n	800d300 <_dtoa_r+0x698>
 800d680:	4628      	mov	r0, r5
 800d682:	e7bb      	b.n	800d5fc <_dtoa_r+0x994>
 800d684:	2201      	movs	r2, #1
 800d686:	e7e1      	b.n	800d64c <_dtoa_r+0x9e4>
 800d688:	9b08      	ldr	r3, [sp, #32]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	db04      	blt.n	800d698 <_dtoa_r+0xa30>
 800d68e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d690:	430b      	orrs	r3, r1
 800d692:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d694:	430b      	orrs	r3, r1
 800d696:	d120      	bne.n	800d6da <_dtoa_r+0xa72>
 800d698:	2a00      	cmp	r2, #0
 800d69a:	dded      	ble.n	800d678 <_dtoa_r+0xa10>
 800d69c:	4649      	mov	r1, r9
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4658      	mov	r0, fp
 800d6a2:	f000 fe93 	bl	800e3cc <__lshift>
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4681      	mov	r9, r0
 800d6aa:	f000 fefb 	bl	800e4a4 <__mcmp>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	dc03      	bgt.n	800d6ba <_dtoa_r+0xa52>
 800d6b2:	d1e1      	bne.n	800d678 <_dtoa_r+0xa10>
 800d6b4:	f018 0f01 	tst.w	r8, #1
 800d6b8:	d0de      	beq.n	800d678 <_dtoa_r+0xa10>
 800d6ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6be:	d1d8      	bne.n	800d672 <_dtoa_r+0xa0a>
 800d6c0:	9a00      	ldr	r2, [sp, #0]
 800d6c2:	2339      	movs	r3, #57	@ 0x39
 800d6c4:	7013      	strb	r3, [r2, #0]
 800d6c6:	4633      	mov	r3, r6
 800d6c8:	461e      	mov	r6, r3
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6d0:	2a39      	cmp	r2, #57	@ 0x39
 800d6d2:	d052      	beq.n	800d77a <_dtoa_r+0xb12>
 800d6d4:	3201      	adds	r2, #1
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	e612      	b.n	800d300 <_dtoa_r+0x698>
 800d6da:	2a00      	cmp	r2, #0
 800d6dc:	dd07      	ble.n	800d6ee <_dtoa_r+0xa86>
 800d6de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d6e2:	d0ed      	beq.n	800d6c0 <_dtoa_r+0xa58>
 800d6e4:	9a00      	ldr	r2, [sp, #0]
 800d6e6:	f108 0301 	add.w	r3, r8, #1
 800d6ea:	7013      	strb	r3, [r2, #0]
 800d6ec:	e608      	b.n	800d300 <_dtoa_r+0x698>
 800d6ee:	9b07      	ldr	r3, [sp, #28]
 800d6f0:	9a07      	ldr	r2, [sp, #28]
 800d6f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d6f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d028      	beq.n	800d74e <_dtoa_r+0xae6>
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	2300      	movs	r3, #0
 800d700:	220a      	movs	r2, #10
 800d702:	4658      	mov	r0, fp
 800d704:	f000 fc6c 	bl	800dfe0 <__multadd>
 800d708:	42af      	cmp	r7, r5
 800d70a:	4681      	mov	r9, r0
 800d70c:	f04f 0300 	mov.w	r3, #0
 800d710:	f04f 020a 	mov.w	r2, #10
 800d714:	4639      	mov	r1, r7
 800d716:	4658      	mov	r0, fp
 800d718:	d107      	bne.n	800d72a <_dtoa_r+0xac2>
 800d71a:	f000 fc61 	bl	800dfe0 <__multadd>
 800d71e:	4607      	mov	r7, r0
 800d720:	4605      	mov	r5, r0
 800d722:	9b07      	ldr	r3, [sp, #28]
 800d724:	3301      	adds	r3, #1
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	e774      	b.n	800d614 <_dtoa_r+0x9ac>
 800d72a:	f000 fc59 	bl	800dfe0 <__multadd>
 800d72e:	4629      	mov	r1, r5
 800d730:	4607      	mov	r7, r0
 800d732:	2300      	movs	r3, #0
 800d734:	220a      	movs	r2, #10
 800d736:	4658      	mov	r0, fp
 800d738:	f000 fc52 	bl	800dfe0 <__multadd>
 800d73c:	4605      	mov	r5, r0
 800d73e:	e7f0      	b.n	800d722 <_dtoa_r+0xaba>
 800d740:	9b00      	ldr	r3, [sp, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	bfcc      	ite	gt
 800d746:	461e      	movgt	r6, r3
 800d748:	2601      	movle	r6, #1
 800d74a:	4456      	add	r6, sl
 800d74c:	2700      	movs	r7, #0
 800d74e:	4649      	mov	r1, r9
 800d750:	2201      	movs	r2, #1
 800d752:	4658      	mov	r0, fp
 800d754:	f000 fe3a 	bl	800e3cc <__lshift>
 800d758:	4621      	mov	r1, r4
 800d75a:	4681      	mov	r9, r0
 800d75c:	f000 fea2 	bl	800e4a4 <__mcmp>
 800d760:	2800      	cmp	r0, #0
 800d762:	dcb0      	bgt.n	800d6c6 <_dtoa_r+0xa5e>
 800d764:	d102      	bne.n	800d76c <_dtoa_r+0xb04>
 800d766:	f018 0f01 	tst.w	r8, #1
 800d76a:	d1ac      	bne.n	800d6c6 <_dtoa_r+0xa5e>
 800d76c:	4633      	mov	r3, r6
 800d76e:	461e      	mov	r6, r3
 800d770:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d774:	2a30      	cmp	r2, #48	@ 0x30
 800d776:	d0fa      	beq.n	800d76e <_dtoa_r+0xb06>
 800d778:	e5c2      	b.n	800d300 <_dtoa_r+0x698>
 800d77a:	459a      	cmp	sl, r3
 800d77c:	d1a4      	bne.n	800d6c8 <_dtoa_r+0xa60>
 800d77e:	9b04      	ldr	r3, [sp, #16]
 800d780:	3301      	adds	r3, #1
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	2331      	movs	r3, #49	@ 0x31
 800d786:	f88a 3000 	strb.w	r3, [sl]
 800d78a:	e5b9      	b.n	800d300 <_dtoa_r+0x698>
 800d78c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d78e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d7ec <_dtoa_r+0xb84>
 800d792:	b11b      	cbz	r3, 800d79c <_dtoa_r+0xb34>
 800d794:	f10a 0308 	add.w	r3, sl, #8
 800d798:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d79a:	6013      	str	r3, [r2, #0]
 800d79c:	4650      	mov	r0, sl
 800d79e:	b019      	add	sp, #100	@ 0x64
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	f77f ae37 	ble.w	800d41a <_dtoa_r+0x7b2>
 800d7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7b0:	2001      	movs	r0, #1
 800d7b2:	e655      	b.n	800d460 <_dtoa_r+0x7f8>
 800d7b4:	9b00      	ldr	r3, [sp, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f77f aed6 	ble.w	800d568 <_dtoa_r+0x900>
 800d7bc:	4656      	mov	r6, sl
 800d7be:	4621      	mov	r1, r4
 800d7c0:	4648      	mov	r0, r9
 800d7c2:	f7ff f9c9 	bl	800cb58 <quorem>
 800d7c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d7ca:	f806 8b01 	strb.w	r8, [r6], #1
 800d7ce:	9b00      	ldr	r3, [sp, #0]
 800d7d0:	eba6 020a 	sub.w	r2, r6, sl
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	ddb3      	ble.n	800d740 <_dtoa_r+0xad8>
 800d7d8:	4649      	mov	r1, r9
 800d7da:	2300      	movs	r3, #0
 800d7dc:	220a      	movs	r2, #10
 800d7de:	4658      	mov	r0, fp
 800d7e0:	f000 fbfe 	bl	800dfe0 <__multadd>
 800d7e4:	4681      	mov	r9, r0
 800d7e6:	e7ea      	b.n	800d7be <_dtoa_r+0xb56>
 800d7e8:	0800fddc 	.word	0x0800fddc
 800d7ec:	0800fd77 	.word	0x0800fd77

0800d7f0 <_free_r>:
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	2900      	cmp	r1, #0
 800d7f6:	d041      	beq.n	800d87c <_free_r+0x8c>
 800d7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fc:	1f0c      	subs	r4, r1, #4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfb8      	it	lt
 800d802:	18e4      	addlt	r4, r4, r3
 800d804:	f7fd f8dc 	bl	800a9c0 <__malloc_lock>
 800d808:	4a1d      	ldr	r2, [pc, #116]	@ (800d880 <_free_r+0x90>)
 800d80a:	6813      	ldr	r3, [r2, #0]
 800d80c:	b933      	cbnz	r3, 800d81c <_free_r+0x2c>
 800d80e:	6063      	str	r3, [r4, #4]
 800d810:	6014      	str	r4, [r2, #0]
 800d812:	4628      	mov	r0, r5
 800d814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d818:	f7fd b8d8 	b.w	800a9cc <__malloc_unlock>
 800d81c:	42a3      	cmp	r3, r4
 800d81e:	d908      	bls.n	800d832 <_free_r+0x42>
 800d820:	6820      	ldr	r0, [r4, #0]
 800d822:	1821      	adds	r1, r4, r0
 800d824:	428b      	cmp	r3, r1
 800d826:	bf01      	itttt	eq
 800d828:	6819      	ldreq	r1, [r3, #0]
 800d82a:	685b      	ldreq	r3, [r3, #4]
 800d82c:	1809      	addeq	r1, r1, r0
 800d82e:	6021      	streq	r1, [r4, #0]
 800d830:	e7ed      	b.n	800d80e <_free_r+0x1e>
 800d832:	461a      	mov	r2, r3
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	b10b      	cbz	r3, 800d83c <_free_r+0x4c>
 800d838:	42a3      	cmp	r3, r4
 800d83a:	d9fa      	bls.n	800d832 <_free_r+0x42>
 800d83c:	6811      	ldr	r1, [r2, #0]
 800d83e:	1850      	adds	r0, r2, r1
 800d840:	42a0      	cmp	r0, r4
 800d842:	d10b      	bne.n	800d85c <_free_r+0x6c>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	4401      	add	r1, r0
 800d848:	1850      	adds	r0, r2, r1
 800d84a:	4283      	cmp	r3, r0
 800d84c:	6011      	str	r1, [r2, #0]
 800d84e:	d1e0      	bne.n	800d812 <_free_r+0x22>
 800d850:	6818      	ldr	r0, [r3, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	6053      	str	r3, [r2, #4]
 800d856:	4408      	add	r0, r1
 800d858:	6010      	str	r0, [r2, #0]
 800d85a:	e7da      	b.n	800d812 <_free_r+0x22>
 800d85c:	d902      	bls.n	800d864 <_free_r+0x74>
 800d85e:	230c      	movs	r3, #12
 800d860:	602b      	str	r3, [r5, #0]
 800d862:	e7d6      	b.n	800d812 <_free_r+0x22>
 800d864:	6820      	ldr	r0, [r4, #0]
 800d866:	1821      	adds	r1, r4, r0
 800d868:	428b      	cmp	r3, r1
 800d86a:	bf04      	itt	eq
 800d86c:	6819      	ldreq	r1, [r3, #0]
 800d86e:	685b      	ldreq	r3, [r3, #4]
 800d870:	6063      	str	r3, [r4, #4]
 800d872:	bf04      	itt	eq
 800d874:	1809      	addeq	r1, r1, r0
 800d876:	6021      	streq	r1, [r4, #0]
 800d878:	6054      	str	r4, [r2, #4]
 800d87a:	e7ca      	b.n	800d812 <_free_r+0x22>
 800d87c:	bd38      	pop	{r3, r4, r5, pc}
 800d87e:	bf00      	nop
 800d880:	200010c8 	.word	0x200010c8

0800d884 <rshift>:
 800d884:	6903      	ldr	r3, [r0, #16]
 800d886:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d88a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d88e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d892:	f100 0414 	add.w	r4, r0, #20
 800d896:	dd45      	ble.n	800d924 <rshift+0xa0>
 800d898:	f011 011f 	ands.w	r1, r1, #31
 800d89c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d8a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d8a4:	d10c      	bne.n	800d8c0 <rshift+0x3c>
 800d8a6:	f100 0710 	add.w	r7, r0, #16
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	42b1      	cmp	r1, r6
 800d8ae:	d334      	bcc.n	800d91a <rshift+0x96>
 800d8b0:	1a9b      	subs	r3, r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	1eea      	subs	r2, r5, #3
 800d8b6:	4296      	cmp	r6, r2
 800d8b8:	bf38      	it	cc
 800d8ba:	2300      	movcc	r3, #0
 800d8bc:	4423      	add	r3, r4
 800d8be:	e015      	b.n	800d8ec <rshift+0x68>
 800d8c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d8c4:	f1c1 0820 	rsb	r8, r1, #32
 800d8c8:	40cf      	lsrs	r7, r1
 800d8ca:	f105 0e04 	add.w	lr, r5, #4
 800d8ce:	46a1      	mov	r9, r4
 800d8d0:	4576      	cmp	r6, lr
 800d8d2:	46f4      	mov	ip, lr
 800d8d4:	d815      	bhi.n	800d902 <rshift+0x7e>
 800d8d6:	1a9a      	subs	r2, r3, r2
 800d8d8:	0092      	lsls	r2, r2, #2
 800d8da:	3a04      	subs	r2, #4
 800d8dc:	3501      	adds	r5, #1
 800d8de:	42ae      	cmp	r6, r5
 800d8e0:	bf38      	it	cc
 800d8e2:	2200      	movcc	r2, #0
 800d8e4:	18a3      	adds	r3, r4, r2
 800d8e6:	50a7      	str	r7, [r4, r2]
 800d8e8:	b107      	cbz	r7, 800d8ec <rshift+0x68>
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	1b1a      	subs	r2, r3, r4
 800d8ee:	42a3      	cmp	r3, r4
 800d8f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d8f4:	bf08      	it	eq
 800d8f6:	2300      	moveq	r3, #0
 800d8f8:	6102      	str	r2, [r0, #16]
 800d8fa:	bf08      	it	eq
 800d8fc:	6143      	streq	r3, [r0, #20]
 800d8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d902:	f8dc c000 	ldr.w	ip, [ip]
 800d906:	fa0c fc08 	lsl.w	ip, ip, r8
 800d90a:	ea4c 0707 	orr.w	r7, ip, r7
 800d90e:	f849 7b04 	str.w	r7, [r9], #4
 800d912:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d916:	40cf      	lsrs	r7, r1
 800d918:	e7da      	b.n	800d8d0 <rshift+0x4c>
 800d91a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d91e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d922:	e7c3      	b.n	800d8ac <rshift+0x28>
 800d924:	4623      	mov	r3, r4
 800d926:	e7e1      	b.n	800d8ec <rshift+0x68>

0800d928 <__hexdig_fun>:
 800d928:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d92c:	2b09      	cmp	r3, #9
 800d92e:	d802      	bhi.n	800d936 <__hexdig_fun+0xe>
 800d930:	3820      	subs	r0, #32
 800d932:	b2c0      	uxtb	r0, r0
 800d934:	4770      	bx	lr
 800d936:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d93a:	2b05      	cmp	r3, #5
 800d93c:	d801      	bhi.n	800d942 <__hexdig_fun+0x1a>
 800d93e:	3847      	subs	r0, #71	@ 0x47
 800d940:	e7f7      	b.n	800d932 <__hexdig_fun+0xa>
 800d942:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d946:	2b05      	cmp	r3, #5
 800d948:	d801      	bhi.n	800d94e <__hexdig_fun+0x26>
 800d94a:	3827      	subs	r0, #39	@ 0x27
 800d94c:	e7f1      	b.n	800d932 <__hexdig_fun+0xa>
 800d94e:	2000      	movs	r0, #0
 800d950:	4770      	bx	lr
	...

0800d954 <__gethex>:
 800d954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	b085      	sub	sp, #20
 800d95a:	468a      	mov	sl, r1
 800d95c:	9302      	str	r3, [sp, #8]
 800d95e:	680b      	ldr	r3, [r1, #0]
 800d960:	9001      	str	r0, [sp, #4]
 800d962:	4690      	mov	r8, r2
 800d964:	1c9c      	adds	r4, r3, #2
 800d966:	46a1      	mov	r9, r4
 800d968:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d96c:	2830      	cmp	r0, #48	@ 0x30
 800d96e:	d0fa      	beq.n	800d966 <__gethex+0x12>
 800d970:	eba9 0303 	sub.w	r3, r9, r3
 800d974:	f1a3 0b02 	sub.w	fp, r3, #2
 800d978:	f7ff ffd6 	bl	800d928 <__hexdig_fun>
 800d97c:	4605      	mov	r5, r0
 800d97e:	2800      	cmp	r0, #0
 800d980:	d168      	bne.n	800da54 <__gethex+0x100>
 800d982:	49a0      	ldr	r1, [pc, #640]	@ (800dc04 <__gethex+0x2b0>)
 800d984:	2201      	movs	r2, #1
 800d986:	4648      	mov	r0, r9
 800d988:	f7fe ff8b 	bl	800c8a2 <strncmp>
 800d98c:	4607      	mov	r7, r0
 800d98e:	2800      	cmp	r0, #0
 800d990:	d167      	bne.n	800da62 <__gethex+0x10e>
 800d992:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d996:	4626      	mov	r6, r4
 800d998:	f7ff ffc6 	bl	800d928 <__hexdig_fun>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d062      	beq.n	800da66 <__gethex+0x112>
 800d9a0:	4623      	mov	r3, r4
 800d9a2:	7818      	ldrb	r0, [r3, #0]
 800d9a4:	2830      	cmp	r0, #48	@ 0x30
 800d9a6:	4699      	mov	r9, r3
 800d9a8:	f103 0301 	add.w	r3, r3, #1
 800d9ac:	d0f9      	beq.n	800d9a2 <__gethex+0x4e>
 800d9ae:	f7ff ffbb 	bl	800d928 <__hexdig_fun>
 800d9b2:	fab0 f580 	clz	r5, r0
 800d9b6:	096d      	lsrs	r5, r5, #5
 800d9b8:	f04f 0b01 	mov.w	fp, #1
 800d9bc:	464a      	mov	r2, r9
 800d9be:	4616      	mov	r6, r2
 800d9c0:	3201      	adds	r2, #1
 800d9c2:	7830      	ldrb	r0, [r6, #0]
 800d9c4:	f7ff ffb0 	bl	800d928 <__hexdig_fun>
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d1f8      	bne.n	800d9be <__gethex+0x6a>
 800d9cc:	498d      	ldr	r1, [pc, #564]	@ (800dc04 <__gethex+0x2b0>)
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7fe ff66 	bl	800c8a2 <strncmp>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d13f      	bne.n	800da5a <__gethex+0x106>
 800d9da:	b944      	cbnz	r4, 800d9ee <__gethex+0x9a>
 800d9dc:	1c74      	adds	r4, r6, #1
 800d9de:	4622      	mov	r2, r4
 800d9e0:	4616      	mov	r6, r2
 800d9e2:	3201      	adds	r2, #1
 800d9e4:	7830      	ldrb	r0, [r6, #0]
 800d9e6:	f7ff ff9f 	bl	800d928 <__hexdig_fun>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d1f8      	bne.n	800d9e0 <__gethex+0x8c>
 800d9ee:	1ba4      	subs	r4, r4, r6
 800d9f0:	00a7      	lsls	r7, r4, #2
 800d9f2:	7833      	ldrb	r3, [r6, #0]
 800d9f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d9f8:	2b50      	cmp	r3, #80	@ 0x50
 800d9fa:	d13e      	bne.n	800da7a <__gethex+0x126>
 800d9fc:	7873      	ldrb	r3, [r6, #1]
 800d9fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800da00:	d033      	beq.n	800da6a <__gethex+0x116>
 800da02:	2b2d      	cmp	r3, #45	@ 0x2d
 800da04:	d034      	beq.n	800da70 <__gethex+0x11c>
 800da06:	1c71      	adds	r1, r6, #1
 800da08:	2400      	movs	r4, #0
 800da0a:	7808      	ldrb	r0, [r1, #0]
 800da0c:	f7ff ff8c 	bl	800d928 <__hexdig_fun>
 800da10:	1e43      	subs	r3, r0, #1
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b18      	cmp	r3, #24
 800da16:	d830      	bhi.n	800da7a <__gethex+0x126>
 800da18:	f1a0 0210 	sub.w	r2, r0, #16
 800da1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da20:	f7ff ff82 	bl	800d928 <__hexdig_fun>
 800da24:	f100 3cff 	add.w	ip, r0, #4294967295
 800da28:	fa5f fc8c 	uxtb.w	ip, ip
 800da2c:	f1bc 0f18 	cmp.w	ip, #24
 800da30:	f04f 030a 	mov.w	r3, #10
 800da34:	d91e      	bls.n	800da74 <__gethex+0x120>
 800da36:	b104      	cbz	r4, 800da3a <__gethex+0xe6>
 800da38:	4252      	negs	r2, r2
 800da3a:	4417      	add	r7, r2
 800da3c:	f8ca 1000 	str.w	r1, [sl]
 800da40:	b1ed      	cbz	r5, 800da7e <__gethex+0x12a>
 800da42:	f1bb 0f00 	cmp.w	fp, #0
 800da46:	bf0c      	ite	eq
 800da48:	2506      	moveq	r5, #6
 800da4a:	2500      	movne	r5, #0
 800da4c:	4628      	mov	r0, r5
 800da4e:	b005      	add	sp, #20
 800da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	2500      	movs	r5, #0
 800da56:	462c      	mov	r4, r5
 800da58:	e7b0      	b.n	800d9bc <__gethex+0x68>
 800da5a:	2c00      	cmp	r4, #0
 800da5c:	d1c7      	bne.n	800d9ee <__gethex+0x9a>
 800da5e:	4627      	mov	r7, r4
 800da60:	e7c7      	b.n	800d9f2 <__gethex+0x9e>
 800da62:	464e      	mov	r6, r9
 800da64:	462f      	mov	r7, r5
 800da66:	2501      	movs	r5, #1
 800da68:	e7c3      	b.n	800d9f2 <__gethex+0x9e>
 800da6a:	2400      	movs	r4, #0
 800da6c:	1cb1      	adds	r1, r6, #2
 800da6e:	e7cc      	b.n	800da0a <__gethex+0xb6>
 800da70:	2401      	movs	r4, #1
 800da72:	e7fb      	b.n	800da6c <__gethex+0x118>
 800da74:	fb03 0002 	mla	r0, r3, r2, r0
 800da78:	e7ce      	b.n	800da18 <__gethex+0xc4>
 800da7a:	4631      	mov	r1, r6
 800da7c:	e7de      	b.n	800da3c <__gethex+0xe8>
 800da7e:	eba6 0309 	sub.w	r3, r6, r9
 800da82:	3b01      	subs	r3, #1
 800da84:	4629      	mov	r1, r5
 800da86:	2b07      	cmp	r3, #7
 800da88:	dc0a      	bgt.n	800daa0 <__gethex+0x14c>
 800da8a:	9801      	ldr	r0, [sp, #4]
 800da8c:	f000 fa46 	bl	800df1c <_Balloc>
 800da90:	4604      	mov	r4, r0
 800da92:	b940      	cbnz	r0, 800daa6 <__gethex+0x152>
 800da94:	4b5c      	ldr	r3, [pc, #368]	@ (800dc08 <__gethex+0x2b4>)
 800da96:	4602      	mov	r2, r0
 800da98:	21e4      	movs	r1, #228	@ 0xe4
 800da9a:	485c      	ldr	r0, [pc, #368]	@ (800dc0c <__gethex+0x2b8>)
 800da9c:	f7ff f83e 	bl	800cb1c <__assert_func>
 800daa0:	3101      	adds	r1, #1
 800daa2:	105b      	asrs	r3, r3, #1
 800daa4:	e7ef      	b.n	800da86 <__gethex+0x132>
 800daa6:	f100 0a14 	add.w	sl, r0, #20
 800daaa:	2300      	movs	r3, #0
 800daac:	4655      	mov	r5, sl
 800daae:	469b      	mov	fp, r3
 800dab0:	45b1      	cmp	r9, r6
 800dab2:	d337      	bcc.n	800db24 <__gethex+0x1d0>
 800dab4:	f845 bb04 	str.w	fp, [r5], #4
 800dab8:	eba5 050a 	sub.w	r5, r5, sl
 800dabc:	10ad      	asrs	r5, r5, #2
 800dabe:	6125      	str	r5, [r4, #16]
 800dac0:	4658      	mov	r0, fp
 800dac2:	f000 fb1d 	bl	800e100 <__hi0bits>
 800dac6:	016d      	lsls	r5, r5, #5
 800dac8:	f8d8 6000 	ldr.w	r6, [r8]
 800dacc:	1a2d      	subs	r5, r5, r0
 800dace:	42b5      	cmp	r5, r6
 800dad0:	dd54      	ble.n	800db7c <__gethex+0x228>
 800dad2:	1bad      	subs	r5, r5, r6
 800dad4:	4629      	mov	r1, r5
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 feb1 	bl	800e83e <__any_on>
 800dadc:	4681      	mov	r9, r0
 800dade:	b178      	cbz	r0, 800db00 <__gethex+0x1ac>
 800dae0:	1e6b      	subs	r3, r5, #1
 800dae2:	1159      	asrs	r1, r3, #5
 800dae4:	f003 021f 	and.w	r2, r3, #31
 800dae8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800daec:	f04f 0901 	mov.w	r9, #1
 800daf0:	fa09 f202 	lsl.w	r2, r9, r2
 800daf4:	420a      	tst	r2, r1
 800daf6:	d003      	beq.n	800db00 <__gethex+0x1ac>
 800daf8:	454b      	cmp	r3, r9
 800dafa:	dc36      	bgt.n	800db6a <__gethex+0x216>
 800dafc:	f04f 0902 	mov.w	r9, #2
 800db00:	4629      	mov	r1, r5
 800db02:	4620      	mov	r0, r4
 800db04:	f7ff febe 	bl	800d884 <rshift>
 800db08:	442f      	add	r7, r5
 800db0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db0e:	42bb      	cmp	r3, r7
 800db10:	da42      	bge.n	800db98 <__gethex+0x244>
 800db12:	9801      	ldr	r0, [sp, #4]
 800db14:	4621      	mov	r1, r4
 800db16:	f000 fa41 	bl	800df9c <_Bfree>
 800db1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db1c:	2300      	movs	r3, #0
 800db1e:	6013      	str	r3, [r2, #0]
 800db20:	25a3      	movs	r5, #163	@ 0xa3
 800db22:	e793      	b.n	800da4c <__gethex+0xf8>
 800db24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db28:	2a2e      	cmp	r2, #46	@ 0x2e
 800db2a:	d012      	beq.n	800db52 <__gethex+0x1fe>
 800db2c:	2b20      	cmp	r3, #32
 800db2e:	d104      	bne.n	800db3a <__gethex+0x1e6>
 800db30:	f845 bb04 	str.w	fp, [r5], #4
 800db34:	f04f 0b00 	mov.w	fp, #0
 800db38:	465b      	mov	r3, fp
 800db3a:	7830      	ldrb	r0, [r6, #0]
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	f7ff fef3 	bl	800d928 <__hexdig_fun>
 800db42:	9b03      	ldr	r3, [sp, #12]
 800db44:	f000 000f 	and.w	r0, r0, #15
 800db48:	4098      	lsls	r0, r3
 800db4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800db4e:	3304      	adds	r3, #4
 800db50:	e7ae      	b.n	800dab0 <__gethex+0x15c>
 800db52:	45b1      	cmp	r9, r6
 800db54:	d8ea      	bhi.n	800db2c <__gethex+0x1d8>
 800db56:	492b      	ldr	r1, [pc, #172]	@ (800dc04 <__gethex+0x2b0>)
 800db58:	9303      	str	r3, [sp, #12]
 800db5a:	2201      	movs	r2, #1
 800db5c:	4630      	mov	r0, r6
 800db5e:	f7fe fea0 	bl	800c8a2 <strncmp>
 800db62:	9b03      	ldr	r3, [sp, #12]
 800db64:	2800      	cmp	r0, #0
 800db66:	d1e1      	bne.n	800db2c <__gethex+0x1d8>
 800db68:	e7a2      	b.n	800dab0 <__gethex+0x15c>
 800db6a:	1ea9      	subs	r1, r5, #2
 800db6c:	4620      	mov	r0, r4
 800db6e:	f000 fe66 	bl	800e83e <__any_on>
 800db72:	2800      	cmp	r0, #0
 800db74:	d0c2      	beq.n	800dafc <__gethex+0x1a8>
 800db76:	f04f 0903 	mov.w	r9, #3
 800db7a:	e7c1      	b.n	800db00 <__gethex+0x1ac>
 800db7c:	da09      	bge.n	800db92 <__gethex+0x23e>
 800db7e:	1b75      	subs	r5, r6, r5
 800db80:	4621      	mov	r1, r4
 800db82:	9801      	ldr	r0, [sp, #4]
 800db84:	462a      	mov	r2, r5
 800db86:	f000 fc21 	bl	800e3cc <__lshift>
 800db8a:	1b7f      	subs	r7, r7, r5
 800db8c:	4604      	mov	r4, r0
 800db8e:	f100 0a14 	add.w	sl, r0, #20
 800db92:	f04f 0900 	mov.w	r9, #0
 800db96:	e7b8      	b.n	800db0a <__gethex+0x1b6>
 800db98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db9c:	42bd      	cmp	r5, r7
 800db9e:	dd6f      	ble.n	800dc80 <__gethex+0x32c>
 800dba0:	1bed      	subs	r5, r5, r7
 800dba2:	42ae      	cmp	r6, r5
 800dba4:	dc34      	bgt.n	800dc10 <__gethex+0x2bc>
 800dba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d022      	beq.n	800dbf4 <__gethex+0x2a0>
 800dbae:	2b03      	cmp	r3, #3
 800dbb0:	d024      	beq.n	800dbfc <__gethex+0x2a8>
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d115      	bne.n	800dbe2 <__gethex+0x28e>
 800dbb6:	42ae      	cmp	r6, r5
 800dbb8:	d113      	bne.n	800dbe2 <__gethex+0x28e>
 800dbba:	2e01      	cmp	r6, #1
 800dbbc:	d10b      	bne.n	800dbd6 <__gethex+0x282>
 800dbbe:	9a02      	ldr	r2, [sp, #8]
 800dbc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	6123      	str	r3, [r4, #16]
 800dbca:	f8ca 3000 	str.w	r3, [sl]
 800dbce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbd0:	2562      	movs	r5, #98	@ 0x62
 800dbd2:	601c      	str	r4, [r3, #0]
 800dbd4:	e73a      	b.n	800da4c <__gethex+0xf8>
 800dbd6:	1e71      	subs	r1, r6, #1
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fe30 	bl	800e83e <__any_on>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d1ed      	bne.n	800dbbe <__gethex+0x26a>
 800dbe2:	9801      	ldr	r0, [sp, #4]
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f000 f9d9 	bl	800df9c <_Bfree>
 800dbea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbec:	2300      	movs	r3, #0
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	2550      	movs	r5, #80	@ 0x50
 800dbf2:	e72b      	b.n	800da4c <__gethex+0xf8>
 800dbf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1f3      	bne.n	800dbe2 <__gethex+0x28e>
 800dbfa:	e7e0      	b.n	800dbbe <__gethex+0x26a>
 800dbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1dd      	bne.n	800dbbe <__gethex+0x26a>
 800dc02:	e7ee      	b.n	800dbe2 <__gethex+0x28e>
 800dc04:	0800fb34 	.word	0x0800fb34
 800dc08:	0800fddc 	.word	0x0800fddc
 800dc0c:	0800fded 	.word	0x0800fded
 800dc10:	1e6f      	subs	r7, r5, #1
 800dc12:	f1b9 0f00 	cmp.w	r9, #0
 800dc16:	d130      	bne.n	800dc7a <__gethex+0x326>
 800dc18:	b127      	cbz	r7, 800dc24 <__gethex+0x2d0>
 800dc1a:	4639      	mov	r1, r7
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f000 fe0e 	bl	800e83e <__any_on>
 800dc22:	4681      	mov	r9, r0
 800dc24:	117a      	asrs	r2, r7, #5
 800dc26:	2301      	movs	r3, #1
 800dc28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc2c:	f007 071f 	and.w	r7, r7, #31
 800dc30:	40bb      	lsls	r3, r7
 800dc32:	4213      	tst	r3, r2
 800dc34:	4629      	mov	r1, r5
 800dc36:	4620      	mov	r0, r4
 800dc38:	bf18      	it	ne
 800dc3a:	f049 0902 	orrne.w	r9, r9, #2
 800dc3e:	f7ff fe21 	bl	800d884 <rshift>
 800dc42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc46:	1b76      	subs	r6, r6, r5
 800dc48:	2502      	movs	r5, #2
 800dc4a:	f1b9 0f00 	cmp.w	r9, #0
 800dc4e:	d047      	beq.n	800dce0 <__gethex+0x38c>
 800dc50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d015      	beq.n	800dc84 <__gethex+0x330>
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	d017      	beq.n	800dc8c <__gethex+0x338>
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d109      	bne.n	800dc74 <__gethex+0x320>
 800dc60:	f019 0f02 	tst.w	r9, #2
 800dc64:	d006      	beq.n	800dc74 <__gethex+0x320>
 800dc66:	f8da 3000 	ldr.w	r3, [sl]
 800dc6a:	ea49 0903 	orr.w	r9, r9, r3
 800dc6e:	f019 0f01 	tst.w	r9, #1
 800dc72:	d10e      	bne.n	800dc92 <__gethex+0x33e>
 800dc74:	f045 0510 	orr.w	r5, r5, #16
 800dc78:	e032      	b.n	800dce0 <__gethex+0x38c>
 800dc7a:	f04f 0901 	mov.w	r9, #1
 800dc7e:	e7d1      	b.n	800dc24 <__gethex+0x2d0>
 800dc80:	2501      	movs	r5, #1
 800dc82:	e7e2      	b.n	800dc4a <__gethex+0x2f6>
 800dc84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc86:	f1c3 0301 	rsb	r3, r3, #1
 800dc8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0f0      	beq.n	800dc74 <__gethex+0x320>
 800dc92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc96:	f104 0314 	add.w	r3, r4, #20
 800dc9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dca2:	f04f 0c00 	mov.w	ip, #0
 800dca6:	4618      	mov	r0, r3
 800dca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dcb0:	d01b      	beq.n	800dcea <__gethex+0x396>
 800dcb2:	3201      	adds	r2, #1
 800dcb4:	6002      	str	r2, [r0, #0]
 800dcb6:	2d02      	cmp	r5, #2
 800dcb8:	f104 0314 	add.w	r3, r4, #20
 800dcbc:	d13c      	bne.n	800dd38 <__gethex+0x3e4>
 800dcbe:	f8d8 2000 	ldr.w	r2, [r8]
 800dcc2:	3a01      	subs	r2, #1
 800dcc4:	42b2      	cmp	r2, r6
 800dcc6:	d109      	bne.n	800dcdc <__gethex+0x388>
 800dcc8:	1171      	asrs	r1, r6, #5
 800dcca:	2201      	movs	r2, #1
 800dccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dcd0:	f006 061f 	and.w	r6, r6, #31
 800dcd4:	fa02 f606 	lsl.w	r6, r2, r6
 800dcd8:	421e      	tst	r6, r3
 800dcda:	d13a      	bne.n	800dd52 <__gethex+0x3fe>
 800dcdc:	f045 0520 	orr.w	r5, r5, #32
 800dce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dce2:	601c      	str	r4, [r3, #0]
 800dce4:	9b02      	ldr	r3, [sp, #8]
 800dce6:	601f      	str	r7, [r3, #0]
 800dce8:	e6b0      	b.n	800da4c <__gethex+0xf8>
 800dcea:	4299      	cmp	r1, r3
 800dcec:	f843 cc04 	str.w	ip, [r3, #-4]
 800dcf0:	d8d9      	bhi.n	800dca6 <__gethex+0x352>
 800dcf2:	68a3      	ldr	r3, [r4, #8]
 800dcf4:	459b      	cmp	fp, r3
 800dcf6:	db17      	blt.n	800dd28 <__gethex+0x3d4>
 800dcf8:	6861      	ldr	r1, [r4, #4]
 800dcfa:	9801      	ldr	r0, [sp, #4]
 800dcfc:	3101      	adds	r1, #1
 800dcfe:	f000 f90d 	bl	800df1c <_Balloc>
 800dd02:	4681      	mov	r9, r0
 800dd04:	b918      	cbnz	r0, 800dd0e <__gethex+0x3ba>
 800dd06:	4b1a      	ldr	r3, [pc, #104]	@ (800dd70 <__gethex+0x41c>)
 800dd08:	4602      	mov	r2, r0
 800dd0a:	2184      	movs	r1, #132	@ 0x84
 800dd0c:	e6c5      	b.n	800da9a <__gethex+0x146>
 800dd0e:	6922      	ldr	r2, [r4, #16]
 800dd10:	3202      	adds	r2, #2
 800dd12:	f104 010c 	add.w	r1, r4, #12
 800dd16:	0092      	lsls	r2, r2, #2
 800dd18:	300c      	adds	r0, #12
 800dd1a:	f7fe fee0 	bl	800cade <memcpy>
 800dd1e:	4621      	mov	r1, r4
 800dd20:	9801      	ldr	r0, [sp, #4]
 800dd22:	f000 f93b 	bl	800df9c <_Bfree>
 800dd26:	464c      	mov	r4, r9
 800dd28:	6923      	ldr	r3, [r4, #16]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd30:	6122      	str	r2, [r4, #16]
 800dd32:	2201      	movs	r2, #1
 800dd34:	615a      	str	r2, [r3, #20]
 800dd36:	e7be      	b.n	800dcb6 <__gethex+0x362>
 800dd38:	6922      	ldr	r2, [r4, #16]
 800dd3a:	455a      	cmp	r2, fp
 800dd3c:	dd0b      	ble.n	800dd56 <__gethex+0x402>
 800dd3e:	2101      	movs	r1, #1
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7ff fd9f 	bl	800d884 <rshift>
 800dd46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd4a:	3701      	adds	r7, #1
 800dd4c:	42bb      	cmp	r3, r7
 800dd4e:	f6ff aee0 	blt.w	800db12 <__gethex+0x1be>
 800dd52:	2501      	movs	r5, #1
 800dd54:	e7c2      	b.n	800dcdc <__gethex+0x388>
 800dd56:	f016 061f 	ands.w	r6, r6, #31
 800dd5a:	d0fa      	beq.n	800dd52 <__gethex+0x3fe>
 800dd5c:	4453      	add	r3, sl
 800dd5e:	f1c6 0620 	rsb	r6, r6, #32
 800dd62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dd66:	f000 f9cb 	bl	800e100 <__hi0bits>
 800dd6a:	42b0      	cmp	r0, r6
 800dd6c:	dbe7      	blt.n	800dd3e <__gethex+0x3ea>
 800dd6e:	e7f0      	b.n	800dd52 <__gethex+0x3fe>
 800dd70:	0800fddc 	.word	0x0800fddc

0800dd74 <L_shift>:
 800dd74:	f1c2 0208 	rsb	r2, r2, #8
 800dd78:	0092      	lsls	r2, r2, #2
 800dd7a:	b570      	push	{r4, r5, r6, lr}
 800dd7c:	f1c2 0620 	rsb	r6, r2, #32
 800dd80:	6843      	ldr	r3, [r0, #4]
 800dd82:	6804      	ldr	r4, [r0, #0]
 800dd84:	fa03 f506 	lsl.w	r5, r3, r6
 800dd88:	432c      	orrs	r4, r5
 800dd8a:	40d3      	lsrs	r3, r2
 800dd8c:	6004      	str	r4, [r0, #0]
 800dd8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd92:	4288      	cmp	r0, r1
 800dd94:	d3f4      	bcc.n	800dd80 <L_shift+0xc>
 800dd96:	bd70      	pop	{r4, r5, r6, pc}

0800dd98 <__match>:
 800dd98:	b530      	push	{r4, r5, lr}
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dda2:	b914      	cbnz	r4, 800ddaa <__match+0x12>
 800dda4:	6003      	str	r3, [r0, #0]
 800dda6:	2001      	movs	r0, #1
 800dda8:	bd30      	pop	{r4, r5, pc}
 800ddaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ddb2:	2d19      	cmp	r5, #25
 800ddb4:	bf98      	it	ls
 800ddb6:	3220      	addls	r2, #32
 800ddb8:	42a2      	cmp	r2, r4
 800ddba:	d0f0      	beq.n	800dd9e <__match+0x6>
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	e7f3      	b.n	800dda8 <__match+0x10>

0800ddc0 <__hexnan>:
 800ddc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc4:	680b      	ldr	r3, [r1, #0]
 800ddc6:	6801      	ldr	r1, [r0, #0]
 800ddc8:	115e      	asrs	r6, r3, #5
 800ddca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ddce:	f013 031f 	ands.w	r3, r3, #31
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	bf18      	it	ne
 800ddd6:	3604      	addne	r6, #4
 800ddd8:	2500      	movs	r5, #0
 800ddda:	1f37      	subs	r7, r6, #4
 800dddc:	4682      	mov	sl, r0
 800ddde:	4690      	mov	r8, r2
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	f846 5c04 	str.w	r5, [r6, #-4]
 800dde6:	46b9      	mov	r9, r7
 800dde8:	463c      	mov	r4, r7
 800ddea:	9502      	str	r5, [sp, #8]
 800ddec:	46ab      	mov	fp, r5
 800ddee:	784a      	ldrb	r2, [r1, #1]
 800ddf0:	1c4b      	adds	r3, r1, #1
 800ddf2:	9303      	str	r3, [sp, #12]
 800ddf4:	b342      	cbz	r2, 800de48 <__hexnan+0x88>
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	9105      	str	r1, [sp, #20]
 800ddfa:	9204      	str	r2, [sp, #16]
 800ddfc:	f7ff fd94 	bl	800d928 <__hexdig_fun>
 800de00:	2800      	cmp	r0, #0
 800de02:	d151      	bne.n	800dea8 <__hexnan+0xe8>
 800de04:	9a04      	ldr	r2, [sp, #16]
 800de06:	9905      	ldr	r1, [sp, #20]
 800de08:	2a20      	cmp	r2, #32
 800de0a:	d818      	bhi.n	800de3e <__hexnan+0x7e>
 800de0c:	9b02      	ldr	r3, [sp, #8]
 800de0e:	459b      	cmp	fp, r3
 800de10:	dd13      	ble.n	800de3a <__hexnan+0x7a>
 800de12:	454c      	cmp	r4, r9
 800de14:	d206      	bcs.n	800de24 <__hexnan+0x64>
 800de16:	2d07      	cmp	r5, #7
 800de18:	dc04      	bgt.n	800de24 <__hexnan+0x64>
 800de1a:	462a      	mov	r2, r5
 800de1c:	4649      	mov	r1, r9
 800de1e:	4620      	mov	r0, r4
 800de20:	f7ff ffa8 	bl	800dd74 <L_shift>
 800de24:	4544      	cmp	r4, r8
 800de26:	d952      	bls.n	800dece <__hexnan+0x10e>
 800de28:	2300      	movs	r3, #0
 800de2a:	f1a4 0904 	sub.w	r9, r4, #4
 800de2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800de32:	f8cd b008 	str.w	fp, [sp, #8]
 800de36:	464c      	mov	r4, r9
 800de38:	461d      	mov	r5, r3
 800de3a:	9903      	ldr	r1, [sp, #12]
 800de3c:	e7d7      	b.n	800ddee <__hexnan+0x2e>
 800de3e:	2a29      	cmp	r2, #41	@ 0x29
 800de40:	d157      	bne.n	800def2 <__hexnan+0x132>
 800de42:	3102      	adds	r1, #2
 800de44:	f8ca 1000 	str.w	r1, [sl]
 800de48:	f1bb 0f00 	cmp.w	fp, #0
 800de4c:	d051      	beq.n	800def2 <__hexnan+0x132>
 800de4e:	454c      	cmp	r4, r9
 800de50:	d206      	bcs.n	800de60 <__hexnan+0xa0>
 800de52:	2d07      	cmp	r5, #7
 800de54:	dc04      	bgt.n	800de60 <__hexnan+0xa0>
 800de56:	462a      	mov	r2, r5
 800de58:	4649      	mov	r1, r9
 800de5a:	4620      	mov	r0, r4
 800de5c:	f7ff ff8a 	bl	800dd74 <L_shift>
 800de60:	4544      	cmp	r4, r8
 800de62:	d936      	bls.n	800ded2 <__hexnan+0x112>
 800de64:	f1a8 0204 	sub.w	r2, r8, #4
 800de68:	4623      	mov	r3, r4
 800de6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800de6e:	f842 1f04 	str.w	r1, [r2, #4]!
 800de72:	429f      	cmp	r7, r3
 800de74:	d2f9      	bcs.n	800de6a <__hexnan+0xaa>
 800de76:	1b3b      	subs	r3, r7, r4
 800de78:	f023 0303 	bic.w	r3, r3, #3
 800de7c:	3304      	adds	r3, #4
 800de7e:	3401      	adds	r4, #1
 800de80:	3e03      	subs	r6, #3
 800de82:	42b4      	cmp	r4, r6
 800de84:	bf88      	it	hi
 800de86:	2304      	movhi	r3, #4
 800de88:	4443      	add	r3, r8
 800de8a:	2200      	movs	r2, #0
 800de8c:	f843 2b04 	str.w	r2, [r3], #4
 800de90:	429f      	cmp	r7, r3
 800de92:	d2fb      	bcs.n	800de8c <__hexnan+0xcc>
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	b91b      	cbnz	r3, 800dea0 <__hexnan+0xe0>
 800de98:	4547      	cmp	r7, r8
 800de9a:	d128      	bne.n	800deee <__hexnan+0x12e>
 800de9c:	2301      	movs	r3, #1
 800de9e:	603b      	str	r3, [r7, #0]
 800dea0:	2005      	movs	r0, #5
 800dea2:	b007      	add	sp, #28
 800dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea8:	3501      	adds	r5, #1
 800deaa:	2d08      	cmp	r5, #8
 800deac:	f10b 0b01 	add.w	fp, fp, #1
 800deb0:	dd06      	ble.n	800dec0 <__hexnan+0x100>
 800deb2:	4544      	cmp	r4, r8
 800deb4:	d9c1      	bls.n	800de3a <__hexnan+0x7a>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800debc:	2501      	movs	r5, #1
 800debe:	3c04      	subs	r4, #4
 800dec0:	6822      	ldr	r2, [r4, #0]
 800dec2:	f000 000f 	and.w	r0, r0, #15
 800dec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800deca:	6020      	str	r0, [r4, #0]
 800decc:	e7b5      	b.n	800de3a <__hexnan+0x7a>
 800dece:	2508      	movs	r5, #8
 800ded0:	e7b3      	b.n	800de3a <__hexnan+0x7a>
 800ded2:	9b01      	ldr	r3, [sp, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0dd      	beq.n	800de94 <__hexnan+0xd4>
 800ded8:	f1c3 0320 	rsb	r3, r3, #32
 800dedc:	f04f 32ff 	mov.w	r2, #4294967295
 800dee0:	40da      	lsrs	r2, r3
 800dee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dee6:	4013      	ands	r3, r2
 800dee8:	f846 3c04 	str.w	r3, [r6, #-4]
 800deec:	e7d2      	b.n	800de94 <__hexnan+0xd4>
 800deee:	3f04      	subs	r7, #4
 800def0:	e7d0      	b.n	800de94 <__hexnan+0xd4>
 800def2:	2004      	movs	r0, #4
 800def4:	e7d5      	b.n	800dea2 <__hexnan+0xe2>

0800def6 <__ascii_mbtowc>:
 800def6:	b082      	sub	sp, #8
 800def8:	b901      	cbnz	r1, 800defc <__ascii_mbtowc+0x6>
 800defa:	a901      	add	r1, sp, #4
 800defc:	b142      	cbz	r2, 800df10 <__ascii_mbtowc+0x1a>
 800defe:	b14b      	cbz	r3, 800df14 <__ascii_mbtowc+0x1e>
 800df00:	7813      	ldrb	r3, [r2, #0]
 800df02:	600b      	str	r3, [r1, #0]
 800df04:	7812      	ldrb	r2, [r2, #0]
 800df06:	1e10      	subs	r0, r2, #0
 800df08:	bf18      	it	ne
 800df0a:	2001      	movne	r0, #1
 800df0c:	b002      	add	sp, #8
 800df0e:	4770      	bx	lr
 800df10:	4610      	mov	r0, r2
 800df12:	e7fb      	b.n	800df0c <__ascii_mbtowc+0x16>
 800df14:	f06f 0001 	mvn.w	r0, #1
 800df18:	e7f8      	b.n	800df0c <__ascii_mbtowc+0x16>
	...

0800df1c <_Balloc>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	69c6      	ldr	r6, [r0, #28]
 800df20:	4604      	mov	r4, r0
 800df22:	460d      	mov	r5, r1
 800df24:	b976      	cbnz	r6, 800df44 <_Balloc+0x28>
 800df26:	2010      	movs	r0, #16
 800df28:	f7fc fc98 	bl	800a85c <malloc>
 800df2c:	4602      	mov	r2, r0
 800df2e:	61e0      	str	r0, [r4, #28]
 800df30:	b920      	cbnz	r0, 800df3c <_Balloc+0x20>
 800df32:	4b18      	ldr	r3, [pc, #96]	@ (800df94 <_Balloc+0x78>)
 800df34:	4818      	ldr	r0, [pc, #96]	@ (800df98 <_Balloc+0x7c>)
 800df36:	216b      	movs	r1, #107	@ 0x6b
 800df38:	f7fe fdf0 	bl	800cb1c <__assert_func>
 800df3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df40:	6006      	str	r6, [r0, #0]
 800df42:	60c6      	str	r6, [r0, #12]
 800df44:	69e6      	ldr	r6, [r4, #28]
 800df46:	68f3      	ldr	r3, [r6, #12]
 800df48:	b183      	cbz	r3, 800df6c <_Balloc+0x50>
 800df4a:	69e3      	ldr	r3, [r4, #28]
 800df4c:	68db      	ldr	r3, [r3, #12]
 800df4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df52:	b9b8      	cbnz	r0, 800df84 <_Balloc+0x68>
 800df54:	2101      	movs	r1, #1
 800df56:	fa01 f605 	lsl.w	r6, r1, r5
 800df5a:	1d72      	adds	r2, r6, #5
 800df5c:	0092      	lsls	r2, r2, #2
 800df5e:	4620      	mov	r0, r4
 800df60:	f001 f897 	bl	800f092 <_calloc_r>
 800df64:	b160      	cbz	r0, 800df80 <_Balloc+0x64>
 800df66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df6a:	e00e      	b.n	800df8a <_Balloc+0x6e>
 800df6c:	2221      	movs	r2, #33	@ 0x21
 800df6e:	2104      	movs	r1, #4
 800df70:	4620      	mov	r0, r4
 800df72:	f001 f88e 	bl	800f092 <_calloc_r>
 800df76:	69e3      	ldr	r3, [r4, #28]
 800df78:	60f0      	str	r0, [r6, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d1e4      	bne.n	800df4a <_Balloc+0x2e>
 800df80:	2000      	movs	r0, #0
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	6802      	ldr	r2, [r0, #0]
 800df86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df8a:	2300      	movs	r3, #0
 800df8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df90:	e7f7      	b.n	800df82 <_Balloc+0x66>
 800df92:	bf00      	nop
 800df94:	0800fcc2 	.word	0x0800fcc2
 800df98:	0800fe4d 	.word	0x0800fe4d

0800df9c <_Bfree>:
 800df9c:	b570      	push	{r4, r5, r6, lr}
 800df9e:	69c6      	ldr	r6, [r0, #28]
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	b976      	cbnz	r6, 800dfc4 <_Bfree+0x28>
 800dfa6:	2010      	movs	r0, #16
 800dfa8:	f7fc fc58 	bl	800a85c <malloc>
 800dfac:	4602      	mov	r2, r0
 800dfae:	61e8      	str	r0, [r5, #28]
 800dfb0:	b920      	cbnz	r0, 800dfbc <_Bfree+0x20>
 800dfb2:	4b09      	ldr	r3, [pc, #36]	@ (800dfd8 <_Bfree+0x3c>)
 800dfb4:	4809      	ldr	r0, [pc, #36]	@ (800dfdc <_Bfree+0x40>)
 800dfb6:	218f      	movs	r1, #143	@ 0x8f
 800dfb8:	f7fe fdb0 	bl	800cb1c <__assert_func>
 800dfbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfc0:	6006      	str	r6, [r0, #0]
 800dfc2:	60c6      	str	r6, [r0, #12]
 800dfc4:	b13c      	cbz	r4, 800dfd6 <_Bfree+0x3a>
 800dfc6:	69eb      	ldr	r3, [r5, #28]
 800dfc8:	6862      	ldr	r2, [r4, #4]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfd0:	6021      	str	r1, [r4, #0]
 800dfd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	0800fcc2 	.word	0x0800fcc2
 800dfdc:	0800fe4d 	.word	0x0800fe4d

0800dfe0 <__multadd>:
 800dfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe4:	690d      	ldr	r5, [r1, #16]
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	460c      	mov	r4, r1
 800dfea:	461e      	mov	r6, r3
 800dfec:	f101 0c14 	add.w	ip, r1, #20
 800dff0:	2000      	movs	r0, #0
 800dff2:	f8dc 3000 	ldr.w	r3, [ip]
 800dff6:	b299      	uxth	r1, r3
 800dff8:	fb02 6101 	mla	r1, r2, r1, r6
 800dffc:	0c1e      	lsrs	r6, r3, #16
 800dffe:	0c0b      	lsrs	r3, r1, #16
 800e000:	fb02 3306 	mla	r3, r2, r6, r3
 800e004:	b289      	uxth	r1, r1
 800e006:	3001      	adds	r0, #1
 800e008:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e00c:	4285      	cmp	r5, r0
 800e00e:	f84c 1b04 	str.w	r1, [ip], #4
 800e012:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e016:	dcec      	bgt.n	800dff2 <__multadd+0x12>
 800e018:	b30e      	cbz	r6, 800e05e <__multadd+0x7e>
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	42ab      	cmp	r3, r5
 800e01e:	dc19      	bgt.n	800e054 <__multadd+0x74>
 800e020:	6861      	ldr	r1, [r4, #4]
 800e022:	4638      	mov	r0, r7
 800e024:	3101      	adds	r1, #1
 800e026:	f7ff ff79 	bl	800df1c <_Balloc>
 800e02a:	4680      	mov	r8, r0
 800e02c:	b928      	cbnz	r0, 800e03a <__multadd+0x5a>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b0c      	ldr	r3, [pc, #48]	@ (800e064 <__multadd+0x84>)
 800e032:	480d      	ldr	r0, [pc, #52]	@ (800e068 <__multadd+0x88>)
 800e034:	21ba      	movs	r1, #186	@ 0xba
 800e036:	f7fe fd71 	bl	800cb1c <__assert_func>
 800e03a:	6922      	ldr	r2, [r4, #16]
 800e03c:	3202      	adds	r2, #2
 800e03e:	f104 010c 	add.w	r1, r4, #12
 800e042:	0092      	lsls	r2, r2, #2
 800e044:	300c      	adds	r0, #12
 800e046:	f7fe fd4a 	bl	800cade <memcpy>
 800e04a:	4621      	mov	r1, r4
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff ffa5 	bl	800df9c <_Bfree>
 800e052:	4644      	mov	r4, r8
 800e054:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e058:	3501      	adds	r5, #1
 800e05a:	615e      	str	r6, [r3, #20]
 800e05c:	6125      	str	r5, [r4, #16]
 800e05e:	4620      	mov	r0, r4
 800e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e064:	0800fddc 	.word	0x0800fddc
 800e068:	0800fe4d 	.word	0x0800fe4d

0800e06c <__s2b>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	460c      	mov	r4, r1
 800e072:	4615      	mov	r5, r2
 800e074:	461f      	mov	r7, r3
 800e076:	2209      	movs	r2, #9
 800e078:	3308      	adds	r3, #8
 800e07a:	4606      	mov	r6, r0
 800e07c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e080:	2100      	movs	r1, #0
 800e082:	2201      	movs	r2, #1
 800e084:	429a      	cmp	r2, r3
 800e086:	db09      	blt.n	800e09c <__s2b+0x30>
 800e088:	4630      	mov	r0, r6
 800e08a:	f7ff ff47 	bl	800df1c <_Balloc>
 800e08e:	b940      	cbnz	r0, 800e0a2 <__s2b+0x36>
 800e090:	4602      	mov	r2, r0
 800e092:	4b19      	ldr	r3, [pc, #100]	@ (800e0f8 <__s2b+0x8c>)
 800e094:	4819      	ldr	r0, [pc, #100]	@ (800e0fc <__s2b+0x90>)
 800e096:	21d3      	movs	r1, #211	@ 0xd3
 800e098:	f7fe fd40 	bl	800cb1c <__assert_func>
 800e09c:	0052      	lsls	r2, r2, #1
 800e09e:	3101      	adds	r1, #1
 800e0a0:	e7f0      	b.n	800e084 <__s2b+0x18>
 800e0a2:	9b08      	ldr	r3, [sp, #32]
 800e0a4:	6143      	str	r3, [r0, #20]
 800e0a6:	2d09      	cmp	r5, #9
 800e0a8:	f04f 0301 	mov.w	r3, #1
 800e0ac:	6103      	str	r3, [r0, #16]
 800e0ae:	dd16      	ble.n	800e0de <__s2b+0x72>
 800e0b0:	f104 0909 	add.w	r9, r4, #9
 800e0b4:	46c8      	mov	r8, r9
 800e0b6:	442c      	add	r4, r5
 800e0b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0bc:	4601      	mov	r1, r0
 800e0be:	3b30      	subs	r3, #48	@ 0x30
 800e0c0:	220a      	movs	r2, #10
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f7ff ff8c 	bl	800dfe0 <__multadd>
 800e0c8:	45a0      	cmp	r8, r4
 800e0ca:	d1f5      	bne.n	800e0b8 <__s2b+0x4c>
 800e0cc:	f1a5 0408 	sub.w	r4, r5, #8
 800e0d0:	444c      	add	r4, r9
 800e0d2:	1b2d      	subs	r5, r5, r4
 800e0d4:	1963      	adds	r3, r4, r5
 800e0d6:	42bb      	cmp	r3, r7
 800e0d8:	db04      	blt.n	800e0e4 <__s2b+0x78>
 800e0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0de:	340a      	adds	r4, #10
 800e0e0:	2509      	movs	r5, #9
 800e0e2:	e7f6      	b.n	800e0d2 <__s2b+0x66>
 800e0e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0e8:	4601      	mov	r1, r0
 800e0ea:	3b30      	subs	r3, #48	@ 0x30
 800e0ec:	220a      	movs	r2, #10
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff ff76 	bl	800dfe0 <__multadd>
 800e0f4:	e7ee      	b.n	800e0d4 <__s2b+0x68>
 800e0f6:	bf00      	nop
 800e0f8:	0800fddc 	.word	0x0800fddc
 800e0fc:	0800fe4d 	.word	0x0800fe4d

0800e100 <__hi0bits>:
 800e100:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e104:	4603      	mov	r3, r0
 800e106:	bf36      	itet	cc
 800e108:	0403      	lslcc	r3, r0, #16
 800e10a:	2000      	movcs	r0, #0
 800e10c:	2010      	movcc	r0, #16
 800e10e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e112:	bf3c      	itt	cc
 800e114:	021b      	lslcc	r3, r3, #8
 800e116:	3008      	addcc	r0, #8
 800e118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e11c:	bf3c      	itt	cc
 800e11e:	011b      	lslcc	r3, r3, #4
 800e120:	3004      	addcc	r0, #4
 800e122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e126:	bf3c      	itt	cc
 800e128:	009b      	lslcc	r3, r3, #2
 800e12a:	3002      	addcc	r0, #2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	db05      	blt.n	800e13c <__hi0bits+0x3c>
 800e130:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e134:	f100 0001 	add.w	r0, r0, #1
 800e138:	bf08      	it	eq
 800e13a:	2020      	moveq	r0, #32
 800e13c:	4770      	bx	lr

0800e13e <__lo0bits>:
 800e13e:	6803      	ldr	r3, [r0, #0]
 800e140:	4602      	mov	r2, r0
 800e142:	f013 0007 	ands.w	r0, r3, #7
 800e146:	d00b      	beq.n	800e160 <__lo0bits+0x22>
 800e148:	07d9      	lsls	r1, r3, #31
 800e14a:	d421      	bmi.n	800e190 <__lo0bits+0x52>
 800e14c:	0798      	lsls	r0, r3, #30
 800e14e:	bf49      	itett	mi
 800e150:	085b      	lsrmi	r3, r3, #1
 800e152:	089b      	lsrpl	r3, r3, #2
 800e154:	2001      	movmi	r0, #1
 800e156:	6013      	strmi	r3, [r2, #0]
 800e158:	bf5c      	itt	pl
 800e15a:	6013      	strpl	r3, [r2, #0]
 800e15c:	2002      	movpl	r0, #2
 800e15e:	4770      	bx	lr
 800e160:	b299      	uxth	r1, r3
 800e162:	b909      	cbnz	r1, 800e168 <__lo0bits+0x2a>
 800e164:	0c1b      	lsrs	r3, r3, #16
 800e166:	2010      	movs	r0, #16
 800e168:	b2d9      	uxtb	r1, r3
 800e16a:	b909      	cbnz	r1, 800e170 <__lo0bits+0x32>
 800e16c:	3008      	adds	r0, #8
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	0719      	lsls	r1, r3, #28
 800e172:	bf04      	itt	eq
 800e174:	091b      	lsreq	r3, r3, #4
 800e176:	3004      	addeq	r0, #4
 800e178:	0799      	lsls	r1, r3, #30
 800e17a:	bf04      	itt	eq
 800e17c:	089b      	lsreq	r3, r3, #2
 800e17e:	3002      	addeq	r0, #2
 800e180:	07d9      	lsls	r1, r3, #31
 800e182:	d403      	bmi.n	800e18c <__lo0bits+0x4e>
 800e184:	085b      	lsrs	r3, r3, #1
 800e186:	f100 0001 	add.w	r0, r0, #1
 800e18a:	d003      	beq.n	800e194 <__lo0bits+0x56>
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	4770      	bx	lr
 800e190:	2000      	movs	r0, #0
 800e192:	4770      	bx	lr
 800e194:	2020      	movs	r0, #32
 800e196:	4770      	bx	lr

0800e198 <__i2b>:
 800e198:	b510      	push	{r4, lr}
 800e19a:	460c      	mov	r4, r1
 800e19c:	2101      	movs	r1, #1
 800e19e:	f7ff febd 	bl	800df1c <_Balloc>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	b928      	cbnz	r0, 800e1b2 <__i2b+0x1a>
 800e1a6:	4b05      	ldr	r3, [pc, #20]	@ (800e1bc <__i2b+0x24>)
 800e1a8:	4805      	ldr	r0, [pc, #20]	@ (800e1c0 <__i2b+0x28>)
 800e1aa:	f240 1145 	movw	r1, #325	@ 0x145
 800e1ae:	f7fe fcb5 	bl	800cb1c <__assert_func>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	6144      	str	r4, [r0, #20]
 800e1b6:	6103      	str	r3, [r0, #16]
 800e1b8:	bd10      	pop	{r4, pc}
 800e1ba:	bf00      	nop
 800e1bc:	0800fddc 	.word	0x0800fddc
 800e1c0:	0800fe4d 	.word	0x0800fe4d

0800e1c4 <__multiply>:
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	4614      	mov	r4, r2
 800e1ca:	690a      	ldr	r2, [r1, #16]
 800e1cc:	6923      	ldr	r3, [r4, #16]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	bfa8      	it	ge
 800e1d2:	4623      	movge	r3, r4
 800e1d4:	460f      	mov	r7, r1
 800e1d6:	bfa4      	itt	ge
 800e1d8:	460c      	movge	r4, r1
 800e1da:	461f      	movge	r7, r3
 800e1dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e1e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e1e4:	68a3      	ldr	r3, [r4, #8]
 800e1e6:	6861      	ldr	r1, [r4, #4]
 800e1e8:	eb0a 0609 	add.w	r6, sl, r9
 800e1ec:	42b3      	cmp	r3, r6
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	bfb8      	it	lt
 800e1f2:	3101      	addlt	r1, #1
 800e1f4:	f7ff fe92 	bl	800df1c <_Balloc>
 800e1f8:	b930      	cbnz	r0, 800e208 <__multiply+0x44>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	4b44      	ldr	r3, [pc, #272]	@ (800e310 <__multiply+0x14c>)
 800e1fe:	4845      	ldr	r0, [pc, #276]	@ (800e314 <__multiply+0x150>)
 800e200:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e204:	f7fe fc8a 	bl	800cb1c <__assert_func>
 800e208:	f100 0514 	add.w	r5, r0, #20
 800e20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e210:	462b      	mov	r3, r5
 800e212:	2200      	movs	r2, #0
 800e214:	4543      	cmp	r3, r8
 800e216:	d321      	bcc.n	800e25c <__multiply+0x98>
 800e218:	f107 0114 	add.w	r1, r7, #20
 800e21c:	f104 0214 	add.w	r2, r4, #20
 800e220:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e224:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e228:	9302      	str	r3, [sp, #8]
 800e22a:	1b13      	subs	r3, r2, r4
 800e22c:	3b15      	subs	r3, #21
 800e22e:	f023 0303 	bic.w	r3, r3, #3
 800e232:	3304      	adds	r3, #4
 800e234:	f104 0715 	add.w	r7, r4, #21
 800e238:	42ba      	cmp	r2, r7
 800e23a:	bf38      	it	cc
 800e23c:	2304      	movcc	r3, #4
 800e23e:	9301      	str	r3, [sp, #4]
 800e240:	9b02      	ldr	r3, [sp, #8]
 800e242:	9103      	str	r1, [sp, #12]
 800e244:	428b      	cmp	r3, r1
 800e246:	d80c      	bhi.n	800e262 <__multiply+0x9e>
 800e248:	2e00      	cmp	r6, #0
 800e24a:	dd03      	ble.n	800e254 <__multiply+0x90>
 800e24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e250:	2b00      	cmp	r3, #0
 800e252:	d05b      	beq.n	800e30c <__multiply+0x148>
 800e254:	6106      	str	r6, [r0, #16]
 800e256:	b005      	add	sp, #20
 800e258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	f843 2b04 	str.w	r2, [r3], #4
 800e260:	e7d8      	b.n	800e214 <__multiply+0x50>
 800e262:	f8b1 a000 	ldrh.w	sl, [r1]
 800e266:	f1ba 0f00 	cmp.w	sl, #0
 800e26a:	d024      	beq.n	800e2b6 <__multiply+0xf2>
 800e26c:	f104 0e14 	add.w	lr, r4, #20
 800e270:	46a9      	mov	r9, r5
 800e272:	f04f 0c00 	mov.w	ip, #0
 800e276:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e27a:	f8d9 3000 	ldr.w	r3, [r9]
 800e27e:	fa1f fb87 	uxth.w	fp, r7
 800e282:	b29b      	uxth	r3, r3
 800e284:	fb0a 330b 	mla	r3, sl, fp, r3
 800e288:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e28c:	f8d9 7000 	ldr.w	r7, [r9]
 800e290:	4463      	add	r3, ip
 800e292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e296:	fb0a c70b 	mla	r7, sl, fp, ip
 800e29a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2a4:	4572      	cmp	r2, lr
 800e2a6:	f849 3b04 	str.w	r3, [r9], #4
 800e2aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ae:	d8e2      	bhi.n	800e276 <__multiply+0xb2>
 800e2b0:	9b01      	ldr	r3, [sp, #4]
 800e2b2:	f845 c003 	str.w	ip, [r5, r3]
 800e2b6:	9b03      	ldr	r3, [sp, #12]
 800e2b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2bc:	3104      	adds	r1, #4
 800e2be:	f1b9 0f00 	cmp.w	r9, #0
 800e2c2:	d021      	beq.n	800e308 <__multiply+0x144>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	f104 0c14 	add.w	ip, r4, #20
 800e2ca:	46ae      	mov	lr, r5
 800e2cc:	f04f 0a00 	mov.w	sl, #0
 800e2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800e2d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2d8:	fb09 770b 	mla	r7, r9, fp, r7
 800e2dc:	4457      	add	r7, sl
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2e4:	f84e 3b04 	str.w	r3, [lr], #4
 800e2e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e2ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2f0:	f8be 3000 	ldrh.w	r3, [lr]
 800e2f4:	fb09 330a 	mla	r3, r9, sl, r3
 800e2f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e2fc:	4562      	cmp	r2, ip
 800e2fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e302:	d8e5      	bhi.n	800e2d0 <__multiply+0x10c>
 800e304:	9f01      	ldr	r7, [sp, #4]
 800e306:	51eb      	str	r3, [r5, r7]
 800e308:	3504      	adds	r5, #4
 800e30a:	e799      	b.n	800e240 <__multiply+0x7c>
 800e30c:	3e01      	subs	r6, #1
 800e30e:	e79b      	b.n	800e248 <__multiply+0x84>
 800e310:	0800fddc 	.word	0x0800fddc
 800e314:	0800fe4d 	.word	0x0800fe4d

0800e318 <__pow5mult>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	4615      	mov	r5, r2
 800e31e:	f012 0203 	ands.w	r2, r2, #3
 800e322:	4607      	mov	r7, r0
 800e324:	460e      	mov	r6, r1
 800e326:	d007      	beq.n	800e338 <__pow5mult+0x20>
 800e328:	4c25      	ldr	r4, [pc, #148]	@ (800e3c0 <__pow5mult+0xa8>)
 800e32a:	3a01      	subs	r2, #1
 800e32c:	2300      	movs	r3, #0
 800e32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e332:	f7ff fe55 	bl	800dfe0 <__multadd>
 800e336:	4606      	mov	r6, r0
 800e338:	10ad      	asrs	r5, r5, #2
 800e33a:	d03d      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e33c:	69fc      	ldr	r4, [r7, #28]
 800e33e:	b97c      	cbnz	r4, 800e360 <__pow5mult+0x48>
 800e340:	2010      	movs	r0, #16
 800e342:	f7fc fa8b 	bl	800a85c <malloc>
 800e346:	4602      	mov	r2, r0
 800e348:	61f8      	str	r0, [r7, #28]
 800e34a:	b928      	cbnz	r0, 800e358 <__pow5mult+0x40>
 800e34c:	4b1d      	ldr	r3, [pc, #116]	@ (800e3c4 <__pow5mult+0xac>)
 800e34e:	481e      	ldr	r0, [pc, #120]	@ (800e3c8 <__pow5mult+0xb0>)
 800e350:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e354:	f7fe fbe2 	bl	800cb1c <__assert_func>
 800e358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e35c:	6004      	str	r4, [r0, #0]
 800e35e:	60c4      	str	r4, [r0, #12]
 800e360:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e368:	b94c      	cbnz	r4, 800e37e <__pow5mult+0x66>
 800e36a:	f240 2171 	movw	r1, #625	@ 0x271
 800e36e:	4638      	mov	r0, r7
 800e370:	f7ff ff12 	bl	800e198 <__i2b>
 800e374:	2300      	movs	r3, #0
 800e376:	f8c8 0008 	str.w	r0, [r8, #8]
 800e37a:	4604      	mov	r4, r0
 800e37c:	6003      	str	r3, [r0, #0]
 800e37e:	f04f 0900 	mov.w	r9, #0
 800e382:	07eb      	lsls	r3, r5, #31
 800e384:	d50a      	bpl.n	800e39c <__pow5mult+0x84>
 800e386:	4631      	mov	r1, r6
 800e388:	4622      	mov	r2, r4
 800e38a:	4638      	mov	r0, r7
 800e38c:	f7ff ff1a 	bl	800e1c4 <__multiply>
 800e390:	4631      	mov	r1, r6
 800e392:	4680      	mov	r8, r0
 800e394:	4638      	mov	r0, r7
 800e396:	f7ff fe01 	bl	800df9c <_Bfree>
 800e39a:	4646      	mov	r6, r8
 800e39c:	106d      	asrs	r5, r5, #1
 800e39e:	d00b      	beq.n	800e3b8 <__pow5mult+0xa0>
 800e3a0:	6820      	ldr	r0, [r4, #0]
 800e3a2:	b938      	cbnz	r0, 800e3b4 <__pow5mult+0x9c>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7ff ff0b 	bl	800e1c4 <__multiply>
 800e3ae:	6020      	str	r0, [r4, #0]
 800e3b0:	f8c0 9000 	str.w	r9, [r0]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	e7e4      	b.n	800e382 <__pow5mult+0x6a>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3be:	bf00      	nop
 800e3c0:	0800fea8 	.word	0x0800fea8
 800e3c4:	0800fcc2 	.word	0x0800fcc2
 800e3c8:	0800fe4d 	.word	0x0800fe4d

0800e3cc <__lshift>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	6849      	ldr	r1, [r1, #4]
 800e3d4:	6923      	ldr	r3, [r4, #16]
 800e3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	4607      	mov	r7, r0
 800e3de:	4691      	mov	r9, r2
 800e3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3e4:	f108 0601 	add.w	r6, r8, #1
 800e3e8:	42b3      	cmp	r3, r6
 800e3ea:	db0b      	blt.n	800e404 <__lshift+0x38>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fd95 	bl	800df1c <_Balloc>
 800e3f2:	4605      	mov	r5, r0
 800e3f4:	b948      	cbnz	r0, 800e40a <__lshift+0x3e>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	4b28      	ldr	r3, [pc, #160]	@ (800e49c <__lshift+0xd0>)
 800e3fa:	4829      	ldr	r0, [pc, #164]	@ (800e4a0 <__lshift+0xd4>)
 800e3fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e400:	f7fe fb8c 	bl	800cb1c <__assert_func>
 800e404:	3101      	adds	r1, #1
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	e7ee      	b.n	800e3e8 <__lshift+0x1c>
 800e40a:	2300      	movs	r3, #0
 800e40c:	f100 0114 	add.w	r1, r0, #20
 800e410:	f100 0210 	add.w	r2, r0, #16
 800e414:	4618      	mov	r0, r3
 800e416:	4553      	cmp	r3, sl
 800e418:	db33      	blt.n	800e482 <__lshift+0xb6>
 800e41a:	6920      	ldr	r0, [r4, #16]
 800e41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e420:	f104 0314 	add.w	r3, r4, #20
 800e424:	f019 091f 	ands.w	r9, r9, #31
 800e428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e42c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e430:	d02b      	beq.n	800e48a <__lshift+0xbe>
 800e432:	f1c9 0e20 	rsb	lr, r9, #32
 800e436:	468a      	mov	sl, r1
 800e438:	2200      	movs	r2, #0
 800e43a:	6818      	ldr	r0, [r3, #0]
 800e43c:	fa00 f009 	lsl.w	r0, r0, r9
 800e440:	4310      	orrs	r0, r2
 800e442:	f84a 0b04 	str.w	r0, [sl], #4
 800e446:	f853 2b04 	ldr.w	r2, [r3], #4
 800e44a:	459c      	cmp	ip, r3
 800e44c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e450:	d8f3      	bhi.n	800e43a <__lshift+0x6e>
 800e452:	ebac 0304 	sub.w	r3, ip, r4
 800e456:	3b15      	subs	r3, #21
 800e458:	f023 0303 	bic.w	r3, r3, #3
 800e45c:	3304      	adds	r3, #4
 800e45e:	f104 0015 	add.w	r0, r4, #21
 800e462:	4584      	cmp	ip, r0
 800e464:	bf38      	it	cc
 800e466:	2304      	movcc	r3, #4
 800e468:	50ca      	str	r2, [r1, r3]
 800e46a:	b10a      	cbz	r2, 800e470 <__lshift+0xa4>
 800e46c:	f108 0602 	add.w	r6, r8, #2
 800e470:	3e01      	subs	r6, #1
 800e472:	4638      	mov	r0, r7
 800e474:	612e      	str	r6, [r5, #16]
 800e476:	4621      	mov	r1, r4
 800e478:	f7ff fd90 	bl	800df9c <_Bfree>
 800e47c:	4628      	mov	r0, r5
 800e47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e482:	f842 0f04 	str.w	r0, [r2, #4]!
 800e486:	3301      	adds	r3, #1
 800e488:	e7c5      	b.n	800e416 <__lshift+0x4a>
 800e48a:	3904      	subs	r1, #4
 800e48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e490:	f841 2f04 	str.w	r2, [r1, #4]!
 800e494:	459c      	cmp	ip, r3
 800e496:	d8f9      	bhi.n	800e48c <__lshift+0xc0>
 800e498:	e7ea      	b.n	800e470 <__lshift+0xa4>
 800e49a:	bf00      	nop
 800e49c:	0800fddc 	.word	0x0800fddc
 800e4a0:	0800fe4d 	.word	0x0800fe4d

0800e4a4 <__mcmp>:
 800e4a4:	690a      	ldr	r2, [r1, #16]
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	6900      	ldr	r0, [r0, #16]
 800e4aa:	1a80      	subs	r0, r0, r2
 800e4ac:	b530      	push	{r4, r5, lr}
 800e4ae:	d10e      	bne.n	800e4ce <__mcmp+0x2a>
 800e4b0:	3314      	adds	r3, #20
 800e4b2:	3114      	adds	r1, #20
 800e4b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4c4:	4295      	cmp	r5, r2
 800e4c6:	d003      	beq.n	800e4d0 <__mcmp+0x2c>
 800e4c8:	d205      	bcs.n	800e4d6 <__mcmp+0x32>
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ce:	bd30      	pop	{r4, r5, pc}
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	d3f3      	bcc.n	800e4bc <__mcmp+0x18>
 800e4d4:	e7fb      	b.n	800e4ce <__mcmp+0x2a>
 800e4d6:	2001      	movs	r0, #1
 800e4d8:	e7f9      	b.n	800e4ce <__mcmp+0x2a>
	...

0800e4dc <__mdiff>:
 800e4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	4689      	mov	r9, r1
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4648      	mov	r0, r9
 800e4e8:	4614      	mov	r4, r2
 800e4ea:	f7ff ffdb 	bl	800e4a4 <__mcmp>
 800e4ee:	1e05      	subs	r5, r0, #0
 800e4f0:	d112      	bne.n	800e518 <__mdiff+0x3c>
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f7ff fd11 	bl	800df1c <_Balloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	b928      	cbnz	r0, 800e50a <__mdiff+0x2e>
 800e4fe:	4b3f      	ldr	r3, [pc, #252]	@ (800e5fc <__mdiff+0x120>)
 800e500:	f240 2137 	movw	r1, #567	@ 0x237
 800e504:	483e      	ldr	r0, [pc, #248]	@ (800e600 <__mdiff+0x124>)
 800e506:	f7fe fb09 	bl	800cb1c <__assert_func>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e510:	4610      	mov	r0, r2
 800e512:	b003      	add	sp, #12
 800e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e518:	bfbc      	itt	lt
 800e51a:	464b      	movlt	r3, r9
 800e51c:	46a1      	movlt	r9, r4
 800e51e:	4630      	mov	r0, r6
 800e520:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e524:	bfba      	itte	lt
 800e526:	461c      	movlt	r4, r3
 800e528:	2501      	movlt	r5, #1
 800e52a:	2500      	movge	r5, #0
 800e52c:	f7ff fcf6 	bl	800df1c <_Balloc>
 800e530:	4602      	mov	r2, r0
 800e532:	b918      	cbnz	r0, 800e53c <__mdiff+0x60>
 800e534:	4b31      	ldr	r3, [pc, #196]	@ (800e5fc <__mdiff+0x120>)
 800e536:	f240 2145 	movw	r1, #581	@ 0x245
 800e53a:	e7e3      	b.n	800e504 <__mdiff+0x28>
 800e53c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e540:	6926      	ldr	r6, [r4, #16]
 800e542:	60c5      	str	r5, [r0, #12]
 800e544:	f109 0310 	add.w	r3, r9, #16
 800e548:	f109 0514 	add.w	r5, r9, #20
 800e54c:	f104 0e14 	add.w	lr, r4, #20
 800e550:	f100 0b14 	add.w	fp, r0, #20
 800e554:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e558:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	46d9      	mov	r9, fp
 800e560:	f04f 0c00 	mov.w	ip, #0
 800e564:	9b01      	ldr	r3, [sp, #4]
 800e566:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e56a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e56e:	9301      	str	r3, [sp, #4]
 800e570:	fa1f f38a 	uxth.w	r3, sl
 800e574:	4619      	mov	r1, r3
 800e576:	b283      	uxth	r3, r0
 800e578:	1acb      	subs	r3, r1, r3
 800e57a:	0c00      	lsrs	r0, r0, #16
 800e57c:	4463      	add	r3, ip
 800e57e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e586:	b29b      	uxth	r3, r3
 800e588:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e58c:	4576      	cmp	r6, lr
 800e58e:	f849 3b04 	str.w	r3, [r9], #4
 800e592:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e596:	d8e5      	bhi.n	800e564 <__mdiff+0x88>
 800e598:	1b33      	subs	r3, r6, r4
 800e59a:	3b15      	subs	r3, #21
 800e59c:	f023 0303 	bic.w	r3, r3, #3
 800e5a0:	3415      	adds	r4, #21
 800e5a2:	3304      	adds	r3, #4
 800e5a4:	42a6      	cmp	r6, r4
 800e5a6:	bf38      	it	cc
 800e5a8:	2304      	movcc	r3, #4
 800e5aa:	441d      	add	r5, r3
 800e5ac:	445b      	add	r3, fp
 800e5ae:	461e      	mov	r6, r3
 800e5b0:	462c      	mov	r4, r5
 800e5b2:	4544      	cmp	r4, r8
 800e5b4:	d30e      	bcc.n	800e5d4 <__mdiff+0xf8>
 800e5b6:	f108 0103 	add.w	r1, r8, #3
 800e5ba:	1b49      	subs	r1, r1, r5
 800e5bc:	f021 0103 	bic.w	r1, r1, #3
 800e5c0:	3d03      	subs	r5, #3
 800e5c2:	45a8      	cmp	r8, r5
 800e5c4:	bf38      	it	cc
 800e5c6:	2100      	movcc	r1, #0
 800e5c8:	440b      	add	r3, r1
 800e5ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5ce:	b191      	cbz	r1, 800e5f6 <__mdiff+0x11a>
 800e5d0:	6117      	str	r7, [r2, #16]
 800e5d2:	e79d      	b.n	800e510 <__mdiff+0x34>
 800e5d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5d8:	46e6      	mov	lr, ip
 800e5da:	0c08      	lsrs	r0, r1, #16
 800e5dc:	fa1c fc81 	uxtah	ip, ip, r1
 800e5e0:	4471      	add	r1, lr
 800e5e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e5e6:	b289      	uxth	r1, r1
 800e5e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e5ec:	f846 1b04 	str.w	r1, [r6], #4
 800e5f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5f4:	e7dd      	b.n	800e5b2 <__mdiff+0xd6>
 800e5f6:	3f01      	subs	r7, #1
 800e5f8:	e7e7      	b.n	800e5ca <__mdiff+0xee>
 800e5fa:	bf00      	nop
 800e5fc:	0800fddc 	.word	0x0800fddc
 800e600:	0800fe4d 	.word	0x0800fe4d

0800e604 <__ulp>:
 800e604:	b082      	sub	sp, #8
 800e606:	ed8d 0b00 	vstr	d0, [sp]
 800e60a:	9a01      	ldr	r2, [sp, #4]
 800e60c:	4b0f      	ldr	r3, [pc, #60]	@ (800e64c <__ulp+0x48>)
 800e60e:	4013      	ands	r3, r2
 800e610:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e614:	2b00      	cmp	r3, #0
 800e616:	dc08      	bgt.n	800e62a <__ulp+0x26>
 800e618:	425b      	negs	r3, r3
 800e61a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e61e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e622:	da04      	bge.n	800e62e <__ulp+0x2a>
 800e624:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e628:	4113      	asrs	r3, r2
 800e62a:	2200      	movs	r2, #0
 800e62c:	e008      	b.n	800e640 <__ulp+0x3c>
 800e62e:	f1a2 0314 	sub.w	r3, r2, #20
 800e632:	2b1e      	cmp	r3, #30
 800e634:	bfda      	itte	le
 800e636:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e63a:	40da      	lsrle	r2, r3
 800e63c:	2201      	movgt	r2, #1
 800e63e:	2300      	movs	r3, #0
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	ec41 0b10 	vmov	d0, r0, r1
 800e648:	b002      	add	sp, #8
 800e64a:	4770      	bx	lr
 800e64c:	7ff00000 	.word	0x7ff00000

0800e650 <__b2d>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	6906      	ldr	r6, [r0, #16]
 800e656:	f100 0814 	add.w	r8, r0, #20
 800e65a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e65e:	1f37      	subs	r7, r6, #4
 800e660:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e664:	4610      	mov	r0, r2
 800e666:	f7ff fd4b 	bl	800e100 <__hi0bits>
 800e66a:	f1c0 0320 	rsb	r3, r0, #32
 800e66e:	280a      	cmp	r0, #10
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	491b      	ldr	r1, [pc, #108]	@ (800e6e0 <__b2d+0x90>)
 800e674:	dc15      	bgt.n	800e6a2 <__b2d+0x52>
 800e676:	f1c0 0c0b 	rsb	ip, r0, #11
 800e67a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e67e:	45b8      	cmp	r8, r7
 800e680:	ea43 0501 	orr.w	r5, r3, r1
 800e684:	bf34      	ite	cc
 800e686:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e68a:	2300      	movcs	r3, #0
 800e68c:	3015      	adds	r0, #21
 800e68e:	fa02 f000 	lsl.w	r0, r2, r0
 800e692:	fa23 f30c 	lsr.w	r3, r3, ip
 800e696:	4303      	orrs	r3, r0
 800e698:	461c      	mov	r4, r3
 800e69a:	ec45 4b10 	vmov	d0, r4, r5
 800e69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a2:	45b8      	cmp	r8, r7
 800e6a4:	bf3a      	itte	cc
 800e6a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6aa:	f1a6 0708 	subcc.w	r7, r6, #8
 800e6ae:	2300      	movcs	r3, #0
 800e6b0:	380b      	subs	r0, #11
 800e6b2:	d012      	beq.n	800e6da <__b2d+0x8a>
 800e6b4:	f1c0 0120 	rsb	r1, r0, #32
 800e6b8:	fa23 f401 	lsr.w	r4, r3, r1
 800e6bc:	4082      	lsls	r2, r0
 800e6be:	4322      	orrs	r2, r4
 800e6c0:	4547      	cmp	r7, r8
 800e6c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e6c6:	bf8c      	ite	hi
 800e6c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e6cc:	2200      	movls	r2, #0
 800e6ce:	4083      	lsls	r3, r0
 800e6d0:	40ca      	lsrs	r2, r1
 800e6d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	e7de      	b.n	800e698 <__b2d+0x48>
 800e6da:	ea42 0501 	orr.w	r5, r2, r1
 800e6de:	e7db      	b.n	800e698 <__b2d+0x48>
 800e6e0:	3ff00000 	.word	0x3ff00000

0800e6e4 <__d2b>:
 800e6e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6e8:	460f      	mov	r7, r1
 800e6ea:	2101      	movs	r1, #1
 800e6ec:	ec59 8b10 	vmov	r8, r9, d0
 800e6f0:	4616      	mov	r6, r2
 800e6f2:	f7ff fc13 	bl	800df1c <_Balloc>
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	b930      	cbnz	r0, 800e708 <__d2b+0x24>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	4b23      	ldr	r3, [pc, #140]	@ (800e78c <__d2b+0xa8>)
 800e6fe:	4824      	ldr	r0, [pc, #144]	@ (800e790 <__d2b+0xac>)
 800e700:	f240 310f 	movw	r1, #783	@ 0x30f
 800e704:	f7fe fa0a 	bl	800cb1c <__assert_func>
 800e708:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e70c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e710:	b10d      	cbz	r5, 800e716 <__d2b+0x32>
 800e712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	f1b8 0300 	subs.w	r3, r8, #0
 800e71c:	d023      	beq.n	800e766 <__d2b+0x82>
 800e71e:	4668      	mov	r0, sp
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	f7ff fd0c 	bl	800e13e <__lo0bits>
 800e726:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e72a:	b1d0      	cbz	r0, 800e762 <__d2b+0x7e>
 800e72c:	f1c0 0320 	rsb	r3, r0, #32
 800e730:	fa02 f303 	lsl.w	r3, r2, r3
 800e734:	430b      	orrs	r3, r1
 800e736:	40c2      	lsrs	r2, r0
 800e738:	6163      	str	r3, [r4, #20]
 800e73a:	9201      	str	r2, [sp, #4]
 800e73c:	9b01      	ldr	r3, [sp, #4]
 800e73e:	61a3      	str	r3, [r4, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	bf0c      	ite	eq
 800e744:	2201      	moveq	r2, #1
 800e746:	2202      	movne	r2, #2
 800e748:	6122      	str	r2, [r4, #16]
 800e74a:	b1a5      	cbz	r5, 800e776 <__d2b+0x92>
 800e74c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e750:	4405      	add	r5, r0
 800e752:	603d      	str	r5, [r7, #0]
 800e754:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e758:	6030      	str	r0, [r6, #0]
 800e75a:	4620      	mov	r0, r4
 800e75c:	b003      	add	sp, #12
 800e75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e762:	6161      	str	r1, [r4, #20]
 800e764:	e7ea      	b.n	800e73c <__d2b+0x58>
 800e766:	a801      	add	r0, sp, #4
 800e768:	f7ff fce9 	bl	800e13e <__lo0bits>
 800e76c:	9b01      	ldr	r3, [sp, #4]
 800e76e:	6163      	str	r3, [r4, #20]
 800e770:	3020      	adds	r0, #32
 800e772:	2201      	movs	r2, #1
 800e774:	e7e8      	b.n	800e748 <__d2b+0x64>
 800e776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e77a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e77e:	6038      	str	r0, [r7, #0]
 800e780:	6918      	ldr	r0, [r3, #16]
 800e782:	f7ff fcbd 	bl	800e100 <__hi0bits>
 800e786:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e78a:	e7e5      	b.n	800e758 <__d2b+0x74>
 800e78c:	0800fddc 	.word	0x0800fddc
 800e790:	0800fe4d 	.word	0x0800fe4d

0800e794 <__ratio>:
 800e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e798:	b085      	sub	sp, #20
 800e79a:	e9cd 1000 	strd	r1, r0, [sp]
 800e79e:	a902      	add	r1, sp, #8
 800e7a0:	f7ff ff56 	bl	800e650 <__b2d>
 800e7a4:	9800      	ldr	r0, [sp, #0]
 800e7a6:	a903      	add	r1, sp, #12
 800e7a8:	ec55 4b10 	vmov	r4, r5, d0
 800e7ac:	f7ff ff50 	bl	800e650 <__b2d>
 800e7b0:	9b01      	ldr	r3, [sp, #4]
 800e7b2:	6919      	ldr	r1, [r3, #16]
 800e7b4:	9b00      	ldr	r3, [sp, #0]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	1ac9      	subs	r1, r1, r3
 800e7ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7be:	1a9b      	subs	r3, r3, r2
 800e7c0:	ec5b ab10 	vmov	sl, fp, d0
 800e7c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bfce      	itee	gt
 800e7cc:	462a      	movgt	r2, r5
 800e7ce:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7d2:	465a      	movle	r2, fp
 800e7d4:	462f      	mov	r7, r5
 800e7d6:	46d9      	mov	r9, fp
 800e7d8:	bfcc      	ite	gt
 800e7da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e7de:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e7e2:	464b      	mov	r3, r9
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	f7f2 f847 	bl	800087c <__aeabi_ddiv>
 800e7ee:	ec41 0b10 	vmov	d0, r0, r1
 800e7f2:	b005      	add	sp, #20
 800e7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7f8 <__copybits>:
 800e7f8:	3901      	subs	r1, #1
 800e7fa:	b570      	push	{r4, r5, r6, lr}
 800e7fc:	1149      	asrs	r1, r1, #5
 800e7fe:	6914      	ldr	r4, [r2, #16]
 800e800:	3101      	adds	r1, #1
 800e802:	f102 0314 	add.w	r3, r2, #20
 800e806:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e80a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e80e:	1f05      	subs	r5, r0, #4
 800e810:	42a3      	cmp	r3, r4
 800e812:	d30c      	bcc.n	800e82e <__copybits+0x36>
 800e814:	1aa3      	subs	r3, r4, r2
 800e816:	3b11      	subs	r3, #17
 800e818:	f023 0303 	bic.w	r3, r3, #3
 800e81c:	3211      	adds	r2, #17
 800e81e:	42a2      	cmp	r2, r4
 800e820:	bf88      	it	hi
 800e822:	2300      	movhi	r3, #0
 800e824:	4418      	add	r0, r3
 800e826:	2300      	movs	r3, #0
 800e828:	4288      	cmp	r0, r1
 800e82a:	d305      	bcc.n	800e838 <__copybits+0x40>
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
 800e82e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e832:	f845 6f04 	str.w	r6, [r5, #4]!
 800e836:	e7eb      	b.n	800e810 <__copybits+0x18>
 800e838:	f840 3b04 	str.w	r3, [r0], #4
 800e83c:	e7f4      	b.n	800e828 <__copybits+0x30>

0800e83e <__any_on>:
 800e83e:	f100 0214 	add.w	r2, r0, #20
 800e842:	6900      	ldr	r0, [r0, #16]
 800e844:	114b      	asrs	r3, r1, #5
 800e846:	4298      	cmp	r0, r3
 800e848:	b510      	push	{r4, lr}
 800e84a:	db11      	blt.n	800e870 <__any_on+0x32>
 800e84c:	dd0a      	ble.n	800e864 <__any_on+0x26>
 800e84e:	f011 011f 	ands.w	r1, r1, #31
 800e852:	d007      	beq.n	800e864 <__any_on+0x26>
 800e854:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e858:	fa24 f001 	lsr.w	r0, r4, r1
 800e85c:	fa00 f101 	lsl.w	r1, r0, r1
 800e860:	428c      	cmp	r4, r1
 800e862:	d10b      	bne.n	800e87c <__any_on+0x3e>
 800e864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e868:	4293      	cmp	r3, r2
 800e86a:	d803      	bhi.n	800e874 <__any_on+0x36>
 800e86c:	2000      	movs	r0, #0
 800e86e:	bd10      	pop	{r4, pc}
 800e870:	4603      	mov	r3, r0
 800e872:	e7f7      	b.n	800e864 <__any_on+0x26>
 800e874:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e878:	2900      	cmp	r1, #0
 800e87a:	d0f5      	beq.n	800e868 <__any_on+0x2a>
 800e87c:	2001      	movs	r0, #1
 800e87e:	e7f6      	b.n	800e86e <__any_on+0x30>

0800e880 <__ascii_wctomb>:
 800e880:	4603      	mov	r3, r0
 800e882:	4608      	mov	r0, r1
 800e884:	b141      	cbz	r1, 800e898 <__ascii_wctomb+0x18>
 800e886:	2aff      	cmp	r2, #255	@ 0xff
 800e888:	d904      	bls.n	800e894 <__ascii_wctomb+0x14>
 800e88a:	228a      	movs	r2, #138	@ 0x8a
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	4770      	bx	lr
 800e894:	700a      	strb	r2, [r1, #0]
 800e896:	2001      	movs	r0, #1
 800e898:	4770      	bx	lr

0800e89a <__ssputs_r>:
 800e89a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e89e:	688e      	ldr	r6, [r1, #8]
 800e8a0:	461f      	mov	r7, r3
 800e8a2:	42be      	cmp	r6, r7
 800e8a4:	680b      	ldr	r3, [r1, #0]
 800e8a6:	4682      	mov	sl, r0
 800e8a8:	460c      	mov	r4, r1
 800e8aa:	4690      	mov	r8, r2
 800e8ac:	d82d      	bhi.n	800e90a <__ssputs_r+0x70>
 800e8ae:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8b2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8b6:	d026      	beq.n	800e906 <__ssputs_r+0x6c>
 800e8b8:	6965      	ldr	r5, [r4, #20]
 800e8ba:	6909      	ldr	r1, [r1, #16]
 800e8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8c0:	eba3 0901 	sub.w	r9, r3, r1
 800e8c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8c8:	1c7b      	adds	r3, r7, #1
 800e8ca:	444b      	add	r3, r9
 800e8cc:	106d      	asrs	r5, r5, #1
 800e8ce:	429d      	cmp	r5, r3
 800e8d0:	bf38      	it	cc
 800e8d2:	461d      	movcc	r5, r3
 800e8d4:	0553      	lsls	r3, r2, #21
 800e8d6:	d527      	bpl.n	800e928 <__ssputs_r+0x8e>
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7fb fff1 	bl	800a8c0 <_malloc_r>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	b360      	cbz	r0, 800e93c <__ssputs_r+0xa2>
 800e8e2:	6921      	ldr	r1, [r4, #16]
 800e8e4:	464a      	mov	r2, r9
 800e8e6:	f7fe f8fa 	bl	800cade <memcpy>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8f4:	81a3      	strh	r3, [r4, #12]
 800e8f6:	6126      	str	r6, [r4, #16]
 800e8f8:	6165      	str	r5, [r4, #20]
 800e8fa:	444e      	add	r6, r9
 800e8fc:	eba5 0509 	sub.w	r5, r5, r9
 800e900:	6026      	str	r6, [r4, #0]
 800e902:	60a5      	str	r5, [r4, #8]
 800e904:	463e      	mov	r6, r7
 800e906:	42be      	cmp	r6, r7
 800e908:	d900      	bls.n	800e90c <__ssputs_r+0x72>
 800e90a:	463e      	mov	r6, r7
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	4632      	mov	r2, r6
 800e910:	4641      	mov	r1, r8
 800e912:	f000 fb7b 	bl	800f00c <memmove>
 800e916:	68a3      	ldr	r3, [r4, #8]
 800e918:	1b9b      	subs	r3, r3, r6
 800e91a:	60a3      	str	r3, [r4, #8]
 800e91c:	6823      	ldr	r3, [r4, #0]
 800e91e:	4433      	add	r3, r6
 800e920:	6023      	str	r3, [r4, #0]
 800e922:	2000      	movs	r0, #0
 800e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e928:	462a      	mov	r2, r5
 800e92a:	f000 fbc6 	bl	800f0ba <_realloc_r>
 800e92e:	4606      	mov	r6, r0
 800e930:	2800      	cmp	r0, #0
 800e932:	d1e0      	bne.n	800e8f6 <__ssputs_r+0x5c>
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	4650      	mov	r0, sl
 800e938:	f7fe ff5a 	bl	800d7f0 <_free_r>
 800e93c:	230c      	movs	r3, #12
 800e93e:	f8ca 3000 	str.w	r3, [sl]
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e948:	81a3      	strh	r3, [r4, #12]
 800e94a:	f04f 30ff 	mov.w	r0, #4294967295
 800e94e:	e7e9      	b.n	800e924 <__ssputs_r+0x8a>

0800e950 <_svfiprintf_r>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	4698      	mov	r8, r3
 800e956:	898b      	ldrh	r3, [r1, #12]
 800e958:	061b      	lsls	r3, r3, #24
 800e95a:	b09d      	sub	sp, #116	@ 0x74
 800e95c:	4607      	mov	r7, r0
 800e95e:	460d      	mov	r5, r1
 800e960:	4614      	mov	r4, r2
 800e962:	d510      	bpl.n	800e986 <_svfiprintf_r+0x36>
 800e964:	690b      	ldr	r3, [r1, #16]
 800e966:	b973      	cbnz	r3, 800e986 <_svfiprintf_r+0x36>
 800e968:	2140      	movs	r1, #64	@ 0x40
 800e96a:	f7fb ffa9 	bl	800a8c0 <_malloc_r>
 800e96e:	6028      	str	r0, [r5, #0]
 800e970:	6128      	str	r0, [r5, #16]
 800e972:	b930      	cbnz	r0, 800e982 <_svfiprintf_r+0x32>
 800e974:	230c      	movs	r3, #12
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	f04f 30ff 	mov.w	r0, #4294967295
 800e97c:	b01d      	add	sp, #116	@ 0x74
 800e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e982:	2340      	movs	r3, #64	@ 0x40
 800e984:	616b      	str	r3, [r5, #20]
 800e986:	2300      	movs	r3, #0
 800e988:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98a:	2320      	movs	r3, #32
 800e98c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e990:	f8cd 800c 	str.w	r8, [sp, #12]
 800e994:	2330      	movs	r3, #48	@ 0x30
 800e996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb34 <_svfiprintf_r+0x1e4>
 800e99a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e99e:	f04f 0901 	mov.w	r9, #1
 800e9a2:	4623      	mov	r3, r4
 800e9a4:	469a      	mov	sl, r3
 800e9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9aa:	b10a      	cbz	r2, 800e9b0 <_svfiprintf_r+0x60>
 800e9ac:	2a25      	cmp	r2, #37	@ 0x25
 800e9ae:	d1f9      	bne.n	800e9a4 <_svfiprintf_r+0x54>
 800e9b0:	ebba 0b04 	subs.w	fp, sl, r4
 800e9b4:	d00b      	beq.n	800e9ce <_svfiprintf_r+0x7e>
 800e9b6:	465b      	mov	r3, fp
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	4638      	mov	r0, r7
 800e9be:	f7ff ff6c 	bl	800e89a <__ssputs_r>
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	f000 80a7 	beq.w	800eb16 <_svfiprintf_r+0x1c6>
 800e9c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9ca:	445a      	add	r2, fp
 800e9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f000 809f 	beq.w	800eb16 <_svfiprintf_r+0x1c6>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f04f 32ff 	mov.w	r2, #4294967295
 800e9de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9e2:	f10a 0a01 	add.w	sl, sl, #1
 800e9e6:	9304      	str	r3, [sp, #16]
 800e9e8:	9307      	str	r3, [sp, #28]
 800e9ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9f0:	4654      	mov	r4, sl
 800e9f2:	2205      	movs	r2, #5
 800e9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f8:	484e      	ldr	r0, [pc, #312]	@ (800eb34 <_svfiprintf_r+0x1e4>)
 800e9fa:	f7f1 fc01 	bl	8000200 <memchr>
 800e9fe:	9a04      	ldr	r2, [sp, #16]
 800ea00:	b9d8      	cbnz	r0, 800ea3a <_svfiprintf_r+0xea>
 800ea02:	06d0      	lsls	r0, r2, #27
 800ea04:	bf44      	itt	mi
 800ea06:	2320      	movmi	r3, #32
 800ea08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea0c:	0711      	lsls	r1, r2, #28
 800ea0e:	bf44      	itt	mi
 800ea10:	232b      	movmi	r3, #43	@ 0x2b
 800ea12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea16:	f89a 3000 	ldrb.w	r3, [sl]
 800ea1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea1c:	d015      	beq.n	800ea4a <_svfiprintf_r+0xfa>
 800ea1e:	9a07      	ldr	r2, [sp, #28]
 800ea20:	4654      	mov	r4, sl
 800ea22:	2000      	movs	r0, #0
 800ea24:	f04f 0c0a 	mov.w	ip, #10
 800ea28:	4621      	mov	r1, r4
 800ea2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea2e:	3b30      	subs	r3, #48	@ 0x30
 800ea30:	2b09      	cmp	r3, #9
 800ea32:	d94b      	bls.n	800eacc <_svfiprintf_r+0x17c>
 800ea34:	b1b0      	cbz	r0, 800ea64 <_svfiprintf_r+0x114>
 800ea36:	9207      	str	r2, [sp, #28]
 800ea38:	e014      	b.n	800ea64 <_svfiprintf_r+0x114>
 800ea3a:	eba0 0308 	sub.w	r3, r0, r8
 800ea3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea42:	4313      	orrs	r3, r2
 800ea44:	9304      	str	r3, [sp, #16]
 800ea46:	46a2      	mov	sl, r4
 800ea48:	e7d2      	b.n	800e9f0 <_svfiprintf_r+0xa0>
 800ea4a:	9b03      	ldr	r3, [sp, #12]
 800ea4c:	1d19      	adds	r1, r3, #4
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	9103      	str	r1, [sp, #12]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	bfbb      	ittet	lt
 800ea56:	425b      	neglt	r3, r3
 800ea58:	f042 0202 	orrlt.w	r2, r2, #2
 800ea5c:	9307      	strge	r3, [sp, #28]
 800ea5e:	9307      	strlt	r3, [sp, #28]
 800ea60:	bfb8      	it	lt
 800ea62:	9204      	strlt	r2, [sp, #16]
 800ea64:	7823      	ldrb	r3, [r4, #0]
 800ea66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea68:	d10a      	bne.n	800ea80 <_svfiprintf_r+0x130>
 800ea6a:	7863      	ldrb	r3, [r4, #1]
 800ea6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea6e:	d132      	bne.n	800ead6 <_svfiprintf_r+0x186>
 800ea70:	9b03      	ldr	r3, [sp, #12]
 800ea72:	1d1a      	adds	r2, r3, #4
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	9203      	str	r2, [sp, #12]
 800ea78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea7c:	3402      	adds	r4, #2
 800ea7e:	9305      	str	r3, [sp, #20]
 800ea80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb44 <_svfiprintf_r+0x1f4>
 800ea84:	7821      	ldrb	r1, [r4, #0]
 800ea86:	2203      	movs	r2, #3
 800ea88:	4650      	mov	r0, sl
 800ea8a:	f7f1 fbb9 	bl	8000200 <memchr>
 800ea8e:	b138      	cbz	r0, 800eaa0 <_svfiprintf_r+0x150>
 800ea90:	9b04      	ldr	r3, [sp, #16]
 800ea92:	eba0 000a 	sub.w	r0, r0, sl
 800ea96:	2240      	movs	r2, #64	@ 0x40
 800ea98:	4082      	lsls	r2, r0
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	3401      	adds	r4, #1
 800ea9e:	9304      	str	r3, [sp, #16]
 800eaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa4:	4824      	ldr	r0, [pc, #144]	@ (800eb38 <_svfiprintf_r+0x1e8>)
 800eaa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eaaa:	2206      	movs	r2, #6
 800eaac:	f7f1 fba8 	bl	8000200 <memchr>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d036      	beq.n	800eb22 <_svfiprintf_r+0x1d2>
 800eab4:	4b21      	ldr	r3, [pc, #132]	@ (800eb3c <_svfiprintf_r+0x1ec>)
 800eab6:	bb1b      	cbnz	r3, 800eb00 <_svfiprintf_r+0x1b0>
 800eab8:	9b03      	ldr	r3, [sp, #12]
 800eaba:	3307      	adds	r3, #7
 800eabc:	f023 0307 	bic.w	r3, r3, #7
 800eac0:	3308      	adds	r3, #8
 800eac2:	9303      	str	r3, [sp, #12]
 800eac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac6:	4433      	add	r3, r6
 800eac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaca:	e76a      	b.n	800e9a2 <_svfiprintf_r+0x52>
 800eacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800ead0:	460c      	mov	r4, r1
 800ead2:	2001      	movs	r0, #1
 800ead4:	e7a8      	b.n	800ea28 <_svfiprintf_r+0xd8>
 800ead6:	2300      	movs	r3, #0
 800ead8:	3401      	adds	r4, #1
 800eada:	9305      	str	r3, [sp, #20]
 800eadc:	4619      	mov	r1, r3
 800eade:	f04f 0c0a 	mov.w	ip, #10
 800eae2:	4620      	mov	r0, r4
 800eae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae8:	3a30      	subs	r2, #48	@ 0x30
 800eaea:	2a09      	cmp	r2, #9
 800eaec:	d903      	bls.n	800eaf6 <_svfiprintf_r+0x1a6>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d0c6      	beq.n	800ea80 <_svfiprintf_r+0x130>
 800eaf2:	9105      	str	r1, [sp, #20]
 800eaf4:	e7c4      	b.n	800ea80 <_svfiprintf_r+0x130>
 800eaf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eafa:	4604      	mov	r4, r0
 800eafc:	2301      	movs	r3, #1
 800eafe:	e7f0      	b.n	800eae2 <_svfiprintf_r+0x192>
 800eb00:	ab03      	add	r3, sp, #12
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	462a      	mov	r2, r5
 800eb06:	4b0e      	ldr	r3, [pc, #56]	@ (800eb40 <_svfiprintf_r+0x1f0>)
 800eb08:	a904      	add	r1, sp, #16
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	f7fc fea0 	bl	800b850 <_printf_float>
 800eb10:	1c42      	adds	r2, r0, #1
 800eb12:	4606      	mov	r6, r0
 800eb14:	d1d6      	bne.n	800eac4 <_svfiprintf_r+0x174>
 800eb16:	89ab      	ldrh	r3, [r5, #12]
 800eb18:	065b      	lsls	r3, r3, #25
 800eb1a:	f53f af2d 	bmi.w	800e978 <_svfiprintf_r+0x28>
 800eb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb20:	e72c      	b.n	800e97c <_svfiprintf_r+0x2c>
 800eb22:	ab03      	add	r3, sp, #12
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	462a      	mov	r2, r5
 800eb28:	4b05      	ldr	r3, [pc, #20]	@ (800eb40 <_svfiprintf_r+0x1f0>)
 800eb2a:	a904      	add	r1, sp, #16
 800eb2c:	4638      	mov	r0, r7
 800eb2e:	f7fd f927 	bl	800bd80 <_printf_i>
 800eb32:	e7ed      	b.n	800eb10 <_svfiprintf_r+0x1c0>
 800eb34:	0800ffa8 	.word	0x0800ffa8
 800eb38:	0800ffb2 	.word	0x0800ffb2
 800eb3c:	0800b851 	.word	0x0800b851
 800eb40:	0800e89b 	.word	0x0800e89b
 800eb44:	0800ffae 	.word	0x0800ffae

0800eb48 <__sfputc_r>:
 800eb48:	6893      	ldr	r3, [r2, #8]
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	b410      	push	{r4}
 800eb50:	6093      	str	r3, [r2, #8]
 800eb52:	da08      	bge.n	800eb66 <__sfputc_r+0x1e>
 800eb54:	6994      	ldr	r4, [r2, #24]
 800eb56:	42a3      	cmp	r3, r4
 800eb58:	db01      	blt.n	800eb5e <__sfputc_r+0x16>
 800eb5a:	290a      	cmp	r1, #10
 800eb5c:	d103      	bne.n	800eb66 <__sfputc_r+0x1e>
 800eb5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb62:	f7fd bdd6 	b.w	800c712 <__swbuf_r>
 800eb66:	6813      	ldr	r3, [r2, #0]
 800eb68:	1c58      	adds	r0, r3, #1
 800eb6a:	6010      	str	r0, [r2, #0]
 800eb6c:	7019      	strb	r1, [r3, #0]
 800eb6e:	4608      	mov	r0, r1
 800eb70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <__sfputs_r>:
 800eb76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb78:	4606      	mov	r6, r0
 800eb7a:	460f      	mov	r7, r1
 800eb7c:	4614      	mov	r4, r2
 800eb7e:	18d5      	adds	r5, r2, r3
 800eb80:	42ac      	cmp	r4, r5
 800eb82:	d101      	bne.n	800eb88 <__sfputs_r+0x12>
 800eb84:	2000      	movs	r0, #0
 800eb86:	e007      	b.n	800eb98 <__sfputs_r+0x22>
 800eb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb8c:	463a      	mov	r2, r7
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f7ff ffda 	bl	800eb48 <__sfputc_r>
 800eb94:	1c43      	adds	r3, r0, #1
 800eb96:	d1f3      	bne.n	800eb80 <__sfputs_r+0xa>
 800eb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb9c <_vfiprintf_r>:
 800eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	460d      	mov	r5, r1
 800eba2:	b09d      	sub	sp, #116	@ 0x74
 800eba4:	4614      	mov	r4, r2
 800eba6:	4698      	mov	r8, r3
 800eba8:	4606      	mov	r6, r0
 800ebaa:	b118      	cbz	r0, 800ebb4 <_vfiprintf_r+0x18>
 800ebac:	6a03      	ldr	r3, [r0, #32]
 800ebae:	b90b      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x18>
 800ebb0:	f7fd fca6 	bl	800c500 <__sinit>
 800ebb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebb6:	07d9      	lsls	r1, r3, #31
 800ebb8:	d405      	bmi.n	800ebc6 <_vfiprintf_r+0x2a>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	059a      	lsls	r2, r3, #22
 800ebbe:	d402      	bmi.n	800ebc6 <_vfiprintf_r+0x2a>
 800ebc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebc2:	f7fd ff8a 	bl	800cada <__retarget_lock_acquire_recursive>
 800ebc6:	89ab      	ldrh	r3, [r5, #12]
 800ebc8:	071b      	lsls	r3, r3, #28
 800ebca:	d501      	bpl.n	800ebd0 <_vfiprintf_r+0x34>
 800ebcc:	692b      	ldr	r3, [r5, #16]
 800ebce:	b99b      	cbnz	r3, 800ebf8 <_vfiprintf_r+0x5c>
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7fd fddc 	bl	800c790 <__swsetup_r>
 800ebd8:	b170      	cbz	r0, 800ebf8 <_vfiprintf_r+0x5c>
 800ebda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebdc:	07dc      	lsls	r4, r3, #31
 800ebde:	d504      	bpl.n	800ebea <_vfiprintf_r+0x4e>
 800ebe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe4:	b01d      	add	sp, #116	@ 0x74
 800ebe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebea:	89ab      	ldrh	r3, [r5, #12]
 800ebec:	0598      	lsls	r0, r3, #22
 800ebee:	d4f7      	bmi.n	800ebe0 <_vfiprintf_r+0x44>
 800ebf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebf2:	f7fd ff73 	bl	800cadc <__retarget_lock_release_recursive>
 800ebf6:	e7f3      	b.n	800ebe0 <_vfiprintf_r+0x44>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebfc:	2320      	movs	r3, #32
 800ebfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec06:	2330      	movs	r3, #48	@ 0x30
 800ec08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800edb8 <_vfiprintf_r+0x21c>
 800ec0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec10:	f04f 0901 	mov.w	r9, #1
 800ec14:	4623      	mov	r3, r4
 800ec16:	469a      	mov	sl, r3
 800ec18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec1c:	b10a      	cbz	r2, 800ec22 <_vfiprintf_r+0x86>
 800ec1e:	2a25      	cmp	r2, #37	@ 0x25
 800ec20:	d1f9      	bne.n	800ec16 <_vfiprintf_r+0x7a>
 800ec22:	ebba 0b04 	subs.w	fp, sl, r4
 800ec26:	d00b      	beq.n	800ec40 <_vfiprintf_r+0xa4>
 800ec28:	465b      	mov	r3, fp
 800ec2a:	4622      	mov	r2, r4
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7ff ffa1 	bl	800eb76 <__sfputs_r>
 800ec34:	3001      	adds	r0, #1
 800ec36:	f000 80a7 	beq.w	800ed88 <_vfiprintf_r+0x1ec>
 800ec3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec3c:	445a      	add	r2, fp
 800ec3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec40:	f89a 3000 	ldrb.w	r3, [sl]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f000 809f 	beq.w	800ed88 <_vfiprintf_r+0x1ec>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec54:	f10a 0a01 	add.w	sl, sl, #1
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	9307      	str	r3, [sp, #28]
 800ec5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec60:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec62:	4654      	mov	r4, sl
 800ec64:	2205      	movs	r2, #5
 800ec66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6a:	4853      	ldr	r0, [pc, #332]	@ (800edb8 <_vfiprintf_r+0x21c>)
 800ec6c:	f7f1 fac8 	bl	8000200 <memchr>
 800ec70:	9a04      	ldr	r2, [sp, #16]
 800ec72:	b9d8      	cbnz	r0, 800ecac <_vfiprintf_r+0x110>
 800ec74:	06d1      	lsls	r1, r2, #27
 800ec76:	bf44      	itt	mi
 800ec78:	2320      	movmi	r3, #32
 800ec7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec7e:	0713      	lsls	r3, r2, #28
 800ec80:	bf44      	itt	mi
 800ec82:	232b      	movmi	r3, #43	@ 0x2b
 800ec84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec88:	f89a 3000 	ldrb.w	r3, [sl]
 800ec8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec8e:	d015      	beq.n	800ecbc <_vfiprintf_r+0x120>
 800ec90:	9a07      	ldr	r2, [sp, #28]
 800ec92:	4654      	mov	r4, sl
 800ec94:	2000      	movs	r0, #0
 800ec96:	f04f 0c0a 	mov.w	ip, #10
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eca0:	3b30      	subs	r3, #48	@ 0x30
 800eca2:	2b09      	cmp	r3, #9
 800eca4:	d94b      	bls.n	800ed3e <_vfiprintf_r+0x1a2>
 800eca6:	b1b0      	cbz	r0, 800ecd6 <_vfiprintf_r+0x13a>
 800eca8:	9207      	str	r2, [sp, #28]
 800ecaa:	e014      	b.n	800ecd6 <_vfiprintf_r+0x13a>
 800ecac:	eba0 0308 	sub.w	r3, r0, r8
 800ecb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	9304      	str	r3, [sp, #16]
 800ecb8:	46a2      	mov	sl, r4
 800ecba:	e7d2      	b.n	800ec62 <_vfiprintf_r+0xc6>
 800ecbc:	9b03      	ldr	r3, [sp, #12]
 800ecbe:	1d19      	adds	r1, r3, #4
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	9103      	str	r1, [sp, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bfbb      	ittet	lt
 800ecc8:	425b      	neglt	r3, r3
 800ecca:	f042 0202 	orrlt.w	r2, r2, #2
 800ecce:	9307      	strge	r3, [sp, #28]
 800ecd0:	9307      	strlt	r3, [sp, #28]
 800ecd2:	bfb8      	it	lt
 800ecd4:	9204      	strlt	r2, [sp, #16]
 800ecd6:	7823      	ldrb	r3, [r4, #0]
 800ecd8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecda:	d10a      	bne.n	800ecf2 <_vfiprintf_r+0x156>
 800ecdc:	7863      	ldrb	r3, [r4, #1]
 800ecde:	2b2a      	cmp	r3, #42	@ 0x2a
 800ece0:	d132      	bne.n	800ed48 <_vfiprintf_r+0x1ac>
 800ece2:	9b03      	ldr	r3, [sp, #12]
 800ece4:	1d1a      	adds	r2, r3, #4
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	9203      	str	r2, [sp, #12]
 800ecea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ecee:	3402      	adds	r4, #2
 800ecf0:	9305      	str	r3, [sp, #20]
 800ecf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800edc8 <_vfiprintf_r+0x22c>
 800ecf6:	7821      	ldrb	r1, [r4, #0]
 800ecf8:	2203      	movs	r2, #3
 800ecfa:	4650      	mov	r0, sl
 800ecfc:	f7f1 fa80 	bl	8000200 <memchr>
 800ed00:	b138      	cbz	r0, 800ed12 <_vfiprintf_r+0x176>
 800ed02:	9b04      	ldr	r3, [sp, #16]
 800ed04:	eba0 000a 	sub.w	r0, r0, sl
 800ed08:	2240      	movs	r2, #64	@ 0x40
 800ed0a:	4082      	lsls	r2, r0
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	3401      	adds	r4, #1
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed16:	4829      	ldr	r0, [pc, #164]	@ (800edbc <_vfiprintf_r+0x220>)
 800ed18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed1c:	2206      	movs	r2, #6
 800ed1e:	f7f1 fa6f 	bl	8000200 <memchr>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d03f      	beq.n	800eda6 <_vfiprintf_r+0x20a>
 800ed26:	4b26      	ldr	r3, [pc, #152]	@ (800edc0 <_vfiprintf_r+0x224>)
 800ed28:	bb1b      	cbnz	r3, 800ed72 <_vfiprintf_r+0x1d6>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	3307      	adds	r3, #7
 800ed2e:	f023 0307 	bic.w	r3, r3, #7
 800ed32:	3308      	adds	r3, #8
 800ed34:	9303      	str	r3, [sp, #12]
 800ed36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed38:	443b      	add	r3, r7
 800ed3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed3c:	e76a      	b.n	800ec14 <_vfiprintf_r+0x78>
 800ed3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed42:	460c      	mov	r4, r1
 800ed44:	2001      	movs	r0, #1
 800ed46:	e7a8      	b.n	800ec9a <_vfiprintf_r+0xfe>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	3401      	adds	r4, #1
 800ed4c:	9305      	str	r3, [sp, #20]
 800ed4e:	4619      	mov	r1, r3
 800ed50:	f04f 0c0a 	mov.w	ip, #10
 800ed54:	4620      	mov	r0, r4
 800ed56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed5a:	3a30      	subs	r2, #48	@ 0x30
 800ed5c:	2a09      	cmp	r2, #9
 800ed5e:	d903      	bls.n	800ed68 <_vfiprintf_r+0x1cc>
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d0c6      	beq.n	800ecf2 <_vfiprintf_r+0x156>
 800ed64:	9105      	str	r1, [sp, #20]
 800ed66:	e7c4      	b.n	800ecf2 <_vfiprintf_r+0x156>
 800ed68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e7f0      	b.n	800ed54 <_vfiprintf_r+0x1b8>
 800ed72:	ab03      	add	r3, sp, #12
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	462a      	mov	r2, r5
 800ed78:	4b12      	ldr	r3, [pc, #72]	@ (800edc4 <_vfiprintf_r+0x228>)
 800ed7a:	a904      	add	r1, sp, #16
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7fc fd67 	bl	800b850 <_printf_float>
 800ed82:	4607      	mov	r7, r0
 800ed84:	1c78      	adds	r0, r7, #1
 800ed86:	d1d6      	bne.n	800ed36 <_vfiprintf_r+0x19a>
 800ed88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed8a:	07d9      	lsls	r1, r3, #31
 800ed8c:	d405      	bmi.n	800ed9a <_vfiprintf_r+0x1fe>
 800ed8e:	89ab      	ldrh	r3, [r5, #12]
 800ed90:	059a      	lsls	r2, r3, #22
 800ed92:	d402      	bmi.n	800ed9a <_vfiprintf_r+0x1fe>
 800ed94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed96:	f7fd fea1 	bl	800cadc <__retarget_lock_release_recursive>
 800ed9a:	89ab      	ldrh	r3, [r5, #12]
 800ed9c:	065b      	lsls	r3, r3, #25
 800ed9e:	f53f af1f 	bmi.w	800ebe0 <_vfiprintf_r+0x44>
 800eda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eda4:	e71e      	b.n	800ebe4 <_vfiprintf_r+0x48>
 800eda6:	ab03      	add	r3, sp, #12
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	462a      	mov	r2, r5
 800edac:	4b05      	ldr	r3, [pc, #20]	@ (800edc4 <_vfiprintf_r+0x228>)
 800edae:	a904      	add	r1, sp, #16
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7fc ffe5 	bl	800bd80 <_printf_i>
 800edb6:	e7e4      	b.n	800ed82 <_vfiprintf_r+0x1e6>
 800edb8:	0800ffa8 	.word	0x0800ffa8
 800edbc:	0800ffb2 	.word	0x0800ffb2
 800edc0:	0800b851 	.word	0x0800b851
 800edc4:	0800eb77 	.word	0x0800eb77
 800edc8:	0800ffae 	.word	0x0800ffae

0800edcc <__sflush_r>:
 800edcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd4:	0716      	lsls	r6, r2, #28
 800edd6:	4605      	mov	r5, r0
 800edd8:	460c      	mov	r4, r1
 800edda:	d454      	bmi.n	800ee86 <__sflush_r+0xba>
 800eddc:	684b      	ldr	r3, [r1, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	dc02      	bgt.n	800ede8 <__sflush_r+0x1c>
 800ede2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dd48      	ble.n	800ee7a <__sflush_r+0xae>
 800ede8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800edea:	2e00      	cmp	r6, #0
 800edec:	d045      	beq.n	800ee7a <__sflush_r+0xae>
 800edee:	2300      	movs	r3, #0
 800edf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800edf4:	682f      	ldr	r7, [r5, #0]
 800edf6:	6a21      	ldr	r1, [r4, #32]
 800edf8:	602b      	str	r3, [r5, #0]
 800edfa:	d030      	beq.n	800ee5e <__sflush_r+0x92>
 800edfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800edfe:	89a3      	ldrh	r3, [r4, #12]
 800ee00:	0759      	lsls	r1, r3, #29
 800ee02:	d505      	bpl.n	800ee10 <__sflush_r+0x44>
 800ee04:	6863      	ldr	r3, [r4, #4]
 800ee06:	1ad2      	subs	r2, r2, r3
 800ee08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ee0a:	b10b      	cbz	r3, 800ee10 <__sflush_r+0x44>
 800ee0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ee0e:	1ad2      	subs	r2, r2, r3
 800ee10:	2300      	movs	r3, #0
 800ee12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ee14:	6a21      	ldr	r1, [r4, #32]
 800ee16:	4628      	mov	r0, r5
 800ee18:	47b0      	blx	r6
 800ee1a:	1c43      	adds	r3, r0, #1
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	d106      	bne.n	800ee2e <__sflush_r+0x62>
 800ee20:	6829      	ldr	r1, [r5, #0]
 800ee22:	291d      	cmp	r1, #29
 800ee24:	d82b      	bhi.n	800ee7e <__sflush_r+0xb2>
 800ee26:	4a2a      	ldr	r2, [pc, #168]	@ (800eed0 <__sflush_r+0x104>)
 800ee28:	410a      	asrs	r2, r1
 800ee2a:	07d6      	lsls	r6, r2, #31
 800ee2c:	d427      	bmi.n	800ee7e <__sflush_r+0xb2>
 800ee2e:	2200      	movs	r2, #0
 800ee30:	6062      	str	r2, [r4, #4]
 800ee32:	04d9      	lsls	r1, r3, #19
 800ee34:	6922      	ldr	r2, [r4, #16]
 800ee36:	6022      	str	r2, [r4, #0]
 800ee38:	d504      	bpl.n	800ee44 <__sflush_r+0x78>
 800ee3a:	1c42      	adds	r2, r0, #1
 800ee3c:	d101      	bne.n	800ee42 <__sflush_r+0x76>
 800ee3e:	682b      	ldr	r3, [r5, #0]
 800ee40:	b903      	cbnz	r3, 800ee44 <__sflush_r+0x78>
 800ee42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ee44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee46:	602f      	str	r7, [r5, #0]
 800ee48:	b1b9      	cbz	r1, 800ee7a <__sflush_r+0xae>
 800ee4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ee4e:	4299      	cmp	r1, r3
 800ee50:	d002      	beq.n	800ee58 <__sflush_r+0x8c>
 800ee52:	4628      	mov	r0, r5
 800ee54:	f7fe fccc 	bl	800d7f0 <_free_r>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ee5c:	e00d      	b.n	800ee7a <__sflush_r+0xae>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b0      	blx	r6
 800ee64:	4602      	mov	r2, r0
 800ee66:	1c50      	adds	r0, r2, #1
 800ee68:	d1c9      	bne.n	800edfe <__sflush_r+0x32>
 800ee6a:	682b      	ldr	r3, [r5, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d0c6      	beq.n	800edfe <__sflush_r+0x32>
 800ee70:	2b1d      	cmp	r3, #29
 800ee72:	d001      	beq.n	800ee78 <__sflush_r+0xac>
 800ee74:	2b16      	cmp	r3, #22
 800ee76:	d11e      	bne.n	800eeb6 <__sflush_r+0xea>
 800ee78:	602f      	str	r7, [r5, #0]
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e022      	b.n	800eec4 <__sflush_r+0xf8>
 800ee7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee82:	b21b      	sxth	r3, r3
 800ee84:	e01b      	b.n	800eebe <__sflush_r+0xf2>
 800ee86:	690f      	ldr	r7, [r1, #16]
 800ee88:	2f00      	cmp	r7, #0
 800ee8a:	d0f6      	beq.n	800ee7a <__sflush_r+0xae>
 800ee8c:	0793      	lsls	r3, r2, #30
 800ee8e:	680e      	ldr	r6, [r1, #0]
 800ee90:	bf08      	it	eq
 800ee92:	694b      	ldreq	r3, [r1, #20]
 800ee94:	600f      	str	r7, [r1, #0]
 800ee96:	bf18      	it	ne
 800ee98:	2300      	movne	r3, #0
 800ee9a:	eba6 0807 	sub.w	r8, r6, r7
 800ee9e:	608b      	str	r3, [r1, #8]
 800eea0:	f1b8 0f00 	cmp.w	r8, #0
 800eea4:	dde9      	ble.n	800ee7a <__sflush_r+0xae>
 800eea6:	6a21      	ldr	r1, [r4, #32]
 800eea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eeaa:	4643      	mov	r3, r8
 800eeac:	463a      	mov	r2, r7
 800eeae:	4628      	mov	r0, r5
 800eeb0:	47b0      	blx	r6
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	dc08      	bgt.n	800eec8 <__sflush_r+0xfc>
 800eeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eebe:	81a3      	strh	r3, [r4, #12]
 800eec0:	f04f 30ff 	mov.w	r0, #4294967295
 800eec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec8:	4407      	add	r7, r0
 800eeca:	eba8 0800 	sub.w	r8, r8, r0
 800eece:	e7e7      	b.n	800eea0 <__sflush_r+0xd4>
 800eed0:	dfbffffe 	.word	0xdfbffffe

0800eed4 <_fflush_r>:
 800eed4:	b538      	push	{r3, r4, r5, lr}
 800eed6:	690b      	ldr	r3, [r1, #16]
 800eed8:	4605      	mov	r5, r0
 800eeda:	460c      	mov	r4, r1
 800eedc:	b913      	cbnz	r3, 800eee4 <_fflush_r+0x10>
 800eede:	2500      	movs	r5, #0
 800eee0:	4628      	mov	r0, r5
 800eee2:	bd38      	pop	{r3, r4, r5, pc}
 800eee4:	b118      	cbz	r0, 800eeee <_fflush_r+0x1a>
 800eee6:	6a03      	ldr	r3, [r0, #32]
 800eee8:	b90b      	cbnz	r3, 800eeee <_fflush_r+0x1a>
 800eeea:	f7fd fb09 	bl	800c500 <__sinit>
 800eeee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0f3      	beq.n	800eede <_fflush_r+0xa>
 800eef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eef8:	07d0      	lsls	r0, r2, #31
 800eefa:	d404      	bmi.n	800ef06 <_fflush_r+0x32>
 800eefc:	0599      	lsls	r1, r3, #22
 800eefe:	d402      	bmi.n	800ef06 <_fflush_r+0x32>
 800ef00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef02:	f7fd fdea 	bl	800cada <__retarget_lock_acquire_recursive>
 800ef06:	4628      	mov	r0, r5
 800ef08:	4621      	mov	r1, r4
 800ef0a:	f7ff ff5f 	bl	800edcc <__sflush_r>
 800ef0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef10:	07da      	lsls	r2, r3, #31
 800ef12:	4605      	mov	r5, r0
 800ef14:	d4e4      	bmi.n	800eee0 <_fflush_r+0xc>
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	059b      	lsls	r3, r3, #22
 800ef1a:	d4e1      	bmi.n	800eee0 <_fflush_r+0xc>
 800ef1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef1e:	f7fd fddd 	bl	800cadc <__retarget_lock_release_recursive>
 800ef22:	e7dd      	b.n	800eee0 <_fflush_r+0xc>

0800ef24 <fiprintf>:
 800ef24:	b40e      	push	{r1, r2, r3}
 800ef26:	b503      	push	{r0, r1, lr}
 800ef28:	4601      	mov	r1, r0
 800ef2a:	ab03      	add	r3, sp, #12
 800ef2c:	4805      	ldr	r0, [pc, #20]	@ (800ef44 <fiprintf+0x20>)
 800ef2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef32:	6800      	ldr	r0, [r0, #0]
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	f7ff fe31 	bl	800eb9c <_vfiprintf_r>
 800ef3a:	b002      	add	sp, #8
 800ef3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef40:	b003      	add	sp, #12
 800ef42:	4770      	bx	lr
 800ef44:	20000184 	.word	0x20000184

0800ef48 <__swhatbuf_r>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef50:	2900      	cmp	r1, #0
 800ef52:	b096      	sub	sp, #88	@ 0x58
 800ef54:	4615      	mov	r5, r2
 800ef56:	461e      	mov	r6, r3
 800ef58:	da0d      	bge.n	800ef76 <__swhatbuf_r+0x2e>
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ef60:	f04f 0100 	mov.w	r1, #0
 800ef64:	bf14      	ite	ne
 800ef66:	2340      	movne	r3, #64	@ 0x40
 800ef68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	6031      	str	r1, [r6, #0]
 800ef70:	602b      	str	r3, [r5, #0]
 800ef72:	b016      	add	sp, #88	@ 0x58
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
 800ef76:	466a      	mov	r2, sp
 800ef78:	f000 f862 	bl	800f040 <_fstat_r>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	dbec      	blt.n	800ef5a <__swhatbuf_r+0x12>
 800ef80:	9901      	ldr	r1, [sp, #4]
 800ef82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ef86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ef8a:	4259      	negs	r1, r3
 800ef8c:	4159      	adcs	r1, r3
 800ef8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef92:	e7eb      	b.n	800ef6c <__swhatbuf_r+0x24>

0800ef94 <__smakebuf_r>:
 800ef94:	898b      	ldrh	r3, [r1, #12]
 800ef96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef98:	079d      	lsls	r5, r3, #30
 800ef9a:	4606      	mov	r6, r0
 800ef9c:	460c      	mov	r4, r1
 800ef9e:	d507      	bpl.n	800efb0 <__smakebuf_r+0x1c>
 800efa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	6123      	str	r3, [r4, #16]
 800efa8:	2301      	movs	r3, #1
 800efaa:	6163      	str	r3, [r4, #20]
 800efac:	b003      	add	sp, #12
 800efae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb0:	ab01      	add	r3, sp, #4
 800efb2:	466a      	mov	r2, sp
 800efb4:	f7ff ffc8 	bl	800ef48 <__swhatbuf_r>
 800efb8:	9f00      	ldr	r7, [sp, #0]
 800efba:	4605      	mov	r5, r0
 800efbc:	4639      	mov	r1, r7
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7fb fc7e 	bl	800a8c0 <_malloc_r>
 800efc4:	b948      	cbnz	r0, 800efda <__smakebuf_r+0x46>
 800efc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efca:	059a      	lsls	r2, r3, #22
 800efcc:	d4ee      	bmi.n	800efac <__smakebuf_r+0x18>
 800efce:	f023 0303 	bic.w	r3, r3, #3
 800efd2:	f043 0302 	orr.w	r3, r3, #2
 800efd6:	81a3      	strh	r3, [r4, #12]
 800efd8:	e7e2      	b.n	800efa0 <__smakebuf_r+0xc>
 800efda:	89a3      	ldrh	r3, [r4, #12]
 800efdc:	6020      	str	r0, [r4, #0]
 800efde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efe2:	81a3      	strh	r3, [r4, #12]
 800efe4:	9b01      	ldr	r3, [sp, #4]
 800efe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800efea:	b15b      	cbz	r3, 800f004 <__smakebuf_r+0x70>
 800efec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eff0:	4630      	mov	r0, r6
 800eff2:	f000 f837 	bl	800f064 <_isatty_r>
 800eff6:	b128      	cbz	r0, 800f004 <__smakebuf_r+0x70>
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	f023 0303 	bic.w	r3, r3, #3
 800effe:	f043 0301 	orr.w	r3, r3, #1
 800f002:	81a3      	strh	r3, [r4, #12]
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	431d      	orrs	r5, r3
 800f008:	81a5      	strh	r5, [r4, #12]
 800f00a:	e7cf      	b.n	800efac <__smakebuf_r+0x18>

0800f00c <memmove>:
 800f00c:	4288      	cmp	r0, r1
 800f00e:	b510      	push	{r4, lr}
 800f010:	eb01 0402 	add.w	r4, r1, r2
 800f014:	d902      	bls.n	800f01c <memmove+0x10>
 800f016:	4284      	cmp	r4, r0
 800f018:	4623      	mov	r3, r4
 800f01a:	d807      	bhi.n	800f02c <memmove+0x20>
 800f01c:	1e43      	subs	r3, r0, #1
 800f01e:	42a1      	cmp	r1, r4
 800f020:	d008      	beq.n	800f034 <memmove+0x28>
 800f022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f02a:	e7f8      	b.n	800f01e <memmove+0x12>
 800f02c:	4402      	add	r2, r0
 800f02e:	4601      	mov	r1, r0
 800f030:	428a      	cmp	r2, r1
 800f032:	d100      	bne.n	800f036 <memmove+0x2a>
 800f034:	bd10      	pop	{r4, pc}
 800f036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f03e:	e7f7      	b.n	800f030 <memmove+0x24>

0800f040 <_fstat_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d07      	ldr	r5, [pc, #28]	@ (800f060 <_fstat_r+0x20>)
 800f044:	2300      	movs	r3, #0
 800f046:	4604      	mov	r4, r0
 800f048:	4608      	mov	r0, r1
 800f04a:	4611      	mov	r1, r2
 800f04c:	602b      	str	r3, [r5, #0]
 800f04e:	f7f4 f866 	bl	800311e <_fstat>
 800f052:	1c43      	adds	r3, r0, #1
 800f054:	d102      	bne.n	800f05c <_fstat_r+0x1c>
 800f056:	682b      	ldr	r3, [r5, #0]
 800f058:	b103      	cbz	r3, 800f05c <_fstat_r+0x1c>
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	bd38      	pop	{r3, r4, r5, pc}
 800f05e:	bf00      	nop
 800f060:	20001208 	.word	0x20001208

0800f064 <_isatty_r>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4d06      	ldr	r5, [pc, #24]	@ (800f080 <_isatty_r+0x1c>)
 800f068:	2300      	movs	r3, #0
 800f06a:	4604      	mov	r4, r0
 800f06c:	4608      	mov	r0, r1
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	f7f4 f865 	bl	800313e <_isatty>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d102      	bne.n	800f07e <_isatty_r+0x1a>
 800f078:	682b      	ldr	r3, [r5, #0]
 800f07a:	b103      	cbz	r3, 800f07e <_isatty_r+0x1a>
 800f07c:	6023      	str	r3, [r4, #0]
 800f07e:	bd38      	pop	{r3, r4, r5, pc}
 800f080:	20001208 	.word	0x20001208

0800f084 <abort>:
 800f084:	b508      	push	{r3, lr}
 800f086:	2006      	movs	r0, #6
 800f088:	f000 f86e 	bl	800f168 <raise>
 800f08c:	2001      	movs	r0, #1
 800f08e:	f7f3 fff6 	bl	800307e <_exit>

0800f092 <_calloc_r>:
 800f092:	b570      	push	{r4, r5, r6, lr}
 800f094:	fba1 5402 	umull	r5, r4, r1, r2
 800f098:	b93c      	cbnz	r4, 800f0aa <_calloc_r+0x18>
 800f09a:	4629      	mov	r1, r5
 800f09c:	f7fb fc10 	bl	800a8c0 <_malloc_r>
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	b928      	cbnz	r0, 800f0b0 <_calloc_r+0x1e>
 800f0a4:	2600      	movs	r6, #0
 800f0a6:	4630      	mov	r0, r6
 800f0a8:	bd70      	pop	{r4, r5, r6, pc}
 800f0aa:	220c      	movs	r2, #12
 800f0ac:	6002      	str	r2, [r0, #0]
 800f0ae:	e7f9      	b.n	800f0a4 <_calloc_r+0x12>
 800f0b0:	462a      	mov	r2, r5
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	f7fd fbd2 	bl	800c85c <memset>
 800f0b8:	e7f5      	b.n	800f0a6 <_calloc_r+0x14>

0800f0ba <_realloc_r>:
 800f0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0be:	4680      	mov	r8, r0
 800f0c0:	4615      	mov	r5, r2
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	b921      	cbnz	r1, 800f0d0 <_realloc_r+0x16>
 800f0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	f7fb bbf8 	b.w	800a8c0 <_malloc_r>
 800f0d0:	b92a      	cbnz	r2, 800f0de <_realloc_r+0x24>
 800f0d2:	f7fe fb8d 	bl	800d7f0 <_free_r>
 800f0d6:	2400      	movs	r4, #0
 800f0d8:	4620      	mov	r0, r4
 800f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0de:	f000 f85f 	bl	800f1a0 <_malloc_usable_size_r>
 800f0e2:	4285      	cmp	r5, r0
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	d802      	bhi.n	800f0ee <_realloc_r+0x34>
 800f0e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f0ec:	d8f4      	bhi.n	800f0d8 <_realloc_r+0x1e>
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	f7fb fbe5 	bl	800a8c0 <_malloc_r>
 800f0f6:	4607      	mov	r7, r0
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d0ec      	beq.n	800f0d6 <_realloc_r+0x1c>
 800f0fc:	42b5      	cmp	r5, r6
 800f0fe:	462a      	mov	r2, r5
 800f100:	4621      	mov	r1, r4
 800f102:	bf28      	it	cs
 800f104:	4632      	movcs	r2, r6
 800f106:	f7fd fcea 	bl	800cade <memcpy>
 800f10a:	4621      	mov	r1, r4
 800f10c:	4640      	mov	r0, r8
 800f10e:	f7fe fb6f 	bl	800d7f0 <_free_r>
 800f112:	463c      	mov	r4, r7
 800f114:	e7e0      	b.n	800f0d8 <_realloc_r+0x1e>

0800f116 <_raise_r>:
 800f116:	291f      	cmp	r1, #31
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4605      	mov	r5, r0
 800f11c:	460c      	mov	r4, r1
 800f11e:	d904      	bls.n	800f12a <_raise_r+0x14>
 800f120:	2316      	movs	r3, #22
 800f122:	6003      	str	r3, [r0, #0]
 800f124:	f04f 30ff 	mov.w	r0, #4294967295
 800f128:	bd38      	pop	{r3, r4, r5, pc}
 800f12a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f12c:	b112      	cbz	r2, 800f134 <_raise_r+0x1e>
 800f12e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f132:	b94b      	cbnz	r3, 800f148 <_raise_r+0x32>
 800f134:	4628      	mov	r0, r5
 800f136:	f000 f831 	bl	800f19c <_getpid_r>
 800f13a:	4622      	mov	r2, r4
 800f13c:	4601      	mov	r1, r0
 800f13e:	4628      	mov	r0, r5
 800f140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f144:	f000 b818 	b.w	800f178 <_kill_r>
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d00a      	beq.n	800f162 <_raise_r+0x4c>
 800f14c:	1c59      	adds	r1, r3, #1
 800f14e:	d103      	bne.n	800f158 <_raise_r+0x42>
 800f150:	2316      	movs	r3, #22
 800f152:	6003      	str	r3, [r0, #0]
 800f154:	2001      	movs	r0, #1
 800f156:	e7e7      	b.n	800f128 <_raise_r+0x12>
 800f158:	2100      	movs	r1, #0
 800f15a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f15e:	4620      	mov	r0, r4
 800f160:	4798      	blx	r3
 800f162:	2000      	movs	r0, #0
 800f164:	e7e0      	b.n	800f128 <_raise_r+0x12>
	...

0800f168 <raise>:
 800f168:	4b02      	ldr	r3, [pc, #8]	@ (800f174 <raise+0xc>)
 800f16a:	4601      	mov	r1, r0
 800f16c:	6818      	ldr	r0, [r3, #0]
 800f16e:	f7ff bfd2 	b.w	800f116 <_raise_r>
 800f172:	bf00      	nop
 800f174:	20000184 	.word	0x20000184

0800f178 <_kill_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	@ (800f198 <_kill_r+0x20>)
 800f17c:	2300      	movs	r3, #0
 800f17e:	4604      	mov	r4, r0
 800f180:	4608      	mov	r0, r1
 800f182:	4611      	mov	r1, r2
 800f184:	602b      	str	r3, [r5, #0]
 800f186:	f7f3 ff6a 	bl	800305e <_kill>
 800f18a:	1c43      	adds	r3, r0, #1
 800f18c:	d102      	bne.n	800f194 <_kill_r+0x1c>
 800f18e:	682b      	ldr	r3, [r5, #0]
 800f190:	b103      	cbz	r3, 800f194 <_kill_r+0x1c>
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	20001208 	.word	0x20001208

0800f19c <_getpid_r>:
 800f19c:	f7f3 bf57 	b.w	800304e <_getpid>

0800f1a0 <_malloc_usable_size_r>:
 800f1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a4:	1f18      	subs	r0, r3, #4
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	bfbc      	itt	lt
 800f1aa:	580b      	ldrlt	r3, [r1, r0]
 800f1ac:	18c0      	addlt	r0, r0, r3
 800f1ae:	4770      	bx	lr

0800f1b0 <_init>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	bf00      	nop
 800f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b6:	bc08      	pop	{r3}
 800f1b8:	469e      	mov	lr, r3
 800f1ba:	4770      	bx	lr

0800f1bc <_fini>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	bf00      	nop
 800f1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c2:	bc08      	pop	{r3}
 800f1c4:	469e      	mov	lr, r3
 800f1c6:	4770      	bx	lr
