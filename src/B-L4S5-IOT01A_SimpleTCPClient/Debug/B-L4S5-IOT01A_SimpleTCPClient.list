
B-L4S5-IOT01A_SimpleTCPClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010850  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  08010a10  08010a10  00011a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011834  08011834  00013208  2**0
                  CONTENTS
  4 .ARM          00000008  08011834  08011834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801183c  0801183c  00013208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801183c  0801183c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011840  08011840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08011844  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001098  20000208  08011a4c  00013208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a0  08011a4c  000132a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e1d  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042fa  00000000  00000000  00035055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00039350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016aa  00000000  00000000  0003b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030399  00000000  00000000  0003c742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c60  00000000  00000000  0006cadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001229e4  00000000  00000000  0008f73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b211f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092d4  00000000  00000000  001b2164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000af  00000000  00000000  001bb438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000208 	.word	0x20000208
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080109f8 	.word	0x080109f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000020c 	.word	0x2000020c
 80001fc:	080109f8 	.word	0x080109f8

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800101c:	4b57      	ldr	r3, [pc, #348]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	4a56      	ldr	r2, [pc, #344]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001026:	6593      	str	r3, [r2, #88]	@ 0x58
 8001028:	4b54      	ldr	r3, [pc, #336]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b51      	ldr	r3, [pc, #324]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001038:	4a50      	ldr	r2, [pc, #320]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001040:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104c:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001058:	4b48      	ldr	r3, [pc, #288]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001064:	4b45      	ldr	r3, [pc, #276]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a44      	ldr	r2, [pc, #272]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b42      	ldr	r3, [pc, #264]	@ (800117c <SPI_WIFI_MspInit+0x168>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	483f      	ldr	r0, [pc, #252]	@ (8001180 <SPI_WIFI_MspInit+0x16c>)
 8001084:	f005 fc0a 	bl	800689c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4837      	ldr	r0, [pc, #220]	@ (8001180 <SPI_WIFI_MspInit+0x16c>)
 80010a2:	f005 f95f 	bl	8006364 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	4831      	ldr	r0, [pc, #196]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010c0:	f005 f950 	bl	8006364 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4828      	ldr	r0, [pc, #160]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010e2:	f005 f93f 	bl	8006364 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80010e6:	2201      	movs	r2, #1
 80010e8:	2101      	movs	r1, #1
 80010ea:	4826      	ldr	r0, [pc, #152]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 80010ec:	f005 fbd6 	bl	800689c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	481f      	ldr	r0, [pc, #124]	@ (8001184 <SPI_WIFI_MspInit+0x170>)
 8001108:	f005 f92c 	bl	8006364 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800110c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800111a:	2301      	movs	r3, #1
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800111e:	2306      	movs	r3, #6
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800112a:	f005 f91b 	bl	8006364 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001140:	2306      	movs	r3, #6
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800114c:	f005 f90a 	bl	8006364 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001150:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001162:	2306      	movs	r3, #6
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <SPI_WIFI_MspInit+0x174>)
 800116e:	f005 f8f9 	bl	8006364 <HAL_GPIO_Init>
}
 8001172:	bf00      	nop
 8001174:	3730      	adds	r7, #48	@ 0x30
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	48000400 	.word	0x48000400
 8001184:	48001000 	.word	0x48001000
 8001188:	48000800 	.word	0x48000800

0800118c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d145      	bne.n	800122c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011a2:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <SPI_WIFI_Init+0xb8>)
 80011a4:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80011a6:	4826      	ldr	r0, [pc, #152]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011a8:	f7ff ff34 	bl	8001014 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b2:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80011b4:	4b22      	ldr	r3, [pc, #136]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011bc:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80011c0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011d8:	2210      	movs	r2, #16
 80011da:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80011e2:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80011f4:	4812      	ldr	r0, [pc, #72]	@ (8001240 <SPI_WIFI_Init+0xb4>)
 80011f6:	f008 fbb7 	bl	8009968 <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	e018      	b.n	8001238 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2007      	movs	r0, #7
 800120c:	f004 ff07 	bl	800601e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001210:	2007      	movs	r0, #7
 8001212:	f004 ff20 	bl	8006056 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2033      	movs	r0, #51	@ 0x33
 800121c:	f004 feff 	bl	800601e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001220:	2033      	movs	r0, #51	@ 0x33
 8001222:	f004 ff18 	bl	8006056 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f000 f9fe 	bl	8001628 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800122c:	f000 f80c 	bl	8001248 <SPI_WIFI_ResetModule>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000224 	.word	0x20000224
 8001244:	40003c00 	.word	0x40003c00

08001248 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800124e:	f003 fb99 	bl	8004984 <HAL_GetTick>
 8001252:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800125e:	4830      	ldr	r0, [pc, #192]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001260:	f005 fb1c 	bl	800689c <HAL_GPIO_WritePin>
 8001264:	200a      	movs	r0, #10
 8001266:	f003 fb99 	bl	800499c <HAL_Delay>
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001270:	482b      	ldr	r0, [pc, #172]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001272:	f005 fb13 	bl	800689c <HAL_GPIO_WritePin>
 8001276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800127a:	f003 fb8f 	bl	800499c <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800127e:	2200      	movs	r2, #0
 8001280:	2101      	movs	r1, #1
 8001282:	4827      	ldr	r0, [pc, #156]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 8001284:	f005 fb0a 	bl	800689c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001288:	200f      	movs	r0, #15
 800128a:	f000 f9cd 	bl	8001628 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800128e:	e020      	b.n	80012d2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	463a      	mov	r2, r7
 8001294:	18d1      	adds	r1, r2, r3
 8001296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800129a:	2201      	movs	r2, #1
 800129c:	4821      	ldr	r0, [pc, #132]	@ (8001324 <SPI_WIFI_ResetModule+0xdc>)
 800129e:	f008 fc2e 	bl	8009afe <HAL_SPI_Receive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	3302      	adds	r3, #2
 80012aa:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80012ac:	f003 fb6a 	bl	8004984 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ba:	d202      	bcs.n	80012c2 <SPI_WIFI_ResetModule+0x7a>
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80012c2:	2201      	movs	r2, #1
 80012c4:	2101      	movs	r1, #1
 80012c6:	4816      	ldr	r0, [pc, #88]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012c8:	f005 fae8 	bl	800689c <HAL_GPIO_WritePin>
      return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	e021      	b.n	8001316 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80012d2:	2102      	movs	r1, #2
 80012d4:	4812      	ldr	r0, [pc, #72]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012d6:	f005 fac9 	bl	800686c <HAL_GPIO_ReadPin>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d0d7      	beq.n	8001290 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80012e0:	2201      	movs	r2, #1
 80012e2:	2101      	movs	r1, #1
 80012e4:	480e      	ldr	r0, [pc, #56]	@ (8001320 <SPI_WIFI_ResetModule+0xd8>)
 80012e6:	f005 fad9 	bl	800689c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80012ea:	783b      	ldrb	r3, [r7, #0]
 80012ec:	2b15      	cmp	r3, #21
 80012ee:	d10e      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	2b15      	cmp	r3, #21
 80012f4:	d10b      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	2b0d      	cmp	r3, #13
 80012fa:	d108      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80012fc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d105      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	2b3e      	cmp	r3, #62	@ 0x3e
 8001306:	d102      	bne.n	800130e <SPI_WIFI_ResetModule+0xc6>
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b20      	cmp	r3, #32
 800130c:	d002      	beq.n	8001314 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e000      	b.n	8001316 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	48001000 	.word	0x48001000
 8001324:	20000224 	.word	0x20000224

08001328 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800132c:	4802      	ldr	r0, [pc, #8]	@ (8001338 <SPI_WIFI_DeInit+0x10>)
 800132e:	f008 fbbe 	bl	8009aae <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000224 	.word	0x20000224

0800133c <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8001344:	f003 fb1e 	bl	8004984 <HAL_GetTick>
 8001348:	4603      	mov	r3, r0
 800134a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800134c:	e00a      	b.n	8001364 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800134e:	f003 fb19 	bl	8004984 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	429a      	cmp	r2, r3
 800135c:	d902      	bls.n	8001364 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e007      	b.n	8001374 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8001364:	2102      	movs	r1, #2
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <wait_cmddata_rdy_high+0x40>)
 8001368:	f005 fa80 	bl	800686c <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d1ed      	bne.n	800134e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	48001000 	.word	0x48001000

08001380 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001388:	f003 fafc 	bl	8004984 <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8001390:	e00a      	b.n	80013a8 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001392:	f003 faf7 	bl	8004984 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad2      	subs	r2, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d902      	bls.n	80013a8 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <wait_cmddata_rdy_rising_event+0x3c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d0f0      	beq.n	8001392 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80013b0:	2300      	movs	r3, #0
#endif
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000290 	.word	0x20000290

080013c0 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80013c8:	f003 fadc 	bl	8004984 <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 80013d0:	e00a      	b.n	80013e8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80013d2:	f003 fad7 	bl	8004984 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d902      	bls.n	80013e8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e004      	b.n	80013f2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <wait_spi_rx_event+0x3c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d0f0      	beq.n	80013d2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80013f0:	2300      	movs	r3, #0
#endif
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000288 	.word	0x20000288

08001400 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8001408:	f003 fabc 	bl	8004984 <HAL_GetTick>
 800140c:	4603      	mov	r3, r0
 800140e:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 8001410:	e00a      	b.n	8001428 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8001412:	f003 fab7 	bl	8004984 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d902      	bls.n	8001428 <wait_spi_tx_event+0x28>
    {
      return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e004      	b.n	8001432 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <wait_spi_tx_event+0x3c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d0f0      	beq.n	8001412 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8001430:	2300      	movs	r3, #0
#endif
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000028c 	.word	0x2000028c

08001440 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	460b      	mov	r3, r1
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	4834      	ldr	r0, [pc, #208]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001458:	f005 fa20 	bl	800689c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f8e3 	bl	8001628 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff8b 	bl	8001380 <wait_cmddata_rdy_rising_event>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	da02      	bge.n	8001476 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001470:	f06f 0302 	mvn.w	r3, #2
 8001474:	e054      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8001476:	2200      	movs	r2, #0
 8001478:	2101      	movs	r1, #1
 800147a:	482b      	ldr	r0, [pc, #172]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 800147c:	f005 fa0e 	bl	800689c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001480:	200f      	movs	r0, #15
 8001482:	f000 f8d1 	bl	8001628 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001486:	e03d      	b.n	8001504 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8001488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	429a      	cmp	r2, r3
 8001490:	db02      	blt.n	8001498 <SPI_WIFI_ReceiveData+0x58>
 8001492:	897b      	ldrh	r3, [r7, #10]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13c      	bne.n	8001512 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <SPI_WIFI_ReceiveData+0xec>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	2201      	movs	r2, #1
 80014a4:	4619      	mov	r1, r3
 80014a6:	4822      	ldr	r0, [pc, #136]	@ (8001530 <SPI_WIFI_ReceiveData+0xf0>)
 80014a8:	f008 fefa 	bl	800a2a0 <HAL_SPI_Receive_IT>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80014b2:	2201      	movs	r2, #1
 80014b4:	2101      	movs	r1, #1
 80014b6:	481c      	ldr	r0, [pc, #112]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 80014b8:	f005 f9f0 	bl	800689c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	e02e      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff7b 	bl	80013c0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80014ca:	7d3a      	ldrb	r2, [r7, #20]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	7d7a      	ldrb	r2, [r7, #21]
 80014d6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80014d8:	8afb      	ldrh	r3, [r7, #22]
 80014da:	3302      	adds	r3, #2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3302      	adds	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80014e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014ea:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80014ee:	db09      	blt.n	8001504 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80014f0:	2201      	movs	r2, #1
 80014f2:	2101      	movs	r1, #1
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 80014f6:	f005 f9d1 	bl	800689c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80014fa:	f7ff fea5 	bl	8001248 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80014fe:	f06f 0303 	mvn.w	r3, #3
 8001502:	e00d      	b.n	8001520 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8001504:	2102      	movs	r1, #2
 8001506:	4808      	ldr	r0, [pc, #32]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001508:	f005 f9b0 	bl	800686c <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b01      	cmp	r3, #1
 8001510:	d0ba      	beq.n	8001488 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 8001512:	2201      	movs	r2, #1
 8001514:	2101      	movs	r1, #1
 8001516:	4804      	ldr	r0, [pc, #16]	@ (8001528 <SPI_WIFI_ReceiveData+0xe8>)
 8001518:	f005 f9c0 	bl	800689c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800151c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	48001000 	.word	0x48001000
 800152c:	20000288 	.word	0x20000288
 8001530:	20000224 	.word	0x20000224

08001534 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	460b      	mov	r3, r1
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout)<0)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fef9 	bl	800133c <wait_cmddata_rdy_high>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	da02      	bge.n	8001556 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	e04f      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <SPI_WIFI_SendData+0xcc>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800155c:	2200      	movs	r2, #0
 800155e:	2101      	movs	r1, #1
 8001560:	4828      	ldr	r0, [pc, #160]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 8001562:	f005 f99b 	bl	800689c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f85e 	bl	8001628 <SPI_WIFI_DelayUs>
  if (len > 1)
 800156c:	897b      	ldrh	r3, [r7, #10]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d919      	bls.n	80015a6 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <SPI_WIFI_SendData+0xd4>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8001578:	897b      	ldrh	r3, [r7, #10]
 800157a:	085b      	lsrs	r3, r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	4822      	ldr	r0, [pc, #136]	@ (800160c <SPI_WIFI_SendData+0xd8>)
 8001584:	f008 fdfe 	bl	800a184 <HAL_SPI_Transmit_IT>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	481c      	ldr	r0, [pc, #112]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 8001594:	f005 f982 	bl	800689c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	e02b      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff2d 	bl	8001400 <wait_spi_tx_event>
  }

  if ( len & 1)
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 80015b0:	897b      	ldrh	r3, [r7, #10]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80015bc:	230a      	movs	r3, #10
 80015be:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SPI_WIFI_SendData+0xd4>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <SPI_WIFI_SendData+0xd8>)
 80015d0:	f008 fdd8 	bl	800a184 <HAL_SPI_Transmit_IT>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80015da:	2201      	movs	r2, #1
 80015dc:	2101      	movs	r1, #1
 80015de:	4809      	ldr	r0, [pc, #36]	@ (8001604 <SPI_WIFI_SendData+0xd0>)
 80015e0:	f005 f95c 	bl	800689c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	e005      	b.n	80015f6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff07 	bl	8001400 <wait_spi_tx_event>
    
  }
  return len;
 80015f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000290 	.word	0x20000290
 8001604:	48001000 	.word	0x48001000
 8001608:	2000028c 	.word	0x2000028c
 800160c:	20000224 	.word	0x20000224

08001610 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f003 f9bf 	bl	800499c <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d122      	bne.n	8001686 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <SPI_WIFI_DelayUs+0x98>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1f      	ldr	r2, [pc, #124]	@ (80016c4 <SPI_WIFI_DelayUs+0x9c>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	099b      	lsrs	r3, r3, #6
 800164c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8001656:	f003 f995 	bl	8004984 <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 800165c:	e002      	b.n	8001664 <SPI_WIFI_DelayUs+0x3c>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3b01      	subs	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 800166a:	f003 f98b 	bl	8004984 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001676:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001678:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SPI_WIFI_DelayUs+0x5e>
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <SPI_WIFI_DelayUs+0x98>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a0f      	ldr	r2, [pc, #60]	@ (80016c8 <SPI_WIFI_DelayUs+0xa0>)
 800168c:	fba2 2303 	umull	r2, r3, r2, r3
 8001690:	0c9a      	lsrs	r2, r3, #18
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <SPI_WIFI_DelayUs+0x94>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80016a6:	e002      	b.n	80016ae <SPI_WIFI_DelayUs+0x86>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <SPI_WIFI_DelayUs+0x80>
  return;
 80016b4:	bf00      	nop
}
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000294 	.word	0x20000294
 80016c0:	20000018 	.word	0x20000018
 80016c4:	10624dd3 	.word	0x10624dd3
 80016c8:	431bde83 	.word	0x431bde83

080016cc <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_SPI_RxCpltCallback+0x24>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_SPI_RxCpltCallback+0x24>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000288 	.word	0x20000288

080016f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_SPI_TxCpltCallback+0x24>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <HAL_SPI_TxCpltCallback+0x24>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000028c 	.word	0x2000028c

0800171c <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SPI_WIFI_ISR+0x1c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <SPI_WIFI_ISR+0x1c>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
   }
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000290 	.word	0x20000290

0800173c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b090      	sub	sp, #64	@ 0x40
 8001740:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  WIFI_Ecn_t  enRoutreEncryptiontype = WIFI_ECN_WPA2_PSK; // set your Router encryption
 8001742:	2303      	movs	r3, #3
 8001744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t port = 48569;
 8001748:	f64b 53b9 	movw	r3, #48569	@ 0xbdb9
 800174c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Configuracion de Alberto */
  	char pcRouterSSID[] = "MOVISTAR_D0F0"; // Alberto
 800174e:	4b95      	ldr	r3, [pc, #596]	@ (80019a4 <main+0x268>)
 8001750:	f107 041c 	add.w	r4, r7, #28
 8001754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001756:	c407      	stmia	r4!, {r0, r1, r2}
 8001758:	8023      	strh	r3, [r4, #0]
  	char pcRouterPWR[] = "faGAEandMxjdVvMwAqJa"; // Alberto
 800175a:	4b93      	ldr	r3, [pc, #588]	@ (80019a8 <main+0x26c>)
 800175c:	1d3c      	adds	r4, r7, #4
 800175e:	461d      	mov	r5, r3
 8001760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001768:	6020      	str	r0, [r4, #0]
 800176a:	3404      	adds	r4, #4
 800176c:	7021      	strb	r1, [r4, #0]
  	pu8RemoteIpv4[0] = 192;
 800176e:	4b8f      	ldr	r3, [pc, #572]	@ (80019ac <main+0x270>)
 8001770:	22c0      	movs	r2, #192	@ 0xc0
 8001772:	701a      	strb	r2, [r3, #0]
  	pu8RemoteIpv4[1] = 168;
 8001774:	4b8d      	ldr	r3, [pc, #564]	@ (80019ac <main+0x270>)
 8001776:	22a8      	movs	r2, #168	@ 0xa8
 8001778:	705a      	strb	r2, [r3, #1]
  	pu8RemoteIpv4[2] = 1;
 800177a:	4b8c      	ldr	r3, [pc, #560]	@ (80019ac <main+0x270>)
 800177c:	2201      	movs	r2, #1
 800177e:	709a      	strb	r2, [r3, #2]
  	pu8RemoteIpv4[3] = 35;
 8001780:	4b8a      	ldr	r3, [pc, #552]	@ (80019ac <main+0x270>)
 8001782:	2223      	movs	r2, #35	@ 0x23
 8001784:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001786:	f003 f895 	bl	80048b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178a:	f000 f94b 	bl	8001a24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800178e:	f000 f9ab 	bl	8001ae8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001792:	f000 fcdd 	bl	8002150 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001796:	f000 f9db 	bl	8001b50 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800179a:	f000 fa3d 	bl	8001c18 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800179e:	f000 fa73 	bl	8001c88 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017a2:	f000 fab1 	bl	8001d08 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80017a6:	f000 faef 	bl	8001d88 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 80017aa:	f000 fb59 	bl	8001e60 <MX_SPI1_Init>
  MX_UART4_Init();
 80017ae:	f000 fb95 	bl	8001edc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017b2:	f000 fbdf 	bl	8001f74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017b6:	f000 fc29 	bl	800200c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017ba:	f000 fc75 	bl	80020a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 80017be:	f000 fcbf 	bl	8002140 <MX_USB_OTG_FS_USB_Init>
  BSP_TSENSOR_Init(); // Initialize Temperature sensor
 80017c2:	f001 ff87 	bl	80036d4 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init(); // Initialize Humidity sensor
 80017c6:	f001 ff57 	bl	8003678 <BSP_HSENSOR_Init>
  MX_RNG_Init();
 80017ca:	f000 fb33 	bl	8001e34 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  // WiFi module initialization
  printf("*  WiFi module initialization *\n\r");
 80017ce:	4878      	ldr	r0, [pc, #480]	@ (80019b0 <main+0x274>)
 80017d0:	f00c fb0a 	bl	800dde8 <iprintf>
  if(WIFI_Init() == WIFI_STATUS_OK){
 80017d4:	f00a fb5c 	bl	800be90 <WIFI_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8099 	bne.w	8001912 <main+0x1d6>
	  printf("WIFI initialization success\n\n\r");
 80017e0:	4874      	ldr	r0, [pc, #464]	@ (80019b4 <main+0x278>)
 80017e2:	f00c fb01 	bl	800dde8 <iprintf>
	  printf("************************ WiFi Module infos ************************\n\n\r");
 80017e6:	4874      	ldr	r0, [pc, #464]	@ (80019b8 <main+0x27c>)
 80017e8:	f00c fafe 	bl	800dde8 <iprintf>
	  // get module name
	  if(WIFI_GetModuleName(pcWifiModuleName) == WIFI_STATUS_OK){
 80017ec:	4873      	ldr	r0, [pc, #460]	@ (80019bc <main+0x280>)
 80017ee:	f00a fc75 	bl	800c0dc <WIFI_GetModuleName>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d104      	bne.n	8001802 <main+0xc6>
		  printf("Wifi Module Name: %s\n\r",pcWifiModuleName);
 80017f8:	4970      	ldr	r1, [pc, #448]	@ (80019bc <main+0x280>)
 80017fa:	4871      	ldr	r0, [pc, #452]	@ (80019c0 <main+0x284>)
 80017fc:	f00c faf4 	bl	800dde8 <iprintf>
 8001800:	e002      	b.n	8001808 <main+0xcc>
	  }else{
		  printf(">> couldn't get Wifi module name\n\r");
 8001802:	4870      	ldr	r0, [pc, #448]	@ (80019c4 <main+0x288>)
 8001804:	f00c faf0 	bl	800dde8 <iprintf>
	  }
	  // get module ID
	  if(WIFI_GetModuleID(pcWifiModuleId) == WIFI_STATUS_OK){
 8001808:	486f      	ldr	r0, [pc, #444]	@ (80019c8 <main+0x28c>)
 800180a:	f00a fc53 	bl	800c0b4 <WIFI_GetModuleID>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <main+0xe2>
		  printf("Wifi Module ID: %s\n\r",pcWifiModuleId);
 8001814:	496c      	ldr	r1, [pc, #432]	@ (80019c8 <main+0x28c>)
 8001816:	486d      	ldr	r0, [pc, #436]	@ (80019cc <main+0x290>)
 8001818:	f00c fae6 	bl	800dde8 <iprintf>
 800181c:	e002      	b.n	8001824 <main+0xe8>
	  }else{
		  printf(">> couldn't get Wifi module ID\n\r");
 800181e:	486c      	ldr	r0, [pc, #432]	@ (80019d0 <main+0x294>)
 8001820:	f00c fae2 	bl	800dde8 <iprintf>
	  }
	  // get module Firmware revision
	  if(WIFI_GetModuleFwRevision(pcWifiModuleFwRev) == WIFI_STATUS_OK){
 8001824:	486b      	ldr	r0, [pc, #428]	@ (80019d4 <main+0x298>)
 8001826:	f00a fc31 	bl	800c08c <WIFI_GetModuleFwRevision>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d104      	bne.n	800183a <main+0xfe>
		  printf("Wifi Module Firmware revision: %s\n\r",pcWifiModuleFwRev);
 8001830:	4968      	ldr	r1, [pc, #416]	@ (80019d4 <main+0x298>)
 8001832:	4869      	ldr	r0, [pc, #420]	@ (80019d8 <main+0x29c>)
 8001834:	f00c fad8 	bl	800dde8 <iprintf>
 8001838:	e002      	b.n	8001840 <main+0x104>
	  }else{
		  printf(">> couldn't get Wifi module Firmware revision\n\r");
 800183a:	4868      	ldr	r0, [pc, #416]	@ (80019dc <main+0x2a0>)
 800183c:	f00c fad4 	bl	800dde8 <iprintf>
	  }
	  // get module Mac@
	  if(WIFI_GetMAC_Address(pu8WifiModuleMacAddress) == WIFI_STATUS_OK){
 8001840:	4867      	ldr	r0, [pc, #412]	@ (80019e0 <main+0x2a4>)
 8001842:	f00a fb73 	bl	800bf2c <WIFI_GetMAC_Address>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11a      	bne.n	8001882 <main+0x146>
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 800184c:	4b64      	ldr	r3, [pc, #400]	@ (80019e0 <main+0x2a4>)
 800184e:	781b      	ldrb	r3, [r3, #0]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001850:	4618      	mov	r0, r3
				  pu8WifiModuleMacAddress[0],pu8WifiModuleMacAddress[1],
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <main+0x2a4>)
 8001854:	785b      	ldrb	r3, [r3, #1]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001856:	461c      	mov	r4, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 8001858:	4b61      	ldr	r3, [pc, #388]	@ (80019e0 <main+0x2a4>)
 800185a:	789b      	ldrb	r3, [r3, #2]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 800185c:	461d      	mov	r5, r3
				  pu8WifiModuleMacAddress[2],pu8WifiModuleMacAddress[3],
 800185e:	4b60      	ldr	r3, [pc, #384]	@ (80019e0 <main+0x2a4>)
 8001860:	78db      	ldrb	r3, [r3, #3]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001862:	461a      	mov	r2, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <main+0x2a4>)
 8001866:	791b      	ldrb	r3, [r3, #4]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 8001868:	4619      	mov	r1, r3
				  pu8WifiModuleMacAddress[4],pu8WifiModuleMacAddress[5]);
 800186a:	4b5d      	ldr	r3, [pc, #372]	@ (80019e0 <main+0x2a4>)
 800186c:	795b      	ldrb	r3, [r3, #5]
		  printf("Wifi Module MAC address: %02X-%02X-%02X-%02X-%02X-%02X\n\r",
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	9101      	str	r1, [sp, #4]
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	462b      	mov	r3, r5
 8001876:	4622      	mov	r2, r4
 8001878:	4601      	mov	r1, r0
 800187a:	485a      	ldr	r0, [pc, #360]	@ (80019e4 <main+0x2a8>)
 800187c:	f00c fab4 	bl	800dde8 <iprintf>
 8001880:	e002      	b.n	8001888 <main+0x14c>
	  }else{
		  printf(">> couldn't get Wifi module MAC address\n\r");
 8001882:	4859      	ldr	r0, [pc, #356]	@ (80019e8 <main+0x2ac>)
 8001884:	f00c fab0 	bl	800dde8 <iprintf>
	  }
	  printf("*******************************************************************\n\r");
 8001888:	4858      	ldr	r0, [pc, #352]	@ (80019ec <main+0x2b0>)
 800188a:	f00c faad 	bl	800dde8 <iprintf>

	  // Connection to AP
	  if(WIFI_Connect(pcRouterSSID, pcRouterPWR, enRoutreEncryptiontype) == WIFI_STATUS_OK){
 800188e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001892:	1d39      	adds	r1, r7, #4
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4618      	mov	r0, r3
 800189a:	f00a fb25 	bl	800bee8 <WIFI_Connect>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d132      	bne.n	800190a <main+0x1ce>
		  printf("Successfully connected to router %s\n\r", pcRouterSSID);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4851      	ldr	r0, [pc, #324]	@ (80019f0 <main+0x2b4>)
 80018ac:	f00c fa9c 	bl	800dde8 <iprintf>
		  if(WIFI_GetIP_Address(pu8LocalIpv4) == WIFI_STATUS_OK){ // get ip address
 80018b0:	4850      	ldr	r0, [pc, #320]	@ (80019f4 <main+0x2b8>)
 80018b2:	f00a fb51 	bl	800bf58 <WIFI_GetIP_Address>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10f      	bne.n	80018dc <main+0x1a0>
			  printf("Device IPv4: %u.%u.%u.%u\n\r", pu8LocalIpv4[0],pu8LocalIpv4[1], pu8LocalIpv4[2],pu8LocalIpv4[3]);
 80018bc:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <main+0x2b8>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4b4c      	ldr	r3, [pc, #304]	@ (80019f4 <main+0x2b8>)
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <main+0x2b8>)
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	4618      	mov	r0, r3
 80018ce:	4b49      	ldr	r3, [pc, #292]	@ (80019f4 <main+0x2b8>)
 80018d0:	78db      	ldrb	r3, [r3, #3]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4603      	mov	r3, r0
 80018d6:	4848      	ldr	r0, [pc, #288]	@ (80019f8 <main+0x2bc>)
 80018d8:	f00c fa86 	bl	800dde8 <iprintf>
		  }

		  // Open TCP client
		  if(WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", pu8RemoteIpv4, port , 0) == WIFI_STATUS_OK){
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <main+0x270>)
 80018e6:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <main+0x2c0>)
 80018e8:	2100      	movs	r1, #0
 80018ea:	2000      	movs	r0, #0
 80018ec:	f00a fb50 	bl	800bf90 <WIFI_OpenClientConnection>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <main+0x1c6>
			  printf("TCP client successfully created. \n\r");
 80018f6:	4842      	ldr	r0, [pc, #264]	@ (8001a00 <main+0x2c4>)
 80018f8:	f00c fa76 	bl	800dde8 <iprintf>
			  //sendData(1); // send initial data.
			  preSendData();
 80018fc:	f000 fe22 	bl	8002544 <preSendData>
 8001900:	e00b      	b.n	800191a <main+0x1de>
		  }else{
			  printf(">> couldn't create TCP client\n\r");
 8001902:	4840      	ldr	r0, [pc, #256]	@ (8001a04 <main+0x2c8>)
 8001904:	f00c fa70 	bl	800dde8 <iprintf>
 8001908:	e007      	b.n	800191a <main+0x1de>
		  }
	  }else{
		  printf(">> couldn't connect to router\n\r");
 800190a:	483f      	ldr	r0, [pc, #252]	@ (8001a08 <main+0x2cc>)
 800190c:	f00c fa6c 	bl	800dde8 <iprintf>
 8001910:	e003      	b.n	800191a <main+0x1de>
	  }
  }else{
	  printf(">> Init WIFI: Failed\n\r");
 8001912:	483e      	ldr	r0, [pc, #248]	@ (8001a0c <main+0x2d0>)
 8001914:	f00c fa68 	bl	800dde8 <iprintf>
 8001918:	e03f      	b.n	800199a <main+0x25e>
//    gTemperature += 0.5f;
//    gHumidity += 0.5f;
//    gLight += 0.5f;
	//HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
    readSensorValues();
 800191a:	f000 ff4d 	bl	80027b8 <readSensorValues>

    if(gLight>20)
 800191e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a10 <main+0x2d4>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd06      	ble.n	8001940 <main+0x204>
    {
    	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET); // Encender el LED
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001938:	4836      	ldr	r0, [pc, #216]	@ (8001a14 <main+0x2d8>)
 800193a:	f004 ffaf 	bl	800689c <HAL_GPIO_WritePin>
 800193e:	e005      	b.n	800194c <main+0x210>
    }
    else
    {
    	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET); // Apagar el LED
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001946:	4833      	ldr	r0, [pc, #204]	@ (8001a14 <main+0x2d8>)
 8001948:	f004 ffa8 	bl	800689c <HAL_GPIO_WritePin>
    }

    WIFI_Status_t receive_status = WIFI_ReceiveData(0, pu8RxData, sizeof(pu8RxData), &iReceivedDataLength, 5000);
 800194c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4b31      	ldr	r3, [pc, #196]	@ (8001a18 <main+0x2dc>)
 8001954:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001958:	4930      	ldr	r1, [pc, #192]	@ (8001a1c <main+0x2e0>)
 800195a:	2000      	movs	r0, #0
 800195c:	f00a fb74 	bl	800c048 <WIFI_ReceiveData>
 8001960:	4603      	mov	r3, r0
 8001962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	  if(receive_status == WIFI_STATUS_OK){
 8001966:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1d5      	bne.n	800191a <main+0x1de>
		  if(iReceivedDataLength>0){
 800196e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <main+0x2dc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	ddd1      	ble.n	800191a <main+0x1de>
			  //with'/0' set the new message end, in case the new message length is lower than the old message
			  pu8RxData[iReceivedDataLength] = '\0';
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <main+0x2dc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a28      	ldr	r2, [pc, #160]	@ (8001a1c <main+0x2e0>)
 800197c:	2100      	movs	r1, #0
 800197e:	54d1      	strb	r1, [r2, r3]

			  printf("Received %d bytes of data.\n\r", iReceivedDataLength);
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <main+0x2dc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <main+0x2e4>)
 8001988:	f00c fa2e 	bl	800dde8 <iprintf>
        processReceivedData(pu8RxData, iReceivedDataLength); // Process the received data
 800198c:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <main+0x2dc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4822      	ldr	r0, [pc, #136]	@ (8001a1c <main+0x2e0>)
 8001994:	f000 fd28 	bl	80023e8 <processReceivedData>
  while (1){
 8001998:	e7bf      	b.n	800191a <main+0x1de>
	  return;
 800199a:	bf00      	nop


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800199c:	4618      	mov	r0, r3
 800199e:	3730      	adds	r7, #48	@ 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	08010d04 	.word	0x08010d04
 80019a8:	08010d14 	.word	0x08010d14
 80019ac:	20000820 	.word	0x20000820
 80019b0:	08010a10 	.word	0x08010a10
 80019b4:	08010a34 	.word	0x08010a34
 80019b8:	08010a54 	.word	0x08010a54
 80019bc:	200006e8 	.word	0x200006e8
 80019c0:	08010a9c 	.word	0x08010a9c
 80019c4:	08010ab4 	.word	0x08010ab4
 80019c8:	2000074c 	.word	0x2000074c
 80019cc:	08010ad8 	.word	0x08010ad8
 80019d0:	08010af0 	.word	0x08010af0
 80019d4:	200007b0 	.word	0x200007b0
 80019d8:	08010b14 	.word	0x08010b14
 80019dc:	08010b38 	.word	0x08010b38
 80019e0:	20000814 	.word	0x20000814
 80019e4:	08010b68 	.word	0x08010b68
 80019e8:	08010ba4 	.word	0x08010ba4
 80019ec:	08010bd0 	.word	0x08010bd0
 80019f0:	08010c18 	.word	0x08010c18
 80019f4:	2000081c 	.word	0x2000081c
 80019f8:	08010c40 	.word	0x08010c40
 80019fc:	08010c5c 	.word	0x08010c5c
 8001a00:	08010c68 	.word	0x08010c68
 8001a04:	08010c8c 	.word	0x08010c8c
 8001a08:	08010cac 	.word	0x08010cac
 8001a0c:	08010ccc 	.word	0x08010ccc
 8001a10:	20000008 	.word	0x20000008
 8001a14:	48000400 	.word	0x48000400
 8001a18:	20000a18 	.word	0x20000a18
 8001a1c:	20000824 	.word	0x20000824
 8001a20:	08010ce4 	.word	0x08010ce4

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b096      	sub	sp, #88	@ 0x58
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2244      	movs	r2, #68	@ 0x44
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00c fb50 	bl	800e0d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001a46:	2000      	movs	r0, #0
 8001a48:	f006 fa88 	bl	8007f5c <HAL_PWREx_ControlVoltageScaling>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001a52:	f000 ff9b 	bl	800298c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a56:	f006 fa51 	bl	8007efc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <SystemClock_Config+0xc0>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a60:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <SystemClock_Config+0xc0>)
 8001a62:	f023 0318 	bic.w	r3, r3, #24
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a6a:	2314      	movs	r3, #20
 8001a6c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a7a:	2360      	movs	r3, #96	@ 0x60
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a82:	2301      	movs	r3, #1
 8001a84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001a8a:	233c      	movs	r3, #60	@ 0x3c
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 fb00 	bl	80080a4 <HAL_RCC_OscConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001aaa:	f000 ff6f 	bl	800298c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aae:	230f      	movs	r3, #15
 8001ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f006 ff06 	bl	80088d8 <HAL_RCC_ClockConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001ad2:	f000 ff5b 	bl	800298c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ad6:	f007 fced 	bl	80094b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ada:	bf00      	nop
 8001adc:	3758      	adds	r7, #88	@ 0x58
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a6      	sub	sp, #152	@ 0x98
 8001aec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2294      	movs	r2, #148	@ 0x94
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00c faef 	bl	800e0d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 8001afa:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 8001afe:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b08:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b16:	2301      	movs	r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b1e:	2318      	movs	r3, #24
 8001b20:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001b2e:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001b32:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 f98c 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001b42:	f000 ff23 	bl	800298c <Error_Handler>
  }
}
 8001b46:	bf00      	nop
 8001b48:	3798      	adds	r7, #152	@ 0x98
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
 8001b64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b66:	4b29      	ldr	r3, [pc, #164]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b68:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <MX_ADC1_Init+0xc0>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b72:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b86:	2204      	movs	r2, #4
 8001b88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b90:	4b1e      	ldr	r3, [pc, #120]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001b96:	4b1d      	ldr	r3, [pc, #116]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc6:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bc8:	f003 f934 	bl	8004e34 <HAL_ADC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001bd2:	f000 fedb 	bl	800298c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c14 <MX_ADC1_Init+0xc4>)
 8001bd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001be2:	237f      	movs	r3, #127	@ 0x7f
 8001be4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001be6:	2304      	movs	r3, #4
 8001be8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bee:	463b      	mov	r3, r7
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <MX_ADC1_Init+0xbc>)
 8001bf4:	f003 fb9c 	bl	8005330 <HAL_ADC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001bfe:	f000 fec5 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000298 	.word	0x20000298
 8001c10:	50040000 	.word	0x50040000
 8001c14:	04300002 	.word	0x04300002

08001c18 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c1e:	4a19      	ldr	r2, [pc, #100]	@ (8001c84 <MX_DFSDM1_Init+0x6c>)
 8001c20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c30:	2202      	movs	r2, #2
 8001c32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c4e:	2204      	movs	r2, #4
 8001c50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_DFSDM1_Init+0x68>)
 8001c6c:	f004 fa0e 	bl	800608c <HAL_DFSDM_ChannelInit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001c76:	f000 fe89 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000300 	.word	0x20000300
 8001c84:	40016040 	.word	0x40016040

08001c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <MX_I2C1_Init+0x78>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <MX_I2C1_Init+0x7c>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc2:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cc4:	f004 fe1a 	bl	80068fc <HAL_I2C_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cce:	f000 fe5d 	bl	800298c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4809      	ldr	r0, [pc, #36]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001cd6:	f005 fba3 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ce0:	f000 fe54 	bl	800298c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_I2C1_Init+0x74>)
 8001ce8:	f005 fbe5 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001cf2:	f000 fe4b 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000338 	.word	0x20000338
 8001d00:	40005400 	.word	0x40005400
 8001d04:	307075b1 	.word	0x307075b1

08001d08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <MX_I2C2_Init+0x78>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <MX_I2C2_Init+0x7c>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d18:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d30:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d42:	480e      	ldr	r0, [pc, #56]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d44:	f004 fdda 	bl	80068fc <HAL_I2C_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d4e:	f000 fe1d 	bl	800298c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d52:	2100      	movs	r1, #0
 8001d54:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d56:	f005 fb63 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d60:	f000 fe14 	bl	800298c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d64:	2100      	movs	r1, #0
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <MX_I2C2_Init+0x74>)
 8001d68:	f005 fba5 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d72:	f000 fe0b 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000038c 	.word	0x2000038c
 8001d80:	40005800 	.word	0x40005800
 8001d84:	307075b1 	.word	0x307075b1

08001d88 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001d9e:	4a24      	ldr	r2, [pc, #144]	@ (8001e30 <MX_OCTOSPI1_Init+0xa8>)
 8001da0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001da8:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001dae:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001db0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001db4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001db8:	2220      	movs	r2, #32
 8001dba:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001dce:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001dda:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001de8:	2208      	movs	r2, #8
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001dec:	480f      	ldr	r0, [pc, #60]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001dee:	f005 fbaf 	bl	8007550 <HAL_OSPI_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001df8:	f000 fdc8 	bl	800298c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001e04:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	4619      	mov	r1, r3
 8001e12:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <MX_OCTOSPI1_Init+0xa4>)
 8001e14:	f005 fc56 	bl	80076c4 <HAL_OSPIM_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001e1e:	f000 fdb5 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200003e0 	.word	0x200003e0
 8001e30:	a0001000 	.word	0xa0001000

08001e34 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <MX_RNG_Init+0x24>)
 8001e3a:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <MX_RNG_Init+0x28>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <MX_RNG_Init+0x24>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <MX_RNG_Init+0x24>)
 8001e46:	f007 fd2d 	bl	80098a4 <HAL_RNG_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001e50:	f000 fd9c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000430 	.word	0x20000430
 8001e5c:	50060800 	.word	0x50060800

08001e60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed8 <MX_SPI1_Init+0x78>)
 8001e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e7a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e96:	2208      	movs	r2, #8
 8001e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001eae:	2207      	movs	r2, #7
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001eba:	2208      	movs	r2, #8
 8001ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_SPI1_Init+0x74>)
 8001ec0:	f007 fd52 	bl	8009968 <HAL_SPI_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001eca:	f000 fd5f 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000444 	.word	0x20000444
 8001ed8:	40013000 	.word	0x40013000

08001edc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001ee2:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <MX_UART4_Init+0x94>)
 8001ee4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001ee8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f02:	220c      	movs	r2, #12
 8001f04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f24:	4811      	ldr	r0, [pc, #68]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f26:	f009 f844 	bl	800afb2 <HAL_UART_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f30:	f000 fd2c 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f34:	2100      	movs	r1, #0
 8001f36:	480d      	ldr	r0, [pc, #52]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f38:	f009 fee0 	bl	800bcfc <HAL_UARTEx_SetTxFifoThreshold>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f42:	f000 fd23 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f4a:	f009 ff15 	bl	800bd78 <HAL_UARTEx_SetRxFifoThreshold>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f54:	f000 fd1a 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_UART4_Init+0x90>)
 8001f5a:	f009 fe96 	bl	800bc8a <HAL_UARTEx_DisableFifoMode>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001f64:	f000 fd12 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200004a8 	.word	0x200004a8
 8001f70:	40004c00 	.word	0x40004c00

08001f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f78:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f7a:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <MX_USART1_UART_Init+0x94>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fbc:	4811      	ldr	r0, [pc, #68]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fbe:	f008 fff8 	bl	800afb2 <HAL_UART_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fc8:	f000 fce0 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	480d      	ldr	r0, [pc, #52]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fd0:	f009 fe94 	bl	800bcfc <HAL_UARTEx_SetTxFifoThreshold>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fda:	f000 fcd7 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4808      	ldr	r0, [pc, #32]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001fe2:	f009 fec9 	bl	800bd78 <HAL_UARTEx_SetRxFifoThreshold>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fec:	f000 fcce 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <MX_USART1_UART_Init+0x90>)
 8001ff2:	f009 fe4a 	bl	800bc8a <HAL_UARTEx_DisableFifoMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ffc:	f000 fcc6 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000538 	.word	0x20000538
 8002008:	40013800 	.word	0x40013800

0800200c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002010:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002012:	4a24      	ldr	r2, [pc, #144]	@ (80020a4 <MX_USART2_UART_Init+0x98>)
 8002014:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b1b      	ldr	r3, [pc, #108]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002036:	4b1a      	ldr	r3, [pc, #104]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002038:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800203c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800203e:	4b18      	ldr	r3, [pc, #96]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002056:	4812      	ldr	r0, [pc, #72]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 8002058:	f008 ffab 	bl	800afb2 <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002062:	f000 fc93 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002066:	2100      	movs	r1, #0
 8002068:	480d      	ldr	r0, [pc, #52]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 800206a:	f009 fe47 	bl	800bcfc <HAL_UARTEx_SetTxFifoThreshold>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002074:	f000 fc8a 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002078:	2100      	movs	r1, #0
 800207a:	4809      	ldr	r0, [pc, #36]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 800207c:	f009 fe7c 	bl	800bd78 <HAL_UARTEx_SetRxFifoThreshold>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8002086:	f000 fc81 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_USART2_UART_Init+0x94>)
 800208c:	f009 fdfd 	bl	800bc8a <HAL_UARTEx_DisableFifoMode>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8002096:	f000 fc79 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200005c8 	.word	0x200005c8
 80020a4:	40004400 	.word	0x40004400

080020a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020ac:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <MX_USART3_UART_Init+0x94>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020b2:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ea:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f0:	4811      	ldr	r0, [pc, #68]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 80020f2:	f008 ff5e 	bl	800afb2 <HAL_UART_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80020fc:	f000 fc46 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	480d      	ldr	r0, [pc, #52]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 8002104:	f009 fdfa 	bl	800bcfc <HAL_UARTEx_SetTxFifoThreshold>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800210e:	f000 fc3d 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002112:	2100      	movs	r1, #0
 8002114:	4808      	ldr	r0, [pc, #32]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 8002116:	f009 fe2f 	bl	800bd78 <HAL_UARTEx_SetRxFifoThreshold>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002120:	f000 fc34 	bl	800298c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	@ (8002138 <MX_USART3_UART_Init+0x90>)
 8002126:	f009 fdb0 	bl	800bc8a <HAL_UARTEx_DisableFifoMode>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002130:	f000 fc2c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000658 	.word	0x20000658
 800213c:	40004800 	.word	0x40004800

08002140 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	4b9b      	ldr	r3, [pc, #620]	@ (80023d4 <MX_GPIO_Init+0x284>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a9a      	ldr	r2, [pc, #616]	@ (80023d4 <MX_GPIO_Init+0x284>)
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b98      	ldr	r3, [pc, #608]	@ (80023d4 <MX_GPIO_Init+0x284>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b95      	ldr	r3, [pc, #596]	@ (80023d4 <MX_GPIO_Init+0x284>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a94      	ldr	r2, [pc, #592]	@ (80023d4 <MX_GPIO_Init+0x284>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <MX_GPIO_Init+0x284>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002196:	4b8f      	ldr	r3, [pc, #572]	@ (80023d4 <MX_GPIO_Init+0x284>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	4a8e      	ldr	r2, [pc, #568]	@ (80023d4 <MX_GPIO_Init+0x284>)
 800219c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a2:	4b8c      	ldr	r3, [pc, #560]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b89      	ldr	r3, [pc, #548]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a88      	ldr	r2, [pc, #544]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b86      	ldr	r3, [pc, #536]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	4b83      	ldr	r3, [pc, #524]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	4a82      	ldr	r2, [pc, #520]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d2:	4b80      	ldr	r3, [pc, #512]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b7d      	ldr	r3, [pc, #500]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a7c      	ldr	r2, [pc, #496]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b7a      	ldr	r3, [pc, #488]	@ (80023d4 <MX_GPIO_Init+0x284>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5|GPIO_PIN_14|SPBTLE_RF_RST_Pin
 80021f6:	2200      	movs	r2, #0
 80021f8:	f24c 113c 	movw	r1, #49468	@ 0xc13c
 80021fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002200:	f004 fb4c 	bl	800689c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8002204:	2200      	movs	r2, #0
 8002206:	f24d 0134 	movw	r1, #53300	@ 0xd034
 800220a:	4873      	ldr	r0, [pc, #460]	@ (80023d8 <MX_GPIO_Init+0x288>)
 800220c:	f004 fb46 	bl	800689c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f242 0183 	movw	r1, #8323	@ 0x2083
 8002216:	4871      	ldr	r0, [pc, #452]	@ (80023dc <MX_GPIO_Init+0x28c>)
 8002218:	f004 fb40 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002222:	486f      	ldr	r0, [pc, #444]	@ (80023e0 <MX_GPIO_Init+0x290>)
 8002224:	f004 fb3a 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ST25DV04K_RF_DISABLE_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin;
 8002228:	2304      	movs	r3, #4
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST25DV04K_RF_DISABLE_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	4869      	ldr	r0, [pc, #420]	@ (80023e4 <MX_GPIO_Init+0x294>)
 8002240:	f004 f890 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin;
 8002244:	2378      	movs	r3, #120	@ 0x78
 8002246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002248:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800224c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	4862      	ldr	r0, [pc, #392]	@ (80023e4 <MX_GPIO_Init+0x294>)
 800225a:	f004 f883 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800225e:	f44f 5306 	mov.w	r3, #8576	@ 0x2180
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002264:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	485a      	ldr	r0, [pc, #360]	@ (80023e0 <MX_GPIO_Init+0x290>)
 8002276:	f004 f875 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|GPIO_PIN_5|GPIO_PIN_14|SPBTLE_RF_RST_Pin
 800227a:	f24c 133c 	movw	r3, #49468	@ 0xc13c
 800227e:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002280:	2301      	movs	r3, #1
 8002282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002296:	f004 f865 	bl	8006364 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);*/

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800229a:	2301      	movs	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800229e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	484a      	ldr	r0, [pc, #296]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80022b0:	f004 f858 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80022b4:	2302      	movs	r3, #2
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022c4:	2302      	movs	r3, #2
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4842      	ldr	r0, [pc, #264]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80022d0:	f004 f848 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 80022d4:	f24d 0334 	movw	r3, #53300	@ 0xd034
 80022d8:	61fb      	str	r3, [r7, #28]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022da:	2301      	movs	r3, #1
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	483a      	ldr	r0, [pc, #232]	@ (80023d8 <MX_GPIO_Init+0x288>)
 80022ee:	f004 f839 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80022f2:	f64d 4304 	movw	r3, #56324	@ 0xdc04
 80022f6:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	4619      	mov	r1, r3
 8002308:	4834      	ldr	r0, [pc, #208]	@ (80023dc <MX_GPIO_Init+0x28c>)
 800230a:	f004 f82b 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 800230e:	f242 0383 	movw	r3, #8323	@ 0x2083
 8002312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002314:	2301      	movs	r3, #1
 8002316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	482d      	ldr	r0, [pc, #180]	@ (80023dc <MX_GPIO_Init+0x28c>)
 8002328:	f004 f81c 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800232c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	2301      	movs	r3, #1
 8002334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	4619      	mov	r1, r3
 8002344:	4826      	ldr	r0, [pc, #152]	@ (80023e0 <MX_GPIO_Init+0x290>)
 8002346:	f004 f80d 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800234a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002362:	f003 ffff 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002366:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800236a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	2302      	movs	r3, #2
 800236e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002378:	230a      	movs	r3, #10
 800237a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237c:	f107 031c 	add.w	r3, r7, #28
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f003 ffed 	bl	8006364 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800238a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800238e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800239c:	2306      	movs	r3, #6
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <MX_GPIO_Init+0x290>)
 80023a8:	f003 ffdc 	bl	8006364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2017      	movs	r0, #23
 80023b2:	f003 fe34 	bl	800601e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023b6:	2017      	movs	r0, #23
 80023b8:	f003 fe4d 	bl	8006056 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	2028      	movs	r0, #40	@ 0x28
 80023c2:	f003 fe2c 	bl	800601e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023c6:	2028      	movs	r0, #40	@ 0x28
 80023c8:	f003 fe45 	bl	8006056 <HAL_NVIC_EnableIRQ>

}
 80023cc:	bf00      	nop
 80023ce:	3730      	adds	r7, #48	@ 0x30
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	48000400 	.word	0x48000400
 80023dc:	48000c00 	.word	0x48000c00
 80023e0:	48000800 	.word	0x48000800
 80023e4:	48001000 	.word	0x48001000

080023e8 <processReceivedData>:

/* USER CODE BEGIN 4 */
void processReceivedData(uint8_t* data, int dataLength) {
 80023e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ec:	b09a      	sub	sp, #104	@ 0x68
 80023ee:	af04      	add	r7, sp, #16
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    MessageType messageType = (MessageType)data[0]; // First byte is the message type
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    switch (messageType) {
 80023fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002400:	2b04      	cmp	r3, #4
 8002402:	d87b      	bhi.n	80024fc <processReceivedData+0x114>
 8002404:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <processReceivedData+0x24>)
 8002406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240a:	bf00      	nop
 800240c:	08002421 	.word	0x08002421
 8002410:	080024fd 	.word	0x080024fd
 8002414:	08002461 	.word	0x08002461
 8002418:	08002483 	.word	0x08002483
 800241c:	08002455 	.word	0x08002455
        case MESSAGE_TYPE_HELLO: {
            if (dataLength > 1) {
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	dd71      	ble.n	800250a <processReceivedData+0x122>
                HelloMessage hello;
                hello.type = messageType;
 8002426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800242a:	723b      	strb	r3, [r7, #8]
                strncpy(hello.message, (char*)data + 1, sizeof(hello.message) - 1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1c59      	adds	r1, r3, #1
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	3301      	adds	r3, #1
 8002436:	2231      	movs	r2, #49	@ 0x31
 8002438:	4618      	mov	r0, r3
 800243a:	f00b fe67 	bl	800e10c <strncpy>
                hello.message[sizeof(hello.message) - 1] = '\0';  // Ensure null termination
 800243e:	2300      	movs	r3, #0
 8002440:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
                printf("Received message: %s\n\r", hello.message);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	3301      	adds	r3, #1
 800244a:	4619      	mov	r1, r3
 800244c:	4834      	ldr	r0, [pc, #208]	@ (8002520 <processReceivedData+0x138>)
 800244e:	f00b fccb 	bl	800dde8 <iprintf>
            }
            break;
 8002452:	e05a      	b.n	800250a <processReceivedData+0x122>
        }
        case MESSAGE_TYPE_SENSORS_REQUEST: {
        	preSendData();
 8002454:	f000 f876 	bl	8002544 <preSendData>
          printf("Sending data as desired\n\r");
 8002458:	4832      	ldr	r0, [pc, #200]	@ (8002524 <processReceivedData+0x13c>)
 800245a:	f00b fcc5 	bl	800dde8 <iprintf>
          break;
 800245e:	e059      	b.n	8002514 <processReceivedData+0x12c>
        }
        case MESSAGE_TYPE_TIMER_UPDATE: {
            if (dataLength == BUFFER_SIZE_TIMER_UPDATE) {  // 1 (type) + 4 (uint32_t timer)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b05      	cmp	r3, #5
 8002464:	d153      	bne.n	800250e <processReceivedData+0x126>
                TimerUpdateMessage timerUpdate;
                timerUpdate.type = messageType;
 8002466:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800246a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                memcpy(&timerUpdate.timer_value, data + 1, sizeof(timerUpdate.timer_value));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	653b      	str	r3, [r7, #80]	@ 0x50
                // Optionally convert from network to host byte order (if needed)
                //timerUpdate.timer_value = ntohl(timerUpdate.timer_value);
                printf("Received Timer Update: %u seconds\n\r", timerUpdate.timer_value);
 8002476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002478:	4619      	mov	r1, r3
 800247a:	482b      	ldr	r0, [pc, #172]	@ (8002528 <processReceivedData+0x140>)
 800247c:	f00b fcb4 	bl	800dde8 <iprintf>
                // Update the internal timer with timerUpdate.timer_value
            }
            break;
 8002480:	e045      	b.n	800250e <processReceivedData+0x126>
        }
        case MESSAGE_TYPE_THRESHOLD_UPDATE: {
            if (dataLength == BUFFER_SIZE_THRESHOLD_UPDATE) { // 1 (type) + 4 * 3 (float thresholds)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b0d      	cmp	r3, #13
 8002486:	d144      	bne.n	8002512 <processReceivedData+0x12a>
                ThresholdUpdateMessage thresholdUpdate;
                thresholdUpdate.type = messageType;
 8002488:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800248c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                memcpy(&thresholdUpdate.temperature_threshold, data + 1, sizeof(thresholdUpdate.temperature_threshold));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3301      	adds	r3, #1
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	643b      	str	r3, [r7, #64]	@ 0x40
                memcpy(&thresholdUpdate.humidity_threshold, data + 5, sizeof(thresholdUpdate.humidity_threshold));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3305      	adds	r3, #5
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	647b      	str	r3, [r7, #68]	@ 0x44
                memcpy(&thresholdUpdate.light_threshold, data + 9, sizeof(thresholdUpdate.light_threshold));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3309      	adds	r3, #9
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48

                printf("Received Threshold Update: Temp=%.2f, Hum=%.2f, Light=%.2f\n\r",
                       thresholdUpdate.temperature_threshold, thresholdUpdate.humidity_threshold,
 80024a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                printf("Received Threshold Update: Temp=%.2f, Hum=%.2f, Light=%.2f\n\r",
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f864 	bl	8000578 <__aeabi_f2d>
 80024b0:	4680      	mov	r8, r0
 80024b2:	4689      	mov	r9, r1
                       thresholdUpdate.temperature_threshold, thresholdUpdate.humidity_threshold,
 80024b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                printf("Received Threshold Update: Temp=%.2f, Hum=%.2f, Light=%.2f\n\r",
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f85e 	bl	8000578 <__aeabi_f2d>
 80024bc:	4604      	mov	r4, r0
 80024be:	460d      	mov	r5, r1
                       thresholdUpdate.light_threshold);
 80024c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
                printf("Received Threshold Update: Temp=%.2f, Hum=%.2f, Light=%.2f\n\r",
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f858 	bl	8000578 <__aeabi_f2d>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024d0:	e9cd 4500 	strd	r4, r5, [sp]
 80024d4:	4642      	mov	r2, r8
 80024d6:	464b      	mov	r3, r9
 80024d8:	4814      	ldr	r0, [pc, #80]	@ (800252c <processReceivedData+0x144>)
 80024da:	f00b fc85 	bl	800dde8 <iprintf>
                // Check if the internal thresholds are within the limits TODO
                // Update the internal thresholds with these values
                gTempThreshold = thresholdUpdate.temperature_threshold;
 80024de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e0:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <processReceivedData+0x148>)
 80024e2:	6013      	str	r3, [r2, #0]
                gHumThreshold = thresholdUpdate.humidity_threshold;
 80024e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e6:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <processReceivedData+0x14c>)
 80024e8:	6013      	str	r3, [r2, #0]
                gLightThreshold = thresholdUpdate.light_threshold;
 80024ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ec:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <processReceivedData+0x150>)
 80024ee:	6013      	str	r3, [r2, #0]
                printf("Threshold updated.\n\r");
 80024f0:	4812      	ldr	r0, [pc, #72]	@ (800253c <processReceivedData+0x154>)
 80024f2:	f00b fc79 	bl	800dde8 <iprintf>
                preSendData();
 80024f6:	f000 f825 	bl	8002544 <preSendData>
            }
            break;
 80024fa:	e00a      	b.n	8002512 <processReceivedData+0x12a>
        }
        default:
            printf("Unknown message type received: %d\n", messageType);
 80024fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002500:	4619      	mov	r1, r3
 8002502:	480f      	ldr	r0, [pc, #60]	@ (8002540 <processReceivedData+0x158>)
 8002504:	f00b fc70 	bl	800dde8 <iprintf>
            break;
 8002508:	e004      	b.n	8002514 <processReceivedData+0x12c>
            break;
 800250a:	bf00      	nop
 800250c:	e002      	b.n	8002514 <processReceivedData+0x12c>
            break;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <processReceivedData+0x12c>
            break;
 8002512:	bf00      	nop
    }
}
 8002514:	bf00      	nop
 8002516:	3758      	adds	r7, #88	@ 0x58
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800251e:	bf00      	nop
 8002520:	08010d2c 	.word	0x08010d2c
 8002524:	08010d44 	.word	0x08010d44
 8002528:	08010d60 	.word	0x08010d60
 800252c:	08010d84 	.word	0x08010d84
 8002530:	2000000c 	.word	0x2000000c
 8002534:	20000010 	.word	0x20000010
 8002538:	20000014 	.word	0x20000014
 800253c:	08010dc4 	.word	0x08010dc4
 8002540:	08010ddc 	.word	0x08010ddc

08002544 <preSendData>:
cleanup:
    free(str_copy); // Free the allocated memory
    return message;
}

void preSendData(){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  if(gTemperature > gTempThreshold)
 8002548:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <preSendData+0x68>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <preSendData+0x6c>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	dd03      	ble.n	8002566 <preSendData+0x22>
  {
	  sendData(5);
 800255e:	2005      	movs	r0, #5
 8002560:	f000 f830 	bl	80025c4 <sendData>
	  sendData(7);
  }else{
	  sendData(1);
  }

}
 8002564:	e020      	b.n	80025a8 <preSendData+0x64>
  else if(gHumidity > gHumThreshold)
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <preSendData+0x70>)
 8002568:	ed93 7a00 	vldr	s14, [r3]
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <preSendData+0x74>)
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	dd03      	ble.n	8002584 <preSendData+0x40>
	  sendData(6);
 800257c:	2006      	movs	r0, #6
 800257e:	f000 f821 	bl	80025c4 <sendData>
}
 8002582:	e011      	b.n	80025a8 <preSendData+0x64>
  else if (gLight > gLightThreshold)
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <preSendData+0x78>)
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <preSendData+0x7c>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	dd03      	ble.n	80025a2 <preSendData+0x5e>
	  sendData(7);
 800259a:	2007      	movs	r0, #7
 800259c:	f000 f812 	bl	80025c4 <sendData>
}
 80025a0:	e002      	b.n	80025a8 <preSendData+0x64>
	  sendData(1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 f80e 	bl	80025c4 <sendData>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000000 	.word	0x20000000
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	20000004 	.word	0x20000004
 80025b8:	20000010 	.word	0x20000010
 80025bc:	20000008 	.word	0x20000008
 80025c0:	20000014 	.word	0x20000014

080025c4 <sendData>:


void sendData(int type) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	@ 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    mesageSent myMessage;
    myMessage.type = type;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	733b      	strb	r3, [r7, #12]
    myMessage.temp = gTemperature;
 80025d2:	4b17      	ldr	r3, [pc, #92]	@ (8002630 <sendData+0x6c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8c7 300d 	str.w	r3, [r7, #13]
    myMessage.hum = gHumidity;
 80025da:	4b16      	ldr	r3, [pc, #88]	@ (8002634 <sendData+0x70>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8c7 3011 	str.w	r3, [r7, #17]
    myMessage.light = gLight;
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <sendData+0x74>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8c7 3015 	str.w	r3, [r7, #21]
    myMessage.temperature_threshold = gTempThreshold;
 80025ea:	4b14      	ldr	r3, [pc, #80]	@ (800263c <sendData+0x78>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8c7 3019 	str.w	r3, [r7, #25]
    myMessage.humidity_threshold = gHumThreshold;
 80025f2:	4b13      	ldr	r3, [pc, #76]	@ (8002640 <sendData+0x7c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 301d 	str.w	r3, [r7, #29]
    myMessage.light_threshold = gLightThreshold;
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <sendData+0x80>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21

    WIFI_Status_t sendStatus = sendMessage(&myMessage);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f89c 	bl	8002744 <sendMessage>
 800260c:	4603      	mov	r3, r0
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (sendStatus == WIFI_STATUS_OK) {
 8002612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002616:	2b00      	cmp	r3, #0
 8002618:	d103      	bne.n	8002622 <sendData+0x5e>
        printf("Message sent successfully!\n\r");
 800261a:	480b      	ldr	r0, [pc, #44]	@ (8002648 <sendData+0x84>)
 800261c:	f00b fbe4 	bl	800dde8 <iprintf>
    } else {
        printf("Error sending message!\n\r");
    }
}
 8002620:	e002      	b.n	8002628 <sendData+0x64>
        printf("Error sending message!\n\r");
 8002622:	480a      	ldr	r0, [pc, #40]	@ (800264c <sendData+0x88>)
 8002624:	f00b fbe0 	bl	800dde8 <iprintf>
}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	@ 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004
 8002638:	20000008 	.word	0x20000008
 800263c:	2000000c 	.word	0x2000000c
 8002640:	20000010 	.word	0x20000010
 8002644:	20000014 	.word	0x20000014
 8002648:	08010fa4 	.word	0x08010fa4
 800264c:	08010fc4 	.word	0x08010fc4

08002650 <packMessage>:

uint8_t* packMessage(const mesageSent* message, uint32_t* packedSize) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
    // Calculate the size of the packed data
    uint32_t size = sizeof(message->type) +
 800265a:	2319      	movs	r3, #25
 800265c:	613b      	str	r3, [r7, #16]


//    printf("Tamano bueno bueno\n\r",size);
//    printf("The value of my_uint32 is: %x\n\r", size);
    // Allocate memory for the packed data
    uint8_t* packedData = (uint8_t*)malloc(size);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f009 fd50 	bl	800c104 <malloc>
 8002664:	4603      	mov	r3, r0
 8002666:	60fb      	str	r3, [r7, #12]

    if (packedData == NULL) {
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <packMessage+0x2e>
        printf("Error: Memory allocation failed for packed data.\n\r");
 800266e:	4832      	ldr	r0, [pc, #200]	@ (8002738 <packMessage+0xe8>)
 8002670:	f00b fbba 	bl	800dde8 <iprintf>
        *packedSize = 0;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
        return NULL;
 800267a:	2300      	movs	r3, #0
 800267c:	e057      	b.n	800272e <packMessage+0xde>
    }

    // Pack the data into the byte array
    uint8_t* ptr = packedData;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->type, sizeof(message->type));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	701a      	strb	r2, [r3, #0]
    ptr += sizeof(message->type);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	3301      	adds	r3, #1
 800268e:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->temp, sizeof(message->temp));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3301      	adds	r3, #1
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->temp);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	3304      	adds	r3, #4
 80026a0:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->hum, sizeof(message->hum));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3305      	adds	r3, #5
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->hum);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3304      	adds	r3, #4
 80026b2:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->light, sizeof(message->light));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3309      	adds	r3, #9
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->light);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	3304      	adds	r3, #4
 80026c4:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->temperature_threshold, sizeof(message->temperature_threshold));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	330d      	adds	r3, #13
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->temperature_threshold);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3304      	adds	r3, #4
 80026d6:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->humidity_threshold, sizeof(message->humidity_threshold));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3311      	adds	r3, #17
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->humidity_threshold);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3304      	adds	r3, #4
 80026e8:	60bb      	str	r3, [r7, #8]

    memcpy(ptr, &message->light_threshold, sizeof(message->light_threshold));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3315      	adds	r3, #21
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	601a      	str	r2, [r3, #0]
    ptr += sizeof(message->light_threshold);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3304      	adds	r3, #4
 80026fa:	60bb      	str	r3, [r7, #8]

    *packedSize = size;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	601a      	str	r2, [r3, #0]
    printf("Packed Data (Hex): ");
 8002702:	480e      	ldr	r0, [pc, #56]	@ (800273c <packMessage+0xec>)
 8002704:	f00b fb70 	bl	800dde8 <iprintf>
    for (uint32_t i = 0; i < size; i++) {
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e00a      	b.n	8002724 <packMessage+0xd4>
      printf("%02X ", packedData[i]); // %02X formats the byte as a two-digit hexadecimal number with leading zero if needed.
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	4809      	ldr	r0, [pc, #36]	@ (8002740 <packMessage+0xf0>)
 800271a:	f00b fb65 	bl	800dde8 <iprintf>
    for (uint32_t i = 0; i < size; i++) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d3f0      	bcc.n	800270e <packMessage+0xbe>
    }
//	printf("\n\r");
//	printf("YA ESTAMOS AQUIII");
    return packedData;
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	08010fe0 	.word	0x08010fe0
 800273c:	08011014 	.word	0x08011014
 8002740:	08011028 	.word	0x08011028

08002744 <sendMessage>:

// Function to send the packed message
WIFI_Status_t sendMessage(const mesageSent* message) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	6078      	str	r0, [r7, #4]
    uint32_t packedSize;
    uint8_t* packedData = packMessage(message, &packedSize);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff7c 	bl	8002650 <packMessage>
 8002758:	6178      	str	r0, [r7, #20]
    if (packedData == NULL) {
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d104      	bne.n	800276a <sendMessage+0x26>
        printf("Error: packedData es NULL\n");
 8002760:	4812      	ldr	r0, [pc, #72]	@ (80027ac <sendMessage+0x68>)
 8002762:	f00b fba9 	bl	800deb8 <puts>
        return 1;
 8002766:	2301      	movs	r3, #1
 8002768:	e01c      	b.n	80027a4 <sendMessage+0x60>
    }

    if (packedData == NULL || packedSize == 0) {
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <sendMessage+0x32>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <sendMessage+0x36>
        // Handle memory allocation failure
        return WIFI_STATUS_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e014      	b.n	80027a4 <sendMessage+0x60>
    }

    printf("(%ld bytes)\n\r", packedSize); //Print the real Packed Size
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4619      	mov	r1, r3
 800277e:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <sendMessage+0x6c>)
 8002780:	f00b fb32 	bl	800dde8 <iprintf>

    // Assuming WIFI_SendData takes a byte array and its length
    WIFI_Status_t message_status = WIFI_SendData(0, packedData, packedSize, NULL, 5000);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b29a      	uxth	r2, r3
 8002788:	f241 3388 	movw	r3, #5000	@ 0x1388
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	2000      	movs	r0, #0
 8002794:	f009 fc36 	bl	800c004 <WIFI_SendData>
 8002798:	4603      	mov	r3, r0
 800279a:	74fb      	strb	r3, [r7, #19]

    // Free the allocated memory
    free(packedData);
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f009 fcb9 	bl	800c114 <free>

    return message_status;
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	08011030 	.word	0x08011030
 80027b0:	0801104c 	.word	0x0801104c
 80027b4:	00000000 	.word	0x00000000

080027b8 <readSensorValues>:

void readSensorValues(){
 80027b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027bc:	b088      	sub	sp, #32
 80027be:	af04      	add	r7, sp, #16
  float temp_value;
  float hum_value;
  temp_value = BSP_TSENSOR_ReadTemp(); // Read Temperature
 80027c0:	f000 ffa4 	bl	800370c <BSP_TSENSOR_ReadTemp>
 80027c4:	ed87 0a03 	vstr	s0, [r7, #12]
  hum_value = BSP_HSENSOR_ReadHumidity(); // Read Humidity
 80027c8:	f000 ff76 	bl	80036b8 <BSP_HSENSOR_ReadHumidity>
 80027cc:	ed87 0a02 	vstr	s0, [r7, #8]

  HAL_ADC_Start(&hadc1);
 80027d0:	4841      	ldr	r0, [pc, #260]	@ (80028d8 <readSensorValues+0x120>)
 80027d2:	f002 fc7b 	bl	80050cc <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1,100) == HAL_OK)
 80027d6:	2164      	movs	r1, #100	@ 0x64
 80027d8:	483f      	ldr	r0, [pc, #252]	@ (80028d8 <readSensorValues+0x120>)
 80027da:	f002 fd0d 	bl	80051f8 <HAL_ADC_PollForConversion>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d122      	bne.n	800282a <readSensorValues+0x72>
  {

  	uint16_t lightADC = HAL_ADC_GetValue(&hadc1);
 80027e4:	483c      	ldr	r0, [pc, #240]	@ (80028d8 <readSensorValues+0x120>)
 80027e6:	f002 fd96 	bl	8005316 <HAL_ADC_GetValue>
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  	gLight = (lightADC / 4095.0) * 100.0; /* adc= 12 bits, normalize and then goes from 0 to 100*/
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd feaf 	bl	8000554 <__aeabi_i2d>
 80027f6:	a336      	add	r3, pc, #216	@ (adr r3, 80028d0 <readSensorValues+0x118>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fe f83e 	bl	800087c <__aeabi_ddiv>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <readSensorValues+0x124>)
 800280e:	f7fd ff0b 	bl	8000628 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe f9fd 	bl	8000c18 <__aeabi_d2f>
 800281e:	4603      	mov	r3, r0
 8002820:	4a2f      	ldr	r2, [pc, #188]	@ (80028e0 <readSensorValues+0x128>)
 8002822:	6013      	str	r3, [r2, #0]
    HAL_ADC_Stop(&hadc1);
 8002824:	482c      	ldr	r0, [pc, #176]	@ (80028d8 <readSensorValues+0x120>)
 8002826:	f002 fcb4 	bl	8005192 <HAL_ADC_Stop>
  else
  {
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Apagar el LED
  }*/

  printf("Read Sensor values: Temp=%.2f, Hum=%.2f & Light=%.2f\n\r",temp_value, hum_value, gLight);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7fd fea4 	bl	8000578 <__aeabi_f2d>
 8002830:	4680      	mov	r8, r0
 8002832:	4689      	mov	r9, r1
 8002834:	68b8      	ldr	r0, [r7, #8]
 8002836:	f7fd fe9f 	bl	8000578 <__aeabi_f2d>
 800283a:	4604      	mov	r4, r0
 800283c:	460d      	mov	r5, r1
 800283e:	4b28      	ldr	r3, [pc, #160]	@ (80028e0 <readSensorValues+0x128>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe98 	bl	8000578 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002850:	e9cd 4500 	strd	r4, r5, [sp]
 8002854:	4642      	mov	r2, r8
 8002856:	464b      	mov	r3, r9
 8002858:	4822      	ldr	r0, [pc, #136]	@ (80028e4 <readSensorValues+0x12c>)
 800285a:	f00b fac5 	bl	800dde8 <iprintf>

  gTemperature = temp_value;
 800285e:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <readSensorValues+0x130>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6013      	str	r3, [r2, #0]
  gHumidity = hum_value;
 8002864:	4a21      	ldr	r2, [pc, #132]	@ (80028ec <readSensorValues+0x134>)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	6013      	str	r3, [r2, #0]

  /*If threshold reached, send notification*/
  if(gTemperature > gTempThreshold)
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <readSensorValues+0x130>)
 800286c:	ed93 7a00 	vldr	s14, [r3]
 8002870:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <readSensorValues+0x138>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	dd03      	ble.n	8002888 <readSensorValues+0xd0>
  {
	  sendData(5);
 8002880:	2005      	movs	r0, #5
 8002882:	f7ff fe9f 	bl	80025c4 <sendData>
//  int tmpInt2 = trunc(tmpFrac * 100);
//
//  int humInt1 = (int)hum_value;
//  float humFrac = hum_value - humInt1;
//  int humInt2 = trunc(humFrac * 100);
}
 8002886:	e01d      	b.n	80028c4 <readSensorValues+0x10c>
  else if(gHumidity > gHumThreshold)
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <readSensorValues+0x134>)
 800288a:	ed93 7a00 	vldr	s14, [r3]
 800288e:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <readSensorValues+0x13c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	dd03      	ble.n	80028a6 <readSensorValues+0xee>
	  sendData(6);
 800289e:	2006      	movs	r0, #6
 80028a0:	f7ff fe90 	bl	80025c4 <sendData>
}
 80028a4:	e00e      	b.n	80028c4 <readSensorValues+0x10c>
  else if (gLight > gLightThreshold)
 80028a6:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <readSensorValues+0x128>)
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <readSensorValues+0x140>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	dc00      	bgt.n	80028be <readSensorValues+0x106>
}
 80028bc:	e002      	b.n	80028c4 <readSensorValues+0x10c>
	  sendData(7);
 80028be:	2007      	movs	r0, #7
 80028c0:	f7ff fe80 	bl	80025c4 <sendData>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ce:	bf00      	nop
 80028d0:	00000000 	.word	0x00000000
 80028d4:	40affe00 	.word	0x40affe00
 80028d8:	20000298 	.word	0x20000298
 80028dc:	40590000 	.word	0x40590000
 80028e0:	20000008 	.word	0x20000008
 80028e4:	0801105c 	.word	0x0801105c
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000004 	.word	0x20000004
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000010 	.word	0x20000010
 80028f8:	20000014 	.word	0x20000014

080028fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d102      	bne.n	8002912 <HAL_GPIO_EXTI_Callback+0x16>
  {
	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 800290c:	f7fe ff06 	bl	800171c <SPI_WIFI_ISR>
		break;
 8002910:	e000      	b.n	8002914 <HAL_GPIO_EXTI_Callback+0x18>
	}

    default:
    {
      break;
 8002912:	bf00      	nop
    }
  }
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <SPI3_IRQHandler>:

// SPI3 Interruption request handler for the Wifi module (send/receive AT cmd via SPI)
void SPI3_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <SPI3_IRQHandler+0x10>)
 8002922:	f007 fe1d 	bl	800a560 <HAL_SPI_IRQHandler>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000224 	.word	0x20000224

08002930 <__io_putchar>:


PUTCHAR_PROTOTYPE
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 30000))
 8002938:	bf00      	nop
 800293a:	1d39      	adds	r1, r7, #4
 800293c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002940:	2201      	movs	r2, #1
 8002942:	4805      	ldr	r0, [pc, #20]	@ (8002958 <__io_putchar+0x28>)
 8002944:	f008 fb85 	bl	800b052 <HAL_UART_Transmit>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f5      	bne.n	800293a <__io_putchar+0xa>
  {
    ;
  }
  return ch;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000538 	.word	0x20000538

0800295c <__io_getchar>:
GETCHAR_PROTOTYPE
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, 30000))
 8002966:	bf00      	nop
 8002968:	1df9      	adds	r1, r7, #7
 800296a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800296e:	2201      	movs	r2, #1
 8002970:	4805      	ldr	r0, [pc, #20]	@ (8002988 <__io_getchar+0x2c>)
 8002972:	f008 fc04 	bl	800b17e <HAL_UART_Receive>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f5      	bne.n	8002968 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 800297c:	79fb      	ldrb	r3, [r7, #7]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000538 	.word	0x20000538

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <Error_Handler+0x8>

08002998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <HAL_MspInit+0x44>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a2:	4a0e      	ldr	r2, [pc, #56]	@ (80029dc <HAL_MspInit+0x44>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_MspInit+0x44>)
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_MspInit+0x44>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ba:	4a08      	ldr	r2, [pc, #32]	@ (80029dc <HAL_MspInit+0x44>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_MspInit+0x44>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_ADC_MspInit+0x74>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d123      	bne.n	8002a4a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_ADC_MspInit+0x78>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002a32:	233f      	movs	r3, #63	@ 0x3f
 8002a34:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a36:	230b      	movs	r3, #11
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4619      	mov	r1, r3
 8002a44:	4805      	ldr	r0, [pc, #20]	@ (8002a5c <HAL_ADC_MspInit+0x7c>)
 8002a46:	f003 fc8d 	bl	8006364 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	50040000 	.word	0x50040000
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000800 	.word	0x48000800

08002a60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0ae      	sub	sp, #184	@ 0xb8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2294      	movs	r2, #148	@ 0x94
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00b fb29 	bl	800e0d8 <memset>
  if(DFSDM1_Init == 0)
 8002a86:	4b25      	ldr	r3, [pc, #148]	@ (8002b1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d142      	bne.n	8002b14 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 f9d8 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002aaa:	f7ff ff6f 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002aae:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ab4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aba:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	4a15      	ldr	r2, [pc, #84]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad2:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002ade:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002af8:	2306      	movs	r3, #6
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002afe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b02:	4619      	mov	r1, r3
 8002b04:	4807      	ldr	r0, [pc, #28]	@ (8002b24 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002b06:	f003 fc2d 	bl	8006364 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b12:	6013      	str	r3, [r2, #0]
  }

}
 8002b14:	bf00      	nop
 8002b16:	37b8      	adds	r7, #184	@ 0xb8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000a1c 	.word	0x20000a1c
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48001000 	.word	0x48001000

08002b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0b0      	sub	sp, #192	@ 0xc0
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	2294      	movs	r2, #148	@ 0x94
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00b fac5 	bl	800e0d8 <memset>
  if(hi2c->Instance==I2C1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a42      	ldr	r2, [pc, #264]	@ (8002c5c <HAL_I2C_MspInit+0x134>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d13c      	bne.n	8002bd2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b58:	2340      	movs	r3, #64	@ 0x40
 8002b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b60:	f107 0318 	add.w	r3, r7, #24
 8002b64:	4618      	mov	r0, r3
 8002b66:	f006 f975 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b70:	f7ff ff0c 	bl	800298c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b74:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b78:	4a39      	ldr	r2, [pc, #228]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002b7a:	f043 0302 	orr.w	r3, r3, #2
 8002b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b80:	4b37      	ldr	r3, [pc, #220]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002b8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b94:	2312      	movs	r3, #18
 8002b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	482c      	ldr	r0, [pc, #176]	@ (8002c64 <HAL_I2C_MspInit+0x13c>)
 8002bb4:	f003 fbd6 	bl	8006364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bb8:	4b29      	ldr	r3, [pc, #164]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbc:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002bbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bc4:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002bd0:	e040      	b.n	8002c54 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <HAL_I2C_MspInit+0x140>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d13b      	bne.n	8002c54 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 f933 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002bf4:	f7ff feca 	bl	800298c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002c10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c18:	2312      	movs	r3, #18
 8002c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c24:	2303      	movs	r3, #3
 8002c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002c34:	4619      	mov	r1, r3
 8002c36:	480b      	ldr	r0, [pc, #44]	@ (8002c64 <HAL_I2C_MspInit+0x13c>)
 8002c38:	f003 fb94 	bl	8006364 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002c42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_I2C_MspInit+0x138>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
}
 8002c54:	bf00      	nop
 8002c56:	37c0      	adds	r7, #192	@ 0xc0
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40005400 	.word	0x40005400
 8002c60:	40021000 	.word	0x40021000
 8002c64:	48000400 	.word	0x48000400
 8002c68:	40005800 	.word	0x40005800

08002c6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a16      	ldr	r2, [pc, #88]	@ (8002cd4 <HAL_I2C_MspDeInit+0x68>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d110      	bne.n	8002ca0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_I2C_MspDeInit+0x6c>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	4a15      	ldr	r2, [pc, #84]	@ (8002cd8 <HAL_I2C_MspDeInit+0x6c>)
 8002c84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c88:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8002c8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c8e:	4813      	ldr	r0, [pc, #76]	@ (8002cdc <HAL_I2C_MspDeInit+0x70>)
 8002c90:	f003 fcfa 	bl	8006688 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARD_D14_GPIO_Port, ARD_D14_Pin);
 8002c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c98:	4810      	ldr	r0, [pc, #64]	@ (8002cdc <HAL_I2C_MspDeInit+0x70>)
 8002c9a:	f003 fcf5 	bl	8006688 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002c9e:	e014      	b.n	8002cca <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <HAL_I2C_MspDeInit+0x74>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d10f      	bne.n	8002cca <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_I2C_MspDeInit+0x6c>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <HAL_I2C_MspDeInit+0x6c>)
 8002cb0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002cb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cba:	4808      	ldr	r0, [pc, #32]	@ (8002cdc <HAL_I2C_MspDeInit+0x70>)
 8002cbc:	f003 fce4 	bl	8006688 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cc4:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <HAL_I2C_MspDeInit+0x70>)
 8002cc6:	f003 fcdf 	bl	8006688 <HAL_GPIO_DeInit>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40005400 	.word	0x40005400
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	48000400 	.word	0x48000400
 8002ce0:	40005800 	.word	0x40005800

08002ce4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0b0      	sub	sp, #192	@ 0xc0
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	2294      	movs	r2, #148	@ 0x94
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00b f9e7 	bl	800e0d8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <HAL_OSPI_MspInit+0xcc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d149      	bne.n	8002da8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	4618      	mov	r0, r3
 8002d26:	f006 f895 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002d30:	f7ff fe2c 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002d34:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d58:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d64:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d70:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <HAL_OSPI_MspInit+0xd0>)
 8002d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002d7c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002d96:	230a      	movs	r3, #10
 8002d98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002da0:	4619      	mov	r1, r3
 8002da2:	4805      	ldr	r0, [pc, #20]	@ (8002db8 <HAL_OSPI_MspInit+0xd4>)
 8002da4:	f003 fade 	bl	8006364 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8002da8:	bf00      	nop
 8002daa:	37c0      	adds	r7, #192	@ 0xc0
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	a0001000 	.word	0xa0001000
 8002db4:	40021000 	.word	0x40021000
 8002db8:	48001000 	.word	0x48001000

08002dbc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002df4 <HAL_RNG_MspInit+0x38>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	4a09      	ldr	r2, [pc, #36]	@ (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <HAL_RNG_MspInit+0x3c>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	50060800 	.word	0x50060800
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <HAL_SPI_MspInit+0x7c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d128      	bne.n	8002e70 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e1e:	4b17      	ldr	r3, [pc, #92]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e2a:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	4a10      	ldr	r2, [pc, #64]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_SPI_MspInit+0x80>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002e4e:	23e0      	movs	r3, #224	@ 0xe0
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e6c:	f003 fa7a 	bl	8006364 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	@ 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <HAL_SPI_MspDeInit+0x30>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10a      	bne.n	8002ea8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <HAL_SPI_MspDeInit+0x34>)
 8002e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e96:	4a07      	ldr	r2, [pc, #28]	@ (8002eb4 <HAL_SPI_MspDeInit+0x34>)
 8002e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e9c:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin);
 8002e9e:	21e0      	movs	r1, #224	@ 0xe0
 8002ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ea4:	f003 fbf0 	bl	8006688 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40013000 	.word	0x40013000
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b0b4      	sub	sp, #208	@ 0xd0
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ed0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ed4:	2294      	movs	r2, #148	@ 0x94
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00b f8fd 	bl	800e0d8 <memset>
  if(huart->Instance==UART4)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a83      	ldr	r2, [pc, #524]	@ (80030f0 <HAL_UART_MspInit+0x238>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d13c      	bne.n	8002f62 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002eec:	2300      	movs	r3, #0
 8002eee:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 ffad 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f00:	f7ff fd44 	bl	800298c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f04:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f08:	4a7a      	ldr	r2, [pc, #488]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f10:	4b78      	ldr	r3, [pc, #480]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	4b75      	ldr	r3, [pc, #468]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	4a74      	ldr	r2, [pc, #464]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f28:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002f34:	2303      	movs	r3, #3
 8002f36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f5c:	f003 fa02 	bl	8006364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f60:	e0c2      	b.n	80030e8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a64      	ldr	r2, [pc, #400]	@ (80030f8 <HAL_UART_MspInit+0x240>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d13b      	bne.n	8002fe4 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f70:	2300      	movs	r3, #0
 8002f72:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f005 ff6b 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002f84:	f7ff fd02 	bl	800298c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f88:	4b5a      	ldr	r3, [pc, #360]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8c:	4a59      	ldr	r2, [pc, #356]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f92:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f94:	4b57      	ldr	r3, [pc, #348]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa0:	4b54      	ldr	r3, [pc, #336]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa4:	4a53      	ldr	r2, [pc, #332]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fac:	4b51      	ldr	r3, [pc, #324]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002fb8:	23c0      	movs	r3, #192	@ 0xc0
 8002fba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4847      	ldr	r0, [pc, #284]	@ (80030fc <HAL_UART_MspInit+0x244>)
 8002fde:	f003 f9c1 	bl	8006364 <HAL_GPIO_Init>
}
 8002fe2:	e081      	b.n	80030e8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_UART_MspInit+0x248>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d13b      	bne.n	8003066 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 ff2a 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_UART_MspInit+0x152>
      Error_Handler();
 8003006:	f7ff fcc1 	bl	800298c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	4a39      	ldr	r2, [pc, #228]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	6593      	str	r3, [r2, #88]	@ 0x58
 8003016:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a33      	ldr	r2, [pc, #204]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302e:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800303a:	2378      	movs	r3, #120	@ 0x78
 800303c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304c:	2303      	movs	r3, #3
 800304e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003052:	2307      	movs	r3, #7
 8003054:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003058:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800305c:	4619      	mov	r1, r3
 800305e:	4829      	ldr	r0, [pc, #164]	@ (8003104 <HAL_UART_MspInit+0x24c>)
 8003060:	f003 f980 	bl	8006364 <HAL_GPIO_Init>
}
 8003064:	e040      	b.n	80030e8 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a27      	ldr	r2, [pc, #156]	@ (8003108 <HAL_UART_MspInit+0x250>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d13b      	bne.n	80030e8 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003070:	2304      	movs	r3, #4
 8003072:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003074:	2300      	movs	r3, #0
 8003076:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003078:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800307c:	4618      	mov	r0, r3
 800307e:	f005 fee9 	bl	8008e54 <HAL_RCCEx_PeriphCLKConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8003088:	f7ff fc80 	bl	800298c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800308c:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	4a18      	ldr	r2, [pc, #96]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 8003092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003096:	6593      	str	r3, [r2, #88]	@ 0x58
 8003098:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a8:	4a12      	ldr	r2, [pc, #72]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 80030aa:	f043 0308 	orr.w	r3, r3, #8
 80030ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <HAL_UART_MspInit+0x23c>)
 80030b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80030bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d0:	2303      	movs	r3, #3
 80030d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030d6:	2307      	movs	r3, #7
 80030d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030dc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80030e0:	4619      	mov	r1, r3
 80030e2:	4808      	ldr	r0, [pc, #32]	@ (8003104 <HAL_UART_MspInit+0x24c>)
 80030e4:	f003 f93e 	bl	8006364 <HAL_GPIO_Init>
}
 80030e8:	bf00      	nop
 80030ea:	37d0      	adds	r7, #208	@ 0xd0
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40004c00 	.word	0x40004c00
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40013800 	.word	0x40013800
 80030fc:	48000400 	.word	0x48000400
 8003100:	40004400 	.word	0x40004400
 8003104:	48000c00 	.word	0x48000c00
 8003108:	40004800 	.word	0x40004800

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <NMI_Handler+0x4>

08003114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <HardFault_Handler+0x4>

0800311c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <MemManage_Handler+0x4>

08003124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <BusFault_Handler+0x4>

0800312c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <UsageFault_Handler+0x4>

08003134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003162:	f001 fbfb 	bl	800495c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}

0800316a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800316e:	2020      	movs	r0, #32
 8003170:	f003 fbac 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003174:	2040      	movs	r0, #64	@ 0x40
 8003176:	f003 fba9 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800317a:	2080      	movs	r0, #128	@ 0x80
 800317c:	f003 fba6 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003180:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003184:	f003 fba2 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}

0800318c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8003190:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003194:	f003 fb9a 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003198:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800319c:	f003 fb96 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80031a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80031a4:	f003 fb92 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80031a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031ac:	f003 fb8e 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80031b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80031b4:	f003 fb8a 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80031b8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80031bc:	f003 fb86 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <EXTI1_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI1_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80031c8:	2002      	movs	r0, #2
 80031ca:	f003 fb7f 	bl	80068cc <HAL_GPIO_EXTI_IRQHandler>
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
	return 1;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_kill>:

int _kill(int pid, int sig)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031ec:	f00b f86e 	bl	800e2cc <__errno>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2216      	movs	r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
	return -1;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_exit>:

void _exit (int status)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800320a:	f04f 31ff 	mov.w	r1, #4294967295
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff ffe7 	bl	80031e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <_exit+0x12>

08003218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	e00a      	b.n	8003240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800322a:	f7ff fb97 	bl	800295c <__io_getchar>
 800322e:	4601      	mov	r1, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	60ba      	str	r2, [r7, #8]
 8003236:	b2ca      	uxtb	r2, r1
 8003238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf0      	blt.n	800322a <_read+0x12>
	}

return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e009      	b.n	8003278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	60ba      	str	r2, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fb5f 	bl	8002930 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	3301      	adds	r3, #1
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	dbf1      	blt.n	8003264 <_write+0x12>
	}
	return len;
 8003280:	687b      	ldr	r3, [r7, #4]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_close>:

int _close(int file)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
	return -1;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032b2:	605a      	str	r2, [r3, #4]
	return 0;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_isatty>:

int _isatty(int file)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	return 1;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
	return 0;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032fc:	4a14      	ldr	r2, [pc, #80]	@ (8003350 <_sbrk+0x5c>)
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <_sbrk+0x60>)
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <_sbrk+0x64>)
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <_sbrk+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003324:	f00a ffd2 	bl	800e2cc <__errno>
 8003328:	4603      	mov	r3, r0
 800332a:	220c      	movs	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e009      	b.n	8003348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <_sbrk+0x64>)
 8003344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200a0000 	.word	0x200a0000
 8003354:	00000400 	.word	0x00000400
 8003358:	20000a20 	.word	0x20000a20
 800335c:	200012a0 	.word	0x200012a0

08003360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <SystemInit+0x20>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <SystemInit+0x20>)
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003388:	f7ff ffea 	bl	8003360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800338c:	480c      	ldr	r0, [pc, #48]	@ (80033c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800338e:	490d      	ldr	r1, [pc, #52]	@ (80033c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003390:	4a0d      	ldr	r2, [pc, #52]	@ (80033c8 <LoopForever+0xe>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033a4:	4c0a      	ldr	r4, [pc, #40]	@ (80033d0 <LoopForever+0x16>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033b2:	f00a ff91 	bl	800e2d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033b6:	f7fe f9c1 	bl	800173c <main>

080033ba <LoopForever>:

LoopForever:
    b LoopForever
 80033ba:	e7fe      	b.n	80033ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80033c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c4:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80033c8:	08011844 	.word	0x08011844
  ldr r2, =_sbss
 80033cc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80033d0:	200012a0 	.word	0x200012a0

080033d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d4:	e7fe      	b.n	80033d4 <ADC1_IRQHandler>
	...

080033d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <I2Cx_MspInit+0xa8>)
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	4a26      	ldr	r2, [pc, #152]	@ (8003480 <I2Cx_MspInit+0xa8>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033ec:	4b24      	ldr	r3, [pc, #144]	@ (8003480 <I2Cx_MspInit+0xa8>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80033f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033fe:	2312      	movs	r3, #18
 8003400:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003406:	2303      	movs	r3, #3
 8003408:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800340a:	2304      	movs	r3, #4
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	481b      	ldr	r0, [pc, #108]	@ (8003484 <I2Cx_MspInit+0xac>)
 8003416:	f002 ffa5 	bl	8006364 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4818      	ldr	r0, [pc, #96]	@ (8003484 <I2Cx_MspInit+0xac>)
 8003422:	f002 ff9f 	bl	8006364 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003426:	4b16      	ldr	r3, [pc, #88]	@ (8003480 <I2Cx_MspInit+0xa8>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4a15      	ldr	r2, [pc, #84]	@ (8003480 <I2Cx_MspInit+0xa8>)
 800342c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
 8003432:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <I2Cx_MspInit+0xa8>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <I2Cx_MspInit+0xa8>)
 8003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003442:	4a0f      	ldr	r2, [pc, #60]	@ (8003480 <I2Cx_MspInit+0xa8>)
 8003444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003448:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <I2Cx_MspInit+0xa8>)
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	4a0c      	ldr	r2, [pc, #48]	@ (8003480 <I2Cx_MspInit+0xa8>)
 8003450:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003454:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	210f      	movs	r1, #15
 800345a:	2021      	movs	r0, #33	@ 0x21
 800345c:	f002 fddf 	bl	800601e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003460:	2021      	movs	r0, #33	@ 0x21
 8003462:	f002 fdf8 	bl	8006056 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	210f      	movs	r1, #15
 800346a:	2022      	movs	r0, #34	@ 0x22
 800346c:	f002 fdd7 	bl	800601e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003470:	2022      	movs	r0, #34	@ 0x22
 8003472:	f002 fdf0 	bl	8006056 <HAL_NVIC_EnableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	@ 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	48000400 	.word	0x48000400

08003488 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <I2Cx_Init+0x54>)
 8003494:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <I2Cx_Init+0x58>)
 800349a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff89 	bl	80033d8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f003 fa18 	bl	80068fc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80034cc:	2100      	movs	r1, #0
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f003 ffa6 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40005800 	.word	0x40005800
 80034e0:	00702681 	.word	0x00702681

080034e4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	4608      	mov	r0, r1
 80034ee:	4611      	mov	r1, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	72fb      	strb	r3, [r7, #11]
 80034f6:	460b      	mov	r3, r1
 80034f8:	813b      	strh	r3, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003502:	7afb      	ldrb	r3, [r7, #11]
 8003504:	b299      	uxth	r1, r3
 8003506:	88f8      	ldrh	r0, [r7, #6]
 8003508:	893a      	ldrh	r2, [r7, #8]
 800350a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4603      	mov	r3, r0
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f003 fbc0 	bl	8006ca0 <HAL_I2C_Mem_Read>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	4619      	mov	r1, r3
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f832 	bl	8003598 <I2Cx_Error>
  }
  return status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	@ 0x28
 8003542:	af04      	add	r7, sp, #16
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	4608      	mov	r0, r1
 8003548:	4611      	mov	r1, r2
 800354a:	461a      	mov	r2, r3
 800354c:	4603      	mov	r3, r0
 800354e:	72fb      	strb	r3, [r7, #11]
 8003550:	460b      	mov	r3, r1
 8003552:	813b      	strh	r3, [r7, #8]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	b299      	uxth	r1, r3
 8003560:	88f8      	ldrh	r0, [r7, #6]
 8003562:	893a      	ldrh	r2, [r7, #8]
 8003564:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4603      	mov	r3, r0
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f003 fa7f 	bl	8006a78 <HAL_I2C_Mem_Write>
 800357a:	4603      	mov	r3, r0
 800357c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	4619      	mov	r1, r3
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f805 	bl	8003598 <I2Cx_Error>
  }
  return status;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f003 fa38 	bl	8006a1a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff6c 	bl	8003488 <I2Cx_Init>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80035bc:	4802      	ldr	r0, [pc, #8]	@ (80035c8 <SENSOR_IO_Init+0x10>)
 80035be:	f7ff ff63 	bl	8003488 <I2Cx_Init>
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000a24 	.word	0x20000a24

080035cc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
 80035d6:	460b      	mov	r3, r1
 80035d8:	71bb      	strb	r3, [r7, #6]
 80035da:	4613      	mov	r3, r2
 80035dc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	79f9      	ldrb	r1, [r7, #7]
 80035e4:	2301      	movs	r3, #1
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	1d7b      	adds	r3, r7, #5
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2301      	movs	r3, #1
 80035ee:	4803      	ldr	r0, [pc, #12]	@ (80035fc <SENSOR_IO_Write+0x30>)
 80035f0:	f7ff ffa5 	bl	800353e <I2Cx_WriteMultiple>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000a24 	.word	0x20000a24

08003600 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	4603      	mov	r3, r0
 8003608:	460a      	mov	r2, r1
 800360a:	71fb      	strb	r3, [r7, #7]
 800360c:	4613      	mov	r3, r2
 800360e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003614:	79bb      	ldrb	r3, [r7, #6]
 8003616:	b29a      	uxth	r2, r3
 8003618:	79f9      	ldrb	r1, [r7, #7]
 800361a:	2301      	movs	r3, #1
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f107 030f 	add.w	r3, r7, #15
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	4804      	ldr	r0, [pc, #16]	@ (8003638 <SENSOR_IO_Read+0x38>)
 8003628:	f7ff ff5c 	bl	80034e4 <I2Cx_ReadMultiple>

  return read_value;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000a24 	.word	0x20000a24

0800363c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af02      	add	r7, sp, #8
 8003642:	603a      	str	r2, [r7, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
 800364a:	460b      	mov	r3, r1
 800364c:	71bb      	strb	r3, [r7, #6]
 800364e:	4613      	mov	r3, r2
 8003650:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003652:	79bb      	ldrb	r3, [r7, #6]
 8003654:	b29a      	uxth	r2, r3
 8003656:	79f9      	ldrb	r1, [r7, #7]
 8003658:	88bb      	ldrh	r3, [r7, #4]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2301      	movs	r3, #1
 8003662:	4804      	ldr	r0, [pc, #16]	@ (8003674 <SENSOR_IO_ReadMultiple+0x38>)
 8003664:	f7ff ff3e 	bl	80034e4 <I2Cx_ReadMultiple>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000a24 	.word	0x20000a24

08003678 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800367e:	4b0c      	ldr	r3, [pc, #48]	@ (80036b0 <BSP_HSENSOR_Init+0x38>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	20be      	movs	r0, #190	@ 0xbe
 8003684:	4798      	blx	r3
 8003686:	4603      	mov	r3, r0
 8003688:	2bbc      	cmp	r3, #188	@ 0xbc
 800368a:	d002      	beq.n	8003692 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	e009      	b.n	80036a6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <BSP_HSENSOR_Init+0x3c>)
 8003694:	4a06      	ldr	r2, [pc, #24]	@ (80036b0 <BSP_HSENSOR_Init+0x38>)
 8003696:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003698:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <BSP_HSENSOR_Init+0x3c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	20be      	movs	r0, #190	@ 0xbe
 80036a0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000001c 	.word	0x2000001c
 80036b4:	20000a78 	.word	0x20000a78

080036b8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <BSP_HSENSOR_ReadHumidity+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	20be      	movs	r0, #190	@ 0xbe
 80036c4:	4798      	blx	r3
 80036c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80036ca:	eeb0 0a67 	vmov.f32	s0, s15
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000a78 	.word	0x20000a78

080036d4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <BSP_TSENSOR_Init+0x30>)
 80036e0:	4a09      	ldr	r2, [pc, #36]	@ (8003708 <BSP_TSENSOR_Init+0x34>)
 80036e2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80036e4:	f7ff ff68 	bl	80035b8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80036e8:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <BSP_TSENSOR_Init+0x30>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2100      	movs	r1, #0
 80036f0:	20be      	movs	r0, #190	@ 0xbe
 80036f2:	4798      	blx	r3

  ret = TSENSOR_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80036f8:	79fb      	ldrb	r3, [r7, #7]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000a7c 	.word	0x20000a7c
 8003708:	20000028 	.word	0x20000028

0800370c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <BSP_TSENSOR_ReadTemp+0x18>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	20be      	movs	r0, #190	@ 0xbe
 8003718:	4798      	blx	r3
 800371a:	eef0 7a40 	vmov.f32	s15, s0
}
 800371e:	eeb0 0a67 	vmov.f32	s0, s15
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000a7c 	.word	0x20000a7c

08003728 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	2b2f      	cmp	r3, #47	@ 0x2f
 8003736:	d906      	bls.n	8003746 <Hex2Num+0x1e>
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	2b39      	cmp	r3, #57	@ 0x39
 800373c:	d803      	bhi.n	8003746 <Hex2Num+0x1e>
        return a - '0';
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	3b30      	subs	r3, #48	@ 0x30
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e014      	b.n	8003770 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	2b60      	cmp	r3, #96	@ 0x60
 800374a:	d906      	bls.n	800375a <Hex2Num+0x32>
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b66      	cmp	r3, #102	@ 0x66
 8003750:	d803      	bhi.n	800375a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	3b57      	subs	r3, #87	@ 0x57
 8003756:	b2db      	uxtb	r3, r3
 8003758:	e00a      	b.n	8003770 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d906      	bls.n	800376e <Hex2Num+0x46>
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	2b46      	cmp	r3, #70	@ 0x46
 8003764:	d803      	bhi.n	800376e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	3b37      	subs	r3, #55	@ 0x37
 800376a:	b2db      	uxtb	r3, r3
 800376c:	e000      	b.n	8003770 <Hex2Num+0x48>
    }

    return 0;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 800378e:	e012      	b.n	80037b6 <ParseHexNumber+0x3a>
        sum <<= 4;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ffc4 	bl	8003728 <Hex2Num>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
        ptr++;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3301      	adds	r3, #1
 80037ae:	607b      	str	r3, [r7, #4]
        i++;
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	3301      	adds	r3, #1
 80037b4:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80037bc:	d903      	bls.n	80037c6 <ParseHexNumber+0x4a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b39      	cmp	r3, #57	@ 0x39
 80037c4:	d9e4      	bls.n	8003790 <ParseHexNumber+0x14>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b60      	cmp	r3, #96	@ 0x60
 80037cc:	d903      	bls.n	80037d6 <ParseHexNumber+0x5a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b66      	cmp	r3, #102	@ 0x66
 80037d4:	d9dc      	bls.n	8003790 <ParseHexNumber+0x14>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d903      	bls.n	80037e6 <ParseHexNumber+0x6a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b46      	cmp	r3, #70	@ 0x46
 80037e4:	d9d4      	bls.n	8003790 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <ParseHexNumber+0x76>
        *cnt = i;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	7afa      	ldrb	r2, [r7, #11]
 80037f0:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 80037f2:	68fb      	ldr	r3, [r7, #12]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	2300      	movs	r3, #0
 800380c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b2d      	cmp	r3, #45	@ 0x2d
 8003818:	d119      	bne.n	800384e <ParseNumber+0x52>
        minus = 1;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3301      	adds	r3, #1
 8003822:	607b      	str	r3, [r7, #4]
        i++;
 8003824:	7bbb      	ldrb	r3, [r7, #14]
 8003826:	3301      	adds	r3, #1
 8003828:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800382a:	e010      	b.n	800384e <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	3b30      	subs	r3, #48	@ 0x30
 800383e:	4413      	add	r3, r2
 8003840:	60bb      	str	r3, [r7, #8]
        ptr++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3301      	adds	r3, #1
 8003846:	607b      	str	r3, [r7, #4]
        i++;
 8003848:	7bbb      	ldrb	r3, [r7, #14]
 800384a:	3301      	adds	r3, #1
 800384c:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b2f      	cmp	r3, #47	@ 0x2f
 8003854:	d903      	bls.n	800385e <ParseNumber+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b39      	cmp	r3, #57	@ 0x39
 800385c:	d9e6      	bls.n	800382c <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <ParseNumber+0x6e>
        *cnt = i;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	7bba      	ldrb	r2, [r7, #14]
 8003868:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <ParseNumber+0x7a>
        return 0 - sum;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	425b      	negs	r3, r3
 8003874:	e000      	b.n	8003878 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8003876:	68bb      	ldr	r3, [r7, #8]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8003892:	e019      	b.n	80038c8 <ParseMAC+0x44>
    hexcnt = 1;
 8003894:	2301      	movs	r3, #1
 8003896:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b3a      	cmp	r3, #58	@ 0x3a
 800389e:	d00e      	beq.n	80038be <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80038a0:	f107 030e 	add.w	r3, r7, #14
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff68 	bl	800377c <ParseHexNumber>
 80038ac:	4601      	mov	r1, r0
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	73fa      	strb	r2, [r7, #15]
 80038b4:	461a      	mov	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	b2ca      	uxtb	r2, r1
 80038bc:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80038be:	7bbb      	ldrb	r3, [r7, #14]
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e1      	bne.n	8003894 <ParseMAC+0x10>
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80038e8:	e019      	b.n	800391e <ParseIP+0x44>
    hexcnt = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80038f4:	d00e      	beq.n	8003914 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80038f6:	f107 030e 	add.w	r3, r7, #14
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff7d 	bl	80037fc <ParseNumber>
 8003902:	4601      	mov	r1, r0
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	73fa      	strb	r2, [r7, #15]
 800390a:	461a      	mov	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4413      	add	r3, r2
 8003910:	b2ca      	uxtb	r2, r1
 8003912:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e1      	bne.n	80038ea <ParseIP+0x10>
  }
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	3302      	adds	r3, #2
 8003942:	4934      	ldr	r1, [pc, #208]	@ (8003a14 <AT_ParseInfo+0xe4>)
 8003944:	4618      	mov	r0, r3
 8003946:	f00a fbf5 	bl	800e134 <strtok>
 800394a:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 800394c:	e05a      	b.n	8003a04 <AT_ParseInfo+0xd4>
    switch (num++) {
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	72fa      	strb	r2, [r7, #11]
 8003954:	2b06      	cmp	r3, #6
 8003956:	d84f      	bhi.n	80039f8 <AT_ParseInfo+0xc8>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <AT_ParseInfo+0x30>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	0800397d 	.word	0x0800397d
 8003964:	0800398b 	.word	0x0800398b
 8003968:	0800399b 	.word	0x0800399b
 800396c:	080039ab 	.word	0x080039ab
 8003970:	080039bb 	.word	0x080039bb
 8003974:	080039cb 	.word	0x080039cb
 8003978:	080039df 	.word	0x080039df
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	4618      	mov	r0, r3
 8003984:	f00a fbc2 	bl	800e10c <strncpy>
      break;
 8003988:	e037      	b.n	80039fa <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3320      	adds	r3, #32
 800398e:	2218      	movs	r2, #24
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f00a fbba 	bl	800e10c <strncpy>
      break;
 8003998:	e02f      	b.n	80039fa <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3338      	adds	r3, #56	@ 0x38
 800399e:	2210      	movs	r2, #16
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f00a fbb2 	bl	800e10c <strncpy>
      break;
 80039a8:	e027      	b.n	80039fa <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3348      	adds	r3, #72	@ 0x48
 80039ae:	2210      	movs	r2, #16
 80039b0:	68f9      	ldr	r1, [r7, #12]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00a fbaa 	bl	800e10c <strncpy>
      break;
 80039b8:	e01f      	b.n	80039fa <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3358      	adds	r3, #88	@ 0x58
 80039be:	2210      	movs	r2, #16
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f00a fba2 	bl	800e10c <strncpy>
      break;
 80039c8:	e017      	b.n	80039fa <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 80039ca:	2100      	movs	r1, #0
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff ff15 	bl	80037fc <ParseNumber>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 80039dc:	e00d      	b.n	80039fa <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80039de:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <AT_ParseInfo+0xe8>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f00a fba7 	bl	800e134 <strtok>
 80039e6:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3368      	adds	r3, #104	@ 0x68
 80039ec:	2220      	movs	r2, #32
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00a fb8b 	bl	800e10c <strncpy>
      break;
 80039f6:	e000      	b.n	80039fa <AT_ParseInfo+0xca>

    default: break;
 80039f8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80039fa:	4906      	ldr	r1, [pc, #24]	@ (8003a14 <AT_ParseInfo+0xe4>)
 80039fc:	2000      	movs	r0, #0
 80039fe:	f00a fb99 	bl	800e134 <strtok>
 8003a02:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1a1      	bne.n	800394e <AT_ParseInfo+0x1e>
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	080110c4 	.word	0x080110c4
 8003a18:	080110c8 	.word	0x080110c8

08003a1c <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	4952      	ldr	r1, [pc, #328]	@ (8003b78 <AT_ParseConnSettings+0x15c>)
 8003a30:	4618      	mov	r0, r3
 8003a32:	f00a fb7f 	bl	800e134 <strtok>
 8003a36:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8003a38:	e095      	b.n	8003b66 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	73fa      	strb	r2, [r7, #15]
 8003a40:	2b0b      	cmp	r3, #11
 8003a42:	d87f      	bhi.n	8003b44 <AT_ParseConnSettings+0x128>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <AT_ParseConnSettings+0x30>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a7d 	.word	0x08003a7d
 8003a50:	08003a8b 	.word	0x08003a8b
 8003a54:	08003a9b 	.word	0x08003a9b
 8003a58:	08003aaf 	.word	0x08003aaf
 8003a5c:	08003ac3 	.word	0x08003ac3
 8003a60:	08003ad7 	.word	0x08003ad7
 8003a64:	08003ae5 	.word	0x08003ae5
 8003a68:	08003af3 	.word	0x08003af3
 8003a6c:	08003b01 	.word	0x08003b01
 8003a70:	08003b0f 	.word	0x08003b0f
 8003a74:	08003b1d 	.word	0x08003b1d
 8003a78:	08003b31 	.word	0x08003b31
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2221      	movs	r2, #33	@ 0x21
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00a fb42 	bl	800e10c <strncpy>
      break;
 8003a88:	e05d      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	3321      	adds	r3, #33	@ 0x21
 8003a8e:	2221      	movs	r2, #33	@ 0x21
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f00a fb3a 	bl	800e10c <strncpy>
      break;
 8003a98:	e055      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	68b8      	ldr	r0, [r7, #8]
 8003a9e:	f7ff fead 	bl	80037fc <ParseNumber>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8003aac:	e04b      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	68b8      	ldr	r0, [r7, #8]
 8003ab2:	f7ff fea3 	bl	80037fc <ParseNumber>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8003ac0:	e041      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	68b8      	ldr	r0, [r7, #8]
 8003ac6:	f7ff fe99 	bl	80037fc <ParseNumber>
 8003aca:	4603      	mov	r3, r0
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 8003ad4:	e037      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	3348      	adds	r3, #72	@ 0x48
 8003ada:	4619      	mov	r1, r3
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	f7ff fefc 	bl	80038da <ParseIP>
      break;
 8003ae2:	e030      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	334c      	adds	r3, #76	@ 0x4c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	68b8      	ldr	r0, [r7, #8]
 8003aec:	f7ff fef5 	bl	80038da <ParseIP>
      break;
 8003af0:	e029      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	3350      	adds	r3, #80	@ 0x50
 8003af6:	4619      	mov	r1, r3
 8003af8:	68b8      	ldr	r0, [r7, #8]
 8003afa:	f7ff feee 	bl	80038da <ParseIP>
      break;
 8003afe:	e022      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	3354      	adds	r3, #84	@ 0x54
 8003b04:	4619      	mov	r1, r3
 8003b06:	68b8      	ldr	r0, [r7, #8]
 8003b08:	f7ff fee7 	bl	80038da <ParseIP>
      break;
 8003b0c:	e01b      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	3358      	adds	r3, #88	@ 0x58
 8003b12:	4619      	mov	r1, r3
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f7ff fee0 	bl	80038da <ParseIP>
      break;
 8003b1a:	e014      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	68b8      	ldr	r0, [r7, #8]
 8003b20:	f7ff fe6c 	bl	80037fc <ParseNumber>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 8003b2e:	e00a      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8003b30:	2100      	movs	r1, #0
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f7ff fe62 	bl	80037fc <ParseNumber>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 8003b42:	e000      	b.n	8003b46 <AT_ParseConnSettings+0x12a>

    default:
      break;
 8003b44:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8003b46:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <AT_ParseConnSettings+0x15c>)
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f00a faf3 	bl	800e134 <strtok>
 8003b4e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <AT_ParseConnSettings+0x14a>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8003b5e:	d102      	bne.n	8003b66 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	3301      	adds	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f af66 	bne.w	8003a3a <AT_ParseConnSettings+0x1e>
    }
  }
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	080110c4 	.word	0x080110c4

08003b7c <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b31      	cmp	r3, #49	@ 0x31
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	461a      	mov	r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	701a      	strb	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	82fb      	strh	r3, [r7, #22]

  DEBUGCMD("%s\n",cmd);
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8003bc2:	68b8      	ldr	r0, [r7, #8]
 8003bc4:	f7fc fb6c 	bl	80002a0 <strlen>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68b8      	ldr	r0, [r7, #8]
 8003bd6:	47a0      	blx	r4
 8003bd8:	4603      	mov	r3, r0
 8003bda:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	dd3e      	ble.n	8003c60 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8003bee:	f44f 61af 	mov.w	r1, #1400	@ 0x578
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8003bfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	dd27      	ble.n	8003c52 <AT_ExecuteCommand+0xaa>
 8003c02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c06:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8003c0a:	dc22      	bgt.n	8003c52 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8003c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c10:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8003c14:	d105      	bne.n	8003c22 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8003c16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8003c22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
      DEBUGCMD("%s\n",cmd);

      if(strstr((char *)pdata, AT_OK_STRING))
 8003c2e:	490f      	ldr	r1, [pc, #60]	@ (8003c6c <AT_ExecuteCommand+0xc4>)
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f00a fadb 	bl	800e1ec <strstr>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <AT_ExecuteCommand+0x98>
      {
        return ES_WIFI_STATUS_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e010      	b.n	8003c62 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003c40:	490b      	ldr	r1, [pc, #44]	@ (8003c70 <AT_ExecuteCommand+0xc8>)
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f00a fad2 	bl	800e1ec <strstr>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <AT_ExecuteCommand+0xaa>
      {
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003c4e:	2305      	movs	r3, #5
 8003c50:	e007      	b.n	8003c62 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003c52:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003c56:	f113 0f04 	cmn.w	r3, #4
 8003c5a:	d101      	bne.n	8003c60 <AT_ExecuteCommand+0xb8>
    {
      return ES_WIFI_STATUS_MODULE_CRASH;
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	e000      	b.n	8003c62 <AT_ExecuteCommand+0xba>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003c60:	2304      	movs	r3, #4
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd90      	pop	{r4, r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	080110d8 	.word	0x080110d8
 8003c70:	080110e4 	.word	0x080110e4

08003c74 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  cmd_len = strlen((char*)cmd);
 8003c8e:	68b8      	ldr	r0, [r7, #8]
 8003c90:	f7fc fb06 	bl	80002a0 <strlen>
 8003c94:	4603      	mov	r3, r0
 8003c96:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8003c98:	8a7b      	ldrh	r3, [r7, #18]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <AT_RequestSendData+0x32>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e053      	b.n	8003d4e <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8003cb2:	8a79      	ldrh	r1, [r7, #18]
 8003cb4:	68b8      	ldr	r0, [r7, #8]
 8003cb6:	4798      	blx	r3
 8003cb8:	4603      	mov	r3, r0
 8003cba:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8003cbc:	8a3a      	ldrh	r2, [r7, #16]
 8003cbe:	8a7b      	ldrh	r3, [r7, #18]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d143      	bne.n	8003d4c <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8003cd0:	8879      	ldrh	r1, [r7, #2]
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8003cda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d131      	bne.n	8003d48 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	6a38      	ldr	r0, [r7, #32]
 8003cf4:	4798      	blx	r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8003cfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dd19      	ble.n	8003d36 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 8003d02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d06:	6a3a      	ldr	r2, [r7, #32]
 8003d08:	4413      	add	r3, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8003d0e:	4912      	ldr	r1, [pc, #72]	@ (8003d58 <AT_RequestSendData+0xe4>)
 8003d10:	6a38      	ldr	r0, [r7, #32]
 8003d12:	f00a fa6b 	bl	800e1ec <strstr>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <AT_RequestSendData+0xac>
        {
          return ES_WIFI_STATUS_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e016      	b.n	8003d4e <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8003d20:	490e      	ldr	r1, [pc, #56]	@ (8003d5c <AT_RequestSendData+0xe8>)
 8003d22:	6a38      	ldr	r0, [r7, #32]
 8003d24:	f00a fa62 	bl	800e1ec <strstr>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <AT_RequestSendData+0xbe>
        {
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	e00d      	b.n	8003d4e <AT_RequestSendData+0xda>
        }
        else
        {
          return ES_WIFI_STATUS_ERROR;
 8003d32:	2302      	movs	r3, #2
 8003d34:	e00b      	b.n	8003d4e <AT_RequestSendData+0xda>
        }
      }
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003d36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d3a:	f113 0f04 	cmn.w	r3, #4
 8003d3e:	d101      	bne.n	8003d44 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8003d40:	2306      	movs	r3, #6
 8003d42:	e004      	b.n	8003d4e <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 8003d44:	2302      	movs	r3, #2
 8003d46:	e002      	b.n	8003d4e <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e000      	b.n	8003d4e <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003d4c:	2304      	movs	r3, #4
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	080110d8 	.word	0x080110d8
 8003d5c:	080110e4 	.word	0x080110e4

08003d60 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003d74:	613b      	str	r3, [r7, #16]

  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f7fc fa8f 	bl	80002a0 <strlen>
 8003d82:	4603      	mov	r3, r0
 8003d84:	b299      	uxth	r1, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	@ 0x6a0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	47a0      	blx	r4
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dd6f      	ble.n	8003e78 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	@ 0x6a0
 8003da4:	2100      	movs	r1, #0
 8003da6:	6938      	ldr	r0, [r7, #16]
 8003da8:	4798      	blx	r3
 8003daa:	4603      	mov	r3, r0
 8003dac:	617b      	str	r3, [r7, #20]
	if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f113 0f04 	cmn.w	r3, #4
 8003db4:	d101      	bne.n	8003dba <AT_RequestReceiveData+0x5a>
    {
     return ES_WIFI_STATUS_MODULE_CRASH;
 8003db6:	2306      	movs	r3, #6
 8003db8:	e05f      	b.n	8003e7a <AT_RequestReceiveData+0x11a>
    }
    if ((p[0]!='\r') || (p[1]!='\n'))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b0d      	cmp	r3, #13
 8003dc0:	d104      	bne.n	8003dcc <AT_RequestReceiveData+0x6c>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b0a      	cmp	r3, #10
 8003dca:	d001      	beq.n	8003dd0 <AT_RequestReceiveData+0x70>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e054      	b.n	8003e7a <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3b02      	subs	r3, #2
 8003dd4:	617b      	str	r3, [r7, #20]
    p+=2;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	d94a      	bls.n	8003e78 <AT_RequestReceiveData+0x118>
    {
     while(len && (p[len-1]==0x15)) len--;
 8003de2:	e002      	b.n	8003dea <AT_RequestReceiveData+0x8a>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <AT_RequestReceiveData+0x9e>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b15      	cmp	r3, #21
 8003dfc:	d0f2      	beq.n	8003de4 <AT_RequestReceiveData+0x84>
     p[len] = '\0';
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3b08      	subs	r3, #8
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4413      	add	r3, r2
 8003e10:	491c      	ldr	r1, [pc, #112]	@ (8003e84 <AT_RequestReceiveData+0x124>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00a f9ea 	bl	800e1ec <strstr>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <AT_RequestReceiveData+0xec>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b08      	subs	r3, #8
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d202      	bcs.n	8003e3a <AT_RequestReceiveData+0xda>
       {
         *ReadData = Reqlen;
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6939      	ldr	r1, [r7, #16]
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f00a fa6f 	bl	800e326 <memcpy>
       return ES_WIFI_STATUS_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e016      	b.n	8003e7a <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3b04      	subs	r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	2204      	movs	r2, #4
 8003e56:	490c      	ldr	r1, [pc, #48]	@ (8003e88 <AT_RequestReceiveData+0x128>)
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00a f92d 	bl	800e0b8 <memcmp>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <AT_RequestReceiveData+0x10e>
     {
       *ReadData = 0;
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2200      	movs	r2, #0
 8003e68:	801a      	strh	r2, [r3, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	e005      	b.n	8003e7a <AT_RequestReceiveData+0x11a>
     }

     *ReadData = 0;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	2200      	movs	r2, #0
 8003e72:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8003e74:	2305      	movs	r3, #5
 8003e76:	e000      	b.n	8003e7a <AT_RequestReceiveData+0x11a>
   }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8003e78:	2304      	movs	r3, #4
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd90      	pop	{r4, r7, pc}
 8003e82:	bf00      	nop
 8003e84:	080110d8 	.word	0x080110d8
 8003e88:	080110ec 	.word	0x080110ec

08003e8c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8003e94:	2302      	movs	r3, #2
 8003e96:	73fb      	strb	r3, [r7, #15]

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e9e:	f8c3 26a0 	str.w	r2, [r3, #1696]	@ 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	4798      	blx	r3
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d113      	bne.n	8003eda <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003eb8:	461a      	mov	r2, r3
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <ES_WIFI_Init+0x58>)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fe73 	bl	8003ba8 <AT_ExecuteCommand>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fd2b 	bl	8003930 <AT_ParseInfo>
    }
  }
  return ret;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	080110f4 	.word	0x080110f4

08003ee8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <ES_WIFI_RegisterBusIO+0x2c>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <ES_WIFI_RegisterBusIO+0x2c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <ES_WIFI_RegisterBusIO+0x2c>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <ES_WIFI_RegisterBusIO+0x2c>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8003f14:	2302      	movs	r3, #2
 8003f16:	e014      	b.n	8003f42 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  if ( (SSID == NULL) || (Password == NULL) )
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <ES_WIFI_Connect+0x1a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <ES_WIFI_Connect+0x20>
  {
    ret = ES_WIFI_STATUS_ERROR;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	75fb      	strb	r3, [r7, #23]
 8003f6e:	e062      	b.n	8004036 <ES_WIFI_Connect+0xe6>
  }
  else
  {
    LOCK_WIFI();

    sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4931      	ldr	r1, [pc, #196]	@ (8004040 <ES_WIFI_Connect+0xf0>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f009 ffa4 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fe0a 	bl	8003ba8 <AT_ExecuteCommand>
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
    if(ret == ES_WIFI_STATUS_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14b      	bne.n	8004036 <ES_WIFI_Connect+0xe6>
    {
      sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4927      	ldr	r1, [pc, #156]	@ (8004044 <ES_WIFI_Connect+0xf4>)
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f009 ff8d 	bl	800dec8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fdf3 	bl	8003ba8 <AT_ExecuteCommand>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d134      	bne.n	8004036 <ES_WIFI_Connect+0xe6>
      {
        Obj->Security = SecType;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
        sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	491a      	ldr	r1, [pc, #104]	@ (8004048 <ES_WIFI_Connect+0xf8>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f009 ff72 	bl	800dec8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff fdd8 	bl	8003ba8 <AT_ExecuteCommand>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

        if(ret == ES_WIFI_STATUS_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <ES_WIFI_Connect+0xe6>
        {
          sprintf((char*)Obj->CmdData,"C0\r");
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004008:	4910      	ldr	r1, [pc, #64]	@ (800404c <ES_WIFI_Connect+0xfc>)
 800400a:	4618      	mov	r0, r3
 800400c:	f009 ff5c 	bl	800dec8 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800401c:	461a      	mov	r2, r3
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff fdc2 	bl	8003ba8 <AT_ExecuteCommand>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
          if(ret == ES_WIFI_STATUS_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <ES_WIFI_Connect+0xe6>
          {
            Obj->NetSettings.IsConnected = 1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
      }
    }

    UNLOCK_WIFI();
  }
  return ret;
 8004036:	7dfb      	ldrb	r3, [r7, #23]
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	0801110c 	.word	0x0801110c
 8004044:	08011114 	.word	0x08011114
 8004048:	0801111c 	.word	0x0801111c
 800404c:	08011124 	.word	0x08011124

08004050 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800405e:	4911      	ldr	r1, [pc, #68]	@ (80040a4 <ES_WIFI_IsConnected+0x54>)
 8004060:	4618      	mov	r0, r3
 8004062:	f009 ff31 	bl	800dec8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004072:	461a      	mov	r2, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fd97 	bl	8003ba8 <AT_ExecuteCommand>
 800407a:	4603      	mov	r3, r0
 800407c:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	33d2      	adds	r3, #210	@ 0xd2
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7ff fd73 	bl	8003b7c <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	08011128 	.word	0x08011128

080040a8 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80040b6:	4910      	ldr	r1, [pc, #64]	@ (80040f8 <ES_WIFI_GetNetworkSettings+0x50>)
 80040b8:	4618      	mov	r0, r3
 80040ba:	f009 ff05 	bl	800dec8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80040ca:	461a      	mov	r2, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fd6b 	bl	8003ba8 <AT_ExecuteCommand>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d108      	bne.n	80040ee <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	338d      	adds	r3, #141	@ 0x8d
 80040e6:	4619      	mov	r1, r3
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7ff fc97 	bl	8003a1c <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08011130 	.word	0x08011130

080040fc <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800410c:	4912      	ldr	r1, [pc, #72]	@ (8004158 <ES_WIFI_GetMACAddress+0x5c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f009 feda 	bl	800dec8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004120:	461a      	mov	r2, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fd40 	bl	8003ba8 <AT_ExecuteCommand>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004138:	3302      	adds	r3, #2
 800413a:	4908      	ldr	r1, [pc, #32]	@ (800415c <ES_WIFI_GetMACAddress+0x60>)
 800413c:	4618      	mov	r0, r3
 800413e:	f009 fff9 	bl	800e134 <strtok>
 8004142:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8004144:	6839      	ldr	r1, [r7, #0]
 8004146:	68b8      	ldr	r0, [r7, #8]
 8004148:	f7ff fb9c 	bl	8003884 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	08011180 	.word	0x08011180
 800415c:	08011184 	.word	0x08011184

08004160 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b087      	sub	sp, #28
 8004164:	af02      	add	r7, sp, #8
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <ES_WIFI_StartClientConnection+0x1e>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d105      	bne.n	800418a <ES_WIFI_StartClientConnection+0x2a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	889b      	ldrh	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <ES_WIFI_StartClientConnection+0x2a>
 8004186:	2302      	movs	r3, #2
 8004188:	e0dd      	b.n	8004346 <ES_WIFI_StartClientConnection+0x1e6>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	789b      	ldrb	r3, [r3, #2]
 8004194:	461a      	mov	r2, r3
 8004196:	496e      	ldr	r1, [pc, #440]	@ (8004350 <ES_WIFI_StartClientConnection+0x1f0>)
 8004198:	f009 fe96 	bl	800dec8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80041a8:	461a      	mov	r2, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fcfc 	bl	8003ba8 <AT_ExecuteCommand>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d114      	bne.n	80041e4 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	4963      	ldr	r1, [pc, #396]	@ (8004354 <ES_WIFI_StartClientConnection+0x1f4>)
 80041c8:	f009 fe7e 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80041d8:	461a      	mov	r2, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fce4 	bl	8003ba8 <AT_ExecuteCommand>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d114      	bne.n	8004214 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	88db      	ldrh	r3, [r3, #6]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4958      	ldr	r1, [pc, #352]	@ (8004358 <ES_WIFI_StartClientConnection+0x1f8>)
 80041f8:	f009 fe66 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004208:	461a      	mov	r2, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fccc 	bl	8003ba8 <AT_ExecuteCommand>
 8004210:	4603      	mov	r3, r0
 8004212:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d11c      	bne.n	8004254 <ES_WIFI_StartClientConnection+0xf4>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <ES_WIFI_StartClientConnection+0xca>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d114      	bne.n	8004254 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	889b      	ldrh	r3, [r3, #4]
 8004234:	461a      	mov	r2, r3
 8004236:	4949      	ldr	r1, [pc, #292]	@ (800435c <ES_WIFI_StartClientConnection+0x1fc>)
 8004238:	f009 fe46 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004248:	461a      	mov	r2, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fcac 	bl	8003ba8 <AT_ExecuteCommand>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d128      	bne.n	80042ac <ES_WIFI_StartClientConnection+0x14c>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <ES_WIFI_StartClientConnection+0x10a>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d120      	bne.n	80042ac <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	7a1b      	ldrb	r3, [r3, #8]
 8004274:	4619      	mov	r1, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	7a5b      	ldrb	r3, [r3, #9]
 800427a:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	7a9b      	ldrb	r3, [r3, #10]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004280:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	7adb      	ldrb	r3, [r3, #11]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	4623      	mov	r3, r4
 800428c:	460a      	mov	r2, r1
 800428e:	4934      	ldr	r1, [pc, #208]	@ (8004360 <ES_WIFI_StartClientConnection+0x200>)
 8004290:	f009 fe1a 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80042a0:	461a      	mov	r2, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fc80 	bl	8003ba8 <AT_ExecuteCommand>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <ES_WIFI_StartClientConnection+0x184>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d114      	bne.n	80042e4 <ES_WIFI_StartClientConnection+0x184>
  {
    /* No check,  ROOT CA only , or all certificats */
    sprintf((char*)Obj->CmdData,"P9=%d\r",conn->TLScheckMode);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4927      	ldr	r1, [pc, #156]	@ (8004364 <ES_WIFI_StartClientConnection+0x204>)
 80042c8:	f009 fdfe 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80042d8:	461a      	mov	r2, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fc64 	bl	8003ba8 <AT_ExecuteCommand>
 80042e0:	4603      	mov	r3, r0
 80042e2:	73fb      	strb	r3, [r7, #15]
  }
#if 1
  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d116      	bne.n	8004318 <ES_WIFI_StartClientConnection+0x1b8>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d112      	bne.n	8004318 <ES_WIFI_StartClientConnection+0x1b8>
  {
    /* Optional ROOT CA only 1, Root CA =0 */
    sprintf((char*)Obj->CmdData,"PB=0\r");
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80042f8:	491b      	ldr	r1, [pc, #108]	@ (8004368 <ES_WIFI_StartClientConnection+0x208>)
 80042fa:	4618      	mov	r0, r3
 80042fc:	f009 fde4 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800430c:	461a      	mov	r2, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fc4a 	bl	8003ba8 <AT_ExecuteCommand>
 8004314:	4603      	mov	r3, r0
 8004316:	73fb      	strb	r3, [r7, #15]
  }
#endif
  if (ret == ES_WIFI_STATUS_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d112      	bne.n	8004344 <ES_WIFI_StartClientConnection+0x1e4>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004324:	4911      	ldr	r1, [pc, #68]	@ (800436c <ES_WIFI_StartClientConnection+0x20c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f009 fdce 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004338:	461a      	mov	r2, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fc34 	bl	8003ba8 <AT_ExecuteCommand>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bd90      	pop	{r4, r7, pc}
 800434e:	bf00      	nop
 8004350:	080111e8 	.word	0x080111e8
 8004354:	080111f0 	.word	0x080111f0
 8004358:	080111f8 	.word	0x080111f8
 800435c:	08011200 	.word	0x08011200
 8004360:	08011208 	.word	0x08011208
 8004364:	08011218 	.word	0x08011218
 8004368:	08011220 	.word	0x08011220
 800436c:	08011228 	.word	0x08011228

08004370 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	460b      	mov	r3, r1
 800437e:	72fb      	strb	r3, [r7, #11]
 8004380:	4613      	mov	r3, r2
 8004382:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004384:	2302      	movs	r3, #2
 8004386:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800438e:	2301      	movs	r3, #1
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e001      	b.n	8004398 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8004394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004396:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004398:	893b      	ldrh	r3, [r7, #8]
 800439a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800439e:	d302      	bcc.n	80043a6 <ES_WIFI_SendData+0x36>
 80043a0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80043a4:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80043b2:	7afa      	ldrb	r2, [r7, #11]
 80043b4:	492d      	ldr	r1, [pc, #180]	@ (800446c <ES_WIFI_SendData+0xfc>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f009 fd86 	bl	800dec8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80043c8:	461a      	mov	r2, r3
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fbec 	bl	8003ba8 <AT_ExecuteCommand>
 80043d0:	4603      	mov	r3, r0
 80043d2:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d13c      	bne.n	8004454 <ES_WIFI_SendData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4923      	ldr	r1, [pc, #140]	@ (8004470 <ES_WIFI_SendData+0x100>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f009 fd6f 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80043f6:	461a      	mov	r2, r3
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fbd5 	bl	8003ba8 <AT_ExecuteCommand>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8004402:	7cfb      	ldrb	r3, [r7, #19]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d125      	bne.n	8004454 <ES_WIFI_SendData+0xe4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800440e:	893a      	ldrh	r2, [r7, #8]
 8004410:	4918      	ldr	r1, [pc, #96]	@ (8004474 <ES_WIFI_SendData+0x104>)
 8004412:	4618      	mov	r0, r3
 8004414:	f009 fd58 	bl	800dec8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004424:	893a      	ldrh	r2, [r7, #8]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fc21 	bl	8003c74 <AT_RequestSendData>
 8004432:	4603      	mov	r3, r0
 8004434:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <ES_WIFI_SendData+0xe4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004442:	490d      	ldr	r1, [pc, #52]	@ (8004478 <ES_WIFI_SendData+0x108>)
 8004444:	4618      	mov	r0, r3
 8004446:	f009 fed1 	bl	800e1ec <strstr>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <ES_WIFI_SendData+0xe4>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
          ret = ES_WIFI_STATUS_ERROR;
 8004450:	2302      	movs	r3, #2
 8004452:	74fb      	strb	r3, [r7, #19]
  else
  {
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b02      	cmp	r3, #2
 8004458:	d102      	bne.n	8004460 <ES_WIFI_SendData+0xf0>
  {
    *SentLen = 0;
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8004460:	7cfb      	ldrb	r3, [r7, #19]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	080111e8 	.word	0x080111e8
 8004470:	080112cc 	.word	0x080112cc
 8004474:	080112d4 	.word	0x080112d4
 8004478:	080112e0 	.word	0x080112e0

0800447c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	72fb      	strb	r3, [r7, #11]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004490:	2302      	movs	r3, #2
 8004492:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 800449a:	2301      	movs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e001      	b.n	80044a4 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80044aa:	d862      	bhi.n	8004572 <ES_WIFI_ReceiveData+0xf6>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80044b2:	7afa      	ldrb	r2, [r7, #11]
 80044b4:	4931      	ldr	r1, [pc, #196]	@ (800457c <ES_WIFI_ReceiveData+0x100>)
 80044b6:	4618      	mov	r0, r3
 80044b8:	f009 fd06 	bl	800dec8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80044c8:	461a      	mov	r2, r3
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f7ff fb6c 	bl	8003ba8 <AT_ExecuteCommand>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d146      	bne.n	8004568 <ES_WIFI_ReceiveData+0xec>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80044e0:	893a      	ldrh	r2, [r7, #8]
 80044e2:	4927      	ldr	r1, [pc, #156]	@ (8004580 <ES_WIFI_ReceiveData+0x104>)
 80044e4:	4618      	mov	r0, r3
 80044e6:	f009 fcef 	bl	800dec8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80044f6:	461a      	mov	r2, r3
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fb55 	bl	8003ba8 <AT_ExecuteCommand>
 80044fe:	4603      	mov	r3, r0
 8004500:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8004502:	7cfb      	ldrb	r3, [r7, #19]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d12b      	bne.n	8004560 <ES_WIFI_ReceiveData+0xe4>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	491c      	ldr	r1, [pc, #112]	@ (8004584 <ES_WIFI_ReceiveData+0x108>)
 8004512:	4618      	mov	r0, r3
 8004514:	f009 fcd8 	bl	800dec8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004524:	461a      	mov	r2, r3
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f7ff fb3e 	bl	8003ba8 <AT_ExecuteCommand>
 800452c:	4603      	mov	r3, r0
 800452e:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <ES_WIFI_ReceiveData+0xf6>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800453c:	4912      	ldr	r1, [pc, #72]	@ (8004588 <ES_WIFI_ReceiveData+0x10c>)
 800453e:	4618      	mov	r0, r3
 8004540:	f009 fcc2 	bl	800dec8 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800454a:	893a      	ldrh	r2, [r7, #8]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f7ff fc03 	bl	8003d60 <AT_RequestReceiveData>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]
 800455e:	e008      	b.n	8004572 <ES_WIFI_ReceiveData+0xf6>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
        *Receivedlen = 0;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e004      	b.n	8004572 <ES_WIFI_ReceiveData+0xf6>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
      issue15++;
 8004568:	4b08      	ldr	r3, [pc, #32]	@ (800458c <ES_WIFI_ReceiveData+0x110>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	4a07      	ldr	r2, [pc, #28]	@ (800458c <ES_WIFI_ReceiveData+0x110>)
 8004570:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8004572:	7cfb      	ldrb	r3, [r7, #19]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	080111e8 	.word	0x080111e8
 8004580:	080112e8 	.word	0x080112e8
 8004584:	080112f0 	.word	0x080112f0
 8004588:	080112f8 	.word	0x080112f8
 800458c:	20000a80 	.word	0x20000a80

08004590 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2120      	movs	r1, #32
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff f82d 	bl	8003600 <SENSOR_IO_Read>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	f023 0303 	bic.w	r3, r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045d0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	2120      	movs	r1, #32
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fff6 	bl	80035cc <SENSOR_IO_Write>
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80045f6:	f7fe ffdf 	bl	80035b8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	210f      	movs	r1, #15
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fffd 	bl	8003600 <SENSOR_IO_Read>
 8004606:	4603      	mov	r3, r0
 8004608:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	b2d8      	uxtb	r0, r3
 8004622:	f107 020c 	add.w	r2, r7, #12
 8004626:	2302      	movs	r3, #2
 8004628:	21b0      	movs	r1, #176	@ 0xb0
 800462a:	f7ff f807 	bl	800363c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800462e:	7b3b      	ldrb	r3, [r7, #12]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8004636:	7b7b      	ldrb	r3, [r7, #13]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	b2d8      	uxtb	r0, r3
 8004642:	f107 020c 	add.w	r2, r7, #12
 8004646:	2302      	movs	r3, #2
 8004648:	21b6      	movs	r1, #182	@ 0xb6
 800464a:	f7fe fff7 	bl	800363c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800464e:	7b7b      	ldrb	r3, [r7, #13]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b21a      	sxth	r2, r3
 8004654:	7b3b      	ldrb	r3, [r7, #12]
 8004656:	b21b      	sxth	r3, r3
 8004658:	4313      	orrs	r3, r2
 800465a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	b2d8      	uxtb	r0, r3
 8004660:	f107 020c 	add.w	r2, r7, #12
 8004664:	2302      	movs	r3, #2
 8004666:	21ba      	movs	r1, #186	@ 0xba
 8004668:	f7fe ffe8 	bl	800363c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800466c:	7b7b      	ldrb	r3, [r7, #13]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	b21a      	sxth	r2, r3
 8004672:	7b3b      	ldrb	r3, [r7, #12]
 8004674:	b21b      	sxth	r3, r3
 8004676:	4313      	orrs	r3, r2
 8004678:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	b2d8      	uxtb	r0, r3
 800467e:	f107 020c 	add.w	r2, r7, #12
 8004682:	2302      	movs	r3, #2
 8004684:	21a8      	movs	r1, #168	@ 0xa8
 8004686:	f7fe ffd9 	bl	800363c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800468a:	7b7b      	ldrb	r3, [r7, #13]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	b21a      	sxth	r2, r3
 8004690:	7b3b      	ldrb	r3, [r7, #12]
 8004692:	b21b      	sxth	r3, r3
 8004694:	4313      	orrs	r3, r2
 8004696:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8004698:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800469c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046aa:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80046ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80046c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80046ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80046ee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80046f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f6:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80046fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80046fe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004744 <HTS221_H_ReadHumidity+0x130>
 8004702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470a:	dd01      	ble.n	8004710 <HTS221_H_ReadHumidity+0xfc>
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <HTS221_H_ReadHumidity+0x134>)
 800470e:	e00a      	b.n	8004726 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8004710:	edd7 7a04 	vldr	s15, [r7, #16]
 8004714:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d502      	bpl.n	8004724 <HTS221_H_ReadHumidity+0x110>
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e000      	b.n	8004726 <HTS221_H_ReadHumidity+0x112>
 8004724:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8004726:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8004728:	edd7 7a04 	vldr	s15, [r7, #16]
 800472c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004730:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004734:	eef0 7a66 	vmov.f32	s15, s13
}
 8004738:	eeb0 0a67 	vmov.f32	s0, s15
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	447a0000 	.word	0x447a0000
 8004748:	447a0000 	.word	0x447a0000

0800474c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2120      	movs	r1, #32
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe ff4e 	bl	8003600 <SENSOR_IO_Read>
 8004764:	4603      	mov	r3, r0
 8004766:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800478e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	2120      	movs	r1, #32
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe ff17 	bl	80035cc <SENSOR_IO_Write>
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b088      	sub	sp, #32
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	4603      	mov	r3, r0
 80047ae:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	b2d8      	uxtb	r0, r3
 80047b4:	f107 0208 	add.w	r2, r7, #8
 80047b8:	2302      	movs	r3, #2
 80047ba:	21b2      	movs	r1, #178	@ 0xb2
 80047bc:	f7fe ff3e 	bl	800363c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2135      	movs	r1, #53	@ 0x35
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe ff1a 	bl	8003600 <SENSOR_IO_Read>
 80047cc:	4603      	mov	r3, r0
 80047ce:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80047d0:	7ffb      	ldrb	r3, [r7, #31]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047da:	b21a      	sxth	r2, r3
 80047dc:	7a3b      	ldrb	r3, [r7, #8]
 80047de:	b21b      	sxth	r3, r3
 80047e0:	4313      	orrs	r3, r2
 80047e2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80047e4:	7ffb      	ldrb	r3, [r7, #31]
 80047e6:	019b      	lsls	r3, r3, #6
 80047e8:	b21b      	sxth	r3, r3
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	7a7b      	ldrb	r3, [r7, #9]
 80047f2:	b21b      	sxth	r3, r3
 80047f4:	4313      	orrs	r3, r2
 80047f6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80047f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047fc:	10db      	asrs	r3, r3, #3
 80047fe:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8004800:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004804:	10db      	asrs	r3, r3, #3
 8004806:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	b2d8      	uxtb	r0, r3
 800480c:	f107 0208 	add.w	r2, r7, #8
 8004810:	2304      	movs	r3, #4
 8004812:	21bc      	movs	r1, #188	@ 0xbc
 8004814:	f7fe ff12 	bl	800363c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004818:	7a7b      	ldrb	r3, [r7, #9]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	b21a      	sxth	r2, r3
 800481e:	7a3b      	ldrb	r3, [r7, #8]
 8004820:	b21b      	sxth	r3, r3
 8004822:	4313      	orrs	r3, r2
 8004824:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004826:	7afb      	ldrb	r3, [r7, #11]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	b21a      	sxth	r2, r3
 800482c:	7abb      	ldrb	r3, [r7, #10]
 800482e:	b21b      	sxth	r3, r3
 8004830:	4313      	orrs	r3, r2
 8004832:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	b2d8      	uxtb	r0, r3
 8004838:	f107 0208 	add.w	r2, r7, #8
 800483c:	2302      	movs	r3, #2
 800483e:	21aa      	movs	r1, #170	@ 0xaa
 8004840:	f7fe fefc 	bl	800363c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004844:	7a7b      	ldrb	r3, [r7, #9]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	b21a      	sxth	r2, r3
 800484a:	7a3b      	ldrb	r3, [r7, #8]
 800484c:	b21b      	sxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004852:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004856:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004864:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004868:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004876:	ee67 6a27 	vmul.f32	s13, s14, s15
 800487a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800487e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	ee07 3a90 	vmov	s15, r3
 8004888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800488c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004890:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004894:	ee07 3a90 	vmov	s15, r3
 8004898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800489c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	ee07 3a90 	vmov	s15, r3
}
 80048aa:	eeb0 0a67 	vmov.f32	s0, s15
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048be:	2003      	movs	r0, #3
 80048c0:	f001 fba2 	bl	8006008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048c4:	2000      	movs	r0, #0
 80048c6:	f000 f80d 	bl	80048e4 <HAL_InitTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	71fb      	strb	r3, [r7, #7]
 80048d4:	e001      	b.n	80048da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048d6:	f7fe f85f 	bl	8002998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048da:	79fb      	ldrb	r3, [r7, #7]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <HAL_InitTick+0x6c>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d023      	beq.n	8004940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048f8:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <HAL_InitTick+0x70>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <HAL_InitTick+0x6c>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004906:	fbb3 f3f1 	udiv	r3, r3, r1
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fbaf 	bl	8006072 <HAL_SYSTICK_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b0f      	cmp	r3, #15
 800491e:	d809      	bhi.n	8004934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004920:	2200      	movs	r2, #0
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	f001 fb79 	bl	800601e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800492c:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <HAL_InitTick+0x74>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e007      	b.n	8004944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e004      	b.n	8004944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	e001      	b.n	8004944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	2000003c 	.word	0x2000003c
 8004954:	20000018 	.word	0x20000018
 8004958:	20000038 	.word	0x20000038

0800495c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <HAL_IncTick+0x20>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <HAL_IncTick+0x24>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4413      	add	r3, r2
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <HAL_IncTick+0x24>)
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	2000003c 	.word	0x2000003c
 8004980:	20000a84 	.word	0x20000a84

08004984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return uwTick;
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <HAL_GetTick+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000a84 	.word	0x20000a84

0800499c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049a4:	f7ff ffee 	bl	8004984 <HAL_GetTick>
 80049a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d005      	beq.n	80049c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_Delay+0x44>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049c2:	bf00      	nop
 80049c4:	f7ff ffde 	bl	8004984 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d8f7      	bhi.n	80049c4 <HAL_Delay+0x28>
  {
  }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000003c 	.word	0x2000003c

080049e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	609a      	str	r2, [r3, #8]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3360      	adds	r3, #96	@ 0x60
 8004a5e:	461a      	mov	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <LL_ADC_SetOffset+0x44>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	03fff000 	.word	0x03fff000

08004a94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3360      	adds	r3, #96	@ 0x60
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3360      	adds	r3, #96	@ 0x60
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	615a      	str	r2, [r3, #20]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b087      	sub	sp, #28
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3330      	adds	r3, #48	@ 0x30
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	4413      	add	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	211f      	movs	r1, #31
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	401a      	ands	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	0e9b      	lsrs	r3, r3, #26
 8004b7a:	f003 011f 	and.w	r1, r3, #31
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	461a      	mov	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0e5b      	lsrs	r3, r3, #25
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	4413      	add	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2107      	movs	r1, #7
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	401a      	ands	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	0d1b      	lsrs	r3, r3, #20
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	431a      	orrs	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f003 0318 	and.w	r3, r3, #24
 8004c12:	4908      	ldr	r1, [pc, #32]	@ (8004c34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004c14:	40d9      	lsrs	r1, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	400b      	ands	r3, r1
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	0007ffff 	.word	0x0007ffff

08004c38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6093      	str	r3, [r2, #8]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c70:	d101      	bne.n	8004c76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cc0:	d101      	bne.n	8004cc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d10:	f043 0202 	orr.w	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <LL_ADC_IsEnabled+0x18>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <LL_ADC_IsEnabled+0x1a>
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d101      	bne.n	8004d62 <LL_ADC_IsDisableOngoing+0x18>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <LL_ADC_IsDisableOngoing+0x1a>
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004da8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d101      	bne.n	8004dd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004df6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d101      	bne.n	8004e26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e12f      	b.n	80050ae <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fd fdbf 	bl	80029e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fef1 	bl	8004c5c <LL_ADC_IsDeepPowerDownEnabled>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fed7 	bl	8004c38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff0c 	bl	8004cac <LL_ADC_IsInternalRegulatorEnabled>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d115      	bne.n	8004ec6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fef0 	bl	8004c84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ea4:	4b84      	ldr	r3, [pc, #528]	@ (80050b8 <HAL_ADC_Init+0x284>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	099b      	lsrs	r3, r3, #6
 8004eaa:	4a84      	ldr	r2, [pc, #528]	@ (80050bc <HAL_ADC_Init+0x288>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004eb8:	e002      	b.n	8004ec0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f9      	bne.n	8004eba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff feee 	bl	8004cac <LL_ADC_IsInternalRegulatorEnabled>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	f043 0210 	orr.w	r2, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff62 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 8004efc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 80c8 	bne.w	800509c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f040 80c4 	bne.w	800509c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f1c:	f043 0202 	orr.w	r2, r3, #2
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fefb 	bl	8004d24 <LL_ADC_IsEnabled>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f34:	4862      	ldr	r0, [pc, #392]	@ (80050c0 <HAL_ADC_Init+0x28c>)
 8004f36:	f7ff fef5 	bl	8004d24 <LL_ADC_IsEnabled>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4619      	mov	r1, r3
 8004f46:	485f      	ldr	r0, [pc, #380]	@ (80050c4 <HAL_ADC_Init+0x290>)
 8004f48:	f7ff fd4c 	bl	80049e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e5b      	ldrb	r3, [r3, #25]
 8004f50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004f5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004f62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d106      	bne.n	8004f88 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	045b      	lsls	r3, r3, #17
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f94:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_ADC_Init+0x294>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	69b9      	ldr	r1, [r7, #24]
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff feff 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 8004fc2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff20 	bl	8004e0e <LL_ADC_INJ_IsConversionOngoing>
 8004fce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d140      	bne.n	8005058 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d13d      	bne.n	8005058 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7e1b      	ldrb	r3, [r3, #24]
 8004fe4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004fe6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004fee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ffe:	f023 0306 	bic.w	r3, r3, #6
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	69b9      	ldr	r1, [r7, #24]
 8005008:	430b      	orrs	r3, r1
 800500a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005012:	2b01      	cmp	r3, #1
 8005014:	d118      	bne.n	8005048 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800502c:	4311      	orrs	r1, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005038:	430a      	orrs	r2, r1
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	611a      	str	r2, [r3, #16]
 8005046:	e007      	b.n	8005058 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d10c      	bne.n	800507a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005066:	f023 010f 	bic.w	r1, r3, #15
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	1e5a      	subs	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
 8005078:	e007      	b.n	800508a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 020f 	bic.w	r2, r2, #15
 8005088:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	659a      	str	r2, [r3, #88]	@ 0x58
 800509a:	e007      	b.n	80050ac <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000018 	.word	0x20000018
 80050bc:	053e2d63 	.word	0x053e2d63
 80050c0:	50040000 	.word	0x50040000
 80050c4:	50040300 	.word	0x50040300
 80050c8:	fff0c007 	.word	0xfff0c007

080050cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe71 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d14f      	bne.n	8005184 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_ADC_Start+0x26>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e04b      	b.n	800518a <HAL_ADC_Start+0xbe>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fdce 	bl	8005c9c <ADC_Enable>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d137      	bne.n	800517a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d106      	bne.n	800513a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	f023 0206 	bic.w	r2, r3, #6
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005138:	e002      	b.n	8005140 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	221c      	movs	r2, #28
 8005146:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d007      	beq.n	800516e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005162:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005166:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fdfc 	bl	8004d70 <LL_ADC_REG_StartConversion>
 8005178:	e006      	b.n	8005188 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005182:	e001      	b.n	8005188 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005184:	2302      	movs	r3, #2
 8005186:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8005188:	7bfb      	ldrb	r3, [r7, #15]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_ADC_Stop+0x16>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e023      	b.n	80051f0 <HAL_ADC_Stop+0x5e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80051b0:	2103      	movs	r1, #3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fcb6 	bl	8005b24 <ADC_ConversionStop>
 80051b8:	4603      	mov	r3, r0
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d111      	bne.n	80051e6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fdf0 	bl	8005da8 <ADC_Disable>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d109      	bne.n	80051e6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	f043 0201 	orr.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d102      	bne.n	8005210 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800520a:	2308      	movs	r3, #8
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e010      	b.n	8005232 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e06f      	b.n	800530e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800522e:	2304      	movs	r3, #4
 8005230:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005232:	f7ff fba7 	bl	8004984 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005238:	e021      	b.n	800527e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d01d      	beq.n	800527e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005242:	f7ff fb9f 	bl	8004984 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <HAL_ADC_PollForConversion+0x60>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e047      	b.n	800530e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0d6      	beq.n	800523a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fc3d 	bl	8004b1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01c      	beq.n	80052e2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7e5b      	ldrb	r3, [r3, #25]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d118      	bne.n	80052e2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d111      	bne.n	80052e2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d105      	bne.n	80052e2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052da:	f043 0201 	orr.w	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2208      	movs	r2, #8
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e008      	b.n	800530c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	220c      	movs	r2, #12
 800530a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0b6      	sub	sp, #216	@ 0xd8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x22>
 800534e:	2302      	movs	r3, #2
 8005350:	e3d3      	b.n	8005afa <HAL_ADC_ConfigChannel+0x7ca>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fd2e 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 83b8 	bne.w	8005adc <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d824      	bhi.n	80053be <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	3b02      	subs	r3, #2
 800537a:	2b03      	cmp	r3, #3
 800537c:	d81b      	bhi.n	80053b6 <HAL_ADC_ConfigChannel+0x86>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <HAL_ADC_ConfigChannel+0x54>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	08005395 	.word	0x08005395
 8005388:	0800539d 	.word	0x0800539d
 800538c:	080053a5 	.word	0x080053a5
 8005390:	080053ad 	.word	0x080053ad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	220c      	movs	r2, #12
 8005398:	605a      	str	r2, [r3, #4]
          break;
 800539a:	e010      	b.n	80053be <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2212      	movs	r2, #18
 80053a0:	605a      	str	r2, [r3, #4]
          break;
 80053a2:	e00c      	b.n	80053be <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2218      	movs	r2, #24
 80053a8:	605a      	str	r2, [r3, #4]
          break;
 80053aa:	e008      	b.n	80053be <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053b2:	605a      	str	r2, [r3, #4]
          break;
 80053b4:	e003      	b.n	80053be <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2206      	movs	r2, #6
 80053ba:	605a      	str	r2, [r3, #4]
          break;
 80053bc:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7ff fbb9 	bl	8004b42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fcf3 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 80053da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fd13 	bl	8004e0e <LL_ADC_INJ_IsConversionOngoing>
 80053e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 81c1 	bne.w	8005778 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 81bc 	bne.w	8005778 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005408:	d10f      	bne.n	800542a <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	4619      	mov	r1, r3
 8005416:	f7ff fbc0 	bl	8004b9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff fb67 	bl	8004af6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005428:	e00e      	b.n	8005448 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	461a      	mov	r2, r3
 8005438:	f7ff fbaf 	bl	8004b9a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fb57 	bl	8004af6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b04      	cmp	r3, #4
 8005468:	d00a      	beq.n	8005480 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6919      	ldr	r1, [r3, #16]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800547a:	f7ff fae7 	bl	8004a4c <LL_ADC_SetOffset>
 800547e:	e17b      	b.n	8005778 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fb04 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 800548c:	4603      	mov	r3, r0
 800548e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x17c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff faf9 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 80054a2:	4603      	mov	r3, r0
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	f003 021f 	and.w	r2, r3, #31
 80054aa:	e01e      	b.n	80054ea <HAL_ADC_ConfigChannel+0x1ba>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff faee 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80054c2:	fa93 f3a3 	rbit	r3, r3
 80054c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80054ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80054d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e004      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80054de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d105      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x1d2>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	0e9b      	lsrs	r3, r3, #26
 80054fc:	f003 031f 	and.w	r3, r3, #31
 8005500:	e018      	b.n	8005534 <HAL_ADC_ConfigChannel+0x204>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800551a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800551e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8005526:	2320      	movs	r3, #32
 8005528:	e004      	b.n	8005534 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 800552a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005534:	429a      	cmp	r2, r3
 8005536:	d106      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fabd 	bl	8004ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2101      	movs	r1, #1
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff faa1 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 8005552:	4603      	mov	r3, r0
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <HAL_ADC_ConfigChannel+0x242>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2101      	movs	r1, #1
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff fa96 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 8005568:	4603      	mov	r3, r0
 800556a:	0e9b      	lsrs	r3, r3, #26
 800556c:	f003 021f 	and.w	r2, r3, #31
 8005570:	e01e      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x280>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2101      	movs	r1, #1
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fa8b 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 800557e:	4603      	mov	r3, r0
 8005580:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005590:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e004      	b.n	80055ae <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 80055a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x298>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	0e9b      	lsrs	r3, r3, #26
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	e018      	b.n	80055fa <HAL_ADC_ConfigChannel+0x2ca>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80055d4:	fa93 f3a3 	rbit	r3, r3
 80055d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80055dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80055e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80055ec:	2320      	movs	r3, #32
 80055ee:	e004      	b.n	80055fa <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80055f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d106      	bne.n	800560c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fa5a 	bl	8004ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2102      	movs	r1, #2
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fa3e 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 8005618:	4603      	mov	r3, r0
 800561a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10a      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x308>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2102      	movs	r1, #2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fa33 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 800562e:	4603      	mov	r3, r0
 8005630:	0e9b      	lsrs	r3, r3, #26
 8005632:	f003 021f 	and.w	r2, r3, #31
 8005636:	e01e      	b.n	8005676 <HAL_ADC_ConfigChannel+0x346>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fa28 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 8005644:	4603      	mov	r3, r0
 8005646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005656:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800565e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8005666:	2320      	movs	r3, #32
 8005668:	e004      	b.n	8005674 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 800566a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <HAL_ADC_ConfigChannel+0x35e>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	0e9b      	lsrs	r3, r3, #26
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	e016      	b.n	80056bc <HAL_ADC_ConfigChannel+0x38c>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80056a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80056a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 80056ae:	2320      	movs	r3, #32
 80056b0:	e004      	b.n	80056bc <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 80056b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80056bc:	429a      	cmp	r2, r3
 80056be:	d106      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2102      	movs	r1, #2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff f9f9 	bl	8004ac0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2103      	movs	r1, #3
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff f9dd 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 80056da:	4603      	mov	r3, r0
 80056dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x3ca>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2103      	movs	r1, #3
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff f9d2 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 80056f0:	4603      	mov	r3, r0
 80056f2:	0e9b      	lsrs	r3, r3, #26
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	e017      	b.n	800572a <HAL_ADC_ConfigChannel+0x3fa>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2103      	movs	r1, #3
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff f9c7 	bl	8004a94 <LL_ADC_GetOffsetChannel>
 8005706:	4603      	mov	r3, r0
 8005708:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005714:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	e003      	b.n	8005728 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8005720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_ADC_ConfigChannel+0x412>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	0e9b      	lsrs	r3, r3, #26
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	e011      	b.n	8005766 <HAL_ADC_ConfigChannel+0x436>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800574a:	fa93 f3a3 	rbit	r3, r3
 800574e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005752:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 800575a:	2320      	movs	r3, #32
 800575c:	e003      	b.n	8005766 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800575e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005760:	fab3 f383 	clz	r3, r3
 8005764:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005766:	429a      	cmp	r2, r3
 8005768:	d106      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2200      	movs	r2, #0
 8005770:	2103      	movs	r1, #3
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff f9a4 	bl	8004ac0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fad1 	bl	8004d24 <LL_ADC_IsEnabled>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	f040 813f 	bne.w	8005a08 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6819      	ldr	r1, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f7ff fa2a 	bl	8004bf0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	4a8e      	ldr	r2, [pc, #568]	@ (80059dc <HAL_ADC_ConfigChannel+0x6ac>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f040 8130 	bne.w	8005a08 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x4a0>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	0e9b      	lsrs	r3, r3, #26
 80057be:	3301      	adds	r3, #1
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2b09      	cmp	r3, #9
 80057c6:	bf94      	ite	ls
 80057c8:	2301      	movls	r3, #1
 80057ca:	2300      	movhi	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e019      	b.n	8005804 <HAL_ADC_ConfigChannel+0x4d4>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057d8:	fa93 f3a3 	rbit	r3, r3
 80057dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80057de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80057e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80057e8:	2320      	movs	r3, #32
 80057ea:	e003      	b.n	80057f4 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80057ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057ee:	fab3 f383 	clz	r3, r3
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	3301      	adds	r3, #1
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b09      	cmp	r3, #9
 80057fc:	bf94      	ite	ls
 80057fe:	2301      	movls	r3, #1
 8005800:	2300      	movhi	r3, #0
 8005802:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005804:	2b00      	cmp	r3, #0
 8005806:	d079      	beq.n	80058fc <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x4f4>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	0e9b      	lsrs	r3, r3, #26
 800581a:	3301      	adds	r3, #1
 800581c:	069b      	lsls	r3, r3, #26
 800581e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005822:	e015      	b.n	8005850 <HAL_ADC_ConfigChannel+0x520>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582c:	fa93 f3a3 	rbit	r3, r3
 8005830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 800583c:	2320      	movs	r3, #32
 800583e:	e003      	b.n	8005848 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8005840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3301      	adds	r3, #1
 800584a:	069b      	lsls	r3, r3, #26
 800584c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x540>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	0e9b      	lsrs	r3, r3, #26
 8005862:	3301      	adds	r3, #1
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	e017      	b.n	80058a0 <HAL_ADC_ConfigChannel+0x570>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800587e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005880:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8005888:	2320      	movs	r3, #32
 800588a:	e003      	b.n	8005894 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 800588c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	3301      	adds	r3, #1
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	ea42 0103 	orr.w	r1, r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x596>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e9b      	lsrs	r3, r3, #26
 80058b6:	3301      	adds	r3, #1
 80058b8:	f003 021f 	and.w	r2, r3, #31
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	051b      	lsls	r3, r3, #20
 80058c4:	e018      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x5c8>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	fa93 f3a3 	rbit	r3, r3
 80058d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80058d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80058de:	2320      	movs	r3, #32
 80058e0:	e003      	b.n	80058ea <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80058e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3301      	adds	r3, #1
 80058ec:	f003 021f 	and.w	r2, r3, #31
 80058f0:	4613      	mov	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	4413      	add	r3, r2
 80058f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058f8:	430b      	orrs	r3, r1
 80058fa:	e080      	b.n	80059fe <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005904:	2b00      	cmp	r3, #0
 8005906:	d107      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x5e8>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	0e9b      	lsrs	r3, r3, #26
 800590e:	3301      	adds	r3, #1
 8005910:	069b      	lsls	r3, r3, #26
 8005912:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005916:	e015      	b.n	8005944 <HAL_ADC_ConfigChannel+0x614>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005920:	fa93 f3a3 	rbit	r3, r3
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8005930:	2320      	movs	r3, #32
 8005932:	e003      	b.n	800593c <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8005934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3301      	adds	r3, #1
 800593e:	069b      	lsls	r3, r3, #26
 8005940:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_ADC_ConfigChannel+0x634>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	0e9b      	lsrs	r3, r3, #26
 8005956:	3301      	adds	r3, #1
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	e017      	b.n	8005994 <HAL_ADC_ConfigChannel+0x664>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	fa93 f3a3 	rbit	r3, r3
 8005970:	61fb      	str	r3, [r7, #28]
  return result;
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 800597c:	2320      	movs	r3, #32
 800597e:	e003      	b.n	8005988 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3301      	adds	r3, #1
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2101      	movs	r1, #1
 8005990:	fa01 f303 	lsl.w	r3, r1, r3
 8005994:	ea42 0103 	orr.w	r1, r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10d      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x690>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	0e9b      	lsrs	r3, r3, #26
 80059aa:	3301      	adds	r3, #1
 80059ac:	f003 021f 	and.w	r2, r3, #31
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	3b1e      	subs	r3, #30
 80059b8:	051b      	lsls	r3, r3, #20
 80059ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059be:	e01d      	b.n	80059fc <HAL_ADC_ConfigChannel+0x6cc>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	fa93 f3a3 	rbit	r3, r3
 80059cc:	613b      	str	r3, [r7, #16]
  return result;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80059d8:	2320      	movs	r3, #32
 80059da:	e005      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x6b8>
 80059dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3301      	adds	r3, #1
 80059ea:	f003 021f 	and.w	r2, r3, #31
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	3b1e      	subs	r3, #30
 80059f6:	051b      	lsls	r3, r3, #20
 80059f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059fc:	430b      	orrs	r3, r1
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	6892      	ldr	r2, [r2, #8]
 8005a02:	4619      	mov	r1, r3
 8005a04:	f7ff f8c9 	bl	8004b9a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <HAL_ADC_ConfigChannel+0x7d4>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d06c      	beq.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a14:	483c      	ldr	r0, [pc, #240]	@ (8005b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8005a16:	f7ff f80b 	bl	8004a30 <LL_ADC_GetCommonPathInternalCh>
 8005a1a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3a      	ldr	r2, [pc, #232]	@ (8005b0c <HAL_ADC_ConfigChannel+0x7dc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d127      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d121      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a35      	ldr	r2, [pc, #212]	@ (8005b10 <HAL_ADC_ConfigChannel+0x7e0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d157      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a46:	4619      	mov	r1, r3
 8005a48:	482f      	ldr	r0, [pc, #188]	@ (8005b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8005a4a:	f7fe ffde 	bl	8004a0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a4e:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <HAL_ADC_ConfigChannel+0x7e4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	099b      	lsrs	r3, r3, #6
 8005a54:	4a30      	ldr	r2, [pc, #192]	@ (8005b18 <HAL_ADC_ConfigChannel+0x7e8>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	099b      	lsrs	r3, r3, #6
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a68:	e002      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f9      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a76:	e03a      	b.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	@ (8005b1c <HAL_ADC_ConfigChannel+0x7ec>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d113      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x77a>
 8005a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	@ (8005b10 <HAL_ADC_ConfigChannel+0x7e0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d12a      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4819      	ldr	r0, [pc, #100]	@ (8005b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8005aa4:	f7fe ffb1 	bl	8004a0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aa8:	e021      	b.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <HAL_ADC_ConfigChannel+0x7f0>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d11c      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ab8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <HAL_ADC_ConfigChannel+0x7e0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d111      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ace:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	480c      	ldr	r0, [pc, #48]	@ (8005b08 <HAL_ADC_ConfigChannel+0x7d8>)
 8005ad6:	f7fe ff98 	bl	8004a0a <LL_ADC_SetCommonPathInternalCh>
 8005ada:	e008      	b.n	8005aee <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae0:	f043 0220 	orr.w	r2, r3, #32
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005af6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	37d8      	adds	r7, #216	@ 0xd8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	80080000 	.word	0x80080000
 8005b08:	50040300 	.word	0x50040300
 8005b0c:	c7520000 	.word	0xc7520000
 8005b10:	50040000 	.word	0x50040000
 8005b14:	20000018 	.word	0x20000018
 8005b18:	053e2d63 	.word	0x053e2d63
 8005b1c:	cb840000 	.word	0xcb840000
 8005b20:	80000001 	.word	0x80000001

08005b24 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff f940 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 8005b40:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff f961 	bl	8004e0e <LL_ADC_INJ_IsConversionOngoing>
 8005b4c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d103      	bne.n	8005b5c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8098 	beq.w	8005c8c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d02a      	beq.n	8005bc0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	7e5b      	ldrb	r3, [r3, #25]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d126      	bne.n	8005bc0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7e1b      	ldrb	r3, [r3, #24]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d122      	bne.n	8005bc0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005b7e:	e014      	b.n	8005baa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4a45      	ldr	r2, [pc, #276]	@ (8005c98 <ADC_ConversionStop+0x174>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d90d      	bls.n	8005ba4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8c:	f043 0210 	orr.w	r2, r3, #16
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b98:	f043 0201 	orr.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e074      	b.n	8005c8e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d1e3      	bne.n	8005b80 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2240      	movs	r2, #64	@ 0x40
 8005bbe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d014      	beq.n	8005bf0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff f8f8 	bl	8004dc0 <LL_ADC_REG_IsConversionOngoing>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff f8b5 	bl	8004d4a <LL_ADC_IsDisableOngoing>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff f8d4 	bl	8004d98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d014      	beq.n	8005c20 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff f907 	bl	8004e0e <LL_ADC_INJ_IsConversionOngoing>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff f89d 	bl	8004d4a <LL_ADC_IsDisableOngoing>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff f8e3 	bl	8004de6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d005      	beq.n	8005c32 <ADC_ConversionStop+0x10e>
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d105      	bne.n	8005c38 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	617b      	str	r3, [r7, #20]
        break;
 8005c30:	e005      	b.n	8005c3e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005c32:	2308      	movs	r3, #8
 8005c34:	617b      	str	r3, [r7, #20]
        break;
 8005c36:	e002      	b.n	8005c3e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005c38:	2304      	movs	r3, #4
 8005c3a:	617b      	str	r3, [r7, #20]
        break;
 8005c3c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005c3e:	f7fe fea1 	bl	8004984 <HAL_GetTick>
 8005c42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c44:	e01b      	b.n	8005c7e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005c46:	f7fe fe9d 	bl	8004984 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d914      	bls.n	8005c7e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c66:	f043 0210 	orr.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e007      	b.n	8005c8e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1dc      	bne.n	8005c46 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	a33fffff 	.word	0xa33fffff

08005c9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f839 	bl	8004d24 <LL_ADC_IsEnabled>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d169      	bne.n	8005d8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	4b36      	ldr	r3, [pc, #216]	@ (8005d98 <ADC_Enable+0xfc>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	f043 0210 	orr.w	r2, r3, #16
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd6:	f043 0201 	orr.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e055      	b.n	8005d8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fff4 	bl	8004cd4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005cec:	482b      	ldr	r0, [pc, #172]	@ (8005d9c <ADC_Enable+0x100>)
 8005cee:	f7fe fe9f 	bl	8004a30 <LL_ADC_GetCommonPathInternalCh>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cfc:	4b28      	ldr	r3, [pc, #160]	@ (8005da0 <ADC_Enable+0x104>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	4a28      	ldr	r2, [pc, #160]	@ (8005da4 <ADC_Enable+0x108>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	099b      	lsrs	r3, r3, #6
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005d16:	e002      	b.n	8005d1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f9      	bne.n	8005d18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005d24:	f7fe fe2e 	bl	8004984 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d2a:	e028      	b.n	8005d7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fff7 	bl	8004d24 <LL_ADC_IsEnabled>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe ffc7 	bl	8004cd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d46:	f7fe fe1d 	bl	8004984 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d914      	bls.n	8005d7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d00d      	beq.n	8005d7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d66:	f043 0210 	orr.w	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f043 0201 	orr.w	r2, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e007      	b.n	8005d8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d1cf      	bne.n	8005d2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	8000003f 	.word	0x8000003f
 8005d9c:	50040300 	.word	0x50040300
 8005da0:	20000018 	.word	0x20000018
 8005da4:	053e2d63 	.word	0x053e2d63

08005da8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe ffc8 	bl	8004d4a <LL_ADC_IsDisableOngoing>
 8005dba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe ffaf 	bl	8004d24 <LL_ADC_IsEnabled>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d047      	beq.n	8005e5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d144      	bne.n	8005e5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 030d 	and.w	r3, r3, #13
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10c      	bne.n	8005dfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe ff89 	bl	8004cfc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2203      	movs	r2, #3
 8005df0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005df2:	f7fe fdc7 	bl	8004984 <HAL_GetTick>
 8005df6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005df8:	e029      	b.n	8005e4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dfe:	f043 0210 	orr.w	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e023      	b.n	8005e5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e16:	f7fe fdb5 	bl	8004984 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d914      	bls.n	8005e4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e36:	f043 0210 	orr.w	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e42:	f043 0201 	orr.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e007      	b.n	8005e5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1dc      	bne.n	8005e16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e78:	4b0c      	ldr	r3, [pc, #48]	@ (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e84:	4013      	ands	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e9a:	4a04      	ldr	r2, [pc, #16]	@ (8005eac <__NVIC_SetPriorityGrouping+0x44>)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	60d3      	str	r3, [r2, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	e000ed00 	.word	0xe000ed00

08005eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005eb4:	4b04      	ldr	r3, [pc, #16]	@ (8005ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	f003 0307 	and.w	r3, r3, #7
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db0b      	blt.n	8005ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	f003 021f 	and.w	r2, r3, #31
 8005ee4:	4907      	ldr	r1, [pc, #28]	@ (8005f04 <__NVIC_EnableIRQ+0x38>)
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2001      	movs	r0, #1
 8005eee:	fa00 f202 	lsl.w	r2, r0, r2
 8005ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	e000e100 	.word	0xe000e100

08005f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db0a      	blt.n	8005f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	490c      	ldr	r1, [pc, #48]	@ (8005f54 <__NVIC_SetPriority+0x4c>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	0112      	lsls	r2, r2, #4
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f30:	e00a      	b.n	8005f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4908      	ldr	r1, [pc, #32]	@ (8005f58 <__NVIC_SetPriority+0x50>)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	3b04      	subs	r3, #4
 8005f40:	0112      	lsls	r2, r2, #4
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	440b      	add	r3, r1
 8005f46:	761a      	strb	r2, [r3, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	e000e100 	.word	0xe000e100
 8005f58:	e000ed00 	.word	0xe000ed00

08005f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	@ 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f1c3 0307 	rsb	r3, r3, #7
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf28      	it	cs
 8005f7a:	2304      	movcs	r3, #4
 8005f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3304      	adds	r3, #4
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d902      	bls.n	8005f8c <NVIC_EncodePriority+0x30>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3b03      	subs	r3, #3
 8005f8a:	e000      	b.n	8005f8e <NVIC_EncodePriority+0x32>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	401a      	ands	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fa01 f303 	lsl.w	r3, r1, r3
 8005fae:	43d9      	mvns	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb4:	4313      	orrs	r3, r2
         );
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3724      	adds	r7, #36	@ 0x24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fd4:	d301      	bcc.n	8005fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e00f      	b.n	8005ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fda:	4a0a      	ldr	r2, [pc, #40]	@ (8006004 <SysTick_Config+0x40>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fe2:	210f      	movs	r1, #15
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe8:	f7ff ff8e 	bl	8005f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <SysTick_Config+0x40>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ff2:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <SysTick_Config+0x40>)
 8005ff4:	2207      	movs	r2, #7
 8005ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	e000e010 	.word	0xe000e010

08006008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff29 	bl	8005e68 <__NVIC_SetPriorityGrouping>
}
 8006016:	bf00      	nop
 8006018:	3708      	adds	r7, #8
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	4603      	mov	r3, r0
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006030:	f7ff ff3e 	bl	8005eb0 <__NVIC_GetPriorityGrouping>
 8006034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	f7ff ff8e 	bl	8005f5c <NVIC_EncodePriority>
 8006040:	4602      	mov	r2, r0
 8006042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff5d 	bl	8005f08 <__NVIC_SetPriority>
}
 800604e:	bf00      	nop
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	4603      	mov	r3, r0
 800605e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff ff31 	bl	8005ecc <__NVIC_EnableIRQ>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff ffa2 	bl	8005fc4 <SysTick_Config>
 8006080:	4603      	mov	r3, r0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e0ac      	b.n	80061f8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b2 	bl	800620c <DFSDM_GetChannelFromInstance>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4a55      	ldr	r2, [pc, #340]	@ (8006200 <HAL_DFSDM_ChannelInit+0x174>)
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e09f      	b.n	80061f8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fc fcd1 	bl	8002a60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80060be:	4b51      	ldr	r3, [pc, #324]	@ (8006204 <HAL_DFSDM_ChannelInit+0x178>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a4f      	ldr	r2, [pc, #316]	@ (8006204 <HAL_DFSDM_ChannelInit+0x178>)
 80060c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80060c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006204 <HAL_DFSDM_ChannelInit+0x178>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d125      	bne.n	800611c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80060d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a4c      	ldr	r2, [pc, #304]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80060dc:	4b4a      	ldr	r3, [pc, #296]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4948      	ldr	r1, [pc, #288]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80060ea:	4b47      	ldr	r3, [pc, #284]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a46      	ldr	r2, [pc, #280]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 80060f0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80060f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d108      	bne.n	8006110 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80060fe:	4b42      	ldr	r3, [pc, #264]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	3b01      	subs	r3, #1
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	493f      	ldr	r1, [pc, #252]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 800610c:	4313      	orrs	r3, r2
 800610e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8006110:	4b3d      	ldr	r3, [pc, #244]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3c      	ldr	r2, [pc, #240]	@ (8006208 <HAL_DFSDM_ChannelInit+0x17c>)
 8006116:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800611a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800612a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6819      	ldr	r1, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800613a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006140:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 020f 	bic.w	r2, r2, #15
 8006158:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8006180:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6899      	ldr	r1, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	3b01      	subs	r3, #1
 8006192:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f002 0207 	and.w	r2, r2, #7
 80061ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f810 	bl	800620c <DFSDM_GetChannelFromInstance>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4904      	ldr	r1, [pc, #16]	@ (8006200 <HAL_DFSDM_ChannelInit+0x174>)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20000a8c 	.word	0x20000a8c
 8006204:	20000a88 	.word	0x20000a88
 8006208:	40016000 	.word	0x40016000

0800620c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <DFSDM_GetChannelFromInstance+0x7c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d102      	bne.n	8006222 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e02b      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a19      	ldr	r2, [pc, #100]	@ (800628c <DFSDM_GetChannelFromInstance+0x80>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d102      	bne.n	8006230 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e024      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a17      	ldr	r2, [pc, #92]	@ (8006290 <DFSDM_GetChannelFromInstance+0x84>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d102      	bne.n	800623e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8006238:	2302      	movs	r3, #2
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e01d      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a14      	ldr	r2, [pc, #80]	@ (8006294 <DFSDM_GetChannelFromInstance+0x88>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d102      	bne.n	800624c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8006246:	2304      	movs	r3, #4
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e016      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a12      	ldr	r2, [pc, #72]	@ (8006298 <DFSDM_GetChannelFromInstance+0x8c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d102      	bne.n	800625a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8006254:	2305      	movs	r3, #5
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e00f      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a0f      	ldr	r2, [pc, #60]	@ (800629c <DFSDM_GetChannelFromInstance+0x90>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d102      	bne.n	8006268 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8006262:	2306      	movs	r3, #6
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e008      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0d      	ldr	r2, [pc, #52]	@ (80062a0 <DFSDM_GetChannelFromInstance+0x94>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d102      	bne.n	8006276 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8006270:	2307      	movs	r3, #7
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e001      	b.n	800627a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8006276:	2303      	movs	r3, #3
 8006278:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40016000 	.word	0x40016000
 800628c:	40016020 	.word	0x40016020
 8006290:	40016040 	.word	0x40016040
 8006294:	40016080 	.word	0x40016080
 8006298:	400160a0 	.word	0x400160a0
 800629c:	400160c0 	.word	0x400160c0
 80062a0:	400160e0 	.word	0x400160e0

080062a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d005      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2204      	movs	r2, #4
 80062c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e047      	b.n	8006358 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 020e 	bic.w	r2, r2, #14
 80062d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fc:	f003 021c 	and.w	r2, r3, #28
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006304:	2101      	movs	r1, #1
 8006306:	fa01 f202 	lsl.w	r2, r1, r2
 800630a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006314:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00c      	beq.n	8006338 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006336:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
    }
  }
  return status;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006364:	b480      	push	{r7}
 8006366:	b087      	sub	sp, #28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006372:	e166      	b.n	8006642 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8158 	beq.w	800663c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d005      	beq.n	80063a4 <HAL_GPIO_Init+0x40>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d130      	bne.n	8006406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	2203      	movs	r2, #3
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	43db      	mvns	r3, r3
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4013      	ands	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063da:	2201      	movs	r2, #1
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4013      	ands	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0201 	and.w	r2, r3, #1
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	fa02 f303 	lsl.w	r3, r2, r3
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d017      	beq.n	8006442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	2203      	movs	r2, #3
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d123      	bne.n	8006496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	08da      	lsrs	r2, r3, #3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3208      	adds	r2, #8
 8006456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	220f      	movs	r2, #15
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4013      	ands	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	08da      	lsrs	r2, r3, #3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3208      	adds	r2, #8
 8006490:	6939      	ldr	r1, [r7, #16]
 8006492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	2203      	movs	r2, #3
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4013      	ands	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0203 	and.w	r2, r3, #3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80b2 	beq.w	800663c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d8:	4b61      	ldr	r3, [pc, #388]	@ (8006660 <HAL_GPIO_Init+0x2fc>)
 80064da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064dc:	4a60      	ldr	r2, [pc, #384]	@ (8006660 <HAL_GPIO_Init+0x2fc>)
 80064de:	f043 0301 	orr.w	r3, r3, #1
 80064e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80064e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006660 <HAL_GPIO_Init+0x2fc>)
 80064e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	60bb      	str	r3, [r7, #8]
 80064ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80064f0:	4a5c      	ldr	r2, [pc, #368]	@ (8006664 <HAL_GPIO_Init+0x300>)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	3302      	adds	r3, #2
 80064f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	220f      	movs	r2, #15
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4013      	ands	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800651a:	d02b      	beq.n	8006574 <HAL_GPIO_Init+0x210>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a52      	ldr	r2, [pc, #328]	@ (8006668 <HAL_GPIO_Init+0x304>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d025      	beq.n	8006570 <HAL_GPIO_Init+0x20c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a51      	ldr	r2, [pc, #324]	@ (800666c <HAL_GPIO_Init+0x308>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d01f      	beq.n	800656c <HAL_GPIO_Init+0x208>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a50      	ldr	r2, [pc, #320]	@ (8006670 <HAL_GPIO_Init+0x30c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d019      	beq.n	8006568 <HAL_GPIO_Init+0x204>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a4f      	ldr	r2, [pc, #316]	@ (8006674 <HAL_GPIO_Init+0x310>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <HAL_GPIO_Init+0x200>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a4e      	ldr	r2, [pc, #312]	@ (8006678 <HAL_GPIO_Init+0x314>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00d      	beq.n	8006560 <HAL_GPIO_Init+0x1fc>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a4d      	ldr	r2, [pc, #308]	@ (800667c <HAL_GPIO_Init+0x318>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <HAL_GPIO_Init+0x1f8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a4c      	ldr	r2, [pc, #304]	@ (8006680 <HAL_GPIO_Init+0x31c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_GPIO_Init+0x1f4>
 8006554:	2307      	movs	r3, #7
 8006556:	e00e      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006558:	2308      	movs	r3, #8
 800655a:	e00c      	b.n	8006576 <HAL_GPIO_Init+0x212>
 800655c:	2306      	movs	r3, #6
 800655e:	e00a      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006560:	2305      	movs	r3, #5
 8006562:	e008      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006564:	2304      	movs	r3, #4
 8006566:	e006      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006568:	2303      	movs	r3, #3
 800656a:	e004      	b.n	8006576 <HAL_GPIO_Init+0x212>
 800656c:	2302      	movs	r3, #2
 800656e:	e002      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <HAL_GPIO_Init+0x212>
 8006574:	2300      	movs	r3, #0
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	f002 0203 	and.w	r2, r2, #3
 800657c:	0092      	lsls	r2, r2, #2
 800657e:	4093      	lsls	r3, r2
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006586:	4937      	ldr	r1, [pc, #220]	@ (8006664 <HAL_GPIO_Init+0x300>)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	3302      	adds	r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006594:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <HAL_GPIO_Init+0x320>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	43db      	mvns	r3, r3
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	4013      	ands	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065b8:	4a32      	ldr	r2, [pc, #200]	@ (8006684 <HAL_GPIO_Init+0x320>)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065be:	4b31      	ldr	r3, [pc, #196]	@ (8006684 <HAL_GPIO_Init+0x320>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	43db      	mvns	r3, r3
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4013      	ands	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065e2:	4a28      	ldr	r2, [pc, #160]	@ (8006684 <HAL_GPIO_Init+0x320>)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80065e8:	4b26      	ldr	r3, [pc, #152]	@ (8006684 <HAL_GPIO_Init+0x320>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800660c:	4a1d      	ldr	r2, [pc, #116]	@ (8006684 <HAL_GPIO_Init+0x320>)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006612:	4b1c      	ldr	r3, [pc, #112]	@ (8006684 <HAL_GPIO_Init+0x320>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	43db      	mvns	r3, r3
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4013      	ands	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006636:	4a13      	ldr	r2, [pc, #76]	@ (8006684 <HAL_GPIO_Init+0x320>)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3301      	adds	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	f47f ae91 	bne.w	8006374 <HAL_GPIO_Init+0x10>
  }
}
 8006652:	bf00      	nop
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40021000 	.word	0x40021000
 8006664:	40010000 	.word	0x40010000
 8006668:	48000400 	.word	0x48000400
 800666c:	48000800 	.word	0x48000800
 8006670:	48000c00 	.word	0x48000c00
 8006674:	48001000 	.word	0x48001000
 8006678:	48001400 	.word	0x48001400
 800667c:	48001800 	.word	0x48001800
 8006680:	48001c00 	.word	0x48001c00
 8006684:	40010400 	.word	0x40010400

08006688 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006692:	2300      	movs	r3, #0
 8006694:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006696:	e0c9      	b.n	800682c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006698:	2201      	movs	r2, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	4013      	ands	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80bc 	beq.w	8006826 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80066ae:	4a66      	ldr	r2, [pc, #408]	@ (8006848 <HAL_GPIO_DeInit+0x1c0>)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	3302      	adds	r3, #2
 80066b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	220f      	movs	r2, #15
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4013      	ands	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80066d6:	d02b      	beq.n	8006730 <HAL_GPIO_DeInit+0xa8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a5c      	ldr	r2, [pc, #368]	@ (800684c <HAL_GPIO_DeInit+0x1c4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d025      	beq.n	800672c <HAL_GPIO_DeInit+0xa4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006850 <HAL_GPIO_DeInit+0x1c8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01f      	beq.n	8006728 <HAL_GPIO_DeInit+0xa0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a5a      	ldr	r2, [pc, #360]	@ (8006854 <HAL_GPIO_DeInit+0x1cc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d019      	beq.n	8006724 <HAL_GPIO_DeInit+0x9c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a59      	ldr	r2, [pc, #356]	@ (8006858 <HAL_GPIO_DeInit+0x1d0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_GPIO_DeInit+0x98>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a58      	ldr	r2, [pc, #352]	@ (800685c <HAL_GPIO_DeInit+0x1d4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00d      	beq.n	800671c <HAL_GPIO_DeInit+0x94>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a57      	ldr	r2, [pc, #348]	@ (8006860 <HAL_GPIO_DeInit+0x1d8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d007      	beq.n	8006718 <HAL_GPIO_DeInit+0x90>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a56      	ldr	r2, [pc, #344]	@ (8006864 <HAL_GPIO_DeInit+0x1dc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <HAL_GPIO_DeInit+0x8c>
 8006710:	2307      	movs	r3, #7
 8006712:	e00e      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006714:	2308      	movs	r3, #8
 8006716:	e00c      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006718:	2306      	movs	r3, #6
 800671a:	e00a      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 800671c:	2305      	movs	r3, #5
 800671e:	e008      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006720:	2304      	movs	r3, #4
 8006722:	e006      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006724:	2303      	movs	r3, #3
 8006726:	e004      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006728:	2302      	movs	r3, #2
 800672a:	e002      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <HAL_GPIO_DeInit+0xaa>
 8006730:	2300      	movs	r3, #0
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	f002 0203 	and.w	r2, r2, #3
 8006738:	0092      	lsls	r2, r2, #2
 800673a:	4093      	lsls	r3, r2
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	429a      	cmp	r2, r3
 8006740:	d132      	bne.n	80067a8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006742:	4b49      	ldr	r3, [pc, #292]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	43db      	mvns	r3, r3
 800674a:	4947      	ldr	r1, [pc, #284]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 800674c:	4013      	ands	r3, r2
 800674e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006750:	4b45      	ldr	r3, [pc, #276]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	43db      	mvns	r3, r3
 8006758:	4943      	ldr	r1, [pc, #268]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 800675a:	4013      	ands	r3, r2
 800675c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800675e:	4b42      	ldr	r3, [pc, #264]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	4940      	ldr	r1, [pc, #256]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 8006768:	4013      	ands	r3, r2
 800676a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800676c:	4b3e      	ldr	r3, [pc, #248]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	43db      	mvns	r3, r3
 8006774:	493c      	ldr	r1, [pc, #240]	@ (8006868 <HAL_GPIO_DeInit+0x1e0>)
 8006776:	4013      	ands	r3, r2
 8006778:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	220f      	movs	r2, #15
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800678a:	4a2f      	ldr	r2, [pc, #188]	@ (8006848 <HAL_GPIO_DeInit+0x1c0>)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	3302      	adds	r3, #2
 8006792:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	43da      	mvns	r2, r3
 800679a:	482b      	ldr	r0, [pc, #172]	@ (8006848 <HAL_GPIO_DeInit+0x1c0>)
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	400a      	ands	r2, r1
 80067a2:	3302      	adds	r3, #2
 80067a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	2103      	movs	r1, #3
 80067b2:	fa01 f303 	lsl.w	r3, r1, r3
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	08da      	lsrs	r2, r3, #3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3208      	adds	r2, #8
 80067c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	220f      	movs	r2, #15
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	08d2      	lsrs	r2, r2, #3
 80067dc:	4019      	ands	r1, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3208      	adds	r2, #8
 80067e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	2103      	movs	r1, #3
 80067f0:	fa01 f303 	lsl.w	r3, r1, r3
 80067f4:	43db      	mvns	r3, r3
 80067f6:	401a      	ands	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	2101      	movs	r1, #1
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	fa01 f303 	lsl.w	r3, r1, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	2103      	movs	r1, #3
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	401a      	ands	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3301      	adds	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	f47f af2f 	bne.w	8006698 <HAL_GPIO_DeInit+0x10>
  }
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	40010000 	.word	0x40010000
 800684c:	48000400 	.word	0x48000400
 8006850:	48000800 	.word	0x48000800
 8006854:	48000c00 	.word	0x48000c00
 8006858:	48001000 	.word	0x48001000
 800685c:	48001400 	.word	0x48001400
 8006860:	48001800 	.word	0x48001800
 8006864:	48001c00 	.word	0x48001c00
 8006868:	40010400 	.word	0x40010400

0800686c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	887b      	ldrh	r3, [r7, #2]
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
 8006888:	e001      	b.n	800688e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
 80068a8:	4613      	mov	r3, r2
 80068aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068ac:	787b      	ldrb	r3, [r7, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068b8:	e002      	b.n	80068c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068ba:	887a      	ldrh	r2, [r7, #2]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068d8:	695a      	ldr	r2, [r3, #20]
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	4013      	ands	r3, r2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d006      	beq.n	80068f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068e2:	4a05      	ldr	r2, [pc, #20]	@ (80068f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068e8:	88fb      	ldrh	r3, [r7, #6]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fc f806 	bl	80028fc <HAL_GPIO_EXTI_Callback>
  }
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40010400 	.word	0x40010400

080068fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e081      	b.n	8006a12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc f900 	bl	8002b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	@ 0x24
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800694c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800695c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	e006      	b.n	8006984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d104      	bne.n	8006996 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e021      	b.n	8006a70 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2224      	movs	r2, #36	@ 0x24
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7fc f911 	bl	8002c6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	813b      	strh	r3, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	f040 80f9 	bne.w	8006c92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <HAL_I2C_Mem_Write+0x34>
 8006aa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0ed      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_I2C_Mem_Write+0x4e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0e6      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ace:	f7fd ff59 	bl	8004984 <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2319      	movs	r3, #25
 8006ada:	2201      	movs	r2, #1
 8006adc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fac3 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0d1      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2221      	movs	r2, #33	@ 0x21
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2240      	movs	r2, #64	@ 0x40
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a3a      	ldr	r2, [r7, #32]
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b18:	88f8      	ldrh	r0, [r7, #6]
 8006b1a:	893a      	ldrh	r2, [r7, #8]
 8006b1c:	8979      	ldrh	r1, [r7, #10]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4603      	mov	r3, r0
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f9d3 	bl	8006ed4 <I2C_RequestMemoryWrite>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0a9      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2bff      	cmp	r3, #255	@ 0xff
 8006b48:	d90e      	bls.n	8006b68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	22ff      	movs	r2, #255	@ 0xff
 8006b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	8979      	ldrh	r1, [r7, #10]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fc2b 	bl	80073bc <I2C_TransferConfig>
 8006b66:	e00f      	b.n	8006b88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	8979      	ldrh	r1, [r7, #10]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fc1a 	bl	80073bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 faad 	bl	80070ec <I2C_WaitOnTXISFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e07b      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d034      	beq.n	8006c40 <HAL_I2C_Mem_Write+0x1c8>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d130      	bne.n	8006c40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	2200      	movs	r2, #0
 8006be6:	2180      	movs	r1, #128	@ 0x80
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fa3f 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04d      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2bff      	cmp	r3, #255	@ 0xff
 8006c00:	d90e      	bls.n	8006c20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	22ff      	movs	r2, #255	@ 0xff
 8006c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	8979      	ldrh	r1, [r7, #10]
 8006c10:	2300      	movs	r3, #0
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fbcf 	bl	80073bc <I2C_TransferConfig>
 8006c1e:	e00f      	b.n	8006c40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	2300      	movs	r3, #0
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 fbbe 	bl	80073bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d19e      	bne.n	8006b88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fa8c 	bl	800716c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e01a      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2220      	movs	r2, #32
 8006c64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <HAL_I2C_Mem_Write+0x224>)
 8006c72:	400b      	ands	r3, r1
 8006c74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e000      	b.n	8006c94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
  }
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	fe00e800 	.word	0xfe00e800

08006ca0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	817b      	strh	r3, [r7, #10]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	813b      	strh	r3, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	f040 80fd 	bne.w	8006ec2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_I2C_Mem_Read+0x34>
 8006cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e0f1      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_I2C_Mem_Read+0x4e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e0ea      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cf6:	f7fd fe45 	bl	8004984 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2319      	movs	r3, #25
 8006d02:	2201      	movs	r2, #1
 8006d04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f9af 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0d5      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2222      	movs	r2, #34	@ 0x22
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d40:	88f8      	ldrh	r0, [r7, #6]
 8006d42:	893a      	ldrh	r2, [r7, #8]
 8006d44:	8979      	ldrh	r1, [r7, #10]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4603      	mov	r3, r0
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f913 	bl	8006f7c <I2C_RequestMemoryRead>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0ad      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2bff      	cmp	r3, #255	@ 0xff
 8006d70:	d90e      	bls.n	8006d90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22ff      	movs	r2, #255	@ 0xff
 8006d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	8979      	ldrh	r1, [r7, #10]
 8006d80:	4b52      	ldr	r3, [pc, #328]	@ (8006ecc <HAL_I2C_Mem_Read+0x22c>)
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fb17 	bl	80073bc <I2C_TransferConfig>
 8006d8e:	e00f      	b.n	8006db0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	8979      	ldrh	r1, [r7, #10]
 8006da2:	4b4a      	ldr	r3, [pc, #296]	@ (8006ecc <HAL_I2C_Mem_Read+0x22c>)
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 fb06 	bl	80073bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	2200      	movs	r2, #0
 8006db8:	2104      	movs	r1, #4
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f956 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e07c      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d034      	beq.n	8006e70 <HAL_I2C_Mem_Read+0x1d0>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d130      	bne.n	8006e70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	2200      	movs	r2, #0
 8006e16:	2180      	movs	r1, #128	@ 0x80
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f927 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e04d      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2bff      	cmp	r3, #255	@ 0xff
 8006e30:	d90e      	bls.n	8006e50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	22ff      	movs	r2, #255	@ 0xff
 8006e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	8979      	ldrh	r1, [r7, #10]
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fab7 	bl	80073bc <I2C_TransferConfig>
 8006e4e:	e00f      	b.n	8006e70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	8979      	ldrh	r1, [r7, #10]
 8006e62:	2300      	movs	r3, #0
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 faa6 	bl	80073bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d19a      	bne.n	8006db0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f974 	bl	800716c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e01a      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2220      	movs	r2, #32
 8006e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6859      	ldr	r1, [r3, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <HAL_I2C_Mem_Read+0x230>)
 8006ea2:	400b      	ands	r3, r1
 8006ea4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e000      	b.n	8006ec4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006ec2:	2302      	movs	r3, #2
  }
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	80002400 	.word	0x80002400
 8006ed0:	fe00e800 	.word	0xfe00e800

08006ed4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	817b      	strh	r3, [r7, #10]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	813b      	strh	r3, [r7, #8]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	8979      	ldrh	r1, [r7, #10]
 8006ef4:	4b20      	ldr	r3, [pc, #128]	@ (8006f78 <I2C_RequestMemoryWrite+0xa4>)
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fa5d 	bl	80073bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	69b9      	ldr	r1, [r7, #24]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f8f0 	bl	80070ec <I2C_WaitOnTXISFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02c      	b.n	8006f70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f1c:	893b      	ldrh	r3, [r7, #8]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f26:	e015      	b.n	8006f54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	69b9      	ldr	r1, [r7, #24]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f8d6 	bl	80070ec <I2C_WaitOnTXISFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e012      	b.n	8006f70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2180      	movs	r1, #128	@ 0x80
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f884 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	80002000 	.word	0x80002000

08006f7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	8979      	ldrh	r1, [r7, #10]
 8006f9c:	4b20      	ldr	r3, [pc, #128]	@ (8007020 <I2C_RequestMemoryRead+0xa4>)
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 fa0a 	bl	80073bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	69b9      	ldr	r1, [r7, #24]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 f89d 	bl	80070ec <I2C_WaitOnTXISFlagUntilTimeout>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e02c      	b.n	8007016 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d105      	bne.n	8006fce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fc2:	893b      	ldrh	r3, [r7, #8]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fcc:	e015      	b.n	8006ffa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fce:	893b      	ldrh	r3, [r7, #8]
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	69b9      	ldr	r1, [r7, #24]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f883 	bl	80070ec <I2C_WaitOnTXISFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e012      	b.n	8007016 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	2200      	movs	r2, #0
 8007002:	2140      	movs	r1, #64	@ 0x40
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f831 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	80002000 	.word	0x80002000

08007024 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d103      	bne.n	8007042 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2200      	movs	r2, #0
 8007040:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	d007      	beq.n	8007060 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699a      	ldr	r2, [r3, #24]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	619a      	str	r2, [r3, #24]
  }
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800707c:	e022      	b.n	80070c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d01e      	beq.n	80070c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fd fc7d 	bl	8004984 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d113      	bne.n	80070c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e00f      	b.n	80070e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d0cd      	beq.n	800707e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070f8:	e02c      	b.n	8007154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f870 	bl	80071e4 <I2C_IsErrorOccurred>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e02a      	b.n	8007164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d01e      	beq.n	8007154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007116:	f7fd fc35 	bl	8004984 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d113      	bne.n	8007154 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007130:	f043 0220 	orr.w	r2, r3, #32
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e007      	b.n	8007164 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b02      	cmp	r3, #2
 8007160:	d1cb      	bne.n	80070fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007178:	e028      	b.n	80071cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 f830 	bl	80071e4 <I2C_IsErrorOccurred>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e026      	b.n	80071dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fd fbf9 	bl	8004984 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d113      	bne.n	80071cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e007      	b.n	80071dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d1cf      	bne.n	800717a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	@ 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	d075      	beq.n	80072fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2210      	movs	r2, #16
 8007216:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007218:	e056      	b.n	80072c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d052      	beq.n	80072c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fd fbaf 	bl	8004984 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <I2C_IsErrorOccurred+0x54>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d147      	bne.n	80072c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007242:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800724a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800725a:	d12e      	bne.n	80072ba <I2C_IsErrorOccurred+0xd6>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007262:	d02a      	beq.n	80072ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d027      	beq.n	80072ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007278:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800727a:	f7fd fb83 	bl	8004984 <HAL_GetTick>
 800727e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007280:	e01b      	b.n	80072ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007282:	f7fd fb7f 	bl	8004984 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b19      	cmp	r3, #25
 800728e:	d914      	bls.n	80072ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007294:	f043 0220 	orr.w	r2, r3, #32
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

              status = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b20      	cmp	r3, #32
 80072c6:	d1dc      	bne.n	8007282 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d003      	beq.n	80072de <I2C_IsErrorOccurred+0xfa>
 80072d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d09d      	beq.n	800721a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2220      	movs	r2, #32
 80072ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f043 0304 	orr.w	r3, r3, #4
 80072f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800731e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	f043 0308 	orr.w	r3, r3, #8
 8007336:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f043 0302 	orr.w	r3, r3, #2
 8007358:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007362:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800736a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01c      	beq.n	80073ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff fe56 	bl	8007024 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b0d      	ldr	r3, [pc, #52]	@ (80073b8 <I2C_IsErrorOccurred+0x1d4>)
 8007384:	400b      	ands	r3, r1
 8007386:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80073ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3728      	adds	r7, #40	@ 0x28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	fe00e800 	.word	0xfe00e800

080073bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	460b      	mov	r3, r1
 80073c8:	817b      	strh	r3, [r7, #10]
 80073ca:	4613      	mov	r3, r2
 80073cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073ce:	897b      	ldrh	r3, [r7, #10]
 80073d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073d4:	7a7b      	ldrb	r3, [r7, #9]
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	0d5b      	lsrs	r3, r3, #21
 80073f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80073fa:	4b08      	ldr	r3, [pc, #32]	@ (800741c <I2C_TransferConfig+0x60>)
 80073fc:	430b      	orrs	r3, r1
 80073fe:	43db      	mvns	r3, r3
 8007400:	ea02 0103 	and.w	r1, r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	03ff63ff 	.word	0x03ff63ff

08007420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b20      	cmp	r3, #32
 8007434:	d138      	bne.n	80074a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007440:	2302      	movs	r3, #2
 8007442:	e032      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2224      	movs	r2, #36	@ 0x24
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d139      	bne.n	8007540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e033      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2224      	movs	r2, #36	@ 0x24
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800755c:	f7fd fa12 	bl	8004984 <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	73fb      	strb	r3, [r7, #15]
 800756c:	e092      	b.n	8007694 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 808b 	bne.w	8007694 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb fbb0 	bl	8002ce4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8007584:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f88b 	bl	80076a4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	4b42      	ldr	r3, [pc, #264]	@ (80076a0 <HAL_OSPI_Init+0x150>)
 8007596:	4013      	ands	r3, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68d1      	ldr	r1, [r2, #12]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	3a01      	subs	r2, #1
 80075a2:	0412      	lsls	r2, r2, #16
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6952      	ldr	r2, [r2, #20]
 80075aa:	3a01      	subs	r2, #1
 80075ac:	0212      	lsls	r2, r2, #8
 80075ae:	4311      	orrs	r1, r2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80075b4:	4311      	orrs	r1, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	69d2      	ldr	r2, [r2, #28]
 80075ba:	4311      	orrs	r1, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6812      	ldr	r2, [r2, #0]
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	0412      	lsls	r2, r2, #16
 80075ce:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	3b01      	subs	r3, #1
 80075e0:	021a      	lsls	r2, r3, #8
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	430a      	orrs	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	2120      	movs	r1, #32
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fb98 	bl	8007d2c <OSPI_WaitFlagStateUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d146      	bne.n	8007694 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	1e5a      	subs	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800763c:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d107      	bne.n	800767c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0202 	orr.w	r2, r2, #2
 800767a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007684:	d103      	bne.n	800768e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	645a      	str	r2, [r3, #68]	@ 0x44
 800768c:	e002      	b.n	8007694 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	f8e0f8f4 	.word	0xf8e0f8f4

080076a4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b092      	sub	sp, #72	@ 0x48
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a08      	ldr	r2, [pc, #32]	@ (8007704 <HAL_OSPIM_Config+0x40>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d105      	bne.n	80076f2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 1U;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80076f0:	e004      	b.n	80076fc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80076f2:	2301      	movs	r3, #1
 80076f4:	643b      	str	r3, [r7, #64]	@ 0x40
    other_instance = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007702:	e01f      	b.n	8007744 <HAL_OSPIM_Config+0x80>
 8007704:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8007708:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800770c:	3301      	adds	r3, #1
 800770e:	b2d8      	uxtb	r0, r3
 8007710:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8007714:	f107 0114 	add.w	r1, r7, #20
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	4619      	mov	r1, r3
 8007724:	f000 fb3a 	bl	8007d9c <OSPIM_GetConfig>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2208      	movs	r2, #8
 8007738:	649a      	str	r2, [r3, #72]	@ 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800773a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800773e:	3301      	adds	r3, #1
 8007740:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007744:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007748:	2b01      	cmp	r3, #1
 800774a:	d9dd      	bls.n	8007708 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800774c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 82de 	bne.w	8007d12 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007756:	4bc6      	ldr	r3, [pc, #792]	@ (8007a70 <HAL_OSPIM_Config+0x3ac>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007762:	4bc3      	ldr	r3, [pc, #780]	@ (8007a70 <HAL_OSPIM_Config+0x3ac>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4ac2      	ldr	r2, [pc, #776]	@ (8007a70 <HAL_OSPIM_Config+0x3ac>)
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800776e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800777a:	4bbe      	ldr	r3, [pc, #760]	@ (8007a74 <HAL_OSPIM_Config+0x3b0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007786:	4bbb      	ldr	r3, [pc, #748]	@ (8007a74 <HAL_OSPIM_Config+0x3b0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4aba      	ldr	r2, [pc, #744]	@ (8007a74 <HAL_OSPIM_Config+0x3b0>)
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007792:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007796:	f043 0302 	orr.w	r3, r3, #2
 800779a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800779e:	49b6      	ldr	r1, [pc, #728]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80077a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	3348      	adds	r3, #72	@ 0x48
 80077ac:	443b      	add	r3, r7
 80077ae:	3b2c      	subs	r3, #44	@ 0x2c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	6859      	ldr	r1, [r3, #4]
 80077ba:	48af      	ldr	r0, [pc, #700]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80077bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	3348      	adds	r3, #72	@ 0x48
 80077c8:	443b      	add	r3, r7
 80077ca:	3b2c      	subs	r3, #44	@ 0x2c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4403      	add	r3, r0
 80077d8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80077da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	3348      	adds	r3, #72	@ 0x48
 80077e6:	443b      	add	r3, r7
 80077e8:	3b34      	subs	r3, #52	@ 0x34
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80a1 	beq.w	8007934 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80077f2:	49a1      	ldr	r1, [pc, #644]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80077f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f6:	4613      	mov	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	3348      	adds	r3, #72	@ 0x48
 8007800:	443b      	add	r3, r7
 8007802:	3b34      	subs	r3, #52	@ 0x34
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3b01      	subs	r3, #1
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	6859      	ldr	r1, [r3, #4]
 800780e:	489a      	ldr	r0, [pc, #616]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007810:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	3348      	adds	r3, #72	@ 0x48
 800781c:	443b      	add	r3, r7
 800781e:	3b34      	subs	r3, #52	@ 0x34
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3b01      	subs	r3, #1
 8007824:	f021 0201 	bic.w	r2, r1, #1
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4403      	add	r3, r0
 800782c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800782e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	3348      	adds	r3, #72	@ 0x48
 800783a:	443b      	add	r3, r7
 800783c:	3b30      	subs	r3, #48	@ 0x30
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01d      	beq.n	8007880 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007844:	498c      	ldr	r1, [pc, #560]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	3348      	adds	r3, #72	@ 0x48
 8007852:	443b      	add	r3, r7
 8007854:	3b30      	subs	r3, #48	@ 0x30
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3b01      	subs	r3, #1
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	6859      	ldr	r1, [r3, #4]
 8007860:	4885      	ldr	r0, [pc, #532]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	3348      	adds	r3, #72	@ 0x48
 800786e:	443b      	add	r3, r7
 8007870:	3b30      	subs	r3, #48	@ 0x30
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3b01      	subs	r3, #1
 8007876:	f021 0210 	bic.w	r2, r1, #16
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4403      	add	r3, r0
 800787e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	3348      	adds	r3, #72	@ 0x48
 800788c:	443b      	add	r3, r7
 800788e:	3b28      	subs	r3, #40	@ 0x28
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d021      	beq.n	80078da <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007896:	4978      	ldr	r1, [pc, #480]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3348      	adds	r3, #72	@ 0x48
 80078a4:	443b      	add	r3, r7
 80078a6:	3b28      	subs	r3, #40	@ 0x28
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	440b      	add	r3, r1
 80078b4:	6859      	ldr	r1, [r3, #4]
 80078b6:	4870      	ldr	r0, [pc, #448]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80078b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	3348      	adds	r3, #72	@ 0x48
 80078c4:	443b      	add	r3, r7
 80078c6:	3b28      	subs	r3, #40	@ 0x28
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4403      	add	r3, r0
 80078d8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80078da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	3348      	adds	r3, #72	@ 0x48
 80078e6:	443b      	add	r3, r7
 80078e8:	3b24      	subs	r3, #36	@ 0x24
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d021      	beq.n	8007934 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80078f0:	4961      	ldr	r1, [pc, #388]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80078f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	3348      	adds	r3, #72	@ 0x48
 80078fe:	443b      	add	r3, r7
 8007900:	3b24      	subs	r3, #36	@ 0x24
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3b01      	subs	r3, #1
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	6859      	ldr	r1, [r3, #4]
 8007910:	4859      	ldr	r0, [pc, #356]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	3348      	adds	r3, #72	@ 0x48
 800791e:	443b      	add	r3, r7
 8007920:	3b24      	subs	r3, #36	@ 0x24
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4403      	add	r3, r0
 8007932:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6819      	ldr	r1, [r3, #0]
 8007938:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	3348      	adds	r3, #72	@ 0x48
 8007946:	443b      	add	r3, r7
 8007948:	3b34      	subs	r3, #52	@ 0x34
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4299      	cmp	r1, r3
 800794e:	d038      	beq.n	80079c2 <HAL_OSPIM_Config+0x2fe>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	6859      	ldr	r1, [r3, #4]
 8007954:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3348      	adds	r3, #72	@ 0x48
 8007962:	443b      	add	r3, r7
 8007964:	3b30      	subs	r3, #48	@ 0x30
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4299      	cmp	r1, r3
 800796a:	d02a      	beq.n	80079c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6899      	ldr	r1, [r3, #8]
 8007970:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	3348      	adds	r3, #72	@ 0x48
 800797e:	443b      	add	r3, r7
 8007980:	3b2c      	subs	r3, #44	@ 0x2c
 8007982:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007984:	4299      	cmp	r1, r3
 8007986:	d01c      	beq.n	80079c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	68d9      	ldr	r1, [r3, #12]
 800798c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	3348      	adds	r3, #72	@ 0x48
 800799a:	443b      	add	r3, r7
 800799c:	3b28      	subs	r3, #40	@ 0x28
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d00e      	beq.n	80079c2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6919      	ldr	r1, [r3, #16]
 80079a8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	3348      	adds	r3, #72	@ 0x48
 80079b6:	443b      	add	r3, r7
 80079b8:	3b24      	subs	r3, #36	@ 0x24
 80079ba:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80079bc:	4299      	cmp	r1, r3
 80079be:	f040 80d3 	bne.w	8007b68 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80079c2:	492d      	ldr	r1, [pc, #180]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80079c4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	3348      	adds	r3, #72	@ 0x48
 80079d2:	443b      	add	r3, r7
 80079d4:	3b34      	subs	r3, #52	@ 0x34
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3b01      	subs	r3, #1
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	440b      	add	r3, r1
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	4825      	ldr	r0, [pc, #148]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 80079e2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3348      	adds	r3, #72	@ 0x48
 80079f0:	443b      	add	r3, r7
 80079f2:	3b34      	subs	r3, #52	@ 0x34
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3b01      	subs	r3, #1
 80079f8:	f021 0201 	bic.w	r2, r1, #1
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4403      	add	r3, r0
 8007a00:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007a02:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	3348      	adds	r3, #72	@ 0x48
 8007a10:	443b      	add	r3, r7
 8007a12:	3b30      	subs	r3, #48	@ 0x30
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d01f      	beq.n	8007a5a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8007a1a:	4917      	ldr	r1, [pc, #92]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007a1c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	3348      	adds	r3, #72	@ 0x48
 8007a2a:	443b      	add	r3, r7
 8007a2c:	3b30      	subs	r3, #48	@ 0x30
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	480f      	ldr	r0, [pc, #60]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007a3a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3348      	adds	r3, #72	@ 0x48
 8007a48:	443b      	add	r3, r7
 8007a4a:	3b30      	subs	r3, #48	@ 0x30
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	f021 0210 	bic.w	r2, r1, #16
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4403      	add	r3, r0
 8007a58:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8007a5a:	4907      	ldr	r1, [pc, #28]	@ (8007a78 <HAL_OSPIM_Config+0x3b4>)
 8007a5c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	3348      	adds	r3, #72	@ 0x48
 8007a6a:	443b      	add	r3, r7
 8007a6c:	3b2c      	subs	r3, #44	@ 0x2c
 8007a6e:	e005      	b.n	8007a7c <HAL_OSPIM_Config+0x3b8>
 8007a70:	a0001000 	.word	0xa0001000
 8007a74:	a0001400 	.word	0xa0001400
 8007a78:	50061c00 	.word	0x50061c00
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	440b      	add	r3, r1
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	48a6      	ldr	r0, [pc, #664]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007a88:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	3348      	adds	r3, #72	@ 0x48
 8007a96:	443b      	add	r3, r7
 8007a98:	3b2c      	subs	r3, #44	@ 0x2c
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4403      	add	r3, r0
 8007aa6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007aa8:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	3348      	adds	r3, #72	@ 0x48
 8007ab6:	443b      	add	r3, r7
 8007ab8:	3b28      	subs	r3, #40	@ 0x28
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d023      	beq.n	8007b08 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007ac0:	4997      	ldr	r1, [pc, #604]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007ac2:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	3348      	adds	r3, #72	@ 0x48
 8007ad0:	443b      	add	r3, r7
 8007ad2:	3b28      	subs	r3, #40	@ 0x28
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	6859      	ldr	r1, [r3, #4]
 8007ae2:	488f      	ldr	r0, [pc, #572]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007ae4:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	3348      	adds	r3, #72	@ 0x48
 8007af2:	443b      	add	r3, r7
 8007af4:	3b28      	subs	r3, #40	@ 0x28
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4403      	add	r3, r0
 8007b06:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007b08:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	3348      	adds	r3, #72	@ 0x48
 8007b16:	443b      	add	r3, r7
 8007b18:	3b24      	subs	r3, #36	@ 0x24
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d023      	beq.n	8007b68 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007b20:	497f      	ldr	r1, [pc, #508]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007b22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	3348      	adds	r3, #72	@ 0x48
 8007b30:	443b      	add	r3, r7
 8007b32:	3b24      	subs	r3, #36	@ 0x24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	440b      	add	r3, r1
 8007b40:	6859      	ldr	r1, [r3, #4]
 8007b42:	4877      	ldr	r0, [pc, #476]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007b44:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3348      	adds	r3, #72	@ 0x48
 8007b52:	443b      	add	r3, r7
 8007b54:	3b24      	subs	r3, #36	@ 0x24
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4403      	add	r3, r0
 8007b66:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007b68:	4a6d      	ldr	r2, [pc, #436]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b7c:	025b      	lsls	r3, r3, #9
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	4967      	ldr	r1, [pc, #412]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	440b      	add	r3, r1
 8007b90:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007b92:	4a63      	ldr	r2, [pc, #396]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f023 0203 	bic.w	r2, r3, #3
 8007ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	495d      	ldr	r1, [pc, #372]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d014      	beq.n	8007bee <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007bc4:	4a56      	ldr	r2, [pc, #344]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd8:	015b      	lsls	r3, r3, #5
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	4950      	ldr	r1, [pc, #320]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	f042 0210 	orr.w	r2, r2, #16
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	440b      	add	r3, r1
 8007bec:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d019      	beq.n	8007c2e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007bfa:	4a49      	ldr	r2, [pc, #292]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c12:	049b      	lsls	r3, r3, #18
 8007c14:	431a      	orrs	r2, r3
 8007c16:	4942      	ldr	r1, [pc, #264]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	440b      	add	r3, r1
 8007c2a:	605a      	str	r2, [r3, #4]
 8007c2c:	e01c      	b.n	8007c68 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d018      	beq.n	8007c68 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8007c36:	4a3a      	ldr	r2, [pc, #232]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c4e:	069b      	lsls	r3, r3, #26
 8007c50:	431a      	orrs	r2, r3
 8007c52:	4933      	ldr	r1, [pc, #204]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d019      	beq.n	8007ca8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007c74:	4a2a      	ldr	r2, [pc, #168]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8c:	049b      	lsls	r3, r3, #18
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	4923      	ldr	r1, [pc, #140]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	e01c      	b.n	8007ce2 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d018      	beq.n	8007ce2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc8:	069b      	lsls	r3, r3, #26
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	4914      	ldr	r1, [pc, #80]	@ (8007d20 <HAL_OSPIM_Config+0x65c>)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007ce2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d005      	beq.n	8007cfa <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007cee:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <HAL_OSPIM_Config+0x660>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8007d24 <HAL_OSPIM_Config+0x660>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007cfa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007d06:	4b08      	ldr	r3, [pc, #32]	@ (8007d28 <HAL_OSPIM_Config+0x664>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a07      	ldr	r2, [pc, #28]	@ (8007d28 <HAL_OSPIM_Config+0x664>)
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007d12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3748      	adds	r7, #72	@ 0x48
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	50061c00 	.word	0x50061c00
 8007d24:	a0001000 	.word	0xa0001000
 8007d28:	a0001400 	.word	0xa0001400

08007d2c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d3c:	e01a      	b.n	8007d74 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d44:	d016      	beq.n	8007d74 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d46:	f7fc fe1d 	bl	8004984 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10b      	bne.n	8007d74 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d68:	f043 0201 	orr.w	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	649a      	str	r2, [r3, #72]	@ 0x48

        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e00e      	b.n	8007d92 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bf14      	ite	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	2300      	moveq	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d1d6      	bne.n	8007d3e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	6039      	str	r1, [r7, #0]
 8007da6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d005      	beq.n	8007dc2 <OSPIM_GetConfig+0x26>
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d802      	bhi.n	8007dc2 <OSPIM_GetConfig+0x26>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
 8007dc6:	e08e      	b.n	8007ee6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007de6:	79fb      	ldrb	r3, [r7, #7]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d101      	bne.n	8007df0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007dec:	4b41      	ldr	r3, [pc, #260]	@ (8007ef4 <OSPIM_GetConfig+0x158>)
 8007dee:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e074      	b.n	8007ee0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8007df6:	4a40      	ldr	r2, [pc, #256]	@ (8007ef8 <OSPIM_GetConfig+0x15c>)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4053      	eors	r3, r2
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	4053      	eors	r3, r2
 8007e32:	f003 0320 	and.w	r3, r3, #32
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4053      	eors	r3, r2
 8007e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d103      	bne.n	8007e62 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d018      	beq.n	8007e9e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4053      	eors	r3, r2
 8007e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d111      	bne.n	8007e9e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d106      	bne.n	8007e92 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	60da      	str	r2, [r3, #12]
 8007e90:	e005      	b.n	8007e9e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d018      	beq.n	8007eda <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	4053      	eors	r3, r2
 8007eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d111      	bne.n	8007eda <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	611a      	str	r2, [r3, #16]
 8007ecc:	e005      	b.n	8007eda <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d987      	bls.n	8007df6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	371c      	adds	r7, #28
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	04040222 	.word	0x04040222
 8007ef8:	50061c00 	.word	0x50061c00

08007efc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f00:	4b05      	ldr	r3, [pc, #20]	@ (8007f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a04      	ldr	r2, [pc, #16]	@ (8007f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f0a:	6013      	str	r3, [r2, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40007000 	.word	0x40007000

08007f1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f20:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2c:	d102      	bne.n	8007f34 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f32:	e00b      	b.n	8007f4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007f34:	4b08      	ldr	r3, [pc, #32]	@ (8007f58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f42:	d102      	bne.n	8007f4a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f48:	e000      	b.n	8007f4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007f4a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	40007000 	.word	0x40007000

08007f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d141      	bne.n	8007fee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f76:	d131      	bne.n	8007fdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f78:	4b47      	ldr	r3, [pc, #284]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7e:	4a46      	ldr	r2, [pc, #280]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f88:	4b43      	ldr	r3, [pc, #268]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f90:	4a41      	ldr	r2, [pc, #260]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007f98:	4b40      	ldr	r3, [pc, #256]	@ (800809c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2232      	movs	r2, #50	@ 0x32
 8007f9e:	fb02 f303 	mul.w	r3, r2, r3
 8007fa2:	4a3f      	ldr	r2, [pc, #252]	@ (80080a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa8:	0c9b      	lsrs	r3, r3, #18
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fae:	e002      	b.n	8007fb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fb6:	4b38      	ldr	r3, [pc, #224]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc2:	d102      	bne.n	8007fca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f2      	bne.n	8007fb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007fca:	4b33      	ldr	r3, [pc, #204]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd6:	d158      	bne.n	800808a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007fd8:	2303      	movs	r3, #3
 8007fda:	e057      	b.n	800808c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fe8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fec:	e04d      	b.n	800808a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff4:	d141      	bne.n	800807a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ff6:	4b28      	ldr	r3, [pc, #160]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d131      	bne.n	8008068 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008004:	4b24      	ldr	r3, [pc, #144]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800800a:	4a23      	ldr	r2, [pc, #140]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800800c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008014:	4b20      	ldr	r3, [pc, #128]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800801c:	4a1e      	ldr	r2, [pc, #120]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800801e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008022:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008024:	4b1d      	ldr	r3, [pc, #116]	@ (800809c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2232      	movs	r2, #50	@ 0x32
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008030:	fba2 2303 	umull	r2, r3, r2, r3
 8008034:	0c9b      	lsrs	r3, r3, #18
 8008036:	3301      	adds	r3, #1
 8008038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800803a:	e002      	b.n	8008042 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	3b01      	subs	r3, #1
 8008040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008042:	4b15      	ldr	r3, [pc, #84]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800804a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804e:	d102      	bne.n	8008056 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f2      	bne.n	800803c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008056:	4b10      	ldr	r3, [pc, #64]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800805e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008062:	d112      	bne.n	800808a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e011      	b.n	800808c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008068:	4b0b      	ldr	r3, [pc, #44]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800806a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800806e:	4a0a      	ldr	r2, [pc, #40]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008074:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008078:	e007      	b.n	800808a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800807a:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008082:	4a05      	ldr	r2, [pc, #20]	@ (8008098 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008084:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008088:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	40007000 	.word	0x40007000
 800809c:	20000018 	.word	0x20000018
 80080a0:	431bde83 	.word	0x431bde83

080080a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f000 bc08 	b.w	80088c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080b8:	4b96      	ldr	r3, [pc, #600]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 030c 	and.w	r3, r3, #12
 80080c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080c2:	4b94      	ldr	r3, [pc, #592]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80e4 	beq.w	80082a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <HAL_RCC_OscConfig+0x4c>
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b0c      	cmp	r3, #12
 80080e4:	f040 808b 	bne.w	80081fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	f040 8087 	bne.w	80081fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080f0:	4b88      	ldr	r3, [pc, #544]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <HAL_RCC_OscConfig+0x64>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e3df      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1a      	ldr	r2, [r3, #32]
 800810c:	4b81      	ldr	r3, [pc, #516]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0308 	and.w	r3, r3, #8
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <HAL_RCC_OscConfig+0x7e>
 8008118:	4b7e      	ldr	r3, [pc, #504]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008120:	e005      	b.n	800812e <HAL_RCC_OscConfig+0x8a>
 8008122:	4b7c      	ldr	r3, [pc, #496]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008128:	091b      	lsrs	r3, r3, #4
 800812a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800812e:	4293      	cmp	r3, r2
 8008130:	d223      	bcs.n	800817a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fdcc 	bl	8008cd4 <RCC_SetFlashLatencyFromMSIRange>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e3c0      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008146:	4b73      	ldr	r3, [pc, #460]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a72      	ldr	r2, [pc, #456]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	4b70      	ldr	r3, [pc, #448]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	496d      	ldr	r1, [pc, #436]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008160:	4313      	orrs	r3, r2
 8008162:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008164:	4b6b      	ldr	r3, [pc, #428]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	4968      	ldr	r1, [pc, #416]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008174:	4313      	orrs	r3, r2
 8008176:	604b      	str	r3, [r1, #4]
 8008178:	e025      	b.n	80081c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800817a:	4b66      	ldr	r3, [pc, #408]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a65      	ldr	r2, [pc, #404]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008180:	f043 0308 	orr.w	r3, r3, #8
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	4b63      	ldr	r3, [pc, #396]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	4960      	ldr	r1, [pc, #384]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008194:	4313      	orrs	r3, r2
 8008196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008198:	4b5e      	ldr	r3, [pc, #376]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	495b      	ldr	r1, [pc, #364]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 fd8c 	bl	8008cd4 <RCC_SetFlashLatencyFromMSIRange>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e380      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081c6:	f000 fcc1 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4b51      	ldr	r3, [pc, #324]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	091b      	lsrs	r3, r3, #4
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	4950      	ldr	r1, [pc, #320]	@ (8008318 <HAL_RCC_OscConfig+0x274>)
 80081d8:	5ccb      	ldrb	r3, [r1, r3]
 80081da:	f003 031f 	and.w	r3, r3, #31
 80081de:	fa22 f303 	lsr.w	r3, r2, r3
 80081e2:	4a4e      	ldr	r2, [pc, #312]	@ (800831c <HAL_RCC_OscConfig+0x278>)
 80081e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80081e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008320 <HAL_RCC_OscConfig+0x27c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fc fb7a 	bl	80048e4 <HAL_InitTick>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d052      	beq.n	80082a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	e364      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d032      	beq.n	800826c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008206:	4b43      	ldr	r3, [pc, #268]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a42      	ldr	r2, [pc, #264]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008212:	f7fc fbb7 	bl	8004984 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800821a:	f7fc fbb3 	bl	8004984 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e34d      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800822c:	4b39      	ldr	r3, [pc, #228]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0f0      	beq.n	800821a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008238:	4b36      	ldr	r3, [pc, #216]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a35      	ldr	r2, [pc, #212]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800823e:	f043 0308 	orr.w	r3, r3, #8
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4b33      	ldr	r3, [pc, #204]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	4930      	ldr	r1, [pc, #192]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008252:	4313      	orrs	r3, r2
 8008254:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008256:	4b2f      	ldr	r3, [pc, #188]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	492b      	ldr	r1, [pc, #172]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008266:	4313      	orrs	r3, r2
 8008268:	604b      	str	r3, [r1, #4]
 800826a:	e01a      	b.n	80082a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800826c:	4b29      	ldr	r3, [pc, #164]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a28      	ldr	r2, [pc, #160]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008272:	f023 0301 	bic.w	r3, r3, #1
 8008276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008278:	f7fc fb84 	bl	8004984 <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008280:	f7fc fb80 	bl	8004984 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b02      	cmp	r3, #2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e31a      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008292:	4b20      	ldr	r3, [pc, #128]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f0      	bne.n	8008280 <HAL_RCC_OscConfig+0x1dc>
 800829e:	e000      	b.n	80082a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d073      	beq.n	8008396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_OscConfig+0x21c>
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d10e      	bne.n	80082d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d10b      	bne.n	80082d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082c0:	4b14      	ldr	r3, [pc, #80]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d063      	beq.n	8008394 <HAL_RCC_OscConfig+0x2f0>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d15f      	bne.n	8008394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e2f7      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e0:	d106      	bne.n	80082f0 <HAL_RCC_OscConfig+0x24c>
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80082e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	e025      	b.n	800833c <HAL_RCC_OscConfig+0x298>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082f8:	d114      	bne.n	8008324 <HAL_RCC_OscConfig+0x280>
 80082fa:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a05      	ldr	r2, [pc, #20]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4b03      	ldr	r3, [pc, #12]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a02      	ldr	r2, [pc, #8]	@ (8008314 <HAL_RCC_OscConfig+0x270>)
 800830c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	e013      	b.n	800833c <HAL_RCC_OscConfig+0x298>
 8008314:	40021000 	.word	0x40021000
 8008318:	08011338 	.word	0x08011338
 800831c:	20000018 	.word	0x20000018
 8008320:	20000038 	.word	0x20000038
 8008324:	4ba0      	ldr	r3, [pc, #640]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a9f      	ldr	r2, [pc, #636]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800832a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4b9d      	ldr	r3, [pc, #628]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a9c      	ldr	r2, [pc, #624]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800833a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fc fb1e 	bl	8004984 <HAL_GetTick>
 8008348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800834c:	f7fc fb1a 	bl	8004984 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	@ 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e2b4      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800835e:	4b92      	ldr	r3, [pc, #584]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCC_OscConfig+0x2a8>
 800836a:	e014      	b.n	8008396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fc fb0a 	bl	8004984 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008374:	f7fc fb06 	bl	8004984 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b64      	cmp	r3, #100	@ 0x64
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e2a0      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008386:	4b88      	ldr	r3, [pc, #544]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f0      	bne.n	8008374 <HAL_RCC_OscConfig+0x2d0>
 8008392:	e000      	b.n	8008396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d060      	beq.n	8008464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d005      	beq.n	80083b4 <HAL_RCC_OscConfig+0x310>
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	2b0c      	cmp	r3, #12
 80083ac:	d119      	bne.n	80083e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d116      	bne.n	80083e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083b4:	4b7c      	ldr	r3, [pc, #496]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_RCC_OscConfig+0x328>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e27d      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083cc:	4b76      	ldr	r3, [pc, #472]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	061b      	lsls	r3, r3, #24
 80083da:	4973      	ldr	r1, [pc, #460]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e0:	e040      	b.n	8008464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d023      	beq.n	8008432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083ea:	4b6f      	ldr	r3, [pc, #444]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a6e      	ldr	r2, [pc, #440]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80083f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fc fac5 	bl	8004984 <HAL_GetTick>
 80083fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083fc:	e008      	b.n	8008410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083fe:	f7fc fac1 	bl	8004984 <HAL_GetTick>
 8008402:	4602      	mov	r2, r0
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	d901      	bls.n	8008410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e25b      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008410:	4b65      	ldr	r3, [pc, #404]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0f0      	beq.n	80083fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841c:	4b62      	ldr	r3, [pc, #392]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	495f      	ldr	r1, [pc, #380]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800842c:	4313      	orrs	r3, r2
 800842e:	604b      	str	r3, [r1, #4]
 8008430:	e018      	b.n	8008464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008432:	4b5d      	ldr	r3, [pc, #372]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a5c      	ldr	r2, [pc, #368]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800843c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843e:	f7fc faa1 	bl	8004984 <HAL_GetTick>
 8008442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008444:	e008      	b.n	8008458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008446:	f7fc fa9d 	bl	8004984 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e237      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008458:	4b53      	ldr	r3, [pc, #332]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f0      	bne.n	8008446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d03c      	beq.n	80084ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01c      	beq.n	80084b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008478:	4b4b      	ldr	r3, [pc, #300]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800847a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800847e:	4a4a      	ldr	r2, [pc, #296]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008480:	f043 0301 	orr.w	r3, r3, #1
 8008484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008488:	f7fc fa7c 	bl	8004984 <HAL_GetTick>
 800848c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008490:	f7fc fa78 	bl	8004984 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e212      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084a2:	4b41      	ldr	r3, [pc, #260]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80084a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ef      	beq.n	8008490 <HAL_RCC_OscConfig+0x3ec>
 80084b0:	e01b      	b.n	80084ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084b2:	4b3d      	ldr	r3, [pc, #244]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80084b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084b8:	4a3b      	ldr	r2, [pc, #236]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80084ba:	f023 0301 	bic.w	r3, r3, #1
 80084be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c2:	f7fc fa5f 	bl	8004984 <HAL_GetTick>
 80084c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ca:	f7fc fa5b 	bl	8004984 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e1f5      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084dc:	4b32      	ldr	r3, [pc, #200]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80084de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ef      	bne.n	80084ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80a6 	beq.w	8008644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084f8:	2300      	movs	r3, #0
 80084fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80084fc:	4b2a      	ldr	r3, [pc, #168]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 80084fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10d      	bne.n	8008524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008508:	4b27      	ldr	r3, [pc, #156]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800850c:	4a26      	ldr	r2, [pc, #152]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800850e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008512:	6593      	str	r3, [r2, #88]	@ 0x58
 8008514:	4b24      	ldr	r3, [pc, #144]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008520:	2301      	movs	r3, #1
 8008522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008524:	4b21      	ldr	r3, [pc, #132]	@ (80085ac <HAL_RCC_OscConfig+0x508>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d118      	bne.n	8008562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008530:	4b1e      	ldr	r3, [pc, #120]	@ (80085ac <HAL_RCC_OscConfig+0x508>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1d      	ldr	r2, [pc, #116]	@ (80085ac <HAL_RCC_OscConfig+0x508>)
 8008536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800853a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800853c:	f7fc fa22 	bl	8004984 <HAL_GetTick>
 8008540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008542:	e008      	b.n	8008556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008544:	f7fc fa1e 	bl	8004984 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	2b02      	cmp	r3, #2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e1b8      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008556:	4b15      	ldr	r3, [pc, #84]	@ (80085ac <HAL_RCC_OscConfig+0x508>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0f0      	beq.n	8008544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d108      	bne.n	800857c <HAL_RCC_OscConfig+0x4d8>
 800856a:	4b0f      	ldr	r3, [pc, #60]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008570:	4a0d      	ldr	r2, [pc, #52]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800857a:	e029      	b.n	80085d0 <HAL_RCC_OscConfig+0x52c>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b05      	cmp	r3, #5
 8008582:	d115      	bne.n	80085b0 <HAL_RCC_OscConfig+0x50c>
 8008584:	4b08      	ldr	r3, [pc, #32]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858a:	4a07      	ldr	r2, [pc, #28]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008594:	4b04      	ldr	r3, [pc, #16]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800859a:	4a03      	ldr	r2, [pc, #12]	@ (80085a8 <HAL_RCC_OscConfig+0x504>)
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085a4:	e014      	b.n	80085d0 <HAL_RCC_OscConfig+0x52c>
 80085a6:	bf00      	nop
 80085a8:	40021000 	.word	0x40021000
 80085ac:	40007000 	.word	0x40007000
 80085b0:	4b9d      	ldr	r3, [pc, #628]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b6:	4a9c      	ldr	r2, [pc, #624]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80085b8:	f023 0301 	bic.w	r3, r3, #1
 80085bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80085c0:	4b99      	ldr	r3, [pc, #612]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c6:	4a98      	ldr	r2, [pc, #608]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80085c8:	f023 0304 	bic.w	r3, r3, #4
 80085cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d016      	beq.n	8008606 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d8:	f7fc f9d4 	bl	8004984 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085de:	e00a      	b.n	80085f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085e0:	f7fc f9d0 	bl	8004984 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e168      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085f6:	4b8c      	ldr	r3, [pc, #560]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0ed      	beq.n	80085e0 <HAL_RCC_OscConfig+0x53c>
 8008604:	e015      	b.n	8008632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008606:	f7fc f9bd 	bl	8004984 <HAL_GetTick>
 800860a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800860c:	e00a      	b.n	8008624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800860e:	f7fc f9b9 	bl	8004984 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800861c:	4293      	cmp	r3, r2
 800861e:	d901      	bls.n	8008624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e151      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008624:	4b80      	ldr	r3, [pc, #512]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1ed      	bne.n	800860e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008632:	7ffb      	ldrb	r3, [r7, #31]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d105      	bne.n	8008644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008638:	4b7b      	ldr	r3, [pc, #492]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 800863a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800863c:	4a7a      	ldr	r2, [pc, #488]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 800863e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008642:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d03c      	beq.n	80086ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01c      	beq.n	8008692 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008658:	4b73      	ldr	r3, [pc, #460]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 800865a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800865e:	4a72      	ldr	r2, [pc, #456]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008660:	f043 0301 	orr.w	r3, r3, #1
 8008664:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008668:	f7fc f98c 	bl	8004984 <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008670:	f7fc f988 	bl	8004984 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e122      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008682:	4b69      	ldr	r3, [pc, #420]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0ef      	beq.n	8008670 <HAL_RCC_OscConfig+0x5cc>
 8008690:	e01b      	b.n	80086ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008692:	4b65      	ldr	r3, [pc, #404]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008698:	4a63      	ldr	r2, [pc, #396]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a2:	f7fc f96f 	bl	8004984 <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086aa:	f7fc f96b 	bl	8004984 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e105      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086bc:	4b5a      	ldr	r3, [pc, #360]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80086be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1ef      	bne.n	80086aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80f9 	beq.w	80088c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d8:	2b02      	cmp	r3, #2
 80086da:	f040 80cf 	bne.w	800887c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80086de:	4b52      	ldr	r3, [pc, #328]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f003 0203 	and.w	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d12c      	bne.n	800874c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fc:	3b01      	subs	r3, #1
 80086fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008700:	429a      	cmp	r2, r3
 8008702:	d123      	bne.n	800874c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800870e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008710:	429a      	cmp	r2, r3
 8008712:	d11b      	bne.n	800874c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d113      	bne.n	800874c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872e:	085b      	lsrs	r3, r3, #1
 8008730:	3b01      	subs	r3, #1
 8008732:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008734:	429a      	cmp	r2, r3
 8008736:	d109      	bne.n	800874c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008742:	085b      	lsrs	r3, r3, #1
 8008744:	3b01      	subs	r3, #1
 8008746:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008748:	429a      	cmp	r2, r3
 800874a:	d071      	beq.n	8008830 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b0c      	cmp	r3, #12
 8008750:	d068      	beq.n	8008824 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008752:	4b35      	ldr	r3, [pc, #212]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d105      	bne.n	800876a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800875e:	4b32      	ldr	r3, [pc, #200]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0ac      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800876e:	4b2e      	ldr	r3, [pc, #184]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2d      	ldr	r2, [pc, #180]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008774:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008778:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800877a:	f7fc f903 	bl	8004984 <HAL_GetTick>
 800877e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008782:	f7fc f8ff 	bl	8004984 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e099      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008794:	4b24      	ldr	r3, [pc, #144]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f0      	bne.n	8008782 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087a0:	4b21      	ldr	r3, [pc, #132]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	4b21      	ldr	r3, [pc, #132]	@ (800882c <HAL_RCC_OscConfig+0x788>)
 80087a6:	4013      	ands	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087b0:	3a01      	subs	r2, #1
 80087b2:	0112      	lsls	r2, r2, #4
 80087b4:	4311      	orrs	r1, r2
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80087ba:	0212      	lsls	r2, r2, #8
 80087bc:	4311      	orrs	r1, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80087c2:	0852      	lsrs	r2, r2, #1
 80087c4:	3a01      	subs	r2, #1
 80087c6:	0552      	lsls	r2, r2, #21
 80087c8:	4311      	orrs	r1, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80087ce:	0852      	lsrs	r2, r2, #1
 80087d0:	3a01      	subs	r2, #1
 80087d2:	0652      	lsls	r2, r2, #25
 80087d4:	4311      	orrs	r1, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80087da:	06d2      	lsls	r2, r2, #27
 80087dc:	430a      	orrs	r2, r1
 80087de:	4912      	ldr	r1, [pc, #72]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80087e4:	4b10      	ldr	r3, [pc, #64]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 80087f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087fc:	f7fc f8c2 	bl	8004984 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008804:	f7fc f8be 	bl	8004984 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e058      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008816:	4b04      	ldr	r3, [pc, #16]	@ (8008828 <HAL_RCC_OscConfig+0x784>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0f0      	beq.n	8008804 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008822:	e050      	b.n	80088c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e04f      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
 8008828:	40021000 	.word	0x40021000
 800882c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008830:	4b27      	ldr	r3, [pc, #156]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d144      	bne.n	80088c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800883c:	4b24      	ldr	r3, [pc, #144]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a23      	ldr	r2, [pc, #140]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 8008842:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008846:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008848:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	4a20      	ldr	r2, [pc, #128]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 800884e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008852:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008854:	f7fc f896 	bl	8004984 <HAL_GetTick>
 8008858:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800885c:	f7fc f892 	bl	8004984 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e02c      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800886e:	4b18      	ldr	r3, [pc, #96]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x7b8>
 800887a:	e024      	b.n	80088c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b0c      	cmp	r3, #12
 8008880:	d01f      	beq.n	80088c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008882:	4b13      	ldr	r3, [pc, #76]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a12      	ldr	r2, [pc, #72]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 8008888:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800888c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888e:	f7fc f879 	bl	8004984 <HAL_GetTick>
 8008892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008894:	e008      	b.n	80088a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008896:	f7fc f875 	bl	8004984 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e00f      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088a8:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1f0      	bne.n	8008896 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 80088b6:	68da      	ldr	r2, [r3, #12]
 80088b8:	4905      	ldr	r1, [pc, #20]	@ (80088d0 <HAL_RCC_OscConfig+0x82c>)
 80088ba:	4b06      	ldr	r3, [pc, #24]	@ (80088d4 <HAL_RCC_OscConfig+0x830>)
 80088bc:	4013      	ands	r3, r2
 80088be:	60cb      	str	r3, [r1, #12]
 80088c0:	e001      	b.n	80088c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3720      	adds	r7, #32
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	40021000 	.word	0x40021000
 80088d4:	feeefffc 	.word	0xfeeefffc

080088d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e11d      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088f0:	4b90      	ldr	r3, [pc, #576]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d910      	bls.n	8008920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fe:	4b8d      	ldr	r3, [pc, #564]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f023 020f 	bic.w	r2, r3, #15
 8008906:	498b      	ldr	r1, [pc, #556]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	4313      	orrs	r3, r2
 800890c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800890e:	4b89      	ldr	r3, [pc, #548]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e105      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d010      	beq.n	800894e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	4b81      	ldr	r3, [pc, #516]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008938:	429a      	cmp	r2, r3
 800893a:	d908      	bls.n	800894e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800893c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	497b      	ldr	r1, [pc, #492]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 800894a:	4313      	orrs	r3, r2
 800894c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0301 	and.w	r3, r3, #1
 8008956:	2b00      	cmp	r3, #0
 8008958:	d079      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	2b03      	cmp	r3, #3
 8008960:	d11e      	bne.n	80089a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008962:	4b75      	ldr	r3, [pc, #468]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e0dc      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008972:	f000 fa09 	bl	8008d88 <RCC_GetSysClockFreqFromPLLSource>
 8008976:	4603      	mov	r3, r0
 8008978:	4a70      	ldr	r2, [pc, #448]	@ (8008b3c <HAL_RCC_ClockConfig+0x264>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d946      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800897e:	4b6e      	ldr	r3, [pc, #440]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d140      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800898a:	4b6b      	ldr	r3, [pc, #428]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008992:	4a69      	ldr	r2, [pc, #420]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008998:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800899a:	2380      	movs	r3, #128	@ 0x80
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	e035      	b.n	8008a0c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d107      	bne.n	80089b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089a8:	4b63      	ldr	r3, [pc, #396]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d115      	bne.n	80089e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0b9      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d107      	bne.n	80089d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0ad      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089d0:	4b59      	ldr	r3, [pc, #356]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e0a5      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80089e0:	f000 f8b4 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 80089e4:	4603      	mov	r3, r0
 80089e6:	4a55      	ldr	r2, [pc, #340]	@ (8008b3c <HAL_RCC_ClockConfig+0x264>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d90f      	bls.n	8008a0c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80089ec:	4b52      	ldr	r3, [pc, #328]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089f8:	4b4f      	ldr	r3, [pc, #316]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a00:	4a4d      	ldr	r2, [pc, #308]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a06:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a08:	2380      	movs	r3, #128	@ 0x80
 8008a0a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f023 0203 	bic.w	r2, r3, #3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4947      	ldr	r1, [pc, #284]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1e:	f7fb ffb1 	bl	8004984 <HAL_GetTick>
 8008a22:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a24:	e00a      	b.n	8008a3c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a26:	f7fb ffad 	bl	8004984 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e077      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 020c 	and.w	r2, r3, #12
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d1eb      	bne.n	8008a26 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b80      	cmp	r3, #128	@ 0x80
 8008a52:	d105      	bne.n	8008a60 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a54:	4b38      	ldr	r3, [pc, #224]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4a37      	ldr	r2, [pc, #220]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a5e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	4b31      	ldr	r3, [pc, #196]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d208      	bcs.n	8008a8e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	492b      	ldr	r1, [pc, #172]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a8e:	4b29      	ldr	r3, [pc, #164]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d210      	bcs.n	8008abe <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a9c:	4b25      	ldr	r3, [pc, #148]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f023 020f 	bic.w	r2, r3, #15
 8008aa4:	4923      	ldr	r1, [pc, #140]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aac:	4b21      	ldr	r3, [pc, #132]	@ (8008b34 <HAL_RCC_ClockConfig+0x25c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 030f 	and.w	r3, r3, #15
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d001      	beq.n	8008abe <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e036      	b.n	8008b2c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008aca:	4b1b      	ldr	r3, [pc, #108]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	4918      	ldr	r1, [pc, #96]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d009      	beq.n	8008afc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ae8:	4b13      	ldr	r3, [pc, #76]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	4910      	ldr	r1, [pc, #64]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008afc:	f000 f826 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 8008b00:	4602      	mov	r2, r0
 8008b02:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <HAL_RCC_ClockConfig+0x260>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	f003 030f 	and.w	r3, r3, #15
 8008b0c:	490c      	ldr	r1, [pc, #48]	@ (8008b40 <HAL_RCC_ClockConfig+0x268>)
 8008b0e:	5ccb      	ldrb	r3, [r1, r3]
 8008b10:	f003 031f 	and.w	r3, r3, #31
 8008b14:	fa22 f303 	lsr.w	r3, r2, r3
 8008b18:	4a0a      	ldr	r2, [pc, #40]	@ (8008b44 <HAL_RCC_ClockConfig+0x26c>)
 8008b1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <HAL_RCC_ClockConfig+0x270>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fb fedf 	bl	80048e4 <HAL_InitTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]

  return status;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40022000 	.word	0x40022000
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	04c4b400 	.word	0x04c4b400
 8008b40:	08011338 	.word	0x08011338
 8008b44:	20000018 	.word	0x20000018
 8008b48:	20000038 	.word	0x20000038

08008b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b089      	sub	sp, #36	@ 0x24
 8008b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	2300      	movs	r3, #0
 8008b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 030c 	and.w	r3, r3, #12
 8008b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b64:	4b3b      	ldr	r3, [pc, #236]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d005      	beq.n	8008b80 <HAL_RCC_GetSysClockFreq+0x34>
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	2b0c      	cmp	r3, #12
 8008b78:	d121      	bne.n	8008bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d11e      	bne.n	8008bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008b80:	4b34      	ldr	r3, [pc, #208]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0308 	and.w	r3, r3, #8
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008b8c:	4b31      	ldr	r3, [pc, #196]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	61fb      	str	r3, [r7, #28]
 8008b9a:	e005      	b.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	091b      	lsrs	r3, r3, #4
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8008c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bbc:	e00a      	b.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d102      	bne.n	8008bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008bc4:	4b25      	ldr	r3, [pc, #148]	@ (8008c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	e004      	b.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b08      	cmp	r3, #8
 8008bce:	d101      	bne.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bd0:	4b23      	ldr	r3, [pc, #140]	@ (8008c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8008bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b0c      	cmp	r3, #12
 8008bd8:	d134      	bne.n	8008c44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008bda:	4b1e      	ldr	r3, [pc, #120]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d003      	beq.n	8008bf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d003      	beq.n	8008bf8 <HAL_RCC_GetSysClockFreq+0xac>
 8008bf0:	e005      	b.n	8008bfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8008bf4:	617b      	str	r3, [r7, #20]
      break;
 8008bf6:	e005      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008bf8:	4b19      	ldr	r3, [pc, #100]	@ (8008c60 <HAL_RCC_GetSysClockFreq+0x114>)
 8008bfa:	617b      	str	r3, [r7, #20]
      break;
 8008bfc:	e002      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	617b      	str	r3, [r7, #20]
      break;
 8008c02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c04:	4b13      	ldr	r3, [pc, #76]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	091b      	lsrs	r3, r3, #4
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	3301      	adds	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	fb03 f202 	mul.w	r2, r3, r2
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	0e5b      	lsrs	r3, r3, #25
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	3301      	adds	r3, #1
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008c44:	69bb      	ldr	r3, [r7, #24]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3724      	adds	r7, #36	@ 0x24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40021000 	.word	0x40021000
 8008c58:	08011350 	.word	0x08011350
 8008c5c:	00f42400 	.word	0x00f42400
 8008c60:	007a1200 	.word	0x007a1200

08008c64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c68:	4b03      	ldr	r3, [pc, #12]	@ (8008c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20000018 	.word	0x20000018

08008c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c80:	f7ff fff0 	bl	8008c64 <HAL_RCC_GetHCLKFreq>
 8008c84:	4602      	mov	r2, r0
 8008c86:	4b06      	ldr	r3, [pc, #24]	@ (8008ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	4904      	ldr	r1, [pc, #16]	@ (8008ca4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c92:	5ccb      	ldrb	r3, [r1, r3]
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	08011348 	.word	0x08011348

08008ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cac:	f7ff ffda 	bl	8008c64 <HAL_RCC_GetHCLKFreq>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	0adb      	lsrs	r3, r3, #11
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	4904      	ldr	r1, [pc, #16]	@ (8008cd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cbe:	5ccb      	ldrb	r3, [r1, r3]
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	08011348 	.word	0x08011348

08008cd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008cdc:	2300      	movs	r3, #0
 8008cde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ce0:	4b27      	ldr	r3, [pc, #156]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008cec:	f7ff f916 	bl	8007f1c <HAL_PWREx_GetVoltageRange>
 8008cf0:	6178      	str	r0, [r7, #20]
 8008cf2:	e014      	b.n	8008d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008cf4:	4b22      	ldr	r3, [pc, #136]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf8:	4a21      	ldr	r2, [pc, #132]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d00:	4b1f      	ldr	r3, [pc, #124]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d0c:	f7ff f906 	bl	8007f1c <HAL_PWREx_GetVoltageRange>
 8008d10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d12:	4b1b      	ldr	r3, [pc, #108]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d16:	4a1a      	ldr	r2, [pc, #104]	@ (8008d80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d24:	d10b      	bne.n	8008d3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b80      	cmp	r3, #128	@ 0x80
 8008d2a:	d913      	bls.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8008d30:	d902      	bls.n	8008d38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008d32:	2302      	movs	r3, #2
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	e00d      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008d38:	2301      	movs	r3, #1
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	e00a      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d42:	d902      	bls.n	8008d4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008d44:	2302      	movs	r3, #2
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	e004      	b.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b70      	cmp	r3, #112	@ 0x70
 8008d4e:	d101      	bne.n	8008d54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008d50:	2301      	movs	r3, #1
 8008d52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008d54:	4b0b      	ldr	r3, [pc, #44]	@ (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f023 020f 	bic.w	r2, r3, #15
 8008d5c:	4909      	ldr	r1, [pc, #36]	@ (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008d64:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d001      	beq.n	8008d76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e000      	b.n	8008d78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40022000 	.word	0x40022000

08008d88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d00b      	beq.n	8008db6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d825      	bhi.n	8008df0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d008      	beq.n	8008dbc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d11f      	bne.n	8008df0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008db0:	4b25      	ldr	r3, [pc, #148]	@ (8008e48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008db2:	613b      	str	r3, [r7, #16]
    break;
 8008db4:	e01f      	b.n	8008df6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008db6:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008db8:	613b      	str	r3, [r7, #16]
    break;
 8008dba:	e01c      	b.n	8008df6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008dbc:	4b21      	ldr	r3, [pc, #132]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0308 	and.w	r3, r3, #8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d107      	bne.n	8008dd8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	e005      	b.n	8008de4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008de4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dec:	613b      	str	r3, [r7, #16]
    break;
 8008dee:	e002      	b.n	8008df6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	613b      	str	r3, [r7, #16]
    break;
 8008df4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	f003 030f 	and.w	r3, r3, #15
 8008e00:	3301      	adds	r3, #1
 8008e02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e04:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	0a1b      	lsrs	r3, r3, #8
 8008e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	fb03 f202 	mul.w	r2, r3, r2
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e1c:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	0e5b      	lsrs	r3, r3, #25
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	3301      	adds	r3, #1
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008e36:	683b      	ldr	r3, [r7, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	371c      	adds	r7, #28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40021000 	.word	0x40021000
 8008e48:	00f42400 	.word	0x00f42400
 8008e4c:	007a1200 	.word	0x007a1200
 8008e50:	08011350 	.word	0x08011350

08008e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e60:	2300      	movs	r3, #0
 8008e62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d040      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e74:	2b80      	cmp	r3, #128	@ 0x80
 8008e76:	d02a      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e78:	2b80      	cmp	r3, #128	@ 0x80
 8008e7a:	d825      	bhi.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e7c:	2b60      	cmp	r3, #96	@ 0x60
 8008e7e:	d026      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e80:	2b60      	cmp	r3, #96	@ 0x60
 8008e82:	d821      	bhi.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e84:	2b40      	cmp	r3, #64	@ 0x40
 8008e86:	d006      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008e88:	2b40      	cmp	r3, #64	@ 0x40
 8008e8a:	d81d      	bhi.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008e90:	2b20      	cmp	r3, #32
 8008e92:	d010      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008e94:	e018      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008e96:	4b89      	ldr	r3, [pc, #548]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	4a88      	ldr	r2, [pc, #544]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ea0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008ea2:	e015      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fb12 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008eb4:	e00c      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3320      	adds	r3, #32
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fbfd 	bl	80096bc <RCCEx_PLLSAI2_Config>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008ec6:	e003      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	74fb      	strb	r3, [r7, #19]
      break;
 8008ecc:	e000      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ed0:	7cfb      	ldrb	r3, [r7, #19]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10b      	bne.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ed6:	4b79      	ldr	r3, [pc, #484]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008edc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee4:	4975      	ldr	r1, [pc, #468]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008eec:	e001      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d047      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f06:	d030      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0c:	d82a      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f12:	d02a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f18:	d824      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008f1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f1e:	d008      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f24:	d81e      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008f30:	e018      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f32:	4b62      	ldr	r3, [pc, #392]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	4a61      	ldr	r2, [pc, #388]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f3e:	e015      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3304      	adds	r3, #4
 8008f44:	2100      	movs	r1, #0
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fac4 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f50:	e00c      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3320      	adds	r3, #32
 8008f56:	2100      	movs	r1, #0
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fbaf 	bl	80096bc <RCCEx_PLLSAI2_Config>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f62:	e003      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	74fb      	strb	r3, [r7, #19]
      break;
 8008f68:	e000      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f6c:	7cfb      	ldrb	r3, [r7, #19]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f72:	4b52      	ldr	r3, [pc, #328]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f80:	494e      	ldr	r1, [pc, #312]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008f88:	e001      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	7cfb      	ldrb	r3, [r7, #19]
 8008f8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 809f 	beq.w	80090da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008fa0:	4b46      	ldr	r3, [pc, #280]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fb6:	4b41      	ldr	r3, [pc, #260]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fba:	4a40      	ldr	r2, [pc, #256]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fca:	60bb      	str	r3, [r7, #8]
 8008fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fde:	f7fb fcd1 	bl	8004984 <HAL_GetTick>
 8008fe2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008fe4:	e009      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fe6:	f7fb fccd 	bl	8004984 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d902      	bls.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	74fb      	strb	r3, [r7, #19]
        break;
 8008ff8:	e005      	b.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ffa:	4b31      	ldr	r3, [pc, #196]	@ (80090c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0ef      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009006:	7cfb      	ldrb	r3, [r7, #19]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d15b      	bne.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800900c:	4b2b      	ldr	r3, [pc, #172]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800900e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009016:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01f      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	429a      	cmp	r2, r3
 8009028:	d019      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800902a:	4b24      	ldr	r3, [pc, #144]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009034:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009036:	4b21      	ldr	r3, [pc, #132]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800903c:	4a1f      	ldr	r2, [pc, #124]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800903e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009046:	4b1d      	ldr	r3, [pc, #116]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904c:	4a1b      	ldr	r2, [pc, #108]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800904e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009056:	4a19      	ldr	r2, [pc, #100]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d016      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fb fc8c 	bl	8004984 <HAL_GetTick>
 800906c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800906e:	e00b      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009070:	f7fb fc88 	bl	8004984 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800907e:	4293      	cmp	r3, r2
 8009080:	d902      	bls.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	74fb      	strb	r3, [r7, #19]
            break;
 8009086:	e006      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009088:	4b0c      	ldr	r3, [pc, #48]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800908a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0ec      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009096:	7cfb      	ldrb	r3, [r7, #19]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10c      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800909e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ac:	4903      	ldr	r1, [pc, #12]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80090b4:	e008      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090b6:	7cfb      	ldrb	r3, [r7, #19]
 80090b8:	74bb      	strb	r3, [r7, #18]
 80090ba:	e005      	b.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80090bc:	40021000 	.word	0x40021000
 80090c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c4:	7cfb      	ldrb	r3, [r7, #19]
 80090c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090c8:	7c7b      	ldrb	r3, [r7, #17]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d105      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090ce:	4ba0      	ldr	r3, [pc, #640]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090e6:	4b9a      	ldr	r3, [pc, #616]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ec:	f023 0203 	bic.w	r2, r3, #3
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090f4:	4996      	ldr	r1, [pc, #600]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00a      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009108:	4b91      	ldr	r3, [pc, #580]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800910a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800910e:	f023 020c 	bic.w	r2, r3, #12
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	498e      	ldr	r1, [pc, #568]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009118:	4313      	orrs	r3, r2
 800911a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800912a:	4b89      	ldr	r3, [pc, #548]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800912c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009130:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009138:	4985      	ldr	r1, [pc, #532]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800913a:	4313      	orrs	r3, r2
 800913c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800914c:	4b80      	ldr	r3, [pc, #512]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009152:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800915a:	497d      	ldr	r1, [pc, #500]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0310 	and.w	r3, r3, #16
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00a      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800916e:	4b78      	ldr	r3, [pc, #480]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917c:	4974      	ldr	r1, [pc, #464]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800917e:	4313      	orrs	r3, r2
 8009180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0320 	and.w	r3, r3, #32
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009190:	4b6f      	ldr	r3, [pc, #444]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009196:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919e:	496c      	ldr	r1, [pc, #432]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091b2:	4b67      	ldr	r3, [pc, #412]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091c0:	4963      	ldr	r1, [pc, #396]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091d4:	4b5e      	ldr	r3, [pc, #376]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091e2:	495b      	ldr	r1, [pc, #364]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091f6:	4b56      	ldr	r3, [pc, #344]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009204:	4952      	ldr	r1, [pc, #328]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009206:	4313      	orrs	r3, r2
 8009208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009218:	4b4d      	ldr	r3, [pc, #308]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800921e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009226:	494a      	ldr	r1, [pc, #296]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800923a:	4b45      	ldr	r3, [pc, #276]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800923c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009240:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009248:	4941      	ldr	r1, [pc, #260]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800925c:	4b3c      	ldr	r3, [pc, #240]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800925e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009262:	f023 0203 	bic.w	r2, r3, #3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926a:	4939      	ldr	r1, [pc, #228]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800926c:	4313      	orrs	r3, r2
 800926e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d028      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800927e:	4b34      	ldr	r3, [pc, #208]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009284:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800928c:	4930      	ldr	r1, [pc, #192]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800928e:	4313      	orrs	r3, r2
 8009290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800929c:	d106      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800929e:	4b2c      	ldr	r3, [pc, #176]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092a8:	60d3      	str	r3, [r2, #12]
 80092aa:	e011      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092b4:	d10c      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3304      	adds	r3, #4
 80092ba:	2101      	movs	r1, #1
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f909 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80092c6:	7cfb      	ldrb	r3, [r7, #19]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80092cc:	7cfb      	ldrb	r3, [r7, #19]
 80092ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d04d      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e4:	d108      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80092e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092ec:	4a18      	ldr	r2, [pc, #96]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80092f6:	e012      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80092f8:	4b15      	ldr	r3, [pc, #84]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092fe:	4a14      	ldr	r2, [pc, #80]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009300:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009304:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8009308:	4b11      	ldr	r3, [pc, #68]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009316:	490e      	ldr	r1, [pc, #56]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009326:	d106      	bne.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009328:	4b09      	ldr	r3, [pc, #36]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	4a08      	ldr	r2, [pc, #32]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800932e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009332:	60d3      	str	r3, [r2, #12]
 8009334:	e020      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800933a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800933e:	d109      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009340:	4b03      	ldr	r3, [pc, #12]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	4a02      	ldr	r2, [pc, #8]	@ (8009350 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800934a:	60d3      	str	r3, [r2, #12]
 800934c:	e014      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800934e:	bf00      	nop
 8009350:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800935c:	d10c      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3304      	adds	r3, #4
 8009362:	2101      	movs	r1, #1
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f8b5 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 800936a:	4603      	mov	r3, r0
 800936c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800936e:	7cfb      	ldrb	r3, [r7, #19]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009374:	7cfb      	ldrb	r3, [r7, #19]
 8009376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d028      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009384:	4b4a      	ldr	r3, [pc, #296]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009392:	4947      	ldr	r1, [pc, #284]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800939e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093a2:	d106      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a4:	4b42      	ldr	r3, [pc, #264]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a41      	ldr	r2, [pc, #260]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093ae:	60d3      	str	r3, [r2, #12]
 80093b0:	e011      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093ba:	d10c      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3304      	adds	r3, #4
 80093c0:	2101      	movs	r1, #1
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f886 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d01e      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093e2:	4b33      	ldr	r3, [pc, #204]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f2:	492f      	ldr	r1, [pc, #188]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009404:	d10c      	bne.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3304      	adds	r3, #4
 800940a:	2102      	movs	r1, #2
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f861 	bl	80094d4 <RCCEx_PLLSAI1_Config>
 8009412:	4603      	mov	r3, r0
 8009414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009416:	7cfb      	ldrb	r3, [r7, #19]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800941c:	7cfb      	ldrb	r3, [r7, #19]
 800941e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800942c:	4b20      	ldr	r3, [pc, #128]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800942e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009432:	f023 0204 	bic.w	r2, r3, #4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800943c:	491c      	ldr	r1, [pc, #112]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009450:	4b17      	ldr	r3, [pc, #92]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009456:	f023 0218 	bic.w	r2, r3, #24
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009460:	4913      	ldr	r1, [pc, #76]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d017      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009474:	4b0e      	ldr	r3, [pc, #56]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800947a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009484:	490a      	ldr	r1, [pc, #40]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009486:	4313      	orrs	r3, r2
 8009488:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009496:	d105      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009498:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	4a04      	ldr	r2, [pc, #16]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800949e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80094a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40021000 	.word	0x40021000

080094b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80094b8:	4b05      	ldr	r3, [pc, #20]	@ (80094d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a04      	ldr	r2, [pc, #16]	@ (80094d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80094be:	f043 0304 	orr.w	r3, r3, #4
 80094c2:	6013      	str	r3, [r2, #0]
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	40021000 	.word	0x40021000

080094d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094e2:	4b72      	ldr	r3, [pc, #456]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00e      	beq.n	800950c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80094ee:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0203 	and.w	r2, r3, #3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d103      	bne.n	8009506 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
       ||
 8009502:	2b00      	cmp	r3, #0
 8009504:	d142      	bne.n	800958c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	e03f      	b.n	800958c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d018      	beq.n	8009546 <RCCEx_PLLSAI1_Config+0x72>
 8009514:	2b03      	cmp	r3, #3
 8009516:	d825      	bhi.n	8009564 <RCCEx_PLLSAI1_Config+0x90>
 8009518:	2b01      	cmp	r3, #1
 800951a:	d002      	beq.n	8009522 <RCCEx_PLLSAI1_Config+0x4e>
 800951c:	2b02      	cmp	r3, #2
 800951e:	d009      	beq.n	8009534 <RCCEx_PLLSAI1_Config+0x60>
 8009520:	e020      	b.n	8009564 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009522:	4b62      	ldr	r3, [pc, #392]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d11d      	bne.n	800956a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009532:	e01a      	b.n	800956a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009534:	4b5d      	ldr	r3, [pc, #372]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800953c:	2b00      	cmp	r3, #0
 800953e:	d116      	bne.n	800956e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009544:	e013      	b.n	800956e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009546:	4b59      	ldr	r3, [pc, #356]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10f      	bne.n	8009572 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009552:	4b56      	ldr	r3, [pc, #344]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009562:	e006      	b.n	8009572 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
      break;
 8009568:	e004      	b.n	8009574 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800956a:	bf00      	nop
 800956c:	e002      	b.n	8009574 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800956e:	bf00      	nop
 8009570:	e000      	b.n	8009574 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009572:	bf00      	nop
    }

    if(status == HAL_OK)
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d108      	bne.n	800958c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800957a:	4b4c      	ldr	r3, [pc, #304]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	f023 0203 	bic.w	r2, r3, #3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4949      	ldr	r1, [pc, #292]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009588:	4313      	orrs	r3, r2
 800958a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f040 8086 	bne.w	80096a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009594:	4b45      	ldr	r3, [pc, #276]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a44      	ldr	r2, [pc, #272]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800959a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800959e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095a0:	f7fb f9f0 	bl	8004984 <HAL_GetTick>
 80095a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095a6:	e009      	b.n	80095bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095a8:	f7fb f9ec 	bl	8004984 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d902      	bls.n	80095bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	73fb      	strb	r3, [r7, #15]
        break;
 80095ba:	e005      	b.n	80095c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095bc:	4b3b      	ldr	r3, [pc, #236]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1ef      	bne.n	80095a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d168      	bne.n	80096a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d113      	bne.n	80095fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095d4:	4b35      	ldr	r3, [pc, #212]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	4b35      	ldr	r3, [pc, #212]	@ (80096b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80095da:	4013      	ands	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6892      	ldr	r2, [r2, #8]
 80095e0:	0211      	lsls	r1, r2, #8
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	68d2      	ldr	r2, [r2, #12]
 80095e6:	06d2      	lsls	r2, r2, #27
 80095e8:	4311      	orrs	r1, r2
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	6852      	ldr	r2, [r2, #4]
 80095ee:	3a01      	subs	r2, #1
 80095f0:	0112      	lsls	r2, r2, #4
 80095f2:	430a      	orrs	r2, r1
 80095f4:	492d      	ldr	r1, [pc, #180]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	610b      	str	r3, [r1, #16]
 80095fa:	e02d      	b.n	8009658 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d115      	bne.n	800962e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009602:	4b2a      	ldr	r3, [pc, #168]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009604:	691a      	ldr	r2, [r3, #16]
 8009606:	4b2b      	ldr	r3, [pc, #172]	@ (80096b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009608:	4013      	ands	r3, r2
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6892      	ldr	r2, [r2, #8]
 800960e:	0211      	lsls	r1, r2, #8
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6912      	ldr	r2, [r2, #16]
 8009614:	0852      	lsrs	r2, r2, #1
 8009616:	3a01      	subs	r2, #1
 8009618:	0552      	lsls	r2, r2, #21
 800961a:	4311      	orrs	r1, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6852      	ldr	r2, [r2, #4]
 8009620:	3a01      	subs	r2, #1
 8009622:	0112      	lsls	r2, r2, #4
 8009624:	430a      	orrs	r2, r1
 8009626:	4921      	ldr	r1, [pc, #132]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009628:	4313      	orrs	r3, r2
 800962a:	610b      	str	r3, [r1, #16]
 800962c:	e014      	b.n	8009658 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800962e:	4b1f      	ldr	r3, [pc, #124]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009630:	691a      	ldr	r2, [r3, #16]
 8009632:	4b21      	ldr	r3, [pc, #132]	@ (80096b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009634:	4013      	ands	r3, r2
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6892      	ldr	r2, [r2, #8]
 800963a:	0211      	lsls	r1, r2, #8
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6952      	ldr	r2, [r2, #20]
 8009640:	0852      	lsrs	r2, r2, #1
 8009642:	3a01      	subs	r2, #1
 8009644:	0652      	lsls	r2, r2, #25
 8009646:	4311      	orrs	r1, r2
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6852      	ldr	r2, [r2, #4]
 800964c:	3a01      	subs	r2, #1
 800964e:	0112      	lsls	r2, r2, #4
 8009650:	430a      	orrs	r2, r1
 8009652:	4916      	ldr	r1, [pc, #88]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009654:	4313      	orrs	r3, r2
 8009656:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009658:	4b14      	ldr	r3, [pc, #80]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a13      	ldr	r2, [pc, #76]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800965e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009664:	f7fb f98e 	bl	8004984 <HAL_GetTick>
 8009668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800966a:	e009      	b.n	8009680 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800966c:	f7fb f98a 	bl	8004984 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d902      	bls.n	8009680 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
          break;
 800967e:	e005      	b.n	800968c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009680:	4b0a      	ldr	r3, [pc, #40]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0ef      	beq.n	800966c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009692:	4b06      	ldr	r3, [pc, #24]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	4904      	ldr	r1, [pc, #16]	@ (80096ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800969c:	4313      	orrs	r3, r2
 800969e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	40021000 	.word	0x40021000
 80096b0:	07ff800f 	.word	0x07ff800f
 80096b4:	ff9f800f 	.word	0xff9f800f
 80096b8:	f9ff800f 	.word	0xf9ff800f

080096bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096ca:	4b72      	ldr	r3, [pc, #456]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80096d6:	4b6f      	ldr	r3, [pc, #444]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f003 0203 	and.w	r2, r3, #3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d103      	bne.n	80096ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
       ||
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d142      	bne.n	8009774 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
 80096f2:	e03f      	b.n	8009774 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d018      	beq.n	800972e <RCCEx_PLLSAI2_Config+0x72>
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d825      	bhi.n	800974c <RCCEx_PLLSAI2_Config+0x90>
 8009700:	2b01      	cmp	r3, #1
 8009702:	d002      	beq.n	800970a <RCCEx_PLLSAI2_Config+0x4e>
 8009704:	2b02      	cmp	r3, #2
 8009706:	d009      	beq.n	800971c <RCCEx_PLLSAI2_Config+0x60>
 8009708:	e020      	b.n	800974c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800970a:	4b62      	ldr	r3, [pc, #392]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11d      	bne.n	8009752 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800971a:	e01a      	b.n	8009752 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800971c:	4b5d      	ldr	r3, [pc, #372]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009724:	2b00      	cmp	r3, #0
 8009726:	d116      	bne.n	8009756 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800972c:	e013      	b.n	8009756 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800972e:	4b59      	ldr	r3, [pc, #356]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10f      	bne.n	800975a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800973a:	4b56      	ldr	r3, [pc, #344]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d109      	bne.n	800975a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800974a:	e006      	b.n	800975a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
      break;
 8009750:	e004      	b.n	800975c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009752:	bf00      	nop
 8009754:	e002      	b.n	800975c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009756:	bf00      	nop
 8009758:	e000      	b.n	800975c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800975a:	bf00      	nop
    }

    if(status == HAL_OK)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d108      	bne.n	8009774 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009762:	4b4c      	ldr	r3, [pc, #304]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f023 0203 	bic.w	r2, r3, #3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4949      	ldr	r1, [pc, #292]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009770:	4313      	orrs	r3, r2
 8009772:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	f040 8086 	bne.w	8009888 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800977c:	4b45      	ldr	r3, [pc, #276]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a44      	ldr	r2, [pc, #272]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009788:	f7fb f8fc 	bl	8004984 <HAL_GetTick>
 800978c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800978e:	e009      	b.n	80097a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009790:	f7fb f8f8 	bl	8004984 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d902      	bls.n	80097a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	73fb      	strb	r3, [r7, #15]
        break;
 80097a2:	e005      	b.n	80097b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80097a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1ef      	bne.n	8009790 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d168      	bne.n	8009888 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d113      	bne.n	80097e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097bc:	4b35      	ldr	r3, [pc, #212]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097be:	695a      	ldr	r2, [r3, #20]
 80097c0:	4b35      	ldr	r3, [pc, #212]	@ (8009898 <RCCEx_PLLSAI2_Config+0x1dc>)
 80097c2:	4013      	ands	r3, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6892      	ldr	r2, [r2, #8]
 80097c8:	0211      	lsls	r1, r2, #8
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68d2      	ldr	r2, [r2, #12]
 80097ce:	06d2      	lsls	r2, r2, #27
 80097d0:	4311      	orrs	r1, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6852      	ldr	r2, [r2, #4]
 80097d6:	3a01      	subs	r2, #1
 80097d8:	0112      	lsls	r2, r2, #4
 80097da:	430a      	orrs	r2, r1
 80097dc:	492d      	ldr	r1, [pc, #180]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	614b      	str	r3, [r1, #20]
 80097e2:	e02d      	b.n	8009840 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d115      	bne.n	8009816 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097ea:	4b2a      	ldr	r3, [pc, #168]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097ec:	695a      	ldr	r2, [r3, #20]
 80097ee:	4b2b      	ldr	r3, [pc, #172]	@ (800989c <RCCEx_PLLSAI2_Config+0x1e0>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6892      	ldr	r2, [r2, #8]
 80097f6:	0211      	lsls	r1, r2, #8
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6912      	ldr	r2, [r2, #16]
 80097fc:	0852      	lsrs	r2, r2, #1
 80097fe:	3a01      	subs	r2, #1
 8009800:	0552      	lsls	r2, r2, #21
 8009802:	4311      	orrs	r1, r2
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	6852      	ldr	r2, [r2, #4]
 8009808:	3a01      	subs	r2, #1
 800980a:	0112      	lsls	r2, r2, #4
 800980c:	430a      	orrs	r2, r1
 800980e:	4921      	ldr	r1, [pc, #132]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009810:	4313      	orrs	r3, r2
 8009812:	614b      	str	r3, [r1, #20]
 8009814:	e014      	b.n	8009840 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009816:	4b1f      	ldr	r3, [pc, #124]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	4b21      	ldr	r3, [pc, #132]	@ (80098a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800981c:	4013      	ands	r3, r2
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	6892      	ldr	r2, [r2, #8]
 8009822:	0211      	lsls	r1, r2, #8
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6952      	ldr	r2, [r2, #20]
 8009828:	0852      	lsrs	r2, r2, #1
 800982a:	3a01      	subs	r2, #1
 800982c:	0652      	lsls	r2, r2, #25
 800982e:	4311      	orrs	r1, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6852      	ldr	r2, [r2, #4]
 8009834:	3a01      	subs	r2, #1
 8009836:	0112      	lsls	r2, r2, #4
 8009838:	430a      	orrs	r2, r1
 800983a:	4916      	ldr	r1, [pc, #88]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800983c:	4313      	orrs	r3, r2
 800983e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009840:	4b14      	ldr	r3, [pc, #80]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a13      	ldr	r2, [pc, #76]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800984a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984c:	f7fb f89a 	bl	8004984 <HAL_GetTick>
 8009850:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009852:	e009      	b.n	8009868 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009854:	f7fb f896 	bl	8004984 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d902      	bls.n	8009868 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	73fb      	strb	r3, [r7, #15]
          break;
 8009866:	e005      	b.n	8009874 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009868:	4b0a      	ldr	r3, [pc, #40]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0ef      	beq.n	8009854 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800987a:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	4904      	ldr	r1, [pc, #16]	@ (8009894 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009884:	4313      	orrs	r3, r2
 8009886:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	40021000 	.word	0x40021000
 8009898:	07ff800f 	.word	0x07ff800f
 800989c:	ff9f800f 	.word	0xff9f800f
 80098a0:	f9ff800f 	.word	0xf9ff800f

080098a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e054      	b.n	8009960 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	7a5b      	ldrb	r3, [r3, #9]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d105      	bne.n	80098cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7f9 fa78 	bl	8002dbc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	725a      	strb	r2, [r3, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f023 0120 	bic.w	r1, r3, #32
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	601a      	str	r2, [r3, #0]
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f042 0204 	orr.w	r2, r2, #4
 80098f6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009902:	2b40      	cmp	r3, #64	@ 0x40
 8009904:	d104      	bne.n	8009910 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2204      	movs	r2, #4
 800990a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e027      	b.n	8009960 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8009910:	f7fb f838 	bl	8004984 <HAL_GetTick>
 8009914:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009916:	e015      	b.n	8009944 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009918:	f7fb f834 	bl	8004984 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d90e      	bls.n	8009944 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b04      	cmp	r3, #4
 8009932:	d107      	bne.n	8009944 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2204      	movs	r2, #4
 8009938:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2202      	movs	r2, #2
 800993e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8009940:	2301      	movs	r3, #1
 8009942:	e00d      	b.n	8009960 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b04      	cmp	r3, #4
 8009950:	d0e2      	beq.n	8009918 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e095      	b.n	8009aa6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	d108      	bne.n	8009994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800998a:	d009      	beq.n	80099a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	61da      	str	r2, [r3, #28]
 8009992:	e005      	b.n	80099a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7f9 fa1e 	bl	8002dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2202      	movs	r2, #2
 80099c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099e0:	d902      	bls.n	80099e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e002      	b.n	80099ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80099e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80099f6:	d007      	beq.n	8009a08 <HAL_SPI_Init+0xa0>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a00:	d002      	beq.n	8009a08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009a18:	431a      	orrs	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a40:	431a      	orrs	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a4a:	ea42 0103 	orr.w	r1, r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	0c1b      	lsrs	r3, r3, #16
 8009a64:	f003 0204 	and.w	r2, r3, #4
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	f003 0310 	and.w	r3, r3, #16
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009a84:	ea42 0103 	orr.w	r1, r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e01a      	b.n	8009af6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2202      	movs	r2, #2
 8009ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ad6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7f9 f9d1 	bl	8002e80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b088      	sub	sp, #32
 8009b02:	af02      	add	r7, sp, #8
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	603b      	str	r3, [r7, #0]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b1a:	d112      	bne.n	8009b42 <HAL_SPI_Receive+0x44>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10e      	bne.n	8009b42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2204      	movs	r2, #4
 8009b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	4613      	mov	r3, r2
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f910 	bl	8009d5e <HAL_SPI_TransmitReceive>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	e109      	b.n	8009d56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d101      	bne.n	8009b50 <HAL_SPI_Receive+0x52>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	e102      	b.n	8009d56 <HAL_SPI_Receive+0x258>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b58:	f7fa ff14 	bl	8004984 <HAL_GetTick>
 8009b5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d002      	beq.n	8009b70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b6e:	e0e9      	b.n	8009d44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d002      	beq.n	8009b7c <HAL_SPI_Receive+0x7e>
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d102      	bne.n	8009b82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b80:	e0e0      	b.n	8009d44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2204      	movs	r2, #4
 8009b86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	88fa      	ldrh	r2, [r7, #6]
 8009b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	88fa      	ldrh	r2, [r7, #6]
 8009ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009bcc:	d908      	bls.n	8009be0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e007      	b.n	8009bf0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009bee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bf8:	d10f      	bne.n	8009c1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c24:	2b40      	cmp	r3, #64	@ 0x40
 8009c26:	d007      	beq.n	8009c38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c40:	d867      	bhi.n	8009d12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009c42:	e030      	b.n	8009ca6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d117      	bne.n	8009c82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f103 020c 	add.w	r2, r3, #12
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	b2d2      	uxtb	r2, r2
 8009c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c68:	1c5a      	adds	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009c80:	e011      	b.n	8009ca6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c82:	f7fa fe7f 	bl	8004984 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d803      	bhi.n	8009c9a <HAL_SPI_Receive+0x19c>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d102      	bne.n	8009ca0 <HAL_SPI_Receive+0x1a2>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ca4:	e04e      	b.n	8009d44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1c8      	bne.n	8009c44 <HAL_SPI_Receive+0x146>
 8009cb2:	e034      	b.n	8009d1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d115      	bne.n	8009cee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ccc:	b292      	uxth	r2, r2
 8009cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd4:	1c9a      	adds	r2, r3, #2
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009cec:	e011      	b.n	8009d12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cee:	f7fa fe49 	bl	8004984 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d803      	bhi.n	8009d06 <HAL_SPI_Receive+0x208>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d102      	bne.n	8009d0c <HAL_SPI_Receive+0x20e>
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009d10:	e018      	b.n	8009d44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1ca      	bne.n	8009cb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 fff6 	bl	800ad14 <SPI_EndRxTransaction>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	75fb      	strb	r3, [r7, #23]
 8009d40:	e000      	b.n	8009d44 <HAL_SPI_Receive+0x246>
  }

error :
 8009d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b08a      	sub	sp, #40	@ 0x28
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_SPI_TransmitReceive+0x26>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e1fb      	b.n	800a17c <HAL_SPI_TransmitReceive+0x41e>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d8c:	f7fa fdfa 	bl	8004984 <HAL_GetTick>
 8009d90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009da0:	887b      	ldrh	r3, [r7, #2]
 8009da2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009da8:	7efb      	ldrb	r3, [r7, #27]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d00e      	beq.n	8009dcc <HAL_SPI_TransmitReceive+0x6e>
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009db4:	d106      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x66>
 8009dbe:	7efb      	ldrb	r3, [r7, #27]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d003      	beq.n	8009dcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009dca:	e1cd      	b.n	800a168 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <HAL_SPI_TransmitReceive+0x80>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <HAL_SPI_TransmitReceive+0x80>
 8009dd8:	887b      	ldrh	r3, [r7, #2]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009de4:	e1c0      	b.n	800a168 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d003      	beq.n	8009dfa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2205      	movs	r2, #5
 8009df6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	887a      	ldrh	r2, [r7, #2]
 8009e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	887a      	ldrh	r2, [r7, #2]
 8009e12:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	887a      	ldrh	r2, [r7, #2]
 8009e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	887a      	ldrh	r2, [r7, #2]
 8009e26:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e3c:	d802      	bhi.n	8009e44 <HAL_SPI_TransmitReceive+0xe6>
 8009e3e:	8a3b      	ldrh	r3, [r7, #16]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d908      	bls.n	8009e56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	e007      	b.n	8009e66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009e64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e70:	2b40      	cmp	r3, #64	@ 0x40
 8009e72:	d007      	beq.n	8009e84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e8c:	d97c      	bls.n	8009f88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_SPI_TransmitReceive+0x13e>
 8009e96:	8a7b      	ldrh	r3, [r7, #18]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d169      	bne.n	8009f70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea0:	881a      	ldrh	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eac:	1c9a      	adds	r2, r3, #2
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ec0:	e056      	b.n	8009f70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d11b      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x1aa>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d016      	beq.n	8009f08 <HAL_SPI_TransmitReceive+0x1aa>
 8009eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d113      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee4:	881a      	ldrh	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	1c9a      	adds	r2, r3, #2
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d11c      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x1f2>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d016      	beq.n	8009f50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f2c:	b292      	uxth	r2, r2
 8009f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f34:	1c9a      	adds	r2, r3, #2
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3b01      	subs	r3, #1
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f50:	f7fa fd18 	bl	8004984 <HAL_GetTick>
 8009f54:	4602      	mov	r2, r0
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d807      	bhi.n	8009f70 <HAL_SPI_TransmitReceive+0x212>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f66:	d003      	beq.n	8009f70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8009f6e:	e0fb      	b.n	800a168 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1a3      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x164>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d19d      	bne.n	8009ec2 <HAL_SPI_TransmitReceive+0x164>
 8009f86:	e0df      	b.n	800a148 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <HAL_SPI_TransmitReceive+0x23a>
 8009f90:	8a7b      	ldrh	r3, [r7, #18]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	f040 80cb 	bne.w	800a12e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d912      	bls.n	8009fc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa6:	881a      	ldrh	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb2:	1c9a      	adds	r2, r3, #2
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	3b02      	subs	r3, #2
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009fc6:	e0b2      	b.n	800a12e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	7812      	ldrb	r2, [r2, #0]
 8009fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fee:	e09e      	b.n	800a12e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	f003 0302 	and.w	r3, r3, #2
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d134      	bne.n	800a068 <HAL_SPI_TransmitReceive+0x30a>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a002:	b29b      	uxth	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d02f      	beq.n	800a068 <HAL_SPI_TransmitReceive+0x30a>
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d12c      	bne.n	800a068 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a012:	b29b      	uxth	r3, r3
 800a014:	2b01      	cmp	r3, #1
 800a016:	d912      	bls.n	800a03e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a01c:	881a      	ldrh	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a028:	1c9a      	adds	r2, r3, #2
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a032:	b29b      	uxth	r3, r3
 800a034:	3b02      	subs	r3, #2
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a03c:	e012      	b.n	800a064 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	330c      	adds	r3, #12
 800a048:	7812      	ldrb	r2, [r2, #0]
 800a04a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d148      	bne.n	800a108 <HAL_SPI_TransmitReceive+0x3aa>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d042      	beq.n	800a108 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d923      	bls.n	800a0d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a098:	b292      	uxth	r2, r2
 800a09a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a0:	1c9a      	adds	r2, r3, #2
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b02      	subs	r3, #2
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d81f      	bhi.n	800a104 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0d2:	605a      	str	r2, [r3, #4]
 800a0d4:	e016      	b.n	800a104 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f103 020c 	add.w	r2, r3, #12
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e2:	7812      	ldrb	r2, [r2, #0]
 800a0e4:	b2d2      	uxtb	r2, r2
 800a0e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a104:	2301      	movs	r3, #1
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a108:	f7fa fc3c 	bl	8004984 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a114:	429a      	cmp	r2, r3
 800a116:	d803      	bhi.n	800a120 <HAL_SPI_TransmitReceive+0x3c2>
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a11e:	d102      	bne.n	800a126 <HAL_SPI_TransmitReceive+0x3c8>
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800a12c:	e01c      	b.n	800a168 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a132:	b29b      	uxth	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	f47f af5b 	bne.w	8009ff0 <HAL_SPI_TransmitReceive+0x292>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a140:	b29b      	uxth	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	f47f af54 	bne.w	8009ff0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f000 fe39 	bl	800adc4 <SPI_EndRxTxTransaction>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d006      	beq.n	800a166 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	661a      	str	r2, [r3, #96]	@ 0x60
 800a164:	e000      	b.n	800a168 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a178:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3728      	adds	r7, #40	@ 0x28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_SPI_Transmit_IT+0x20>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e072      	b.n	800a28a <HAL_SPI_Transmit_IT+0x106>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <HAL_SPI_Transmit_IT+0x34>
 800a1b2:	88fb      	ldrh	r3, [r7, #6]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d102      	bne.n	800a1be <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a1bc:	e060      	b.n	800a280 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d002      	beq.n	800a1d0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a1ce:	e057      	b.n	800a280 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	88fa      	ldrh	r2, [r7, #6]
 800a1e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a214:	d903      	bls.n	800a21e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a1f      	ldr	r2, [pc, #124]	@ (800a298 <HAL_SPI_Transmit_IT+0x114>)
 800a21a:	651a      	str	r2, [r3, #80]	@ 0x50
 800a21c:	e002      	b.n	800a224 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4a1e      	ldr	r2, [pc, #120]	@ (800a29c <HAL_SPI_Transmit_IT+0x118>)
 800a222:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a22c:	d10f      	bne.n	800a24e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a23c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a24c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800a25c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a268:	2b40      	cmp	r3, #64	@ 0x40
 800a26a:	d008      	beq.n	800a27e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	e000      	b.n	800a280 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800a27e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a288:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	0800aa93 	.word	0x0800aa93
 800a29c:	0800aa4d 	.word	0x0800aa4d

0800a2a0 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d110      	bne.n	800a2dc <HAL_SPI_Receive_IT+0x3c>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a2c2:	d10b      	bne.n	800a2dc <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2204      	movs	r2, #4
 800a2c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f894 	bl	800a400 <HAL_SPI_TransmitReceive_IT>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	e089      	b.n	800a3f0 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_SPI_Receive_IT+0x4a>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e082      	b.n	800a3f0 <HAL_SPI_Receive_IT+0x150>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d002      	beq.n	800a304 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
 800a300:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a302:	e070      	b.n	800a3e6 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_SPI_Receive_IT+0x70>
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a314:	e067      	b.n	800a3e6 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2204      	movs	r2, #4
 800a31a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	88fa      	ldrh	r2, [r7, #6]
 800a336:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a35a:	d90b      	bls.n	800a374 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a36a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a22      	ldr	r2, [pc, #136]	@ (800a3f8 <HAL_SPI_Receive_IT+0x158>)
 800a370:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a372:	e00a      	b.n	800a38a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a382:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4a1d      	ldr	r2, [pc, #116]	@ (800a3fc <HAL_SPI_Receive_IT+0x15c>)
 800a388:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a392:	d10f      	bne.n	800a3b4 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a3b2:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a3c2:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ce:	2b40      	cmp	r3, #64	@ 0x40
 800a3d0:	d008      	beq.n	800a3e4 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	e000      	b.n	800a3e6 <HAL_SPI_Receive_IT+0x146>
  }

error :
 800a3e4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	0800aa01 	.word	0x0800aa01
 800a3fc:	0800a9b1 	.word	0x0800a9b1

0800a400 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <HAL_SPI_TransmitReceive_IT+0x20>
 800a41c:	2302      	movs	r3, #2
 800a41e:	e091      	b.n	800a544 <HAL_SPI_TransmitReceive_IT+0x144>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a42e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a436:	7dbb      	ldrb	r3, [r7, #22]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d00d      	beq.n	800a458 <HAL_SPI_TransmitReceive_IT+0x58>
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a442:	d106      	bne.n	800a452 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <HAL_SPI_TransmitReceive_IT+0x52>
 800a44c:	7dbb      	ldrb	r3, [r7, #22]
 800a44e:	2b04      	cmp	r3, #4
 800a450:	d002      	beq.n	800a458 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a452:	2302      	movs	r3, #2
 800a454:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a456:	e070      	b.n	800a53a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <HAL_SPI_TransmitReceive_IT+0x6a>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SPI_TransmitReceive_IT+0x6a>
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a46e:	e064      	b.n	800a53a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d003      	beq.n	800a484 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2205      	movs	r2, #5
 800a480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	887a      	ldrh	r2, [r7, #2]
 800a494:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	887a      	ldrh	r2, [r7, #2]
 800a49a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	887a      	ldrh	r2, [r7, #2]
 800a4a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	887a      	ldrh	r2, [r7, #2]
 800a4ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4ba:	d906      	bls.n	800a4ca <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	4a24      	ldr	r2, [pc, #144]	@ (800a550 <HAL_SPI_TransmitReceive_IT+0x150>)
 800a4c0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4a23      	ldr	r2, [pc, #140]	@ (800a554 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a4c6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a4c8:	e005      	b.n	800a4d6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4a22      	ldr	r2, [pc, #136]	@ (800a558 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a4ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	4a22      	ldr	r2, [pc, #136]	@ (800a55c <HAL_SPI_TransmitReceive_IT+0x15c>)
 800a4d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4de:	d802      	bhi.n	800a4e6 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a4e0:	887b      	ldrh	r3, [r7, #2]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d908      	bls.n	800a4f8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4f4:	605a      	str	r2, [r3, #4]
 800a4f6:	e007      	b.n	800a508 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a506:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800a516:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a522:	2b40      	cmp	r3, #64	@ 0x40
 800a524:	d008      	beq.n	800a538 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e000      	b.n	800a53a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800a538:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
}
 800a544:	4618      	mov	r0, r3
 800a546:	371c      	adds	r7, #28
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	0800a8eb 	.word	0x0800a8eb
 800a554:	0800a951 	.word	0x0800a951
 800a558:	0800a79b 	.word	0x0800a79b
 800a55c:	0800a859 	.word	0x0800a859

0800a560 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b088      	sub	sp, #32
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10e      	bne.n	800a5a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d009      	beq.n	800a5a0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d004      	beq.n	800a5a0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
    return;
 800a59e:	e0ce      	b.n	800a73e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <HAL_SPI_IRQHandler+0x5e>
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
    return;
 800a5bc:	e0bf      	b.n	800a73e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10a      	bne.n	800a5de <HAL_SPI_IRQHandler+0x7e>
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80b0 	beq.w	800a73e <HAL_SPI_IRQHandler+0x1de>
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80aa 	beq.w	800a73e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d023      	beq.n	800a63c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d011      	beq.n	800a624 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a604:	f043 0204 	orr.w	r2, r3, #4
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	e00b      	b.n	800a63c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a624:	2300      	movs	r3, #0
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	613b      	str	r3, [r7, #16]
 800a638:	693b      	ldr	r3, [r7, #16]
        return;
 800a63a:	e080      	b.n	800a73e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f003 0320 	and.w	r3, r3, #32
 800a642:	2b00      	cmp	r3, #0
 800a644:	d014      	beq.n	800a670 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a64a:	f043 0201 	orr.w	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00c      	beq.n	800a694 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a67e:	f043 0208 	orr.w	r2, r3, #8
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a686:	2300      	movs	r3, #0
 800a688:	60bb      	str	r3, [r7, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	60bb      	str	r3, [r7, #8]
 800a692:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d04f      	beq.n	800a73c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a6aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <HAL_SPI_IRQHandler+0x168>
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d034      	beq.n	800a732 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f022 0203 	bic.w	r2, r2, #3
 800a6d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d011      	beq.n	800a704 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6e4:	4a17      	ldr	r2, [pc, #92]	@ (800a744 <HAL_SPI_IRQHandler+0x1e4>)
 800a6e6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fb fdd9 	bl	80062a4 <HAL_DMA_Abort_IT>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d016      	beq.n	800a73a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a710:	4a0c      	ldr	r2, [pc, #48]	@ (800a744 <HAL_SPI_IRQHandler+0x1e4>)
 800a712:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fb fdc3 	bl	80062a4 <HAL_DMA_Abort_IT>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00a      	beq.n	800a73a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a728:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a730:	e003      	b.n	800a73a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f812 	bl	800a75c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a738:	e000      	b.n	800a73c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a73a:	bf00      	nop
    return;
 800a73c:	bf00      	nop
  }
}
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	0800a771 	.word	0x0800a771

0800a748 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff ffe5 	bl	800a75c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d923      	bls.n	800a7f6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b8:	b292      	uxth	r2, r2
 800a7ba:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c0:	1c9a      	adds	r2, r3, #2
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b02      	subs	r3, #2
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d11f      	bne.n	800a824 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685a      	ldr	r2, [r3, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a7f2:	605a      	str	r2, [r3, #4]
 800a7f4:	e016      	b.n	800a824 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f103 020c 	add.w	r2, r3, #12
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a802:	7812      	ldrb	r2, [r2, #0]
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a818:	b29b      	uxth	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10f      	bne.n	800a850 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a83e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a844:	b29b      	uxth	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fb00 	bl	800ae50 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a864:	b29b      	uxth	r3, r3
 800a866:	2b01      	cmp	r3, #1
 800a868:	d912      	bls.n	800a890 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	881a      	ldrh	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87a:	1c9a      	adds	r2, r3, #2
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a884:	b29b      	uxth	r3, r3
 800a886:	3b02      	subs	r3, #2
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a88e:	e012      	b.n	800a8b6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	7812      	ldrb	r2, [r2, #0]
 800a89c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d110      	bne.n	800a8e2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685a      	ldr	r2, [r3, #4]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8ce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fab7 	bl	800ae50 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b082      	sub	sp, #8
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fc:	b292      	uxth	r2, r2
 800a8fe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a904:	1c9a      	adds	r2, r3, #2
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	b29a      	uxth	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a922:	b29b      	uxth	r3, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10f      	bne.n	800a948 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a936:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d102      	bne.n	800a948 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa84 	bl	800ae50 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	881a      	ldrh	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a968:	1c9a      	adds	r2, r3, #2
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a972:	b29b      	uxth	r3, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a980:	b29b      	uxth	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d110      	bne.n	800a9a8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a994:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fa54 	bl	800ae50 <SPI_CloseRxTx_ISR>
    }
  }
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f103 020c 	add.w	r2, r3, #12
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c4:	7812      	ldrb	r2, [r2, #0]
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d102      	bne.n	800a9f8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fa6e 	bl	800aed4 <SPI_CloseRx_ISR>
  }
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa12:	b292      	uxth	r2, r2
 800aa14:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	1c9a      	adds	r2, r3, #2
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d102      	bne.n	800aa44 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa48 	bl	800aed4 <SPI_CloseRx_ISR>
  }
}
 800aa44:	bf00      	nop
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	3b01      	subs	r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa55 	bl	800af34 <SPI_CloseTx_ISR>
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	881a      	ldrh	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	1c9a      	adds	r2, r3, #2
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	3b01      	subs	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fa33 	bl	800af34 <SPI_CloseTx_ISR>
  }
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4613      	mov	r3, r2
 800aae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aae8:	f7f9 ff4c 	bl	8004984 <HAL_GetTick>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	1a9b      	subs	r3, r3, r2
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aaf8:	f7f9 ff44 	bl	8004984 <HAL_GetTick>
 800aafc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aafe:	4b39      	ldr	r3, [pc, #228]	@ (800abe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	015b      	lsls	r3, r3, #5
 800ab04:	0d1b      	lsrs	r3, r3, #20
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	fb02 f303 	mul.w	r3, r2, r3
 800ab0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab0e:	e054      	b.n	800abba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab16:	d050      	beq.n	800abba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab18:	f7f9 ff34 	bl	8004984 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d902      	bls.n	800ab2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d13d      	bne.n	800abaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ab3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab46:	d111      	bne.n	800ab6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab50:	d004      	beq.n	800ab5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab5a:	d107      	bne.n	800ab6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab74:	d10f      	bne.n	800ab96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ab84:	601a      	str	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e017      	b.n	800abda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4013      	ands	r3, r2
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	bf0c      	ite	eq
 800abca:	2301      	moveq	r3, #1
 800abcc:	2300      	movne	r3, #0
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	461a      	mov	r2, r3
 800abd2:	79fb      	ldrb	r3, [r7, #7]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d19b      	bne.n	800ab10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3720      	adds	r7, #32
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20000018 	.word	0x20000018

0800abe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	@ 0x28
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800abfa:	f7f9 fec3 	bl	8004984 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	4413      	add	r3, r2
 800ac08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ac0a:	f7f9 febb 	bl	8004984 <HAL_GetTick>
 800ac0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ac18:	4b3d      	ldr	r3, [pc, #244]	@ (800ad10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	00da      	lsls	r2, r3, #3
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	0d1b      	lsrs	r3, r3, #20
 800ac28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac2a:	fb02 f303 	mul.w	r3, r2, r3
 800ac2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ac30:	e060      	b.n	800acf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ac38:	d107      	bne.n	800ac4a <SPI_WaitFifoStateUntilTimeout+0x62>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	d050      	beq.n	800acf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac52:	f7f9 fe97 	bl	8004984 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d902      	bls.n	800ac68 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d13d      	bne.n	800ace4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ac76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac80:	d111      	bne.n	800aca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac8a:	d004      	beq.n	800ac96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac94:	d107      	bne.n	800aca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acae:	d10f      	bne.n	800acd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800acce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e010      	b.n	800ad06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689a      	ldr	r2, [r3, #8]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	4013      	ands	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d196      	bne.n	800ac32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3728      	adds	r7, #40	@ 0x28
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000018 	.word	0x20000018

0800ad14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af02      	add	r7, sp, #8
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad28:	d111      	bne.n	800ad4e <SPI_EndRxTransaction+0x3a>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad32:	d004      	beq.n	800ad3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad3c:	d107      	bne.n	800ad4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2200      	movs	r2, #0
 800ad56:	2180      	movs	r1, #128	@ 0x80
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7ff febd 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d007      	beq.n	800ad74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad68:	f043 0220 	orr.w	r2, r3, #32
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e023      	b.n	800adbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ad7c:	d11d      	bne.n	800adba <SPI_EndRxTransaction+0xa6>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad86:	d004      	beq.n	800ad92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad90:	d113      	bne.n	800adba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7ff ff22 	bl	800abe8 <SPI_WaitFifoStateUntilTimeout>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d007      	beq.n	800adba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adae:	f043 0220 	orr.w	r2, r3, #32
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e000      	b.n	800adbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	2200      	movs	r2, #0
 800add8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff ff03 	bl	800abe8 <SPI_WaitFifoStateUntilTimeout>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d007      	beq.n	800adf8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800adec:	f043 0220 	orr.w	r2, r3, #32
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e027      	b.n	800ae48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2200      	movs	r2, #0
 800ae00:	2180      	movs	r1, #128	@ 0x80
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff fe68 	bl	800aad8 <SPI_WaitFlagStateUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae12:	f043 0220 	orr.w	r2, r3, #32
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e014      	b.n	800ae48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f7ff fedc 	bl	800abe8 <SPI_WaitFifoStateUntilTimeout>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d007      	beq.n	800ae46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae3a:	f043 0220 	orr.w	r2, r3, #32
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e000      	b.n	800ae48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae58:	f7f9 fd94 	bl	8004984 <HAL_GetTick>
 800ae5c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 0220 	bic.w	r2, r2, #32
 800ae6c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	2164      	movs	r1, #100	@ 0x64
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff ffa6 	bl	800adc4 <SPI_EndRxTxTransaction>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d005      	beq.n	800ae8a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae82:	f043 0220 	orr.w	r2, r3, #32
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d115      	bne.n	800aebe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b04      	cmp	r3, #4
 800ae9c:	d107      	bne.n	800aeae <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7f6 fc10 	bl	80016cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800aeac:	e00e      	b.n	800aecc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff fc46 	bl	800a748 <HAL_SPI_TxRxCpltCallback>
}
 800aebc:	e006      	b.n	800aecc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fc48 	bl	800a75c <HAL_SPI_ErrorCallback>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800aeea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aeec:	f7f9 fd4a 	bl	8004984 <HAL_GetTick>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	2164      	movs	r1, #100	@ 0x64
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7ff ff0c 	bl	800ad14 <SPI_EndRxTransaction>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af06:	f043 0220 	orr.w	r2, r3, #32
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d103      	bne.n	800af26 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7f6 fbd4 	bl	80016cc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800af24:	e002      	b.n	800af2c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fc18 	bl	800a75c <HAL_SPI_ErrorCallback>
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af3c:	f7f9 fd22 	bl	8004984 <HAL_GetTick>
 800af40:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800af50:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	2164      	movs	r1, #100	@ 0x64
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff ff34 	bl	800adc4 <SPI_EndRxTxTransaction>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af66:	f043 0220 	orr.w	r2, r3, #32
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af76:	2300      	movs	r3, #0
 800af78:	60bb      	str	r3, [r7, #8]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	60bb      	str	r3, [r7, #8]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	60bb      	str	r3, [r7, #8]
 800af8a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff fbdd 	bl	800a75c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800afa2:	e002      	b.n	800afaa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7f6 fba5 	bl	80016f4 <HAL_SPI_TxCpltCallback>
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e042      	b.n	800b04a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7f7 ff6e 	bl	8002eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2224      	movs	r2, #36	@ 0x24
 800afe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0201 	bic.w	r2, r2, #1
 800aff2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f997 	bl	800b328 <UART_SetConfig>
 800affa:	4603      	mov	r3, r0
 800affc:	2b01      	cmp	r3, #1
 800affe:	d101      	bne.n	800b004 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e022      	b.n	800b04a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fc87 	bl	800b920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b020:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	689a      	ldr	r2, [r3, #8]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b030:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fd0e 	bl	800ba64 <UART_CheckIdleState>
 800b048:	4603      	mov	r3, r0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b08a      	sub	sp, #40	@ 0x28
 800b056:	af02      	add	r7, sp, #8
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	603b      	str	r3, [r7, #0]
 800b05e:	4613      	mov	r3, r2
 800b060:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b068:	2b20      	cmp	r3, #32
 800b06a:	f040 8083 	bne.w	800b174 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <HAL_UART_Transmit+0x28>
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e07b      	b.n	800b176 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b084:	2b01      	cmp	r3, #1
 800b086:	d101      	bne.n	800b08c <HAL_UART_Transmit+0x3a>
 800b088:	2302      	movs	r3, #2
 800b08a:	e074      	b.n	800b176 <HAL_UART_Transmit+0x124>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2221      	movs	r2, #33	@ 0x21
 800b0a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0a4:	f7f9 fc6e 	bl	8004984 <HAL_GetTick>
 800b0a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	88fa      	ldrh	r2, [r7, #6]
 800b0ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	88fa      	ldrh	r2, [r7, #6]
 800b0b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0c2:	d108      	bne.n	800b0d6 <HAL_UART_Transmit+0x84>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d104      	bne.n	800b0d6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	61bb      	str	r3, [r7, #24]
 800b0d4:	e003      	b.n	800b0de <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800b0e6:	e02c      	b.n	800b142 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2180      	movs	r1, #128	@ 0x80
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fd01 	bl	800bafa <UART_WaitOnFlagUntilTimeout>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e039      	b.n	800b176 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10b      	bne.n	800b120 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	881a      	ldrh	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b114:	b292      	uxth	r2, r2
 800b116:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	3302      	adds	r3, #2
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e007      	b.n	800b130 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	3301      	adds	r3, #1
 800b12e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b136:	b29b      	uxth	r3, r3
 800b138:	3b01      	subs	r3, #1
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b148:	b29b      	uxth	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1cc      	bne.n	800b0e8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2200      	movs	r2, #0
 800b156:	2140      	movs	r1, #64	@ 0x40
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 fcce 	bl	800bafa <UART_WaitOnFlagUntilTimeout>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b164:	2303      	movs	r3, #3
 800b166:	e006      	b.n	800b176 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2220      	movs	r2, #32
 800b16c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	e000      	b.n	800b176 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b174:	2302      	movs	r3, #2
  }
}
 800b176:	4618      	mov	r0, r3
 800b178:	3720      	adds	r7, #32
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08a      	sub	sp, #40	@ 0x28
 800b182:	af02      	add	r7, sp, #8
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	603b      	str	r3, [r7, #0]
 800b18a:	4613      	mov	r3, r2
 800b18c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b194:	2b20      	cmp	r3, #32
 800b196:	f040 80c1 	bne.w	800b31c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <HAL_UART_Receive+0x28>
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e0b9      	b.n	800b31e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <HAL_UART_Receive+0x3a>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e0b2      	b.n	800b31e <HAL_UART_Receive+0x1a0>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2222      	movs	r2, #34	@ 0x22
 800b1cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1d6:	f7f9 fbd5 	bl	8004984 <HAL_GetTick>
 800b1da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	88fa      	ldrh	r2, [r7, #6]
 800b1e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1f4:	d10e      	bne.n	800b214 <HAL_UART_Receive+0x96>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d105      	bne.n	800b20a <HAL_UART_Receive+0x8c>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b204:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b208:	e02d      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	22ff      	movs	r2, #255	@ 0xff
 800b20e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b212:	e028      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10d      	bne.n	800b238 <HAL_UART_Receive+0xba>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d104      	bne.n	800b22e <HAL_UART_Receive+0xb0>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	22ff      	movs	r2, #255	@ 0xff
 800b228:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b22c:	e01b      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	227f      	movs	r2, #127	@ 0x7f
 800b232:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b236:	e016      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b240:	d10d      	bne.n	800b25e <HAL_UART_Receive+0xe0>
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d104      	bne.n	800b254 <HAL_UART_Receive+0xd6>
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	227f      	movs	r2, #127	@ 0x7f
 800b24e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b252:	e008      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	223f      	movs	r2, #63	@ 0x3f
 800b258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b25c:	e003      	b.n	800b266 <HAL_UART_Receive+0xe8>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b26c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b276:	d108      	bne.n	800b28a <HAL_UART_Receive+0x10c>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d104      	bne.n	800b28a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800b280:	2300      	movs	r3, #0
 800b282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	61bb      	str	r3, [r7, #24]
 800b288:	e003      	b.n	800b292 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b29a:	e033      	b.n	800b304 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2120      	movs	r1, #32
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f000 fc27 	bl	800bafa <UART_WaitOnFlagUntilTimeout>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e033      	b.n	800b31e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10c      	bne.n	800b2d6 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	8a7b      	ldrh	r3, [r7, #18]
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	61bb      	str	r3, [r7, #24]
 800b2d4:	e00d      	b.n	800b2f2 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	8a7b      	ldrh	r3, [r7, #18]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1c5      	bne.n	800b29c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	e000      	b.n	800b31e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800b31c:	2302      	movs	r3, #2
  }
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3720      	adds	r7, #32
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
	...

0800b328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b32c:	b08c      	sub	sp, #48	@ 0x30
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	689a      	ldr	r2, [r3, #8]
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	431a      	orrs	r2, r3
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	695b      	ldr	r3, [r3, #20]
 800b346:	431a      	orrs	r2, r3
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	4baa      	ldr	r3, [pc, #680]	@ (800b600 <UART_SetConfig+0x2d8>)
 800b358:	4013      	ands	r3, r2
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	6812      	ldr	r2, [r2, #0]
 800b35e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b360:	430b      	orrs	r3, r1
 800b362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	430a      	orrs	r2, r1
 800b378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a9f      	ldr	r2, [pc, #636]	@ (800b604 <UART_SetConfig+0x2dc>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d004      	beq.n	800b394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b390:	4313      	orrs	r3, r2
 800b392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b39e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	6812      	ldr	r2, [r2, #0]
 800b3a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3a8:	430b      	orrs	r3, r1
 800b3aa:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b2:	f023 010f 	bic.w	r1, r3, #15
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a90      	ldr	r2, [pc, #576]	@ (800b608 <UART_SetConfig+0x2e0>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d125      	bne.n	800b418 <UART_SetConfig+0xf0>
 800b3cc:	4b8f      	ldr	r3, [pc, #572]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b3ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3d2:	f003 0303 	and.w	r3, r3, #3
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d81a      	bhi.n	800b410 <UART_SetConfig+0xe8>
 800b3da:	a201      	add	r2, pc, #4	@ (adr r2, 800b3e0 <UART_SetConfig+0xb8>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b401 	.word	0x0800b401
 800b3e8:	0800b3f9 	.word	0x0800b3f9
 800b3ec:	0800b409 	.word	0x0800b409
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3f6:	e116      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3fe:	e112      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b400:	2304      	movs	r3, #4
 800b402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b406:	e10e      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b408:	2308      	movs	r3, #8
 800b40a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b40e:	e10a      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b410:	2310      	movs	r3, #16
 800b412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b416:	e106      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a7c      	ldr	r2, [pc, #496]	@ (800b610 <UART_SetConfig+0x2e8>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d138      	bne.n	800b494 <UART_SetConfig+0x16c>
 800b422:	4b7a      	ldr	r3, [pc, #488]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b428:	f003 030c 	and.w	r3, r3, #12
 800b42c:	2b0c      	cmp	r3, #12
 800b42e:	d82d      	bhi.n	800b48c <UART_SetConfig+0x164>
 800b430:	a201      	add	r2, pc, #4	@ (adr r2, 800b438 <UART_SetConfig+0x110>)
 800b432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b436:	bf00      	nop
 800b438:	0800b46d 	.word	0x0800b46d
 800b43c:	0800b48d 	.word	0x0800b48d
 800b440:	0800b48d 	.word	0x0800b48d
 800b444:	0800b48d 	.word	0x0800b48d
 800b448:	0800b47d 	.word	0x0800b47d
 800b44c:	0800b48d 	.word	0x0800b48d
 800b450:	0800b48d 	.word	0x0800b48d
 800b454:	0800b48d 	.word	0x0800b48d
 800b458:	0800b475 	.word	0x0800b475
 800b45c:	0800b48d 	.word	0x0800b48d
 800b460:	0800b48d 	.word	0x0800b48d
 800b464:	0800b48d 	.word	0x0800b48d
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b472:	e0d8      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b474:	2302      	movs	r3, #2
 800b476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b47a:	e0d4      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b47c:	2304      	movs	r3, #4
 800b47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b482:	e0d0      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b484:	2308      	movs	r3, #8
 800b486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48a:	e0cc      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b48c:	2310      	movs	r3, #16
 800b48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b492:	e0c8      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a5e      	ldr	r2, [pc, #376]	@ (800b614 <UART_SetConfig+0x2ec>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d125      	bne.n	800b4ea <UART_SetConfig+0x1c2>
 800b49e:	4b5b      	ldr	r3, [pc, #364]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b4a8:	2b30      	cmp	r3, #48	@ 0x30
 800b4aa:	d016      	beq.n	800b4da <UART_SetConfig+0x1b2>
 800b4ac:	2b30      	cmp	r3, #48	@ 0x30
 800b4ae:	d818      	bhi.n	800b4e2 <UART_SetConfig+0x1ba>
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	d00a      	beq.n	800b4ca <UART_SetConfig+0x1a2>
 800b4b4:	2b20      	cmp	r3, #32
 800b4b6:	d814      	bhi.n	800b4e2 <UART_SetConfig+0x1ba>
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <UART_SetConfig+0x19a>
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	d008      	beq.n	800b4d2 <UART_SetConfig+0x1aa>
 800b4c0:	e00f      	b.n	800b4e2 <UART_SetConfig+0x1ba>
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4c8:	e0ad      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b4ca:	2302      	movs	r3, #2
 800b4cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d0:	e0a9      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b4d2:	2304      	movs	r3, #4
 800b4d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d8:	e0a5      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b4da:	2308      	movs	r3, #8
 800b4dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e0:	e0a1      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b4e2:	2310      	movs	r3, #16
 800b4e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e8:	e09d      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a4a      	ldr	r2, [pc, #296]	@ (800b618 <UART_SetConfig+0x2f0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d125      	bne.n	800b540 <UART_SetConfig+0x218>
 800b4f4:	4b45      	ldr	r3, [pc, #276]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800b500:	d016      	beq.n	800b530 <UART_SetConfig+0x208>
 800b502:	2bc0      	cmp	r3, #192	@ 0xc0
 800b504:	d818      	bhi.n	800b538 <UART_SetConfig+0x210>
 800b506:	2b80      	cmp	r3, #128	@ 0x80
 800b508:	d00a      	beq.n	800b520 <UART_SetConfig+0x1f8>
 800b50a:	2b80      	cmp	r3, #128	@ 0x80
 800b50c:	d814      	bhi.n	800b538 <UART_SetConfig+0x210>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <UART_SetConfig+0x1f0>
 800b512:	2b40      	cmp	r3, #64	@ 0x40
 800b514:	d008      	beq.n	800b528 <UART_SetConfig+0x200>
 800b516:	e00f      	b.n	800b538 <UART_SetConfig+0x210>
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51e:	e082      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b520:	2302      	movs	r3, #2
 800b522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b526:	e07e      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b528:	2304      	movs	r3, #4
 800b52a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52e:	e07a      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b530:	2308      	movs	r3, #8
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b536:	e076      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b538:	2310      	movs	r3, #16
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53e:	e072      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a35      	ldr	r2, [pc, #212]	@ (800b61c <UART_SetConfig+0x2f4>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d12a      	bne.n	800b5a0 <UART_SetConfig+0x278>
 800b54a:	4b30      	ldr	r3, [pc, #192]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b558:	d01a      	beq.n	800b590 <UART_SetConfig+0x268>
 800b55a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b55e:	d81b      	bhi.n	800b598 <UART_SetConfig+0x270>
 800b560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b564:	d00c      	beq.n	800b580 <UART_SetConfig+0x258>
 800b566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b56a:	d815      	bhi.n	800b598 <UART_SetConfig+0x270>
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <UART_SetConfig+0x250>
 800b570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b574:	d008      	beq.n	800b588 <UART_SetConfig+0x260>
 800b576:	e00f      	b.n	800b598 <UART_SetConfig+0x270>
 800b578:	2300      	movs	r3, #0
 800b57a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b57e:	e052      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b580:	2302      	movs	r3, #2
 800b582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b586:	e04e      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b588:	2304      	movs	r3, #4
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b58e:	e04a      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b590:	2308      	movs	r3, #8
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b596:	e046      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b598:	2310      	movs	r3, #16
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59e:	e042      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a17      	ldr	r2, [pc, #92]	@ (800b604 <UART_SetConfig+0x2dc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d13a      	bne.n	800b620 <UART_SetConfig+0x2f8>
 800b5aa:	4b18      	ldr	r3, [pc, #96]	@ (800b60c <UART_SetConfig+0x2e4>)
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b5b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5b8:	d01a      	beq.n	800b5f0 <UART_SetConfig+0x2c8>
 800b5ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b5be:	d81b      	bhi.n	800b5f8 <UART_SetConfig+0x2d0>
 800b5c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5c4:	d00c      	beq.n	800b5e0 <UART_SetConfig+0x2b8>
 800b5c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b5ca:	d815      	bhi.n	800b5f8 <UART_SetConfig+0x2d0>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d003      	beq.n	800b5d8 <UART_SetConfig+0x2b0>
 800b5d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5d4:	d008      	beq.n	800b5e8 <UART_SetConfig+0x2c0>
 800b5d6:	e00f      	b.n	800b5f8 <UART_SetConfig+0x2d0>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5de:	e022      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5e6:	e01e      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b5e8:	2304      	movs	r3, #4
 800b5ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ee:	e01a      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b5f0:	2308      	movs	r3, #8
 800b5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5f6:	e016      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5fe:	e012      	b.n	800b626 <UART_SetConfig+0x2fe>
 800b600:	cfff69f3 	.word	0xcfff69f3
 800b604:	40008000 	.word	0x40008000
 800b608:	40013800 	.word	0x40013800
 800b60c:	40021000 	.word	0x40021000
 800b610:	40004400 	.word	0x40004400
 800b614:	40004800 	.word	0x40004800
 800b618:	40004c00 	.word	0x40004c00
 800b61c:	40005000 	.word	0x40005000
 800b620:	2310      	movs	r3, #16
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4aae      	ldr	r2, [pc, #696]	@ (800b8e4 <UART_SetConfig+0x5bc>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	f040 8097 	bne.w	800b760 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b632:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b636:	2b08      	cmp	r3, #8
 800b638:	d823      	bhi.n	800b682 <UART_SetConfig+0x35a>
 800b63a:	a201      	add	r2, pc, #4	@ (adr r2, 800b640 <UART_SetConfig+0x318>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b665 	.word	0x0800b665
 800b644:	0800b683 	.word	0x0800b683
 800b648:	0800b66d 	.word	0x0800b66d
 800b64c:	0800b683 	.word	0x0800b683
 800b650:	0800b673 	.word	0x0800b673
 800b654:	0800b683 	.word	0x0800b683
 800b658:	0800b683 	.word	0x0800b683
 800b65c:	0800b683 	.word	0x0800b683
 800b660:	0800b67b 	.word	0x0800b67b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b664:	f7fd fb0a 	bl	8008c7c <HAL_RCC_GetPCLK1Freq>
 800b668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b66a:	e010      	b.n	800b68e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b66c:	4b9e      	ldr	r3, [pc, #632]	@ (800b8e8 <UART_SetConfig+0x5c0>)
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b670:	e00d      	b.n	800b68e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b672:	f7fd fa6b 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800b676:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b678:	e009      	b.n	800b68e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b67a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b680:	e005      	b.n	800b68e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b68c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8130 	beq.w	800b8f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69a:	4a94      	ldr	r2, [pc, #592]	@ (800b8ec <UART_SetConfig+0x5c4>)
 800b69c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	4413      	add	r3, r2
 800b6b4:	69ba      	ldr	r2, [r7, #24]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d305      	bcc.n	800b6c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6c0:	69ba      	ldr	r2, [r7, #24]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d903      	bls.n	800b6ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b6cc:	e113      	b.n	800b8f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	60bb      	str	r3, [r7, #8]
 800b6d4:	60fa      	str	r2, [r7, #12]
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6da:	4a84      	ldr	r2, [pc, #528]	@ (800b8ec <UART_SetConfig+0x5c4>)
 800b6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	603b      	str	r3, [r7, #0]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6f0:	f7f5 fae2 	bl	8000cb8 <__aeabi_uldivmod>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4610      	mov	r0, r2
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	020b      	lsls	r3, r1, #8
 800b706:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b70a:	0202      	lsls	r2, r0, #8
 800b70c:	6979      	ldr	r1, [r7, #20]
 800b70e:	6849      	ldr	r1, [r1, #4]
 800b710:	0849      	lsrs	r1, r1, #1
 800b712:	2000      	movs	r0, #0
 800b714:	460c      	mov	r4, r1
 800b716:	4605      	mov	r5, r0
 800b718:	eb12 0804 	adds.w	r8, r2, r4
 800b71c:	eb43 0905 	adc.w	r9, r3, r5
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	469a      	mov	sl, r3
 800b728:	4693      	mov	fp, r2
 800b72a:	4652      	mov	r2, sl
 800b72c:	465b      	mov	r3, fp
 800b72e:	4640      	mov	r0, r8
 800b730:	4649      	mov	r1, r9
 800b732:	f7f5 fac1 	bl	8000cb8 <__aeabi_uldivmod>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4613      	mov	r3, r2
 800b73c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b744:	d308      	bcc.n	800b758 <UART_SetConfig+0x430>
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b74c:	d204      	bcs.n	800b758 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	6a3a      	ldr	r2, [r7, #32]
 800b754:	60da      	str	r2, [r3, #12]
 800b756:	e0ce      	b.n	800b8f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b75e:	e0ca      	b.n	800b8f6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b768:	d166      	bne.n	800b838 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b76a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b76e:	2b08      	cmp	r3, #8
 800b770:	d827      	bhi.n	800b7c2 <UART_SetConfig+0x49a>
 800b772:	a201      	add	r2, pc, #4	@ (adr r2, 800b778 <UART_SetConfig+0x450>)
 800b774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b778:	0800b79d 	.word	0x0800b79d
 800b77c:	0800b7a5 	.word	0x0800b7a5
 800b780:	0800b7ad 	.word	0x0800b7ad
 800b784:	0800b7c3 	.word	0x0800b7c3
 800b788:	0800b7b3 	.word	0x0800b7b3
 800b78c:	0800b7c3 	.word	0x0800b7c3
 800b790:	0800b7c3 	.word	0x0800b7c3
 800b794:	0800b7c3 	.word	0x0800b7c3
 800b798:	0800b7bb 	.word	0x0800b7bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b79c:	f7fd fa6e 	bl	8008c7c <HAL_RCC_GetPCLK1Freq>
 800b7a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7a2:	e014      	b.n	800b7ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7a4:	f7fd fa80 	bl	8008ca8 <HAL_RCC_GetPCLK2Freq>
 800b7a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7aa:	e010      	b.n	800b7ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7ac:	4b4e      	ldr	r3, [pc, #312]	@ (800b8e8 <UART_SetConfig+0x5c0>)
 800b7ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7b0:	e00d      	b.n	800b7ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7b2:	f7fd f9cb 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800b7b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7b8:	e009      	b.n	800b7ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7c0:	e005      	b.n	800b7ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b7cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 8090 	beq.w	800b8f6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7da:	4a44      	ldr	r2, [pc, #272]	@ (800b8ec <UART_SetConfig+0x5c4>)
 800b7dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7e8:	005a      	lsls	r2, r3, #1
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	441a      	add	r2, r3
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	2b0f      	cmp	r3, #15
 800b800:	d916      	bls.n	800b830 <UART_SetConfig+0x508>
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b808:	d212      	bcs.n	800b830 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	f023 030f 	bic.w	r3, r3, #15
 800b812:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	b29a      	uxth	r2, r3
 800b820:	8bfb      	ldrh	r3, [r7, #30]
 800b822:	4313      	orrs	r3, r2
 800b824:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	8bfa      	ldrh	r2, [r7, #30]
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e062      	b.n	800b8f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b836:	e05e      	b.n	800b8f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b838:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d828      	bhi.n	800b892 <UART_SetConfig+0x56a>
 800b840:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <UART_SetConfig+0x520>)
 800b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b846:	bf00      	nop
 800b848:	0800b86d 	.word	0x0800b86d
 800b84c:	0800b875 	.word	0x0800b875
 800b850:	0800b87d 	.word	0x0800b87d
 800b854:	0800b893 	.word	0x0800b893
 800b858:	0800b883 	.word	0x0800b883
 800b85c:	0800b893 	.word	0x0800b893
 800b860:	0800b893 	.word	0x0800b893
 800b864:	0800b893 	.word	0x0800b893
 800b868:	0800b88b 	.word	0x0800b88b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b86c:	f7fd fa06 	bl	8008c7c <HAL_RCC_GetPCLK1Freq>
 800b870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b872:	e014      	b.n	800b89e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b874:	f7fd fa18 	bl	8008ca8 <HAL_RCC_GetPCLK2Freq>
 800b878:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b87a:	e010      	b.n	800b89e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b87c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e8 <UART_SetConfig+0x5c0>)
 800b87e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b880:	e00d      	b.n	800b89e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b882:	f7fd f963 	bl	8008b4c <HAL_RCC_GetSysClockFreq>
 800b886:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b888:	e009      	b.n	800b89e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b88e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b890:	e005      	b.n	800b89e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b892:	2300      	movs	r3, #0
 800b894:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b89c:	bf00      	nop
    }

    if (pclk != 0U)
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d028      	beq.n	800b8f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	4a10      	ldr	r2, [pc, #64]	@ (800b8ec <UART_SetConfig+0x5c4>)
 800b8aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	085b      	lsrs	r3, r3, #1
 800b8bc:	441a      	add	r2, r3
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	2b0f      	cmp	r3, #15
 800b8cc:	d910      	bls.n	800b8f0 <UART_SetConfig+0x5c8>
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8d4:	d20c      	bcs.n	800b8f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	60da      	str	r2, [r3, #12]
 800b8e0:	e009      	b.n	800b8f6 <UART_SetConfig+0x5ce>
 800b8e2:	bf00      	nop
 800b8e4:	40008000 	.word	0x40008000
 800b8e8:	00f42400 	.word	0x00f42400
 800b8ec:	08011380 	.word	0x08011380
      }
      else
      {
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2201      	movs	r2, #1
 800b902:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2200      	movs	r2, #0
 800b90a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	2200      	movs	r2, #0
 800b910:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800b912:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b916:	4618      	mov	r0, r3
 800b918:	3730      	adds	r7, #48	@ 0x30
 800b91a:	46bd      	mov	sp, r7
 800b91c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	f003 0302 	and.w	r3, r3, #2
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b4:	f003 0310 	and.w	r3, r3, #16
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d6:	f003 0320 	and.w	r3, r3, #32
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01a      	beq.n	800ba36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba1e:	d10a      	bne.n	800ba36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	430a      	orrs	r2, r1
 800ba34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00a      	beq.n	800ba58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	430a      	orrs	r2, r1
 800ba56:	605a      	str	r2, [r3, #4]
  }
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af02      	add	r7, sp, #8
 800ba6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba74:	f7f8 ff86 	bl	8004984 <HAL_GetTick>
 800ba78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0308 	and.w	r3, r3, #8
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d10e      	bne.n	800baa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f82f 	bl	800bafa <UART_WaitOnFlagUntilTimeout>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e025      	b.n	800baf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d10e      	bne.n	800bad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f819 	bl	800bafa <UART_WaitOnFlagUntilTimeout>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bace:	2303      	movs	r3, #3
 800bad0:	e00f      	b.n	800baf2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2220      	movs	r2, #32
 800bade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b09c      	sub	sp, #112	@ 0x70
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	4613      	mov	r3, r2
 800bb08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb0a:	e0a9      	b.n	800bc60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	f000 80a5 	beq.w	800bc60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb16:	f7f8 ff35 	bl	8004984 <HAL_GetTick>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d302      	bcc.n	800bb2c <UART_WaitOnFlagUntilTimeout+0x32>
 800bb26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d140      	bne.n	800bbae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bb3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bb40:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bb50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb52:	e841 2300 	strex	r3, r2, [r1]
 800bb56:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bb58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e6      	bne.n	800bb2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	f023 0301 	bic.w	r3, r3, #1
 800bb74:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb7e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb86:	e841 2300 	strex	r3, r2, [r1]
 800bb8a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e5      	bne.n	800bb5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2220      	movs	r2, #32
 800bb96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2220      	movs	r2, #32
 800bb9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e069      	b.n	800bc82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0304 	and.w	r3, r3, #4
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d051      	beq.n	800bc60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	69db      	ldr	r3, [r3, #28]
 800bbc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbca:	d149      	bne.n	800bc60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbde:	e853 3f00 	ldrex	r3, [r3]
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bbea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbf6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbfc:	e841 2300 	strex	r3, r2, [r1]
 800bc00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e6      	bne.n	800bbd6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	613b      	str	r3, [r7, #16]
   return(result);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f023 0301 	bic.w	r3, r3, #1
 800bc1e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3308      	adds	r3, #8
 800bc26:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bc28:	623a      	str	r2, [r7, #32]
 800bc2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	69f9      	ldr	r1, [r7, #28]
 800bc2e:	6a3a      	ldr	r2, [r7, #32]
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e5      	bne.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e010      	b.n	800bc82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69da      	ldr	r2, [r3, #28]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	bf0c      	ite	eq
 800bc70:	2301      	moveq	r3, #1
 800bc72:	2300      	movne	r3, #0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	f43f af46 	beq.w	800bb0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3770      	adds	r7, #112	@ 0x70
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d101      	bne.n	800bca0 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	e027      	b.n	800bcf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2224      	movs	r2, #36	@ 0x24
 800bcac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f022 0201 	bic.w	r2, r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d101      	bne.n	800bd14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd10:	2302      	movs	r3, #2
 800bd12:	e02d      	b.n	800bd70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2224      	movs	r2, #36	@ 0x24
 800bd20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 0201 	bic.w	r2, r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	430a      	orrs	r2, r1
 800bd4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f84f 	bl	800bdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2220      	movs	r2, #32
 800bd62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d101      	bne.n	800bd90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e02d      	b.n	800bdec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2224      	movs	r2, #36	@ 0x24
 800bd9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 0201 	bic.w	r2, r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f811 	bl	800bdf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2220      	movs	r2, #32
 800bdde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be00:	2b00      	cmp	r3, #0
 800be02:	d108      	bne.n	800be16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be14:	e031      	b.n	800be7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be16:	2308      	movs	r3, #8
 800be18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be1a:	2308      	movs	r3, #8
 800be1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	0e5b      	lsrs	r3, r3, #25
 800be26:	b2db      	uxtb	r3, r3
 800be28:	f003 0307 	and.w	r3, r3, #7
 800be2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	0f5b      	lsrs	r3, r3, #29
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	7b3a      	ldrb	r2, [r7, #12]
 800be42:	4911      	ldr	r1, [pc, #68]	@ (800be88 <UARTEx_SetNbDataToProcess+0x94>)
 800be44:	5c8a      	ldrb	r2, [r1, r2]
 800be46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be4a:	7b3a      	ldrb	r2, [r7, #12]
 800be4c:	490f      	ldr	r1, [pc, #60]	@ (800be8c <UARTEx_SetNbDataToProcess+0x98>)
 800be4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be50:	fb93 f3f2 	sdiv	r3, r3, r2
 800be54:	b29a      	uxth	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be5c:	7bfb      	ldrb	r3, [r7, #15]
 800be5e:	7b7a      	ldrb	r2, [r7, #13]
 800be60:	4909      	ldr	r1, [pc, #36]	@ (800be88 <UARTEx_SetNbDataToProcess+0x94>)
 800be62:	5c8a      	ldrb	r2, [r1, r2]
 800be64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be68:	7b7a      	ldrb	r2, [r7, #13]
 800be6a:	4908      	ldr	r1, [pc, #32]	@ (800be8c <UARTEx_SetNbDataToProcess+0x98>)
 800be6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be72:	b29a      	uxth	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be7a:	bf00      	nop
 800be7c:	3714      	adds	r7, #20
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	08011398 	.word	0x08011398
 800be8c:	080113a0 	.word	0x080113a0

0800be90 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800be9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bed0 <WIFI_Init+0x40>)
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bed4 <WIFI_Init+0x44>)
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	4b0d      	ldr	r3, [pc, #52]	@ (800bed8 <WIFI_Init+0x48>)
 800bea4:	4a0d      	ldr	r2, [pc, #52]	@ (800bedc <WIFI_Init+0x4c>)
 800bea6:	490e      	ldr	r1, [pc, #56]	@ (800bee0 <WIFI_Init+0x50>)
 800bea8:	480e      	ldr	r0, [pc, #56]	@ (800bee4 <WIFI_Init+0x54>)
 800beaa:	f7f8 f81d 	bl	8003ee8 <ES_WIFI_RegisterBusIO>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d107      	bne.n	800bec4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800beb4:	480b      	ldr	r0, [pc, #44]	@ (800bee4 <WIFI_Init+0x54>)
 800beb6:	f7f7 ffe9 	bl	8003e8c <ES_WIFI_Init>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800bec4:	79fb      	ldrb	r3, [r7, #7]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	08001441 	.word	0x08001441
 800bed4:	08001535 	.word	0x08001535
 800bed8:	08001611 	.word	0x08001611
 800bedc:	08001329 	.word	0x08001329
 800bee0:	0800118d 	.word	0x0800118d
 800bee4:	20000aac 	.word	0x20000aac

0800bee8 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	4613      	mov	r3, r2
 800bef4:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	68f9      	ldr	r1, [r7, #12]
 800bf00:	4809      	ldr	r0, [pc, #36]	@ (800bf28 <WIFI_Connect+0x40>)
 800bf02:	f7f8 f825 	bl	8003f50 <ES_WIFI_Connect>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d107      	bne.n	800bf1c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800bf0c:	4806      	ldr	r0, [pc, #24]	@ (800bf28 <WIFI_Connect+0x40>)
 800bf0e:	f7f8 f8cb 	bl	80040a8 <ES_WIFI_GetNetworkSettings>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000aac 	.word	0x20000aac

0800bf2c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4806      	ldr	r0, [pc, #24]	@ (800bf54 <WIFI_GetMAC_Address+0x28>)
 800bf3c:	f7f8 f8de 	bl	80040fc <ES_WIFI_GetMACAddress>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800bf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	20000aac 	.word	0x20000aac

0800bf58 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800bf64:	4809      	ldr	r0, [pc, #36]	@ (800bf8c <WIFI_GetIP_Address+0x34>)
 800bf66:	f7f8 f873 	bl	8004050 <ES_WIFI_IsConnected>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d107      	bne.n	800bf80 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800bf70:	4b06      	ldr	r3, [pc, #24]	@ (800bf8c <WIFI_GetIP_Address+0x34>)
 800bf72:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 800bf76:	461a      	mov	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	20000aac 	.word	0x20000aac

0800bf90 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	@ 0x28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	603b      	str	r3, [r7, #0]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	74bb      	strb	r3, [r7, #18]
  conn.RemotePort = port;
 800bfac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bfae:	82bb      	strh	r3, [r7, #20]
  conn.LocalPort = local_port;
 800bfb0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bfb2:	82fb      	strh	r3, [r7, #22]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bf14      	ite	ne
 800bfba:	2301      	movne	r3, #1
 800bfbc:	2300      	moveq	r3, #0
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[1] = ipaddr[1];
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	767b      	strb	r3, [r7, #25]
  conn.RemoteIP[2] = ipaddr[2];
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	789b      	ldrb	r3, [r3, #2]
 800bfd2:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[3] = ipaddr[3];
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	78db      	ldrb	r3, [r3, #3]
 800bfd8:	76fb      	strb	r3, [r7, #27]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800bfda:	f107 0310 	add.w	r3, r7, #16
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4807      	ldr	r0, [pc, #28]	@ (800c000 <WIFI_OpenClientConnection+0x70>)
 800bfe2:	f7f8 f8bd 	bl	8004160 <ES_WIFI_StartClientConnection>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 800bff2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3728      	adds	r7, #40	@ 0x28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20000aac 	.word	0x20000aac

0800c004 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60b9      	str	r1, [r7, #8]
 800c00c:	607b      	str	r3, [r7, #4]
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]
 800c012:	4613      	mov	r3, r2
 800c014:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800c01a:	89ba      	ldrh	r2, [r7, #12]
 800c01c:	7bf9      	ldrb	r1, [r7, #15]
 800c01e:	6a3b      	ldr	r3, [r7, #32]
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	4613      	mov	r3, r2
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	4806      	ldr	r0, [pc, #24]	@ (800c044 <WIFI_SendData+0x40>)
 800c02c:	f7f8 f9a0 	bl	8004370 <ES_WIFI_SendData>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20000aac 	.word	0x20000aac

0800c048 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af02      	add	r7, sp, #8
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607b      	str	r3, [r7, #4]
 800c052:	4603      	mov	r3, r0
 800c054:	73fb      	strb	r3, [r7, #15]
 800c056:	4613      	mov	r3, r2
 800c058:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c05a:	2301      	movs	r3, #1
 800c05c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800c05e:	89ba      	ldrh	r2, [r7, #12]
 800c060:	7bf9      	ldrb	r1, [r7, #15]
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4613      	mov	r3, r2
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	4806      	ldr	r0, [pc, #24]	@ (800c088 <WIFI_ReceiveData+0x40>)
 800c070:	f7f8 fa04 	bl	800447c <ES_WIFI_ReceiveData>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20000aac 	.word	0x20000aac

0800c08c <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800c098:	2218      	movs	r2, #24
 800c09a:	4905      	ldr	r1, [pc, #20]	@ (800c0b0 <WIFI_GetModuleFwRevision+0x24>)
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f002 f835 	bl	800e10c <strncpy>
    ret = WIFI_STATUS_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20000acc 	.word	0x20000acc

0800c0b4 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 800c0c0:	2220      	movs	r2, #32
 800c0c2:	4905      	ldr	r1, [pc, #20]	@ (800c0d8 <WIFI_GetModuleID+0x24>)
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f002 f821 	bl	800e10c <strncpy>
    ret = WIFI_STATUS_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20000aac 	.word	0x20000aac

0800c0dc <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	4905      	ldr	r1, [pc, #20]	@ (800c100 <WIFI_GetModuleName+0x24>)
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f002 f80d 	bl	800e10c <strncpy>
    ret = WIFI_STATUS_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20000b14 	.word	0x20000b14

0800c104 <malloc>:
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <malloc+0xc>)
 800c106:	4601      	mov	r1, r0
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f000 b82d 	b.w	800c168 <_malloc_r>
 800c10e:	bf00      	nop
 800c110:	200001b8 	.word	0x200001b8

0800c114 <free>:
 800c114:	4b02      	ldr	r3, [pc, #8]	@ (800c120 <free+0xc>)
 800c116:	4601      	mov	r1, r0
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	f002 bf8d 	b.w	800f038 <_free_r>
 800c11e:	bf00      	nop
 800c120:	200001b8 	.word	0x200001b8

0800c124 <sbrk_aligned>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4e0f      	ldr	r6, [pc, #60]	@ (800c164 <sbrk_aligned+0x40>)
 800c128:	460c      	mov	r4, r1
 800c12a:	6831      	ldr	r1, [r6, #0]
 800c12c:	4605      	mov	r5, r0
 800c12e:	b911      	cbnz	r1, 800c136 <sbrk_aligned+0x12>
 800c130:	f002 f8aa 	bl	800e288 <_sbrk_r>
 800c134:	6030      	str	r0, [r6, #0]
 800c136:	4621      	mov	r1, r4
 800c138:	4628      	mov	r0, r5
 800c13a:	f002 f8a5 	bl	800e288 <_sbrk_r>
 800c13e:	1c43      	adds	r3, r0, #1
 800c140:	d103      	bne.n	800c14a <sbrk_aligned+0x26>
 800c142:	f04f 34ff 	mov.w	r4, #4294967295
 800c146:	4620      	mov	r0, r4
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	1cc4      	adds	r4, r0, #3
 800c14c:	f024 0403 	bic.w	r4, r4, #3
 800c150:	42a0      	cmp	r0, r4
 800c152:	d0f8      	beq.n	800c146 <sbrk_aligned+0x22>
 800c154:	1a21      	subs	r1, r4, r0
 800c156:	4628      	mov	r0, r5
 800c158:	f002 f896 	bl	800e288 <_sbrk_r>
 800c15c:	3001      	adds	r0, #1
 800c15e:	d1f2      	bne.n	800c146 <sbrk_aligned+0x22>
 800c160:	e7ef      	b.n	800c142 <sbrk_aligned+0x1e>
 800c162:	bf00      	nop
 800c164:	20001154 	.word	0x20001154

0800c168 <_malloc_r>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	1ccd      	adds	r5, r1, #3
 800c16e:	f025 0503 	bic.w	r5, r5, #3
 800c172:	3508      	adds	r5, #8
 800c174:	2d0c      	cmp	r5, #12
 800c176:	bf38      	it	cc
 800c178:	250c      	movcc	r5, #12
 800c17a:	2d00      	cmp	r5, #0
 800c17c:	4606      	mov	r6, r0
 800c17e:	db01      	blt.n	800c184 <_malloc_r+0x1c>
 800c180:	42a9      	cmp	r1, r5
 800c182:	d904      	bls.n	800c18e <_malloc_r+0x26>
 800c184:	230c      	movs	r3, #12
 800c186:	6033      	str	r3, [r6, #0]
 800c188:	2000      	movs	r0, #0
 800c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c264 <_malloc_r+0xfc>
 800c192:	f000 f869 	bl	800c268 <__malloc_lock>
 800c196:	f8d8 3000 	ldr.w	r3, [r8]
 800c19a:	461c      	mov	r4, r3
 800c19c:	bb44      	cbnz	r4, 800c1f0 <_malloc_r+0x88>
 800c19e:	4629      	mov	r1, r5
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	f7ff ffbf 	bl	800c124 <sbrk_aligned>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	d158      	bne.n	800c25e <_malloc_r+0xf6>
 800c1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800c1b0:	4627      	mov	r7, r4
 800c1b2:	2f00      	cmp	r7, #0
 800c1b4:	d143      	bne.n	800c23e <_malloc_r+0xd6>
 800c1b6:	2c00      	cmp	r4, #0
 800c1b8:	d04b      	beq.n	800c252 <_malloc_r+0xea>
 800c1ba:	6823      	ldr	r3, [r4, #0]
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	eb04 0903 	add.w	r9, r4, r3
 800c1c4:	f002 f860 	bl	800e288 <_sbrk_r>
 800c1c8:	4581      	cmp	r9, r0
 800c1ca:	d142      	bne.n	800c252 <_malloc_r+0xea>
 800c1cc:	6821      	ldr	r1, [r4, #0]
 800c1ce:	1a6d      	subs	r5, r5, r1
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f7ff ffa6 	bl	800c124 <sbrk_aligned>
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d03a      	beq.n	800c252 <_malloc_r+0xea>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	442b      	add	r3, r5
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	bb62      	cbnz	r2, 800c244 <_malloc_r+0xdc>
 800c1ea:	f8c8 7000 	str.w	r7, [r8]
 800c1ee:	e00f      	b.n	800c210 <_malloc_r+0xa8>
 800c1f0:	6822      	ldr	r2, [r4, #0]
 800c1f2:	1b52      	subs	r2, r2, r5
 800c1f4:	d420      	bmi.n	800c238 <_malloc_r+0xd0>
 800c1f6:	2a0b      	cmp	r2, #11
 800c1f8:	d917      	bls.n	800c22a <_malloc_r+0xc2>
 800c1fa:	1961      	adds	r1, r4, r5
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	6025      	str	r5, [r4, #0]
 800c200:	bf18      	it	ne
 800c202:	6059      	strne	r1, [r3, #4]
 800c204:	6863      	ldr	r3, [r4, #4]
 800c206:	bf08      	it	eq
 800c208:	f8c8 1000 	streq.w	r1, [r8]
 800c20c:	5162      	str	r2, [r4, r5]
 800c20e:	604b      	str	r3, [r1, #4]
 800c210:	4630      	mov	r0, r6
 800c212:	f000 f82f 	bl	800c274 <__malloc_unlock>
 800c216:	f104 000b 	add.w	r0, r4, #11
 800c21a:	1d23      	adds	r3, r4, #4
 800c21c:	f020 0007 	bic.w	r0, r0, #7
 800c220:	1ac2      	subs	r2, r0, r3
 800c222:	bf1c      	itt	ne
 800c224:	1a1b      	subne	r3, r3, r0
 800c226:	50a3      	strne	r3, [r4, r2]
 800c228:	e7af      	b.n	800c18a <_malloc_r+0x22>
 800c22a:	6862      	ldr	r2, [r4, #4]
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	bf0c      	ite	eq
 800c230:	f8c8 2000 	streq.w	r2, [r8]
 800c234:	605a      	strne	r2, [r3, #4]
 800c236:	e7eb      	b.n	800c210 <_malloc_r+0xa8>
 800c238:	4623      	mov	r3, r4
 800c23a:	6864      	ldr	r4, [r4, #4]
 800c23c:	e7ae      	b.n	800c19c <_malloc_r+0x34>
 800c23e:	463c      	mov	r4, r7
 800c240:	687f      	ldr	r7, [r7, #4]
 800c242:	e7b6      	b.n	800c1b2 <_malloc_r+0x4a>
 800c244:	461a      	mov	r2, r3
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d1fb      	bne.n	800c244 <_malloc_r+0xdc>
 800c24c:	2300      	movs	r3, #0
 800c24e:	6053      	str	r3, [r2, #4]
 800c250:	e7de      	b.n	800c210 <_malloc_r+0xa8>
 800c252:	230c      	movs	r3, #12
 800c254:	6033      	str	r3, [r6, #0]
 800c256:	4630      	mov	r0, r6
 800c258:	f000 f80c 	bl	800c274 <__malloc_unlock>
 800c25c:	e794      	b.n	800c188 <_malloc_r+0x20>
 800c25e:	6005      	str	r5, [r0, #0]
 800c260:	e7d6      	b.n	800c210 <_malloc_r+0xa8>
 800c262:	bf00      	nop
 800c264:	20001158 	.word	0x20001158

0800c268 <__malloc_lock>:
 800c268:	4801      	ldr	r0, [pc, #4]	@ (800c270 <__malloc_lock+0x8>)
 800c26a:	f002 b85a 	b.w	800e322 <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	2000129c 	.word	0x2000129c

0800c274 <__malloc_unlock>:
 800c274:	4801      	ldr	r0, [pc, #4]	@ (800c27c <__malloc_unlock+0x8>)
 800c276:	f002 b855 	b.w	800e324 <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	2000129c 	.word	0x2000129c

0800c280 <sulp>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	4604      	mov	r4, r0
 800c284:	460d      	mov	r5, r1
 800c286:	ec45 4b10 	vmov	d0, r4, r5
 800c28a:	4616      	mov	r6, r2
 800c28c:	f003 fdde 	bl	800fe4c <__ulp>
 800c290:	ec51 0b10 	vmov	r0, r1, d0
 800c294:	b17e      	cbz	r6, 800c2b6 <sulp+0x36>
 800c296:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c29a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dd09      	ble.n	800c2b6 <sulp+0x36>
 800c2a2:	051b      	lsls	r3, r3, #20
 800c2a4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c2a8:	2400      	movs	r4, #0
 800c2aa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	f7f4 f9b9 	bl	8000628 <__aeabi_dmul>
 800c2b6:	ec41 0b10 	vmov	d0, r0, r1
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	0000      	movs	r0, r0
	...

0800c2c0 <_strtod_l>:
 800c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c4:	b09f      	sub	sp, #124	@ 0x7c
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c2ce:	9005      	str	r0, [sp, #20]
 800c2d0:	f04f 0a00 	mov.w	sl, #0
 800c2d4:	f04f 0b00 	mov.w	fp, #0
 800c2d8:	460a      	mov	r2, r1
 800c2da:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2dc:	7811      	ldrb	r1, [r2, #0]
 800c2de:	292b      	cmp	r1, #43	@ 0x2b
 800c2e0:	d04a      	beq.n	800c378 <_strtod_l+0xb8>
 800c2e2:	d838      	bhi.n	800c356 <_strtod_l+0x96>
 800c2e4:	290d      	cmp	r1, #13
 800c2e6:	d832      	bhi.n	800c34e <_strtod_l+0x8e>
 800c2e8:	2908      	cmp	r1, #8
 800c2ea:	d832      	bhi.n	800c352 <_strtod_l+0x92>
 800c2ec:	2900      	cmp	r1, #0
 800c2ee:	d03b      	beq.n	800c368 <_strtod_l+0xa8>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c2f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c2f6:	782a      	ldrb	r2, [r5, #0]
 800c2f8:	2a30      	cmp	r2, #48	@ 0x30
 800c2fa:	f040 80b3 	bne.w	800c464 <_strtod_l+0x1a4>
 800c2fe:	786a      	ldrb	r2, [r5, #1]
 800c300:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c304:	2a58      	cmp	r2, #88	@ 0x58
 800c306:	d16e      	bne.n	800c3e6 <_strtod_l+0x126>
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	4a8e      	ldr	r2, [pc, #568]	@ (800c54c <_strtod_l+0x28c>)
 800c314:	9805      	ldr	r0, [sp, #20]
 800c316:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c318:	a919      	add	r1, sp, #100	@ 0x64
 800c31a:	f002 ff3f 	bl	800f19c <__gethex>
 800c31e:	f010 060f 	ands.w	r6, r0, #15
 800c322:	4604      	mov	r4, r0
 800c324:	d005      	beq.n	800c332 <_strtod_l+0x72>
 800c326:	2e06      	cmp	r6, #6
 800c328:	d128      	bne.n	800c37c <_strtod_l+0xbc>
 800c32a:	3501      	adds	r5, #1
 800c32c:	2300      	movs	r3, #0
 800c32e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c330:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c334:	2b00      	cmp	r3, #0
 800c336:	f040 858e 	bne.w	800ce56 <_strtod_l+0xb96>
 800c33a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c33c:	b1cb      	cbz	r3, 800c372 <_strtod_l+0xb2>
 800c33e:	4652      	mov	r2, sl
 800c340:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c344:	ec43 2b10 	vmov	d0, r2, r3
 800c348:	b01f      	add	sp, #124	@ 0x7c
 800c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34e:	2920      	cmp	r1, #32
 800c350:	d1ce      	bne.n	800c2f0 <_strtod_l+0x30>
 800c352:	3201      	adds	r2, #1
 800c354:	e7c1      	b.n	800c2da <_strtod_l+0x1a>
 800c356:	292d      	cmp	r1, #45	@ 0x2d
 800c358:	d1ca      	bne.n	800c2f0 <_strtod_l+0x30>
 800c35a:	2101      	movs	r1, #1
 800c35c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c35e:	1c51      	adds	r1, r2, #1
 800c360:	9119      	str	r1, [sp, #100]	@ 0x64
 800c362:	7852      	ldrb	r2, [r2, #1]
 800c364:	2a00      	cmp	r2, #0
 800c366:	d1c5      	bne.n	800c2f4 <_strtod_l+0x34>
 800c368:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c36a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f040 8570 	bne.w	800ce52 <_strtod_l+0xb92>
 800c372:	4652      	mov	r2, sl
 800c374:	465b      	mov	r3, fp
 800c376:	e7e5      	b.n	800c344 <_strtod_l+0x84>
 800c378:	2100      	movs	r1, #0
 800c37a:	e7ef      	b.n	800c35c <_strtod_l+0x9c>
 800c37c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c37e:	b13a      	cbz	r2, 800c390 <_strtod_l+0xd0>
 800c380:	2135      	movs	r1, #53	@ 0x35
 800c382:	a81c      	add	r0, sp, #112	@ 0x70
 800c384:	f003 fe5c 	bl	8010040 <__copybits>
 800c388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c38a:	9805      	ldr	r0, [sp, #20]
 800c38c:	f003 fa2a 	bl	800f7e4 <_Bfree>
 800c390:	3e01      	subs	r6, #1
 800c392:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c394:	2e04      	cmp	r6, #4
 800c396:	d806      	bhi.n	800c3a6 <_strtod_l+0xe6>
 800c398:	e8df f006 	tbb	[pc, r6]
 800c39c:	201d0314 	.word	0x201d0314
 800c3a0:	14          	.byte	0x14
 800c3a1:	00          	.byte	0x00
 800c3a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c3a6:	05e1      	lsls	r1, r4, #23
 800c3a8:	bf48      	it	mi
 800c3aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c3ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3b2:	0d1b      	lsrs	r3, r3, #20
 800c3b4:	051b      	lsls	r3, r3, #20
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1bb      	bne.n	800c332 <_strtod_l+0x72>
 800c3ba:	f001 ff87 	bl	800e2cc <__errno>
 800c3be:	2322      	movs	r3, #34	@ 0x22
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	e7b6      	b.n	800c332 <_strtod_l+0x72>
 800c3c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c3c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c3cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c3d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c3d4:	e7e7      	b.n	800c3a6 <_strtod_l+0xe6>
 800c3d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c554 <_strtod_l+0x294>
 800c3da:	e7e4      	b.n	800c3a6 <_strtod_l+0xe6>
 800c3dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c3e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c3e4:	e7df      	b.n	800c3a6 <_strtod_l+0xe6>
 800c3e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b30      	cmp	r3, #48	@ 0x30
 800c3f0:	d0f9      	beq.n	800c3e6 <_strtod_l+0x126>
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d09d      	beq.n	800c332 <_strtod_l+0x72>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3fe:	2300      	movs	r3, #0
 800c400:	9308      	str	r3, [sp, #32]
 800c402:	930a      	str	r3, [sp, #40]	@ 0x28
 800c404:	461f      	mov	r7, r3
 800c406:	220a      	movs	r2, #10
 800c408:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c40a:	7805      	ldrb	r5, [r0, #0]
 800c40c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c410:	b2d9      	uxtb	r1, r3
 800c412:	2909      	cmp	r1, #9
 800c414:	d928      	bls.n	800c468 <_strtod_l+0x1a8>
 800c416:	494e      	ldr	r1, [pc, #312]	@ (800c550 <_strtod_l+0x290>)
 800c418:	2201      	movs	r2, #1
 800c41a:	f001 fe65 	bl	800e0e8 <strncmp>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d032      	beq.n	800c488 <_strtod_l+0x1c8>
 800c422:	2000      	movs	r0, #0
 800c424:	462a      	mov	r2, r5
 800c426:	4681      	mov	r9, r0
 800c428:	463d      	mov	r5, r7
 800c42a:	4603      	mov	r3, r0
 800c42c:	2a65      	cmp	r2, #101	@ 0x65
 800c42e:	d001      	beq.n	800c434 <_strtod_l+0x174>
 800c430:	2a45      	cmp	r2, #69	@ 0x45
 800c432:	d114      	bne.n	800c45e <_strtod_l+0x19e>
 800c434:	b91d      	cbnz	r5, 800c43e <_strtod_l+0x17e>
 800c436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c438:	4302      	orrs	r2, r0
 800c43a:	d095      	beq.n	800c368 <_strtod_l+0xa8>
 800c43c:	2500      	movs	r5, #0
 800c43e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c440:	1c62      	adds	r2, r4, #1
 800c442:	9219      	str	r2, [sp, #100]	@ 0x64
 800c444:	7862      	ldrb	r2, [r4, #1]
 800c446:	2a2b      	cmp	r2, #43	@ 0x2b
 800c448:	d077      	beq.n	800c53a <_strtod_l+0x27a>
 800c44a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c44c:	d07b      	beq.n	800c546 <_strtod_l+0x286>
 800c44e:	f04f 0c00 	mov.w	ip, #0
 800c452:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c456:	2909      	cmp	r1, #9
 800c458:	f240 8082 	bls.w	800c560 <_strtod_l+0x2a0>
 800c45c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c45e:	f04f 0800 	mov.w	r8, #0
 800c462:	e0a2      	b.n	800c5aa <_strtod_l+0x2ea>
 800c464:	2300      	movs	r3, #0
 800c466:	e7c7      	b.n	800c3f8 <_strtod_l+0x138>
 800c468:	2f08      	cmp	r7, #8
 800c46a:	bfd5      	itete	le
 800c46c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c46e:	9908      	ldrgt	r1, [sp, #32]
 800c470:	fb02 3301 	mlale	r3, r2, r1, r3
 800c474:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c478:	f100 0001 	add.w	r0, r0, #1
 800c47c:	bfd4      	ite	le
 800c47e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c480:	9308      	strgt	r3, [sp, #32]
 800c482:	3701      	adds	r7, #1
 800c484:	9019      	str	r0, [sp, #100]	@ 0x64
 800c486:	e7bf      	b.n	800c408 <_strtod_l+0x148>
 800c488:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c48e:	785a      	ldrb	r2, [r3, #1]
 800c490:	b37f      	cbz	r7, 800c4f2 <_strtod_l+0x232>
 800c492:	4681      	mov	r9, r0
 800c494:	463d      	mov	r5, r7
 800c496:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c49a:	2b09      	cmp	r3, #9
 800c49c:	d912      	bls.n	800c4c4 <_strtod_l+0x204>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e7c4      	b.n	800c42c <_strtod_l+0x16c>
 800c4a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4a8:	785a      	ldrb	r2, [r3, #1]
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	2a30      	cmp	r2, #48	@ 0x30
 800c4ae:	d0f8      	beq.n	800c4a2 <_strtod_l+0x1e2>
 800c4b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c4b4:	2b08      	cmp	r3, #8
 800c4b6:	f200 84d3 	bhi.w	800ce60 <_strtod_l+0xba0>
 800c4ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4be:	4681      	mov	r9, r0
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	3a30      	subs	r2, #48	@ 0x30
 800c4c6:	f100 0301 	add.w	r3, r0, #1
 800c4ca:	d02a      	beq.n	800c522 <_strtod_l+0x262>
 800c4cc:	4499      	add	r9, r3
 800c4ce:	eb00 0c05 	add.w	ip, r0, r5
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	210a      	movs	r1, #10
 800c4d6:	4563      	cmp	r3, ip
 800c4d8:	d10d      	bne.n	800c4f6 <_strtod_l+0x236>
 800c4da:	1c69      	adds	r1, r5, #1
 800c4dc:	4401      	add	r1, r0
 800c4de:	4428      	add	r0, r5
 800c4e0:	2808      	cmp	r0, #8
 800c4e2:	dc16      	bgt.n	800c512 <_strtod_l+0x252>
 800c4e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c4e6:	230a      	movs	r3, #10
 800c4e8:	fb03 2300 	mla	r3, r3, r0, r2
 800c4ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e018      	b.n	800c524 <_strtod_l+0x264>
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	e7da      	b.n	800c4ac <_strtod_l+0x1ec>
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	f103 0301 	add.w	r3, r3, #1
 800c4fc:	dc03      	bgt.n	800c506 <_strtod_l+0x246>
 800c4fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c500:	434e      	muls	r6, r1
 800c502:	960a      	str	r6, [sp, #40]	@ 0x28
 800c504:	e7e7      	b.n	800c4d6 <_strtod_l+0x216>
 800c506:	2b10      	cmp	r3, #16
 800c508:	bfde      	ittt	le
 800c50a:	9e08      	ldrle	r6, [sp, #32]
 800c50c:	434e      	mulle	r6, r1
 800c50e:	9608      	strle	r6, [sp, #32]
 800c510:	e7e1      	b.n	800c4d6 <_strtod_l+0x216>
 800c512:	280f      	cmp	r0, #15
 800c514:	dceb      	bgt.n	800c4ee <_strtod_l+0x22e>
 800c516:	9808      	ldr	r0, [sp, #32]
 800c518:	230a      	movs	r3, #10
 800c51a:	fb03 2300 	mla	r3, r3, r0, r2
 800c51e:	9308      	str	r3, [sp, #32]
 800c520:	e7e5      	b.n	800c4ee <_strtod_l+0x22e>
 800c522:	4629      	mov	r1, r5
 800c524:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c526:	1c50      	adds	r0, r2, #1
 800c528:	9019      	str	r0, [sp, #100]	@ 0x64
 800c52a:	7852      	ldrb	r2, [r2, #1]
 800c52c:	4618      	mov	r0, r3
 800c52e:	460d      	mov	r5, r1
 800c530:	e7b1      	b.n	800c496 <_strtod_l+0x1d6>
 800c532:	f04f 0900 	mov.w	r9, #0
 800c536:	2301      	movs	r3, #1
 800c538:	e77d      	b.n	800c436 <_strtod_l+0x176>
 800c53a:	f04f 0c00 	mov.w	ip, #0
 800c53e:	1ca2      	adds	r2, r4, #2
 800c540:	9219      	str	r2, [sp, #100]	@ 0x64
 800c542:	78a2      	ldrb	r2, [r4, #2]
 800c544:	e785      	b.n	800c452 <_strtod_l+0x192>
 800c546:	f04f 0c01 	mov.w	ip, #1
 800c54a:	e7f8      	b.n	800c53e <_strtod_l+0x27e>
 800c54c:	080113c0 	.word	0x080113c0
 800c550:	080113a8 	.word	0x080113a8
 800c554:	7ff00000 	.word	0x7ff00000
 800c558:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c55a:	1c51      	adds	r1, r2, #1
 800c55c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c55e:	7852      	ldrb	r2, [r2, #1]
 800c560:	2a30      	cmp	r2, #48	@ 0x30
 800c562:	d0f9      	beq.n	800c558 <_strtod_l+0x298>
 800c564:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c568:	2908      	cmp	r1, #8
 800c56a:	f63f af78 	bhi.w	800c45e <_strtod_l+0x19e>
 800c56e:	3a30      	subs	r2, #48	@ 0x30
 800c570:	920e      	str	r2, [sp, #56]	@ 0x38
 800c572:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c574:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c576:	f04f 080a 	mov.w	r8, #10
 800c57a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c57c:	1c56      	adds	r6, r2, #1
 800c57e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c580:	7852      	ldrb	r2, [r2, #1]
 800c582:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c586:	f1be 0f09 	cmp.w	lr, #9
 800c58a:	d939      	bls.n	800c600 <_strtod_l+0x340>
 800c58c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c58e:	1a76      	subs	r6, r6, r1
 800c590:	2e08      	cmp	r6, #8
 800c592:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c596:	dc03      	bgt.n	800c5a0 <_strtod_l+0x2e0>
 800c598:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c59a:	4588      	cmp	r8, r1
 800c59c:	bfa8      	it	ge
 800c59e:	4688      	movge	r8, r1
 800c5a0:	f1bc 0f00 	cmp.w	ip, #0
 800c5a4:	d001      	beq.n	800c5aa <_strtod_l+0x2ea>
 800c5a6:	f1c8 0800 	rsb	r8, r8, #0
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	d14e      	bne.n	800c64c <_strtod_l+0x38c>
 800c5ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5b0:	4308      	orrs	r0, r1
 800c5b2:	f47f aebe 	bne.w	800c332 <_strtod_l+0x72>
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f47f aed6 	bne.w	800c368 <_strtod_l+0xa8>
 800c5bc:	2a69      	cmp	r2, #105	@ 0x69
 800c5be:	d028      	beq.n	800c612 <_strtod_l+0x352>
 800c5c0:	dc25      	bgt.n	800c60e <_strtod_l+0x34e>
 800c5c2:	2a49      	cmp	r2, #73	@ 0x49
 800c5c4:	d025      	beq.n	800c612 <_strtod_l+0x352>
 800c5c6:	2a4e      	cmp	r2, #78	@ 0x4e
 800c5c8:	f47f aece 	bne.w	800c368 <_strtod_l+0xa8>
 800c5cc:	499b      	ldr	r1, [pc, #620]	@ (800c83c <_strtod_l+0x57c>)
 800c5ce:	a819      	add	r0, sp, #100	@ 0x64
 800c5d0:	f003 f806 	bl	800f5e0 <__match>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	f43f aec7 	beq.w	800c368 <_strtod_l+0xa8>
 800c5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b28      	cmp	r3, #40	@ 0x28
 800c5e0:	d12e      	bne.n	800c640 <_strtod_l+0x380>
 800c5e2:	4997      	ldr	r1, [pc, #604]	@ (800c840 <_strtod_l+0x580>)
 800c5e4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c5e6:	a819      	add	r0, sp, #100	@ 0x64
 800c5e8:	f003 f80e 	bl	800f608 <__hexnan>
 800c5ec:	2805      	cmp	r0, #5
 800c5ee:	d127      	bne.n	800c640 <_strtod_l+0x380>
 800c5f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c5f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c5f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c5fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c5fe:	e698      	b.n	800c332 <_strtod_l+0x72>
 800c600:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c602:	fb08 2101 	mla	r1, r8, r1, r2
 800c606:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c60a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c60c:	e7b5      	b.n	800c57a <_strtod_l+0x2ba>
 800c60e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c610:	e7da      	b.n	800c5c8 <_strtod_l+0x308>
 800c612:	498c      	ldr	r1, [pc, #560]	@ (800c844 <_strtod_l+0x584>)
 800c614:	a819      	add	r0, sp, #100	@ 0x64
 800c616:	f002 ffe3 	bl	800f5e0 <__match>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f43f aea4 	beq.w	800c368 <_strtod_l+0xa8>
 800c620:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c622:	4989      	ldr	r1, [pc, #548]	@ (800c848 <_strtod_l+0x588>)
 800c624:	3b01      	subs	r3, #1
 800c626:	a819      	add	r0, sp, #100	@ 0x64
 800c628:	9319      	str	r3, [sp, #100]	@ 0x64
 800c62a:	f002 ffd9 	bl	800f5e0 <__match>
 800c62e:	b910      	cbnz	r0, 800c636 <_strtod_l+0x376>
 800c630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c632:	3301      	adds	r3, #1
 800c634:	9319      	str	r3, [sp, #100]	@ 0x64
 800c636:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c858 <_strtod_l+0x598>
 800c63a:	f04f 0a00 	mov.w	sl, #0
 800c63e:	e678      	b.n	800c332 <_strtod_l+0x72>
 800c640:	4882      	ldr	r0, [pc, #520]	@ (800c84c <_strtod_l+0x58c>)
 800c642:	f001 fe81 	bl	800e348 <nan>
 800c646:	ec5b ab10 	vmov	sl, fp, d0
 800c64a:	e672      	b.n	800c332 <_strtod_l+0x72>
 800c64c:	eba8 0309 	sub.w	r3, r8, r9
 800c650:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c652:	9309      	str	r3, [sp, #36]	@ 0x24
 800c654:	2f00      	cmp	r7, #0
 800c656:	bf08      	it	eq
 800c658:	462f      	moveq	r7, r5
 800c65a:	2d10      	cmp	r5, #16
 800c65c:	462c      	mov	r4, r5
 800c65e:	bfa8      	it	ge
 800c660:	2410      	movge	r4, #16
 800c662:	f7f3 ff67 	bl	8000534 <__aeabi_ui2d>
 800c666:	2d09      	cmp	r5, #9
 800c668:	4682      	mov	sl, r0
 800c66a:	468b      	mov	fp, r1
 800c66c:	dc13      	bgt.n	800c696 <_strtod_l+0x3d6>
 800c66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c670:	2b00      	cmp	r3, #0
 800c672:	f43f ae5e 	beq.w	800c332 <_strtod_l+0x72>
 800c676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c678:	dd78      	ble.n	800c76c <_strtod_l+0x4ac>
 800c67a:	2b16      	cmp	r3, #22
 800c67c:	dc5f      	bgt.n	800c73e <_strtod_l+0x47e>
 800c67e:	4974      	ldr	r1, [pc, #464]	@ (800c850 <_strtod_l+0x590>)
 800c680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c684:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c688:	4652      	mov	r2, sl
 800c68a:	465b      	mov	r3, fp
 800c68c:	f7f3 ffcc 	bl	8000628 <__aeabi_dmul>
 800c690:	4682      	mov	sl, r0
 800c692:	468b      	mov	fp, r1
 800c694:	e64d      	b.n	800c332 <_strtod_l+0x72>
 800c696:	4b6e      	ldr	r3, [pc, #440]	@ (800c850 <_strtod_l+0x590>)
 800c698:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c69c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c6a0:	f7f3 ffc2 	bl	8000628 <__aeabi_dmul>
 800c6a4:	4682      	mov	sl, r0
 800c6a6:	9808      	ldr	r0, [sp, #32]
 800c6a8:	468b      	mov	fp, r1
 800c6aa:	f7f3 ff43 	bl	8000534 <__aeabi_ui2d>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	4659      	mov	r1, fp
 800c6b6:	f7f3 fe01 	bl	80002bc <__adddf3>
 800c6ba:	2d0f      	cmp	r5, #15
 800c6bc:	4682      	mov	sl, r0
 800c6be:	468b      	mov	fp, r1
 800c6c0:	ddd5      	ble.n	800c66e <_strtod_l+0x3ae>
 800c6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c4:	1b2c      	subs	r4, r5, r4
 800c6c6:	441c      	add	r4, r3
 800c6c8:	2c00      	cmp	r4, #0
 800c6ca:	f340 8096 	ble.w	800c7fa <_strtod_l+0x53a>
 800c6ce:	f014 030f 	ands.w	r3, r4, #15
 800c6d2:	d00a      	beq.n	800c6ea <_strtod_l+0x42a>
 800c6d4:	495e      	ldr	r1, [pc, #376]	@ (800c850 <_strtod_l+0x590>)
 800c6d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6da:	4652      	mov	r2, sl
 800c6dc:	465b      	mov	r3, fp
 800c6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6e2:	f7f3 ffa1 	bl	8000628 <__aeabi_dmul>
 800c6e6:	4682      	mov	sl, r0
 800c6e8:	468b      	mov	fp, r1
 800c6ea:	f034 040f 	bics.w	r4, r4, #15
 800c6ee:	d073      	beq.n	800c7d8 <_strtod_l+0x518>
 800c6f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c6f4:	dd48      	ble.n	800c788 <_strtod_l+0x4c8>
 800c6f6:	2400      	movs	r4, #0
 800c6f8:	46a0      	mov	r8, r4
 800c6fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800c6fc:	46a1      	mov	r9, r4
 800c6fe:	9a05      	ldr	r2, [sp, #20]
 800c700:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c858 <_strtod_l+0x598>
 800c704:	2322      	movs	r3, #34	@ 0x22
 800c706:	6013      	str	r3, [r2, #0]
 800c708:	f04f 0a00 	mov.w	sl, #0
 800c70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f43f ae0f 	beq.w	800c332 <_strtod_l+0x72>
 800c714:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c716:	9805      	ldr	r0, [sp, #20]
 800c718:	f003 f864 	bl	800f7e4 <_Bfree>
 800c71c:	9805      	ldr	r0, [sp, #20]
 800c71e:	4649      	mov	r1, r9
 800c720:	f003 f860 	bl	800f7e4 <_Bfree>
 800c724:	9805      	ldr	r0, [sp, #20]
 800c726:	4641      	mov	r1, r8
 800c728:	f003 f85c 	bl	800f7e4 <_Bfree>
 800c72c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c72e:	9805      	ldr	r0, [sp, #20]
 800c730:	f003 f858 	bl	800f7e4 <_Bfree>
 800c734:	9805      	ldr	r0, [sp, #20]
 800c736:	4621      	mov	r1, r4
 800c738:	f003 f854 	bl	800f7e4 <_Bfree>
 800c73c:	e5f9      	b.n	800c332 <_strtod_l+0x72>
 800c73e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c740:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c744:	4293      	cmp	r3, r2
 800c746:	dbbc      	blt.n	800c6c2 <_strtod_l+0x402>
 800c748:	4c41      	ldr	r4, [pc, #260]	@ (800c850 <_strtod_l+0x590>)
 800c74a:	f1c5 050f 	rsb	r5, r5, #15
 800c74e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75a:	f7f3 ff65 	bl	8000628 <__aeabi_dmul>
 800c75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c760:	1b5d      	subs	r5, r3, r5
 800c762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c766:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c76a:	e78f      	b.n	800c68c <_strtod_l+0x3cc>
 800c76c:	3316      	adds	r3, #22
 800c76e:	dba8      	blt.n	800c6c2 <_strtod_l+0x402>
 800c770:	4b37      	ldr	r3, [pc, #220]	@ (800c850 <_strtod_l+0x590>)
 800c772:	eba9 0808 	sub.w	r8, r9, r8
 800c776:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c77a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c77e:	4650      	mov	r0, sl
 800c780:	4659      	mov	r1, fp
 800c782:	f7f4 f87b 	bl	800087c <__aeabi_ddiv>
 800c786:	e783      	b.n	800c690 <_strtod_l+0x3d0>
 800c788:	4b32      	ldr	r3, [pc, #200]	@ (800c854 <_strtod_l+0x594>)
 800c78a:	9308      	str	r3, [sp, #32]
 800c78c:	2300      	movs	r3, #0
 800c78e:	1124      	asrs	r4, r4, #4
 800c790:	4650      	mov	r0, sl
 800c792:	4659      	mov	r1, fp
 800c794:	461e      	mov	r6, r3
 800c796:	2c01      	cmp	r4, #1
 800c798:	dc21      	bgt.n	800c7de <_strtod_l+0x51e>
 800c79a:	b10b      	cbz	r3, 800c7a0 <_strtod_l+0x4e0>
 800c79c:	4682      	mov	sl, r0
 800c79e:	468b      	mov	fp, r1
 800c7a0:	492c      	ldr	r1, [pc, #176]	@ (800c854 <_strtod_l+0x594>)
 800c7a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c7a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c7aa:	4652      	mov	r2, sl
 800c7ac:	465b      	mov	r3, fp
 800c7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7b2:	f7f3 ff39 	bl	8000628 <__aeabi_dmul>
 800c7b6:	4b28      	ldr	r3, [pc, #160]	@ (800c858 <_strtod_l+0x598>)
 800c7b8:	460a      	mov	r2, r1
 800c7ba:	400b      	ands	r3, r1
 800c7bc:	4927      	ldr	r1, [pc, #156]	@ (800c85c <_strtod_l+0x59c>)
 800c7be:	428b      	cmp	r3, r1
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	d898      	bhi.n	800c6f6 <_strtod_l+0x436>
 800c7c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c7c8:	428b      	cmp	r3, r1
 800c7ca:	bf86      	itte	hi
 800c7cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c860 <_strtod_l+0x5a0>
 800c7d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800c7d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c7d8:	2300      	movs	r3, #0
 800c7da:	9308      	str	r3, [sp, #32]
 800c7dc:	e07a      	b.n	800c8d4 <_strtod_l+0x614>
 800c7de:	07e2      	lsls	r2, r4, #31
 800c7e0:	d505      	bpl.n	800c7ee <_strtod_l+0x52e>
 800c7e2:	9b08      	ldr	r3, [sp, #32]
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	f7f3 ff1e 	bl	8000628 <__aeabi_dmul>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	9a08      	ldr	r2, [sp, #32]
 800c7f0:	3208      	adds	r2, #8
 800c7f2:	3601      	adds	r6, #1
 800c7f4:	1064      	asrs	r4, r4, #1
 800c7f6:	9208      	str	r2, [sp, #32]
 800c7f8:	e7cd      	b.n	800c796 <_strtod_l+0x4d6>
 800c7fa:	d0ed      	beq.n	800c7d8 <_strtod_l+0x518>
 800c7fc:	4264      	negs	r4, r4
 800c7fe:	f014 020f 	ands.w	r2, r4, #15
 800c802:	d00a      	beq.n	800c81a <_strtod_l+0x55a>
 800c804:	4b12      	ldr	r3, [pc, #72]	@ (800c850 <_strtod_l+0x590>)
 800c806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c80a:	4650      	mov	r0, sl
 800c80c:	4659      	mov	r1, fp
 800c80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c812:	f7f4 f833 	bl	800087c <__aeabi_ddiv>
 800c816:	4682      	mov	sl, r0
 800c818:	468b      	mov	fp, r1
 800c81a:	1124      	asrs	r4, r4, #4
 800c81c:	d0dc      	beq.n	800c7d8 <_strtod_l+0x518>
 800c81e:	2c1f      	cmp	r4, #31
 800c820:	dd20      	ble.n	800c864 <_strtod_l+0x5a4>
 800c822:	2400      	movs	r4, #0
 800c824:	46a0      	mov	r8, r4
 800c826:	940a      	str	r4, [sp, #40]	@ 0x28
 800c828:	46a1      	mov	r9, r4
 800c82a:	9a05      	ldr	r2, [sp, #20]
 800c82c:	2322      	movs	r3, #34	@ 0x22
 800c82e:	f04f 0a00 	mov.w	sl, #0
 800c832:	f04f 0b00 	mov.w	fp, #0
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	e768      	b.n	800c70c <_strtod_l+0x44c>
 800c83a:	bf00      	nop
 800c83c:	0801150e 	.word	0x0801150e
 800c840:	080113ac 	.word	0x080113ac
 800c844:	08011506 	.word	0x08011506
 800c848:	080115f2 	.word	0x080115f2
 800c84c:	080115ee 	.word	0x080115ee
 800c850:	08011758 	.word	0x08011758
 800c854:	08011730 	.word	0x08011730
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	7ca00000 	.word	0x7ca00000
 800c860:	7fefffff 	.word	0x7fefffff
 800c864:	f014 0310 	ands.w	r3, r4, #16
 800c868:	bf18      	it	ne
 800c86a:	236a      	movne	r3, #106	@ 0x6a
 800c86c:	4ea9      	ldr	r6, [pc, #676]	@ (800cb14 <_strtod_l+0x854>)
 800c86e:	9308      	str	r3, [sp, #32]
 800c870:	4650      	mov	r0, sl
 800c872:	4659      	mov	r1, fp
 800c874:	2300      	movs	r3, #0
 800c876:	07e2      	lsls	r2, r4, #31
 800c878:	d504      	bpl.n	800c884 <_strtod_l+0x5c4>
 800c87a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c87e:	f7f3 fed3 	bl	8000628 <__aeabi_dmul>
 800c882:	2301      	movs	r3, #1
 800c884:	1064      	asrs	r4, r4, #1
 800c886:	f106 0608 	add.w	r6, r6, #8
 800c88a:	d1f4      	bne.n	800c876 <_strtod_l+0x5b6>
 800c88c:	b10b      	cbz	r3, 800c892 <_strtod_l+0x5d2>
 800c88e:	4682      	mov	sl, r0
 800c890:	468b      	mov	fp, r1
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	b1b3      	cbz	r3, 800c8c4 <_strtod_l+0x604>
 800c896:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c89a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	4659      	mov	r1, fp
 800c8a2:	dd0f      	ble.n	800c8c4 <_strtod_l+0x604>
 800c8a4:	2b1f      	cmp	r3, #31
 800c8a6:	dd55      	ble.n	800c954 <_strtod_l+0x694>
 800c8a8:	2b34      	cmp	r3, #52	@ 0x34
 800c8aa:	bfde      	ittt	le
 800c8ac:	f04f 33ff 	movle.w	r3, #4294967295
 800c8b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c8b4:	4093      	lslle	r3, r2
 800c8b6:	f04f 0a00 	mov.w	sl, #0
 800c8ba:	bfcc      	ite	gt
 800c8bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c8c0:	ea03 0b01 	andle.w	fp, r3, r1
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f7f4 f914 	bl	8000af8 <__aeabi_dcmpeq>
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d1a6      	bne.n	800c822 <_strtod_l+0x562>
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c8da:	9805      	ldr	r0, [sp, #20]
 800c8dc:	462b      	mov	r3, r5
 800c8de:	463a      	mov	r2, r7
 800c8e0:	f002 ffe8 	bl	800f8b4 <__s2b>
 800c8e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	f43f af05 	beq.w	800c6f6 <_strtod_l+0x436>
 800c8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ee:	2a00      	cmp	r2, #0
 800c8f0:	eba9 0308 	sub.w	r3, r9, r8
 800c8f4:	bfa8      	it	ge
 800c8f6:	2300      	movge	r3, #0
 800c8f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c8fa:	2400      	movs	r4, #0
 800c8fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c900:	9316      	str	r3, [sp, #88]	@ 0x58
 800c902:	46a0      	mov	r8, r4
 800c904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c906:	9805      	ldr	r0, [sp, #20]
 800c908:	6859      	ldr	r1, [r3, #4]
 800c90a:	f002 ff2b 	bl	800f764 <_Balloc>
 800c90e:	4681      	mov	r9, r0
 800c910:	2800      	cmp	r0, #0
 800c912:	f43f aef4 	beq.w	800c6fe <_strtod_l+0x43e>
 800c916:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c918:	691a      	ldr	r2, [r3, #16]
 800c91a:	3202      	adds	r2, #2
 800c91c:	f103 010c 	add.w	r1, r3, #12
 800c920:	0092      	lsls	r2, r2, #2
 800c922:	300c      	adds	r0, #12
 800c924:	f001 fcff 	bl	800e326 <memcpy>
 800c928:	ec4b ab10 	vmov	d0, sl, fp
 800c92c:	9805      	ldr	r0, [sp, #20]
 800c92e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c930:	a91b      	add	r1, sp, #108	@ 0x6c
 800c932:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c936:	f003 faf9 	bl	800ff2c <__d2b>
 800c93a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f43f aede 	beq.w	800c6fe <_strtod_l+0x43e>
 800c942:	9805      	ldr	r0, [sp, #20]
 800c944:	2101      	movs	r1, #1
 800c946:	f003 f84b 	bl	800f9e0 <__i2b>
 800c94a:	4680      	mov	r8, r0
 800c94c:	b948      	cbnz	r0, 800c962 <_strtod_l+0x6a2>
 800c94e:	f04f 0800 	mov.w	r8, #0
 800c952:	e6d4      	b.n	800c6fe <_strtod_l+0x43e>
 800c954:	f04f 32ff 	mov.w	r2, #4294967295
 800c958:	fa02 f303 	lsl.w	r3, r2, r3
 800c95c:	ea03 0a0a 	and.w	sl, r3, sl
 800c960:	e7b0      	b.n	800c8c4 <_strtod_l+0x604>
 800c962:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c964:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c966:	2d00      	cmp	r5, #0
 800c968:	bfab      	itete	ge
 800c96a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c96c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c96e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c970:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c972:	bfac      	ite	ge
 800c974:	18ef      	addge	r7, r5, r3
 800c976:	1b5e      	sublt	r6, r3, r5
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	1aed      	subs	r5, r5, r3
 800c97c:	4415      	add	r5, r2
 800c97e:	4b66      	ldr	r3, [pc, #408]	@ (800cb18 <_strtod_l+0x858>)
 800c980:	3d01      	subs	r5, #1
 800c982:	429d      	cmp	r5, r3
 800c984:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c988:	da50      	bge.n	800ca2c <_strtod_l+0x76c>
 800c98a:	1b5b      	subs	r3, r3, r5
 800c98c:	2b1f      	cmp	r3, #31
 800c98e:	eba2 0203 	sub.w	r2, r2, r3
 800c992:	f04f 0101 	mov.w	r1, #1
 800c996:	dc3d      	bgt.n	800ca14 <_strtod_l+0x754>
 800c998:	fa01 f303 	lsl.w	r3, r1, r3
 800c99c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c99e:	2300      	movs	r3, #0
 800c9a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c9a2:	18bd      	adds	r5, r7, r2
 800c9a4:	9b08      	ldr	r3, [sp, #32]
 800c9a6:	42af      	cmp	r7, r5
 800c9a8:	4416      	add	r6, r2
 800c9aa:	441e      	add	r6, r3
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	bfa8      	it	ge
 800c9b0:	462b      	movge	r3, r5
 800c9b2:	42b3      	cmp	r3, r6
 800c9b4:	bfa8      	it	ge
 800c9b6:	4633      	movge	r3, r6
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	bfc2      	ittt	gt
 800c9bc:	1aed      	subgt	r5, r5, r3
 800c9be:	1af6      	subgt	r6, r6, r3
 800c9c0:	1aff      	subgt	r7, r7, r3
 800c9c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd16      	ble.n	800c9f6 <_strtod_l+0x736>
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	9805      	ldr	r0, [sp, #20]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	f003 f8c7 	bl	800fb60 <__pow5mult>
 800c9d2:	4680      	mov	r8, r0
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d0ba      	beq.n	800c94e <_strtod_l+0x68e>
 800c9d8:	4601      	mov	r1, r0
 800c9da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9dc:	9805      	ldr	r0, [sp, #20]
 800c9de:	f003 f815 	bl	800fa0c <__multiply>
 800c9e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f43f ae8a 	beq.w	800c6fe <_strtod_l+0x43e>
 800c9ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ec:	9805      	ldr	r0, [sp, #20]
 800c9ee:	f002 fef9 	bl	800f7e4 <_Bfree>
 800c9f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9f6:	2d00      	cmp	r5, #0
 800c9f8:	dc1d      	bgt.n	800ca36 <_strtod_l+0x776>
 800c9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	dd23      	ble.n	800ca48 <_strtod_l+0x788>
 800ca00:	4649      	mov	r1, r9
 800ca02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ca04:	9805      	ldr	r0, [sp, #20]
 800ca06:	f003 f8ab 	bl	800fb60 <__pow5mult>
 800ca0a:	4681      	mov	r9, r0
 800ca0c:	b9e0      	cbnz	r0, 800ca48 <_strtod_l+0x788>
 800ca0e:	f04f 0900 	mov.w	r9, #0
 800ca12:	e674      	b.n	800c6fe <_strtod_l+0x43e>
 800ca14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ca18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ca1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ca20:	35e2      	adds	r5, #226	@ 0xe2
 800ca22:	fa01 f305 	lsl.w	r3, r1, r5
 800ca26:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca28:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ca2a:	e7ba      	b.n	800c9a2 <_strtod_l+0x6e2>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ca30:	2301      	movs	r3, #1
 800ca32:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca34:	e7b5      	b.n	800c9a2 <_strtod_l+0x6e2>
 800ca36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca38:	9805      	ldr	r0, [sp, #20]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	f003 f8ea 	bl	800fc14 <__lshift>
 800ca40:	901a      	str	r0, [sp, #104]	@ 0x68
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d1d9      	bne.n	800c9fa <_strtod_l+0x73a>
 800ca46:	e65a      	b.n	800c6fe <_strtod_l+0x43e>
 800ca48:	2e00      	cmp	r6, #0
 800ca4a:	dd07      	ble.n	800ca5c <_strtod_l+0x79c>
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	9805      	ldr	r0, [sp, #20]
 800ca50:	4632      	mov	r2, r6
 800ca52:	f003 f8df 	bl	800fc14 <__lshift>
 800ca56:	4681      	mov	r9, r0
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d0d8      	beq.n	800ca0e <_strtod_l+0x74e>
 800ca5c:	2f00      	cmp	r7, #0
 800ca5e:	dd08      	ble.n	800ca72 <_strtod_l+0x7b2>
 800ca60:	4641      	mov	r1, r8
 800ca62:	9805      	ldr	r0, [sp, #20]
 800ca64:	463a      	mov	r2, r7
 800ca66:	f003 f8d5 	bl	800fc14 <__lshift>
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f43f ae46 	beq.w	800c6fe <_strtod_l+0x43e>
 800ca72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca74:	9805      	ldr	r0, [sp, #20]
 800ca76:	464a      	mov	r2, r9
 800ca78:	f003 f954 	bl	800fd24 <__mdiff>
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	f43f ae3d 	beq.w	800c6fe <_strtod_l+0x43e>
 800ca84:	68c3      	ldr	r3, [r0, #12]
 800ca86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca88:	2300      	movs	r3, #0
 800ca8a:	60c3      	str	r3, [r0, #12]
 800ca8c:	4641      	mov	r1, r8
 800ca8e:	f003 f92d 	bl	800fcec <__mcmp>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	da46      	bge.n	800cb24 <_strtod_l+0x864>
 800ca96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca98:	ea53 030a 	orrs.w	r3, r3, sl
 800ca9c:	d16c      	bne.n	800cb78 <_strtod_l+0x8b8>
 800ca9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d168      	bne.n	800cb78 <_strtod_l+0x8b8>
 800caa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800caaa:	0d1b      	lsrs	r3, r3, #20
 800caac:	051b      	lsls	r3, r3, #20
 800caae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cab2:	d961      	bls.n	800cb78 <_strtod_l+0x8b8>
 800cab4:	6963      	ldr	r3, [r4, #20]
 800cab6:	b913      	cbnz	r3, 800cabe <_strtod_l+0x7fe>
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	dd5c      	ble.n	800cb78 <_strtod_l+0x8b8>
 800cabe:	4621      	mov	r1, r4
 800cac0:	2201      	movs	r2, #1
 800cac2:	9805      	ldr	r0, [sp, #20]
 800cac4:	f003 f8a6 	bl	800fc14 <__lshift>
 800cac8:	4641      	mov	r1, r8
 800caca:	4604      	mov	r4, r0
 800cacc:	f003 f90e 	bl	800fcec <__mcmp>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	dd51      	ble.n	800cb78 <_strtod_l+0x8b8>
 800cad4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cad8:	9a08      	ldr	r2, [sp, #32]
 800cada:	0d1b      	lsrs	r3, r3, #20
 800cadc:	051b      	lsls	r3, r3, #20
 800cade:	2a00      	cmp	r2, #0
 800cae0:	d06b      	beq.n	800cbba <_strtod_l+0x8fa>
 800cae2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cae6:	d868      	bhi.n	800cbba <_strtod_l+0x8fa>
 800cae8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800caec:	f67f ae9d 	bls.w	800c82a <_strtod_l+0x56a>
 800caf0:	4b0a      	ldr	r3, [pc, #40]	@ (800cb1c <_strtod_l+0x85c>)
 800caf2:	4650      	mov	r0, sl
 800caf4:	4659      	mov	r1, fp
 800caf6:	2200      	movs	r2, #0
 800caf8:	f7f3 fd96 	bl	8000628 <__aeabi_dmul>
 800cafc:	4b08      	ldr	r3, [pc, #32]	@ (800cb20 <_strtod_l+0x860>)
 800cafe:	400b      	ands	r3, r1
 800cb00:	4682      	mov	sl, r0
 800cb02:	468b      	mov	fp, r1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f47f ae05 	bne.w	800c714 <_strtod_l+0x454>
 800cb0a:	9a05      	ldr	r2, [sp, #20]
 800cb0c:	2322      	movs	r3, #34	@ 0x22
 800cb0e:	6013      	str	r3, [r2, #0]
 800cb10:	e600      	b.n	800c714 <_strtod_l+0x454>
 800cb12:	bf00      	nop
 800cb14:	080113d8 	.word	0x080113d8
 800cb18:	fffffc02 	.word	0xfffffc02
 800cb1c:	39500000 	.word	0x39500000
 800cb20:	7ff00000 	.word	0x7ff00000
 800cb24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb28:	d165      	bne.n	800cbf6 <_strtod_l+0x936>
 800cb2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb30:	b35a      	cbz	r2, 800cb8a <_strtod_l+0x8ca>
 800cb32:	4a9f      	ldr	r2, [pc, #636]	@ (800cdb0 <_strtod_l+0xaf0>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d12b      	bne.n	800cb90 <_strtod_l+0x8d0>
 800cb38:	9b08      	ldr	r3, [sp, #32]
 800cb3a:	4651      	mov	r1, sl
 800cb3c:	b303      	cbz	r3, 800cb80 <_strtod_l+0x8c0>
 800cb3e:	4b9d      	ldr	r3, [pc, #628]	@ (800cdb4 <_strtod_l+0xaf4>)
 800cb40:	465a      	mov	r2, fp
 800cb42:	4013      	ands	r3, r2
 800cb44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cb48:	f04f 32ff 	mov.w	r2, #4294967295
 800cb4c:	d81b      	bhi.n	800cb86 <_strtod_l+0x8c6>
 800cb4e:	0d1b      	lsrs	r3, r3, #20
 800cb50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	4299      	cmp	r1, r3
 800cb5a:	d119      	bne.n	800cb90 <_strtod_l+0x8d0>
 800cb5c:	4b96      	ldr	r3, [pc, #600]	@ (800cdb8 <_strtod_l+0xaf8>)
 800cb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d102      	bne.n	800cb6a <_strtod_l+0x8aa>
 800cb64:	3101      	adds	r1, #1
 800cb66:	f43f adca 	beq.w	800c6fe <_strtod_l+0x43e>
 800cb6a:	4b92      	ldr	r3, [pc, #584]	@ (800cdb4 <_strtod_l+0xaf4>)
 800cb6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb6e:	401a      	ands	r2, r3
 800cb70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cb74:	f04f 0a00 	mov.w	sl, #0
 800cb78:	9b08      	ldr	r3, [sp, #32]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1b8      	bne.n	800caf0 <_strtod_l+0x830>
 800cb7e:	e5c9      	b.n	800c714 <_strtod_l+0x454>
 800cb80:	f04f 33ff 	mov.w	r3, #4294967295
 800cb84:	e7e8      	b.n	800cb58 <_strtod_l+0x898>
 800cb86:	4613      	mov	r3, r2
 800cb88:	e7e6      	b.n	800cb58 <_strtod_l+0x898>
 800cb8a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb8e:	d0a1      	beq.n	800cad4 <_strtod_l+0x814>
 800cb90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb92:	b1db      	cbz	r3, 800cbcc <_strtod_l+0x90c>
 800cb94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb96:	4213      	tst	r3, r2
 800cb98:	d0ee      	beq.n	800cb78 <_strtod_l+0x8b8>
 800cb9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb9c:	9a08      	ldr	r2, [sp, #32]
 800cb9e:	4650      	mov	r0, sl
 800cba0:	4659      	mov	r1, fp
 800cba2:	b1bb      	cbz	r3, 800cbd4 <_strtod_l+0x914>
 800cba4:	f7ff fb6c 	bl	800c280 <sulp>
 800cba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbac:	ec53 2b10 	vmov	r2, r3, d0
 800cbb0:	f7f3 fb84 	bl	80002bc <__adddf3>
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	468b      	mov	fp, r1
 800cbb8:	e7de      	b.n	800cb78 <_strtod_l+0x8b8>
 800cbba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cbbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cbc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cbc6:	f04f 3aff 	mov.w	sl, #4294967295
 800cbca:	e7d5      	b.n	800cb78 <_strtod_l+0x8b8>
 800cbcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cbce:	ea13 0f0a 	tst.w	r3, sl
 800cbd2:	e7e1      	b.n	800cb98 <_strtod_l+0x8d8>
 800cbd4:	f7ff fb54 	bl	800c280 <sulp>
 800cbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbdc:	ec53 2b10 	vmov	r2, r3, d0
 800cbe0:	f7f3 fb6a 	bl	80002b8 <__aeabi_dsub>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	f7f3 ff84 	bl	8000af8 <__aeabi_dcmpeq>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d0c1      	beq.n	800cb78 <_strtod_l+0x8b8>
 800cbf4:	e619      	b.n	800c82a <_strtod_l+0x56a>
 800cbf6:	4641      	mov	r1, r8
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f003 f9ef 	bl	800ffdc <__ratio>
 800cbfe:	ec57 6b10 	vmov	r6, r7, d0
 800cc02:	2200      	movs	r2, #0
 800cc04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cc08:	4630      	mov	r0, r6
 800cc0a:	4639      	mov	r1, r7
 800cc0c:	f7f3 ff88 	bl	8000b20 <__aeabi_dcmple>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d06f      	beq.n	800ccf4 <_strtod_l+0xa34>
 800cc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d17a      	bne.n	800cd10 <_strtod_l+0xa50>
 800cc1a:	f1ba 0f00 	cmp.w	sl, #0
 800cc1e:	d158      	bne.n	800ccd2 <_strtod_l+0xa12>
 800cc20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d15a      	bne.n	800cce0 <_strtod_l+0xa20>
 800cc2a:	4b64      	ldr	r3, [pc, #400]	@ (800cdbc <_strtod_l+0xafc>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4630      	mov	r0, r6
 800cc30:	4639      	mov	r1, r7
 800cc32:	f7f3 ff6b 	bl	8000b0c <__aeabi_dcmplt>
 800cc36:	2800      	cmp	r0, #0
 800cc38:	d159      	bne.n	800ccee <_strtod_l+0xa2e>
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	4b60      	ldr	r3, [pc, #384]	@ (800cdc0 <_strtod_l+0xb00>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7f3 fcf1 	bl	8000628 <__aeabi_dmul>
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cc4e:	9606      	str	r6, [sp, #24]
 800cc50:	9307      	str	r3, [sp, #28]
 800cc52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc56:	4d57      	ldr	r5, [pc, #348]	@ (800cdb4 <_strtod_l+0xaf4>)
 800cc58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc5e:	401d      	ands	r5, r3
 800cc60:	4b58      	ldr	r3, [pc, #352]	@ (800cdc4 <_strtod_l+0xb04>)
 800cc62:	429d      	cmp	r5, r3
 800cc64:	f040 80b2 	bne.w	800cdcc <_strtod_l+0xb0c>
 800cc68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cc6e:	ec4b ab10 	vmov	d0, sl, fp
 800cc72:	f003 f8eb 	bl	800fe4c <__ulp>
 800cc76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cc7a:	ec51 0b10 	vmov	r0, r1, d0
 800cc7e:	f7f3 fcd3 	bl	8000628 <__aeabi_dmul>
 800cc82:	4652      	mov	r2, sl
 800cc84:	465b      	mov	r3, fp
 800cc86:	f7f3 fb19 	bl	80002bc <__adddf3>
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4949      	ldr	r1, [pc, #292]	@ (800cdb4 <_strtod_l+0xaf4>)
 800cc8e:	4a4e      	ldr	r2, [pc, #312]	@ (800cdc8 <_strtod_l+0xb08>)
 800cc90:	4019      	ands	r1, r3
 800cc92:	4291      	cmp	r1, r2
 800cc94:	4682      	mov	sl, r0
 800cc96:	d942      	bls.n	800cd1e <_strtod_l+0xa5e>
 800cc98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cc9a:	4b47      	ldr	r3, [pc, #284]	@ (800cdb8 <_strtod_l+0xaf8>)
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d103      	bne.n	800cca8 <_strtod_l+0x9e8>
 800cca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cca2:	3301      	adds	r3, #1
 800cca4:	f43f ad2b 	beq.w	800c6fe <_strtod_l+0x43e>
 800cca8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cdb8 <_strtod_l+0xaf8>
 800ccac:	f04f 3aff 	mov.w	sl, #4294967295
 800ccb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccb2:	9805      	ldr	r0, [sp, #20]
 800ccb4:	f002 fd96 	bl	800f7e4 <_Bfree>
 800ccb8:	9805      	ldr	r0, [sp, #20]
 800ccba:	4649      	mov	r1, r9
 800ccbc:	f002 fd92 	bl	800f7e4 <_Bfree>
 800ccc0:	9805      	ldr	r0, [sp, #20]
 800ccc2:	4641      	mov	r1, r8
 800ccc4:	f002 fd8e 	bl	800f7e4 <_Bfree>
 800ccc8:	9805      	ldr	r0, [sp, #20]
 800ccca:	4621      	mov	r1, r4
 800cccc:	f002 fd8a 	bl	800f7e4 <_Bfree>
 800ccd0:	e618      	b.n	800c904 <_strtod_l+0x644>
 800ccd2:	f1ba 0f01 	cmp.w	sl, #1
 800ccd6:	d103      	bne.n	800cce0 <_strtod_l+0xa20>
 800ccd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	f43f ada5 	beq.w	800c82a <_strtod_l+0x56a>
 800cce0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cd90 <_strtod_l+0xad0>
 800cce4:	4f35      	ldr	r7, [pc, #212]	@ (800cdbc <_strtod_l+0xafc>)
 800cce6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ccea:	2600      	movs	r6, #0
 800ccec:	e7b1      	b.n	800cc52 <_strtod_l+0x992>
 800ccee:	4f34      	ldr	r7, [pc, #208]	@ (800cdc0 <_strtod_l+0xb00>)
 800ccf0:	2600      	movs	r6, #0
 800ccf2:	e7aa      	b.n	800cc4a <_strtod_l+0x98a>
 800ccf4:	4b32      	ldr	r3, [pc, #200]	@ (800cdc0 <_strtod_l+0xb00>)
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f7f3 fc94 	bl	8000628 <__aeabi_dmul>
 800cd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd02:	4606      	mov	r6, r0
 800cd04:	460f      	mov	r7, r1
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d09f      	beq.n	800cc4a <_strtod_l+0x98a>
 800cd0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cd0e:	e7a0      	b.n	800cc52 <_strtod_l+0x992>
 800cd10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cd98 <_strtod_l+0xad8>
 800cd14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cd18:	ec57 6b17 	vmov	r6, r7, d7
 800cd1c:	e799      	b.n	800cc52 <_strtod_l+0x992>
 800cd1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cd22:	9b08      	ldr	r3, [sp, #32]
 800cd24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1c1      	bne.n	800ccb0 <_strtod_l+0x9f0>
 800cd2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cd30:	0d1b      	lsrs	r3, r3, #20
 800cd32:	051b      	lsls	r3, r3, #20
 800cd34:	429d      	cmp	r5, r3
 800cd36:	d1bb      	bne.n	800ccb0 <_strtod_l+0x9f0>
 800cd38:	4630      	mov	r0, r6
 800cd3a:	4639      	mov	r1, r7
 800cd3c:	f7f3 ffd4 	bl	8000ce8 <__aeabi_d2lz>
 800cd40:	f7f3 fc44 	bl	80005cc <__aeabi_l2d>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	4630      	mov	r0, r6
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fab4 	bl	80002b8 <__aeabi_dsub>
 800cd50:	460b      	mov	r3, r1
 800cd52:	4602      	mov	r2, r0
 800cd54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cd58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd5e:	ea46 060a 	orr.w	r6, r6, sl
 800cd62:	431e      	orrs	r6, r3
 800cd64:	d06f      	beq.n	800ce46 <_strtod_l+0xb86>
 800cd66:	a30e      	add	r3, pc, #56	@ (adr r3, 800cda0 <_strtod_l+0xae0>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	f7f3 fece 	bl	8000b0c <__aeabi_dcmplt>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f47f accf 	bne.w	800c714 <_strtod_l+0x454>
 800cd76:	a30c      	add	r3, pc, #48	@ (adr r3, 800cda8 <_strtod_l+0xae8>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd80:	f7f3 fee2 	bl	8000b48 <__aeabi_dcmpgt>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d093      	beq.n	800ccb0 <_strtod_l+0x9f0>
 800cd88:	e4c4      	b.n	800c714 <_strtod_l+0x454>
 800cd8a:	bf00      	nop
 800cd8c:	f3af 8000 	nop.w
 800cd90:	00000000 	.word	0x00000000
 800cd94:	bff00000 	.word	0xbff00000
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	94a03595 	.word	0x94a03595
 800cda4:	3fdfffff 	.word	0x3fdfffff
 800cda8:	35afe535 	.word	0x35afe535
 800cdac:	3fe00000 	.word	0x3fe00000
 800cdb0:	000fffff 	.word	0x000fffff
 800cdb4:	7ff00000 	.word	0x7ff00000
 800cdb8:	7fefffff 	.word	0x7fefffff
 800cdbc:	3ff00000 	.word	0x3ff00000
 800cdc0:	3fe00000 	.word	0x3fe00000
 800cdc4:	7fe00000 	.word	0x7fe00000
 800cdc8:	7c9fffff 	.word	0x7c9fffff
 800cdcc:	9b08      	ldr	r3, [sp, #32]
 800cdce:	b323      	cbz	r3, 800ce1a <_strtod_l+0xb5a>
 800cdd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cdd4:	d821      	bhi.n	800ce1a <_strtod_l+0xb5a>
 800cdd6:	a328      	add	r3, pc, #160	@ (adr r3, 800ce78 <_strtod_l+0xbb8>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fe9e 	bl	8000b20 <__aeabi_dcmple>
 800cde4:	b1a0      	cbz	r0, 800ce10 <_strtod_l+0xb50>
 800cde6:	4639      	mov	r1, r7
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7f3 fef5 	bl	8000bd8 <__aeabi_d2uiz>
 800cdee:	2801      	cmp	r0, #1
 800cdf0:	bf38      	it	cc
 800cdf2:	2001      	movcc	r0, #1
 800cdf4:	f7f3 fb9e 	bl	8000534 <__aeabi_ui2d>
 800cdf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	b9fb      	cbnz	r3, 800ce40 <_strtod_l+0xb80>
 800ce00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce04:	9014      	str	r0, [sp, #80]	@ 0x50
 800ce06:	9315      	str	r3, [sp, #84]	@ 0x54
 800ce08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ce0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ce16:	1b5b      	subs	r3, r3, r5
 800ce18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ce1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ce22:	f003 f813 	bl	800fe4c <__ulp>
 800ce26:	4650      	mov	r0, sl
 800ce28:	ec53 2b10 	vmov	r2, r3, d0
 800ce2c:	4659      	mov	r1, fp
 800ce2e:	f7f3 fbfb 	bl	8000628 <__aeabi_dmul>
 800ce32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ce36:	f7f3 fa41 	bl	80002bc <__adddf3>
 800ce3a:	4682      	mov	sl, r0
 800ce3c:	468b      	mov	fp, r1
 800ce3e:	e770      	b.n	800cd22 <_strtod_l+0xa62>
 800ce40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ce44:	e7e0      	b.n	800ce08 <_strtod_l+0xb48>
 800ce46:	a30e      	add	r3, pc, #56	@ (adr r3, 800ce80 <_strtod_l+0xbc0>)
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	f7f3 fe5e 	bl	8000b0c <__aeabi_dcmplt>
 800ce50:	e798      	b.n	800cd84 <_strtod_l+0xac4>
 800ce52:	2300      	movs	r3, #0
 800ce54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ce58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	f7ff ba6d 	b.w	800c33a <_strtod_l+0x7a>
 800ce60:	2a65      	cmp	r2, #101	@ 0x65
 800ce62:	f43f ab66 	beq.w	800c532 <_strtod_l+0x272>
 800ce66:	2a45      	cmp	r2, #69	@ 0x45
 800ce68:	f43f ab63 	beq.w	800c532 <_strtod_l+0x272>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	f7ff bb9e 	b.w	800c5ae <_strtod_l+0x2ee>
 800ce72:	bf00      	nop
 800ce74:	f3af 8000 	nop.w
 800ce78:	ffc00000 	.word	0xffc00000
 800ce7c:	41dfffff 	.word	0x41dfffff
 800ce80:	94a03595 	.word	0x94a03595
 800ce84:	3fcfffff 	.word	0x3fcfffff

0800ce88 <_strtod_r>:
 800ce88:	4b01      	ldr	r3, [pc, #4]	@ (800ce90 <_strtod_r+0x8>)
 800ce8a:	f7ff ba19 	b.w	800c2c0 <_strtod_l>
 800ce8e:	bf00      	nop
 800ce90:	2000004c 	.word	0x2000004c

0800ce94 <_strtol_l.constprop.0>:
 800ce94:	2b24      	cmp	r3, #36	@ 0x24
 800ce96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9a:	4686      	mov	lr, r0
 800ce9c:	4690      	mov	r8, r2
 800ce9e:	d801      	bhi.n	800cea4 <_strtol_l.constprop.0+0x10>
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d106      	bne.n	800ceb2 <_strtol_l.constprop.0+0x1e>
 800cea4:	f001 fa12 	bl	800e2cc <__errno>
 800cea8:	2316      	movs	r3, #22
 800ceaa:	6003      	str	r3, [r0, #0]
 800ceac:	2000      	movs	r0, #0
 800ceae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb2:	4834      	ldr	r0, [pc, #208]	@ (800cf84 <_strtol_l.constprop.0+0xf0>)
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cebc:	5d06      	ldrb	r6, [r0, r4]
 800cebe:	f016 0608 	ands.w	r6, r6, #8
 800cec2:	d1f8      	bne.n	800ceb6 <_strtol_l.constprop.0+0x22>
 800cec4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cec6:	d12d      	bne.n	800cf24 <_strtol_l.constprop.0+0x90>
 800cec8:	782c      	ldrb	r4, [r5, #0]
 800ceca:	2601      	movs	r6, #1
 800cecc:	1c95      	adds	r5, r2, #2
 800cece:	f033 0210 	bics.w	r2, r3, #16
 800ced2:	d109      	bne.n	800cee8 <_strtol_l.constprop.0+0x54>
 800ced4:	2c30      	cmp	r4, #48	@ 0x30
 800ced6:	d12a      	bne.n	800cf2e <_strtol_l.constprop.0+0x9a>
 800ced8:	782a      	ldrb	r2, [r5, #0]
 800ceda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cede:	2a58      	cmp	r2, #88	@ 0x58
 800cee0:	d125      	bne.n	800cf2e <_strtol_l.constprop.0+0x9a>
 800cee2:	786c      	ldrb	r4, [r5, #1]
 800cee4:	2310      	movs	r3, #16
 800cee6:	3502      	adds	r5, #2
 800cee8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ceec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cef0:	2200      	movs	r2, #0
 800cef2:	fbbc f9f3 	udiv	r9, ip, r3
 800cef6:	4610      	mov	r0, r2
 800cef8:	fb03 ca19 	mls	sl, r3, r9, ip
 800cefc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf00:	2f09      	cmp	r7, #9
 800cf02:	d81b      	bhi.n	800cf3c <_strtol_l.constprop.0+0xa8>
 800cf04:	463c      	mov	r4, r7
 800cf06:	42a3      	cmp	r3, r4
 800cf08:	dd27      	ble.n	800cf5a <_strtol_l.constprop.0+0xc6>
 800cf0a:	1c57      	adds	r7, r2, #1
 800cf0c:	d007      	beq.n	800cf1e <_strtol_l.constprop.0+0x8a>
 800cf0e:	4581      	cmp	r9, r0
 800cf10:	d320      	bcc.n	800cf54 <_strtol_l.constprop.0+0xc0>
 800cf12:	d101      	bne.n	800cf18 <_strtol_l.constprop.0+0x84>
 800cf14:	45a2      	cmp	sl, r4
 800cf16:	db1d      	blt.n	800cf54 <_strtol_l.constprop.0+0xc0>
 800cf18:	fb00 4003 	mla	r0, r0, r3, r4
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf22:	e7eb      	b.n	800cefc <_strtol_l.constprop.0+0x68>
 800cf24:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf26:	bf04      	itt	eq
 800cf28:	782c      	ldrbeq	r4, [r5, #0]
 800cf2a:	1c95      	addeq	r5, r2, #2
 800cf2c:	e7cf      	b.n	800cece <_strtol_l.constprop.0+0x3a>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1da      	bne.n	800cee8 <_strtol_l.constprop.0+0x54>
 800cf32:	2c30      	cmp	r4, #48	@ 0x30
 800cf34:	bf0c      	ite	eq
 800cf36:	2308      	moveq	r3, #8
 800cf38:	230a      	movne	r3, #10
 800cf3a:	e7d5      	b.n	800cee8 <_strtol_l.constprop.0+0x54>
 800cf3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf40:	2f19      	cmp	r7, #25
 800cf42:	d801      	bhi.n	800cf48 <_strtol_l.constprop.0+0xb4>
 800cf44:	3c37      	subs	r4, #55	@ 0x37
 800cf46:	e7de      	b.n	800cf06 <_strtol_l.constprop.0+0x72>
 800cf48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf4c:	2f19      	cmp	r7, #25
 800cf4e:	d804      	bhi.n	800cf5a <_strtol_l.constprop.0+0xc6>
 800cf50:	3c57      	subs	r4, #87	@ 0x57
 800cf52:	e7d8      	b.n	800cf06 <_strtol_l.constprop.0+0x72>
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	e7e1      	b.n	800cf1e <_strtol_l.constprop.0+0x8a>
 800cf5a:	1c53      	adds	r3, r2, #1
 800cf5c:	d108      	bne.n	800cf70 <_strtol_l.constprop.0+0xdc>
 800cf5e:	2322      	movs	r3, #34	@ 0x22
 800cf60:	f8ce 3000 	str.w	r3, [lr]
 800cf64:	4660      	mov	r0, ip
 800cf66:	f1b8 0f00 	cmp.w	r8, #0
 800cf6a:	d0a0      	beq.n	800ceae <_strtol_l.constprop.0+0x1a>
 800cf6c:	1e69      	subs	r1, r5, #1
 800cf6e:	e006      	b.n	800cf7e <_strtol_l.constprop.0+0xea>
 800cf70:	b106      	cbz	r6, 800cf74 <_strtol_l.constprop.0+0xe0>
 800cf72:	4240      	negs	r0, r0
 800cf74:	f1b8 0f00 	cmp.w	r8, #0
 800cf78:	d099      	beq.n	800ceae <_strtol_l.constprop.0+0x1a>
 800cf7a:	2a00      	cmp	r2, #0
 800cf7c:	d1f6      	bne.n	800cf6c <_strtol_l.constprop.0+0xd8>
 800cf7e:	f8c8 1000 	str.w	r1, [r8]
 800cf82:	e794      	b.n	800ceae <_strtol_l.constprop.0+0x1a>
 800cf84:	08011401 	.word	0x08011401

0800cf88 <_strtol_r>:
 800cf88:	f7ff bf84 	b.w	800ce94 <_strtol_l.constprop.0>

0800cf8c <__cvt>:
 800cf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf90:	ec57 6b10 	vmov	r6, r7, d0
 800cf94:	2f00      	cmp	r7, #0
 800cf96:	460c      	mov	r4, r1
 800cf98:	4619      	mov	r1, r3
 800cf9a:	463b      	mov	r3, r7
 800cf9c:	bfbb      	ittet	lt
 800cf9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cfa2:	461f      	movlt	r7, r3
 800cfa4:	2300      	movge	r3, #0
 800cfa6:	232d      	movlt	r3, #45	@ 0x2d
 800cfa8:	700b      	strb	r3, [r1, #0]
 800cfaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cfb0:	4691      	mov	r9, r2
 800cfb2:	f023 0820 	bic.w	r8, r3, #32
 800cfb6:	bfbc      	itt	lt
 800cfb8:	4632      	movlt	r2, r6
 800cfba:	4616      	movlt	r6, r2
 800cfbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cfc0:	d005      	beq.n	800cfce <__cvt+0x42>
 800cfc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cfc6:	d100      	bne.n	800cfca <__cvt+0x3e>
 800cfc8:	3401      	adds	r4, #1
 800cfca:	2102      	movs	r1, #2
 800cfcc:	e000      	b.n	800cfd0 <__cvt+0x44>
 800cfce:	2103      	movs	r1, #3
 800cfd0:	ab03      	add	r3, sp, #12
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	ab02      	add	r3, sp, #8
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	ec47 6b10 	vmov	d0, r6, r7
 800cfdc:	4653      	mov	r3, sl
 800cfde:	4622      	mov	r2, r4
 800cfe0:	f001 fa66 	bl	800e4b0 <_dtoa_r>
 800cfe4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cfe8:	4605      	mov	r5, r0
 800cfea:	d119      	bne.n	800d020 <__cvt+0x94>
 800cfec:	f019 0f01 	tst.w	r9, #1
 800cff0:	d00e      	beq.n	800d010 <__cvt+0x84>
 800cff2:	eb00 0904 	add.w	r9, r0, r4
 800cff6:	2200      	movs	r2, #0
 800cff8:	2300      	movs	r3, #0
 800cffa:	4630      	mov	r0, r6
 800cffc:	4639      	mov	r1, r7
 800cffe:	f7f3 fd7b 	bl	8000af8 <__aeabi_dcmpeq>
 800d002:	b108      	cbz	r0, 800d008 <__cvt+0x7c>
 800d004:	f8cd 900c 	str.w	r9, [sp, #12]
 800d008:	2230      	movs	r2, #48	@ 0x30
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	454b      	cmp	r3, r9
 800d00e:	d31e      	bcc.n	800d04e <__cvt+0xc2>
 800d010:	9b03      	ldr	r3, [sp, #12]
 800d012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d014:	1b5b      	subs	r3, r3, r5
 800d016:	4628      	mov	r0, r5
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	b004      	add	sp, #16
 800d01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d020:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d024:	eb00 0904 	add.w	r9, r0, r4
 800d028:	d1e5      	bne.n	800cff6 <__cvt+0x6a>
 800d02a:	7803      	ldrb	r3, [r0, #0]
 800d02c:	2b30      	cmp	r3, #48	@ 0x30
 800d02e:	d10a      	bne.n	800d046 <__cvt+0xba>
 800d030:	2200      	movs	r2, #0
 800d032:	2300      	movs	r3, #0
 800d034:	4630      	mov	r0, r6
 800d036:	4639      	mov	r1, r7
 800d038:	f7f3 fd5e 	bl	8000af8 <__aeabi_dcmpeq>
 800d03c:	b918      	cbnz	r0, 800d046 <__cvt+0xba>
 800d03e:	f1c4 0401 	rsb	r4, r4, #1
 800d042:	f8ca 4000 	str.w	r4, [sl]
 800d046:	f8da 3000 	ldr.w	r3, [sl]
 800d04a:	4499      	add	r9, r3
 800d04c:	e7d3      	b.n	800cff6 <__cvt+0x6a>
 800d04e:	1c59      	adds	r1, r3, #1
 800d050:	9103      	str	r1, [sp, #12]
 800d052:	701a      	strb	r2, [r3, #0]
 800d054:	e7d9      	b.n	800d00a <__cvt+0x7e>

0800d056 <__exponent>:
 800d056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d058:	2900      	cmp	r1, #0
 800d05a:	bfba      	itte	lt
 800d05c:	4249      	neglt	r1, r1
 800d05e:	232d      	movlt	r3, #45	@ 0x2d
 800d060:	232b      	movge	r3, #43	@ 0x2b
 800d062:	2909      	cmp	r1, #9
 800d064:	7002      	strb	r2, [r0, #0]
 800d066:	7043      	strb	r3, [r0, #1]
 800d068:	dd29      	ble.n	800d0be <__exponent+0x68>
 800d06a:	f10d 0307 	add.w	r3, sp, #7
 800d06e:	461d      	mov	r5, r3
 800d070:	270a      	movs	r7, #10
 800d072:	461a      	mov	r2, r3
 800d074:	fbb1 f6f7 	udiv	r6, r1, r7
 800d078:	fb07 1416 	mls	r4, r7, r6, r1
 800d07c:	3430      	adds	r4, #48	@ 0x30
 800d07e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d082:	460c      	mov	r4, r1
 800d084:	2c63      	cmp	r4, #99	@ 0x63
 800d086:	f103 33ff 	add.w	r3, r3, #4294967295
 800d08a:	4631      	mov	r1, r6
 800d08c:	dcf1      	bgt.n	800d072 <__exponent+0x1c>
 800d08e:	3130      	adds	r1, #48	@ 0x30
 800d090:	1e94      	subs	r4, r2, #2
 800d092:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d096:	1c41      	adds	r1, r0, #1
 800d098:	4623      	mov	r3, r4
 800d09a:	42ab      	cmp	r3, r5
 800d09c:	d30a      	bcc.n	800d0b4 <__exponent+0x5e>
 800d09e:	f10d 0309 	add.w	r3, sp, #9
 800d0a2:	1a9b      	subs	r3, r3, r2
 800d0a4:	42ac      	cmp	r4, r5
 800d0a6:	bf88      	it	hi
 800d0a8:	2300      	movhi	r3, #0
 800d0aa:	3302      	adds	r3, #2
 800d0ac:	4403      	add	r3, r0
 800d0ae:	1a18      	subs	r0, r3, r0
 800d0b0:	b003      	add	sp, #12
 800d0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d0b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d0bc:	e7ed      	b.n	800d09a <__exponent+0x44>
 800d0be:	2330      	movs	r3, #48	@ 0x30
 800d0c0:	3130      	adds	r1, #48	@ 0x30
 800d0c2:	7083      	strb	r3, [r0, #2]
 800d0c4:	70c1      	strb	r1, [r0, #3]
 800d0c6:	1d03      	adds	r3, r0, #4
 800d0c8:	e7f1      	b.n	800d0ae <__exponent+0x58>
	...

0800d0cc <_printf_float>:
 800d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d0:	b08d      	sub	sp, #52	@ 0x34
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d0d8:	4616      	mov	r6, r2
 800d0da:	461f      	mov	r7, r3
 800d0dc:	4605      	mov	r5, r0
 800d0de:	f001 f89b 	bl	800e218 <_localeconv_r>
 800d0e2:	6803      	ldr	r3, [r0, #0]
 800d0e4:	9304      	str	r3, [sp, #16]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7f3 f8da 	bl	80002a0 <strlen>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0f4:	9005      	str	r0, [sp, #20]
 800d0f6:	3307      	adds	r3, #7
 800d0f8:	f023 0307 	bic.w	r3, r3, #7
 800d0fc:	f103 0208 	add.w	r2, r3, #8
 800d100:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d104:	f8d4 b000 	ldr.w	fp, [r4]
 800d108:	f8c8 2000 	str.w	r2, [r8]
 800d10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d110:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d114:	9307      	str	r3, [sp, #28]
 800d116:	f8cd 8018 	str.w	r8, [sp, #24]
 800d11a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d122:	4b9c      	ldr	r3, [pc, #624]	@ (800d394 <_printf_float+0x2c8>)
 800d124:	f04f 32ff 	mov.w	r2, #4294967295
 800d128:	f7f3 fd18 	bl	8000b5c <__aeabi_dcmpun>
 800d12c:	bb70      	cbnz	r0, 800d18c <_printf_float+0xc0>
 800d12e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d132:	4b98      	ldr	r3, [pc, #608]	@ (800d394 <_printf_float+0x2c8>)
 800d134:	f04f 32ff 	mov.w	r2, #4294967295
 800d138:	f7f3 fcf2 	bl	8000b20 <__aeabi_dcmple>
 800d13c:	bb30      	cbnz	r0, 800d18c <_printf_float+0xc0>
 800d13e:	2200      	movs	r2, #0
 800d140:	2300      	movs	r3, #0
 800d142:	4640      	mov	r0, r8
 800d144:	4649      	mov	r1, r9
 800d146:	f7f3 fce1 	bl	8000b0c <__aeabi_dcmplt>
 800d14a:	b110      	cbz	r0, 800d152 <_printf_float+0x86>
 800d14c:	232d      	movs	r3, #45	@ 0x2d
 800d14e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d152:	4a91      	ldr	r2, [pc, #580]	@ (800d398 <_printf_float+0x2cc>)
 800d154:	4b91      	ldr	r3, [pc, #580]	@ (800d39c <_printf_float+0x2d0>)
 800d156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d15a:	bf94      	ite	ls
 800d15c:	4690      	movls	r8, r2
 800d15e:	4698      	movhi	r8, r3
 800d160:	2303      	movs	r3, #3
 800d162:	6123      	str	r3, [r4, #16]
 800d164:	f02b 0304 	bic.w	r3, fp, #4
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	f04f 0900 	mov.w	r9, #0
 800d16e:	9700      	str	r7, [sp, #0]
 800d170:	4633      	mov	r3, r6
 800d172:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d174:	4621      	mov	r1, r4
 800d176:	4628      	mov	r0, r5
 800d178:	f000 f9d2 	bl	800d520 <_printf_common>
 800d17c:	3001      	adds	r0, #1
 800d17e:	f040 808d 	bne.w	800d29c <_printf_float+0x1d0>
 800d182:	f04f 30ff 	mov.w	r0, #4294967295
 800d186:	b00d      	add	sp, #52	@ 0x34
 800d188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18c:	4642      	mov	r2, r8
 800d18e:	464b      	mov	r3, r9
 800d190:	4640      	mov	r0, r8
 800d192:	4649      	mov	r1, r9
 800d194:	f7f3 fce2 	bl	8000b5c <__aeabi_dcmpun>
 800d198:	b140      	cbz	r0, 800d1ac <_printf_float+0xe0>
 800d19a:	464b      	mov	r3, r9
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	bfbc      	itt	lt
 800d1a0:	232d      	movlt	r3, #45	@ 0x2d
 800d1a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d1a6:	4a7e      	ldr	r2, [pc, #504]	@ (800d3a0 <_printf_float+0x2d4>)
 800d1a8:	4b7e      	ldr	r3, [pc, #504]	@ (800d3a4 <_printf_float+0x2d8>)
 800d1aa:	e7d4      	b.n	800d156 <_printf_float+0x8a>
 800d1ac:	6863      	ldr	r3, [r4, #4]
 800d1ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d1b2:	9206      	str	r2, [sp, #24]
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	d13b      	bne.n	800d230 <_printf_float+0x164>
 800d1b8:	2306      	movs	r3, #6
 800d1ba:	6063      	str	r3, [r4, #4]
 800d1bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	6022      	str	r2, [r4, #0]
 800d1c4:	9303      	str	r3, [sp, #12]
 800d1c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d1c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d1cc:	ab09      	add	r3, sp, #36	@ 0x24
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	6861      	ldr	r1, [r4, #4]
 800d1d2:	ec49 8b10 	vmov	d0, r8, r9
 800d1d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f7ff fed6 	bl	800cf8c <__cvt>
 800d1e0:	9b06      	ldr	r3, [sp, #24]
 800d1e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1e4:	2b47      	cmp	r3, #71	@ 0x47
 800d1e6:	4680      	mov	r8, r0
 800d1e8:	d129      	bne.n	800d23e <_printf_float+0x172>
 800d1ea:	1cc8      	adds	r0, r1, #3
 800d1ec:	db02      	blt.n	800d1f4 <_printf_float+0x128>
 800d1ee:	6863      	ldr	r3, [r4, #4]
 800d1f0:	4299      	cmp	r1, r3
 800d1f2:	dd41      	ble.n	800d278 <_printf_float+0x1ac>
 800d1f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d1f8:	fa5f fa8a 	uxtb.w	sl, sl
 800d1fc:	3901      	subs	r1, #1
 800d1fe:	4652      	mov	r2, sl
 800d200:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d204:	9109      	str	r1, [sp, #36]	@ 0x24
 800d206:	f7ff ff26 	bl	800d056 <__exponent>
 800d20a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d20c:	1813      	adds	r3, r2, r0
 800d20e:	2a01      	cmp	r2, #1
 800d210:	4681      	mov	r9, r0
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	dc02      	bgt.n	800d21c <_printf_float+0x150>
 800d216:	6822      	ldr	r2, [r4, #0]
 800d218:	07d2      	lsls	r2, r2, #31
 800d21a:	d501      	bpl.n	800d220 <_printf_float+0x154>
 800d21c:	3301      	adds	r3, #1
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d224:	2b00      	cmp	r3, #0
 800d226:	d0a2      	beq.n	800d16e <_printf_float+0xa2>
 800d228:	232d      	movs	r3, #45	@ 0x2d
 800d22a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d22e:	e79e      	b.n	800d16e <_printf_float+0xa2>
 800d230:	9a06      	ldr	r2, [sp, #24]
 800d232:	2a47      	cmp	r2, #71	@ 0x47
 800d234:	d1c2      	bne.n	800d1bc <_printf_float+0xf0>
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1c0      	bne.n	800d1bc <_printf_float+0xf0>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e7bd      	b.n	800d1ba <_printf_float+0xee>
 800d23e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d242:	d9db      	bls.n	800d1fc <_printf_float+0x130>
 800d244:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d248:	d118      	bne.n	800d27c <_printf_float+0x1b0>
 800d24a:	2900      	cmp	r1, #0
 800d24c:	6863      	ldr	r3, [r4, #4]
 800d24e:	dd0b      	ble.n	800d268 <_printf_float+0x19c>
 800d250:	6121      	str	r1, [r4, #16]
 800d252:	b913      	cbnz	r3, 800d25a <_printf_float+0x18e>
 800d254:	6822      	ldr	r2, [r4, #0]
 800d256:	07d0      	lsls	r0, r2, #31
 800d258:	d502      	bpl.n	800d260 <_printf_float+0x194>
 800d25a:	3301      	adds	r3, #1
 800d25c:	440b      	add	r3, r1
 800d25e:	6123      	str	r3, [r4, #16]
 800d260:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d262:	f04f 0900 	mov.w	r9, #0
 800d266:	e7db      	b.n	800d220 <_printf_float+0x154>
 800d268:	b913      	cbnz	r3, 800d270 <_printf_float+0x1a4>
 800d26a:	6822      	ldr	r2, [r4, #0]
 800d26c:	07d2      	lsls	r2, r2, #31
 800d26e:	d501      	bpl.n	800d274 <_printf_float+0x1a8>
 800d270:	3302      	adds	r3, #2
 800d272:	e7f4      	b.n	800d25e <_printf_float+0x192>
 800d274:	2301      	movs	r3, #1
 800d276:	e7f2      	b.n	800d25e <_printf_float+0x192>
 800d278:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d27e:	4299      	cmp	r1, r3
 800d280:	db05      	blt.n	800d28e <_printf_float+0x1c2>
 800d282:	6823      	ldr	r3, [r4, #0]
 800d284:	6121      	str	r1, [r4, #16]
 800d286:	07d8      	lsls	r0, r3, #31
 800d288:	d5ea      	bpl.n	800d260 <_printf_float+0x194>
 800d28a:	1c4b      	adds	r3, r1, #1
 800d28c:	e7e7      	b.n	800d25e <_printf_float+0x192>
 800d28e:	2900      	cmp	r1, #0
 800d290:	bfd4      	ite	le
 800d292:	f1c1 0202 	rsble	r2, r1, #2
 800d296:	2201      	movgt	r2, #1
 800d298:	4413      	add	r3, r2
 800d29a:	e7e0      	b.n	800d25e <_printf_float+0x192>
 800d29c:	6823      	ldr	r3, [r4, #0]
 800d29e:	055a      	lsls	r2, r3, #21
 800d2a0:	d407      	bmi.n	800d2b2 <_printf_float+0x1e6>
 800d2a2:	6923      	ldr	r3, [r4, #16]
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b8      	blx	r7
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d12b      	bne.n	800d308 <_printf_float+0x23c>
 800d2b0:	e767      	b.n	800d182 <_printf_float+0xb6>
 800d2b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2b6:	f240 80dd 	bls.w	800d474 <_printf_float+0x3a8>
 800d2ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2be:	2200      	movs	r2, #0
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f7f3 fc19 	bl	8000af8 <__aeabi_dcmpeq>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d033      	beq.n	800d332 <_printf_float+0x266>
 800d2ca:	4a37      	ldr	r2, [pc, #220]	@ (800d3a8 <_printf_float+0x2dc>)
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	47b8      	blx	r7
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	f43f af54 	beq.w	800d182 <_printf_float+0xb6>
 800d2da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d2de:	4543      	cmp	r3, r8
 800d2e0:	db02      	blt.n	800d2e8 <_printf_float+0x21c>
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	07d8      	lsls	r0, r3, #31
 800d2e6:	d50f      	bpl.n	800d308 <_printf_float+0x23c>
 800d2e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	47b8      	blx	r7
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f43f af45 	beq.w	800d182 <_printf_float+0xb6>
 800d2f8:	f04f 0900 	mov.w	r9, #0
 800d2fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d300:	f104 0a1a 	add.w	sl, r4, #26
 800d304:	45c8      	cmp	r8, r9
 800d306:	dc09      	bgt.n	800d31c <_printf_float+0x250>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	079b      	lsls	r3, r3, #30
 800d30c:	f100 8103 	bmi.w	800d516 <_printf_float+0x44a>
 800d310:	68e0      	ldr	r0, [r4, #12]
 800d312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d314:	4298      	cmp	r0, r3
 800d316:	bfb8      	it	lt
 800d318:	4618      	movlt	r0, r3
 800d31a:	e734      	b.n	800d186 <_printf_float+0xba>
 800d31c:	2301      	movs	r3, #1
 800d31e:	4652      	mov	r2, sl
 800d320:	4631      	mov	r1, r6
 800d322:	4628      	mov	r0, r5
 800d324:	47b8      	blx	r7
 800d326:	3001      	adds	r0, #1
 800d328:	f43f af2b 	beq.w	800d182 <_printf_float+0xb6>
 800d32c:	f109 0901 	add.w	r9, r9, #1
 800d330:	e7e8      	b.n	800d304 <_printf_float+0x238>
 800d332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d334:	2b00      	cmp	r3, #0
 800d336:	dc39      	bgt.n	800d3ac <_printf_float+0x2e0>
 800d338:	4a1b      	ldr	r2, [pc, #108]	@ (800d3a8 <_printf_float+0x2dc>)
 800d33a:	2301      	movs	r3, #1
 800d33c:	4631      	mov	r1, r6
 800d33e:	4628      	mov	r0, r5
 800d340:	47b8      	blx	r7
 800d342:	3001      	adds	r0, #1
 800d344:	f43f af1d 	beq.w	800d182 <_printf_float+0xb6>
 800d348:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d34c:	ea59 0303 	orrs.w	r3, r9, r3
 800d350:	d102      	bne.n	800d358 <_printf_float+0x28c>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	07d9      	lsls	r1, r3, #31
 800d356:	d5d7      	bpl.n	800d308 <_printf_float+0x23c>
 800d358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d35c:	4631      	mov	r1, r6
 800d35e:	4628      	mov	r0, r5
 800d360:	47b8      	blx	r7
 800d362:	3001      	adds	r0, #1
 800d364:	f43f af0d 	beq.w	800d182 <_printf_float+0xb6>
 800d368:	f04f 0a00 	mov.w	sl, #0
 800d36c:	f104 0b1a 	add.w	fp, r4, #26
 800d370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d372:	425b      	negs	r3, r3
 800d374:	4553      	cmp	r3, sl
 800d376:	dc01      	bgt.n	800d37c <_printf_float+0x2b0>
 800d378:	464b      	mov	r3, r9
 800d37a:	e793      	b.n	800d2a4 <_printf_float+0x1d8>
 800d37c:	2301      	movs	r3, #1
 800d37e:	465a      	mov	r2, fp
 800d380:	4631      	mov	r1, r6
 800d382:	4628      	mov	r0, r5
 800d384:	47b8      	blx	r7
 800d386:	3001      	adds	r0, #1
 800d388:	f43f aefb 	beq.w	800d182 <_printf_float+0xb6>
 800d38c:	f10a 0a01 	add.w	sl, sl, #1
 800d390:	e7ee      	b.n	800d370 <_printf_float+0x2a4>
 800d392:	bf00      	nop
 800d394:	7fefffff 	.word	0x7fefffff
 800d398:	08011501 	.word	0x08011501
 800d39c:	08011505 	.word	0x08011505
 800d3a0:	08011509 	.word	0x08011509
 800d3a4:	0801150d 	.word	0x0801150d
 800d3a8:	08011511 	.word	0x08011511
 800d3ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3b2:	4553      	cmp	r3, sl
 800d3b4:	bfa8      	it	ge
 800d3b6:	4653      	movge	r3, sl
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	4699      	mov	r9, r3
 800d3bc:	dc36      	bgt.n	800d42c <_printf_float+0x360>
 800d3be:	f04f 0b00 	mov.w	fp, #0
 800d3c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3c6:	f104 021a 	add.w	r2, r4, #26
 800d3ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3cc:	9306      	str	r3, [sp, #24]
 800d3ce:	eba3 0309 	sub.w	r3, r3, r9
 800d3d2:	455b      	cmp	r3, fp
 800d3d4:	dc31      	bgt.n	800d43a <_printf_float+0x36e>
 800d3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d8:	459a      	cmp	sl, r3
 800d3da:	dc3a      	bgt.n	800d452 <_printf_float+0x386>
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	07da      	lsls	r2, r3, #31
 800d3e0:	d437      	bmi.n	800d452 <_printf_float+0x386>
 800d3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e4:	ebaa 0903 	sub.w	r9, sl, r3
 800d3e8:	9b06      	ldr	r3, [sp, #24]
 800d3ea:	ebaa 0303 	sub.w	r3, sl, r3
 800d3ee:	4599      	cmp	r9, r3
 800d3f0:	bfa8      	it	ge
 800d3f2:	4699      	movge	r9, r3
 800d3f4:	f1b9 0f00 	cmp.w	r9, #0
 800d3f8:	dc33      	bgt.n	800d462 <_printf_float+0x396>
 800d3fa:	f04f 0800 	mov.w	r8, #0
 800d3fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d402:	f104 0b1a 	add.w	fp, r4, #26
 800d406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d408:	ebaa 0303 	sub.w	r3, sl, r3
 800d40c:	eba3 0309 	sub.w	r3, r3, r9
 800d410:	4543      	cmp	r3, r8
 800d412:	f77f af79 	ble.w	800d308 <_printf_float+0x23c>
 800d416:	2301      	movs	r3, #1
 800d418:	465a      	mov	r2, fp
 800d41a:	4631      	mov	r1, r6
 800d41c:	4628      	mov	r0, r5
 800d41e:	47b8      	blx	r7
 800d420:	3001      	adds	r0, #1
 800d422:	f43f aeae 	beq.w	800d182 <_printf_float+0xb6>
 800d426:	f108 0801 	add.w	r8, r8, #1
 800d42a:	e7ec      	b.n	800d406 <_printf_float+0x33a>
 800d42c:	4642      	mov	r2, r8
 800d42e:	4631      	mov	r1, r6
 800d430:	4628      	mov	r0, r5
 800d432:	47b8      	blx	r7
 800d434:	3001      	adds	r0, #1
 800d436:	d1c2      	bne.n	800d3be <_printf_float+0x2f2>
 800d438:	e6a3      	b.n	800d182 <_printf_float+0xb6>
 800d43a:	2301      	movs	r3, #1
 800d43c:	4631      	mov	r1, r6
 800d43e:	4628      	mov	r0, r5
 800d440:	9206      	str	r2, [sp, #24]
 800d442:	47b8      	blx	r7
 800d444:	3001      	adds	r0, #1
 800d446:	f43f ae9c 	beq.w	800d182 <_printf_float+0xb6>
 800d44a:	9a06      	ldr	r2, [sp, #24]
 800d44c:	f10b 0b01 	add.w	fp, fp, #1
 800d450:	e7bb      	b.n	800d3ca <_printf_float+0x2fe>
 800d452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d456:	4631      	mov	r1, r6
 800d458:	4628      	mov	r0, r5
 800d45a:	47b8      	blx	r7
 800d45c:	3001      	adds	r0, #1
 800d45e:	d1c0      	bne.n	800d3e2 <_printf_float+0x316>
 800d460:	e68f      	b.n	800d182 <_printf_float+0xb6>
 800d462:	9a06      	ldr	r2, [sp, #24]
 800d464:	464b      	mov	r3, r9
 800d466:	4442      	add	r2, r8
 800d468:	4631      	mov	r1, r6
 800d46a:	4628      	mov	r0, r5
 800d46c:	47b8      	blx	r7
 800d46e:	3001      	adds	r0, #1
 800d470:	d1c3      	bne.n	800d3fa <_printf_float+0x32e>
 800d472:	e686      	b.n	800d182 <_printf_float+0xb6>
 800d474:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d478:	f1ba 0f01 	cmp.w	sl, #1
 800d47c:	dc01      	bgt.n	800d482 <_printf_float+0x3b6>
 800d47e:	07db      	lsls	r3, r3, #31
 800d480:	d536      	bpl.n	800d4f0 <_printf_float+0x424>
 800d482:	2301      	movs	r3, #1
 800d484:	4642      	mov	r2, r8
 800d486:	4631      	mov	r1, r6
 800d488:	4628      	mov	r0, r5
 800d48a:	47b8      	blx	r7
 800d48c:	3001      	adds	r0, #1
 800d48e:	f43f ae78 	beq.w	800d182 <_printf_float+0xb6>
 800d492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d496:	4631      	mov	r1, r6
 800d498:	4628      	mov	r0, r5
 800d49a:	47b8      	blx	r7
 800d49c:	3001      	adds	r0, #1
 800d49e:	f43f ae70 	beq.w	800d182 <_printf_float+0xb6>
 800d4a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4ae:	f7f3 fb23 	bl	8000af8 <__aeabi_dcmpeq>
 800d4b2:	b9c0      	cbnz	r0, 800d4e6 <_printf_float+0x41a>
 800d4b4:	4653      	mov	r3, sl
 800d4b6:	f108 0201 	add.w	r2, r8, #1
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4628      	mov	r0, r5
 800d4be:	47b8      	blx	r7
 800d4c0:	3001      	adds	r0, #1
 800d4c2:	d10c      	bne.n	800d4de <_printf_float+0x412>
 800d4c4:	e65d      	b.n	800d182 <_printf_float+0xb6>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	465a      	mov	r2, fp
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f43f ae56 	beq.w	800d182 <_printf_float+0xb6>
 800d4d6:	f108 0801 	add.w	r8, r8, #1
 800d4da:	45d0      	cmp	r8, sl
 800d4dc:	dbf3      	blt.n	800d4c6 <_printf_float+0x3fa>
 800d4de:	464b      	mov	r3, r9
 800d4e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d4e4:	e6df      	b.n	800d2a6 <_printf_float+0x1da>
 800d4e6:	f04f 0800 	mov.w	r8, #0
 800d4ea:	f104 0b1a 	add.w	fp, r4, #26
 800d4ee:	e7f4      	b.n	800d4da <_printf_float+0x40e>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	4642      	mov	r2, r8
 800d4f4:	e7e1      	b.n	800d4ba <_printf_float+0x3ee>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	464a      	mov	r2, r9
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	47b8      	blx	r7
 800d500:	3001      	adds	r0, #1
 800d502:	f43f ae3e 	beq.w	800d182 <_printf_float+0xb6>
 800d506:	f108 0801 	add.w	r8, r8, #1
 800d50a:	68e3      	ldr	r3, [r4, #12]
 800d50c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d50e:	1a5b      	subs	r3, r3, r1
 800d510:	4543      	cmp	r3, r8
 800d512:	dcf0      	bgt.n	800d4f6 <_printf_float+0x42a>
 800d514:	e6fc      	b.n	800d310 <_printf_float+0x244>
 800d516:	f04f 0800 	mov.w	r8, #0
 800d51a:	f104 0919 	add.w	r9, r4, #25
 800d51e:	e7f4      	b.n	800d50a <_printf_float+0x43e>

0800d520 <_printf_common>:
 800d520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d524:	4616      	mov	r6, r2
 800d526:	4698      	mov	r8, r3
 800d528:	688a      	ldr	r2, [r1, #8]
 800d52a:	690b      	ldr	r3, [r1, #16]
 800d52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d530:	4293      	cmp	r3, r2
 800d532:	bfb8      	it	lt
 800d534:	4613      	movlt	r3, r2
 800d536:	6033      	str	r3, [r6, #0]
 800d538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d53c:	4607      	mov	r7, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	b10a      	cbz	r2, 800d546 <_printf_common+0x26>
 800d542:	3301      	adds	r3, #1
 800d544:	6033      	str	r3, [r6, #0]
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	0699      	lsls	r1, r3, #26
 800d54a:	bf42      	ittt	mi
 800d54c:	6833      	ldrmi	r3, [r6, #0]
 800d54e:	3302      	addmi	r3, #2
 800d550:	6033      	strmi	r3, [r6, #0]
 800d552:	6825      	ldr	r5, [r4, #0]
 800d554:	f015 0506 	ands.w	r5, r5, #6
 800d558:	d106      	bne.n	800d568 <_printf_common+0x48>
 800d55a:	f104 0a19 	add.w	sl, r4, #25
 800d55e:	68e3      	ldr	r3, [r4, #12]
 800d560:	6832      	ldr	r2, [r6, #0]
 800d562:	1a9b      	subs	r3, r3, r2
 800d564:	42ab      	cmp	r3, r5
 800d566:	dc26      	bgt.n	800d5b6 <_printf_common+0x96>
 800d568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d56c:	6822      	ldr	r2, [r4, #0]
 800d56e:	3b00      	subs	r3, #0
 800d570:	bf18      	it	ne
 800d572:	2301      	movne	r3, #1
 800d574:	0692      	lsls	r2, r2, #26
 800d576:	d42b      	bmi.n	800d5d0 <_printf_common+0xb0>
 800d578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d57c:	4641      	mov	r1, r8
 800d57e:	4638      	mov	r0, r7
 800d580:	47c8      	blx	r9
 800d582:	3001      	adds	r0, #1
 800d584:	d01e      	beq.n	800d5c4 <_printf_common+0xa4>
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	6922      	ldr	r2, [r4, #16]
 800d58a:	f003 0306 	and.w	r3, r3, #6
 800d58e:	2b04      	cmp	r3, #4
 800d590:	bf02      	ittt	eq
 800d592:	68e5      	ldreq	r5, [r4, #12]
 800d594:	6833      	ldreq	r3, [r6, #0]
 800d596:	1aed      	subeq	r5, r5, r3
 800d598:	68a3      	ldr	r3, [r4, #8]
 800d59a:	bf0c      	ite	eq
 800d59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5a0:	2500      	movne	r5, #0
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	bfc4      	itt	gt
 800d5a6:	1a9b      	subgt	r3, r3, r2
 800d5a8:	18ed      	addgt	r5, r5, r3
 800d5aa:	2600      	movs	r6, #0
 800d5ac:	341a      	adds	r4, #26
 800d5ae:	42b5      	cmp	r5, r6
 800d5b0:	d11a      	bne.n	800d5e8 <_printf_common+0xc8>
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	e008      	b.n	800d5c8 <_printf_common+0xa8>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4652      	mov	r2, sl
 800d5ba:	4641      	mov	r1, r8
 800d5bc:	4638      	mov	r0, r7
 800d5be:	47c8      	blx	r9
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d103      	bne.n	800d5cc <_printf_common+0xac>
 800d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5cc:	3501      	adds	r5, #1
 800d5ce:	e7c6      	b.n	800d55e <_printf_common+0x3e>
 800d5d0:	18e1      	adds	r1, r4, r3
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	2030      	movs	r0, #48	@ 0x30
 800d5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d5da:	4422      	add	r2, r4
 800d5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d5e4:	3302      	adds	r3, #2
 800d5e6:	e7c7      	b.n	800d578 <_printf_common+0x58>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	4622      	mov	r2, r4
 800d5ec:	4641      	mov	r1, r8
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	47c8      	blx	r9
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	d0e6      	beq.n	800d5c4 <_printf_common+0xa4>
 800d5f6:	3601      	adds	r6, #1
 800d5f8:	e7d9      	b.n	800d5ae <_printf_common+0x8e>
	...

0800d5fc <_printf_i>:
 800d5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d600:	7e0f      	ldrb	r7, [r1, #24]
 800d602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d604:	2f78      	cmp	r7, #120	@ 0x78
 800d606:	4691      	mov	r9, r2
 800d608:	4680      	mov	r8, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	469a      	mov	sl, r3
 800d60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d612:	d807      	bhi.n	800d624 <_printf_i+0x28>
 800d614:	2f62      	cmp	r7, #98	@ 0x62
 800d616:	d80a      	bhi.n	800d62e <_printf_i+0x32>
 800d618:	2f00      	cmp	r7, #0
 800d61a:	f000 80d2 	beq.w	800d7c2 <_printf_i+0x1c6>
 800d61e:	2f58      	cmp	r7, #88	@ 0x58
 800d620:	f000 80b9 	beq.w	800d796 <_printf_i+0x19a>
 800d624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d62c:	e03a      	b.n	800d6a4 <_printf_i+0xa8>
 800d62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d632:	2b15      	cmp	r3, #21
 800d634:	d8f6      	bhi.n	800d624 <_printf_i+0x28>
 800d636:	a101      	add	r1, pc, #4	@ (adr r1, 800d63c <_printf_i+0x40>)
 800d638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d63c:	0800d695 	.word	0x0800d695
 800d640:	0800d6a9 	.word	0x0800d6a9
 800d644:	0800d625 	.word	0x0800d625
 800d648:	0800d625 	.word	0x0800d625
 800d64c:	0800d625 	.word	0x0800d625
 800d650:	0800d625 	.word	0x0800d625
 800d654:	0800d6a9 	.word	0x0800d6a9
 800d658:	0800d625 	.word	0x0800d625
 800d65c:	0800d625 	.word	0x0800d625
 800d660:	0800d625 	.word	0x0800d625
 800d664:	0800d625 	.word	0x0800d625
 800d668:	0800d7a9 	.word	0x0800d7a9
 800d66c:	0800d6d3 	.word	0x0800d6d3
 800d670:	0800d763 	.word	0x0800d763
 800d674:	0800d625 	.word	0x0800d625
 800d678:	0800d625 	.word	0x0800d625
 800d67c:	0800d7cb 	.word	0x0800d7cb
 800d680:	0800d625 	.word	0x0800d625
 800d684:	0800d6d3 	.word	0x0800d6d3
 800d688:	0800d625 	.word	0x0800d625
 800d68c:	0800d625 	.word	0x0800d625
 800d690:	0800d76b 	.word	0x0800d76b
 800d694:	6833      	ldr	r3, [r6, #0]
 800d696:	1d1a      	adds	r2, r3, #4
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6032      	str	r2, [r6, #0]
 800d69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e09d      	b.n	800d7e4 <_printf_i+0x1e8>
 800d6a8:	6833      	ldr	r3, [r6, #0]
 800d6aa:	6820      	ldr	r0, [r4, #0]
 800d6ac:	1d19      	adds	r1, r3, #4
 800d6ae:	6031      	str	r1, [r6, #0]
 800d6b0:	0606      	lsls	r6, r0, #24
 800d6b2:	d501      	bpl.n	800d6b8 <_printf_i+0xbc>
 800d6b4:	681d      	ldr	r5, [r3, #0]
 800d6b6:	e003      	b.n	800d6c0 <_printf_i+0xc4>
 800d6b8:	0645      	lsls	r5, r0, #25
 800d6ba:	d5fb      	bpl.n	800d6b4 <_printf_i+0xb8>
 800d6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6c0:	2d00      	cmp	r5, #0
 800d6c2:	da03      	bge.n	800d6cc <_printf_i+0xd0>
 800d6c4:	232d      	movs	r3, #45	@ 0x2d
 800d6c6:	426d      	negs	r5, r5
 800d6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6cc:	4859      	ldr	r0, [pc, #356]	@ (800d834 <_printf_i+0x238>)
 800d6ce:	230a      	movs	r3, #10
 800d6d0:	e011      	b.n	800d6f6 <_printf_i+0xfa>
 800d6d2:	6821      	ldr	r1, [r4, #0]
 800d6d4:	6833      	ldr	r3, [r6, #0]
 800d6d6:	0608      	lsls	r0, r1, #24
 800d6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d6dc:	d402      	bmi.n	800d6e4 <_printf_i+0xe8>
 800d6de:	0649      	lsls	r1, r1, #25
 800d6e0:	bf48      	it	mi
 800d6e2:	b2ad      	uxthmi	r5, r5
 800d6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d6e6:	4853      	ldr	r0, [pc, #332]	@ (800d834 <_printf_i+0x238>)
 800d6e8:	6033      	str	r3, [r6, #0]
 800d6ea:	bf14      	ite	ne
 800d6ec:	230a      	movne	r3, #10
 800d6ee:	2308      	moveq	r3, #8
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6f6:	6866      	ldr	r6, [r4, #4]
 800d6f8:	60a6      	str	r6, [r4, #8]
 800d6fa:	2e00      	cmp	r6, #0
 800d6fc:	bfa2      	ittt	ge
 800d6fe:	6821      	ldrge	r1, [r4, #0]
 800d700:	f021 0104 	bicge.w	r1, r1, #4
 800d704:	6021      	strge	r1, [r4, #0]
 800d706:	b90d      	cbnz	r5, 800d70c <_printf_i+0x110>
 800d708:	2e00      	cmp	r6, #0
 800d70a:	d04b      	beq.n	800d7a4 <_printf_i+0x1a8>
 800d70c:	4616      	mov	r6, r2
 800d70e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d712:	fb03 5711 	mls	r7, r3, r1, r5
 800d716:	5dc7      	ldrb	r7, [r0, r7]
 800d718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d71c:	462f      	mov	r7, r5
 800d71e:	42bb      	cmp	r3, r7
 800d720:	460d      	mov	r5, r1
 800d722:	d9f4      	bls.n	800d70e <_printf_i+0x112>
 800d724:	2b08      	cmp	r3, #8
 800d726:	d10b      	bne.n	800d740 <_printf_i+0x144>
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	07df      	lsls	r7, r3, #31
 800d72c:	d508      	bpl.n	800d740 <_printf_i+0x144>
 800d72e:	6923      	ldr	r3, [r4, #16]
 800d730:	6861      	ldr	r1, [r4, #4]
 800d732:	4299      	cmp	r1, r3
 800d734:	bfde      	ittt	le
 800d736:	2330      	movle	r3, #48	@ 0x30
 800d738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d73c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d740:	1b92      	subs	r2, r2, r6
 800d742:	6122      	str	r2, [r4, #16]
 800d744:	f8cd a000 	str.w	sl, [sp]
 800d748:	464b      	mov	r3, r9
 800d74a:	aa03      	add	r2, sp, #12
 800d74c:	4621      	mov	r1, r4
 800d74e:	4640      	mov	r0, r8
 800d750:	f7ff fee6 	bl	800d520 <_printf_common>
 800d754:	3001      	adds	r0, #1
 800d756:	d14a      	bne.n	800d7ee <_printf_i+0x1f2>
 800d758:	f04f 30ff 	mov.w	r0, #4294967295
 800d75c:	b004      	add	sp, #16
 800d75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	f043 0320 	orr.w	r3, r3, #32
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	4833      	ldr	r0, [pc, #204]	@ (800d838 <_printf_i+0x23c>)
 800d76c:	2778      	movs	r7, #120	@ 0x78
 800d76e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	6831      	ldr	r1, [r6, #0]
 800d776:	061f      	lsls	r7, r3, #24
 800d778:	f851 5b04 	ldr.w	r5, [r1], #4
 800d77c:	d402      	bmi.n	800d784 <_printf_i+0x188>
 800d77e:	065f      	lsls	r7, r3, #25
 800d780:	bf48      	it	mi
 800d782:	b2ad      	uxthmi	r5, r5
 800d784:	6031      	str	r1, [r6, #0]
 800d786:	07d9      	lsls	r1, r3, #31
 800d788:	bf44      	itt	mi
 800d78a:	f043 0320 	orrmi.w	r3, r3, #32
 800d78e:	6023      	strmi	r3, [r4, #0]
 800d790:	b11d      	cbz	r5, 800d79a <_printf_i+0x19e>
 800d792:	2310      	movs	r3, #16
 800d794:	e7ac      	b.n	800d6f0 <_printf_i+0xf4>
 800d796:	4827      	ldr	r0, [pc, #156]	@ (800d834 <_printf_i+0x238>)
 800d798:	e7e9      	b.n	800d76e <_printf_i+0x172>
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	f023 0320 	bic.w	r3, r3, #32
 800d7a0:	6023      	str	r3, [r4, #0]
 800d7a2:	e7f6      	b.n	800d792 <_printf_i+0x196>
 800d7a4:	4616      	mov	r6, r2
 800d7a6:	e7bd      	b.n	800d724 <_printf_i+0x128>
 800d7a8:	6833      	ldr	r3, [r6, #0]
 800d7aa:	6825      	ldr	r5, [r4, #0]
 800d7ac:	6961      	ldr	r1, [r4, #20]
 800d7ae:	1d18      	adds	r0, r3, #4
 800d7b0:	6030      	str	r0, [r6, #0]
 800d7b2:	062e      	lsls	r6, r5, #24
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	d501      	bpl.n	800d7bc <_printf_i+0x1c0>
 800d7b8:	6019      	str	r1, [r3, #0]
 800d7ba:	e002      	b.n	800d7c2 <_printf_i+0x1c6>
 800d7bc:	0668      	lsls	r0, r5, #25
 800d7be:	d5fb      	bpl.n	800d7b8 <_printf_i+0x1bc>
 800d7c0:	8019      	strh	r1, [r3, #0]
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6123      	str	r3, [r4, #16]
 800d7c6:	4616      	mov	r6, r2
 800d7c8:	e7bc      	b.n	800d744 <_printf_i+0x148>
 800d7ca:	6833      	ldr	r3, [r6, #0]
 800d7cc:	1d1a      	adds	r2, r3, #4
 800d7ce:	6032      	str	r2, [r6, #0]
 800d7d0:	681e      	ldr	r6, [r3, #0]
 800d7d2:	6862      	ldr	r2, [r4, #4]
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7f2 fd12 	bl	8000200 <memchr>
 800d7dc:	b108      	cbz	r0, 800d7e2 <_printf_i+0x1e6>
 800d7de:	1b80      	subs	r0, r0, r6
 800d7e0:	6060      	str	r0, [r4, #4]
 800d7e2:	6863      	ldr	r3, [r4, #4]
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7ec:	e7aa      	b.n	800d744 <_printf_i+0x148>
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4649      	mov	r1, r9
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	47d0      	blx	sl
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d0ad      	beq.n	800d758 <_printf_i+0x15c>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	079b      	lsls	r3, r3, #30
 800d800:	d413      	bmi.n	800d82a <_printf_i+0x22e>
 800d802:	68e0      	ldr	r0, [r4, #12]
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	4298      	cmp	r0, r3
 800d808:	bfb8      	it	lt
 800d80a:	4618      	movlt	r0, r3
 800d80c:	e7a6      	b.n	800d75c <_printf_i+0x160>
 800d80e:	2301      	movs	r3, #1
 800d810:	4632      	mov	r2, r6
 800d812:	4649      	mov	r1, r9
 800d814:	4640      	mov	r0, r8
 800d816:	47d0      	blx	sl
 800d818:	3001      	adds	r0, #1
 800d81a:	d09d      	beq.n	800d758 <_printf_i+0x15c>
 800d81c:	3501      	adds	r5, #1
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	9903      	ldr	r1, [sp, #12]
 800d822:	1a5b      	subs	r3, r3, r1
 800d824:	42ab      	cmp	r3, r5
 800d826:	dcf2      	bgt.n	800d80e <_printf_i+0x212>
 800d828:	e7eb      	b.n	800d802 <_printf_i+0x206>
 800d82a:	2500      	movs	r5, #0
 800d82c:	f104 0619 	add.w	r6, r4, #25
 800d830:	e7f5      	b.n	800d81e <_printf_i+0x222>
 800d832:	bf00      	nop
 800d834:	08011513 	.word	0x08011513
 800d838:	08011524 	.word	0x08011524

0800d83c <_scanf_float>:
 800d83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d840:	b087      	sub	sp, #28
 800d842:	4617      	mov	r7, r2
 800d844:	9303      	str	r3, [sp, #12]
 800d846:	688b      	ldr	r3, [r1, #8]
 800d848:	1e5a      	subs	r2, r3, #1
 800d84a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d84e:	bf81      	itttt	hi
 800d850:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d854:	eb03 0b05 	addhi.w	fp, r3, r5
 800d858:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d85c:	608b      	strhi	r3, [r1, #8]
 800d85e:	680b      	ldr	r3, [r1, #0]
 800d860:	460a      	mov	r2, r1
 800d862:	f04f 0500 	mov.w	r5, #0
 800d866:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d86a:	f842 3b1c 	str.w	r3, [r2], #28
 800d86e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d872:	4680      	mov	r8, r0
 800d874:	460c      	mov	r4, r1
 800d876:	bf98      	it	ls
 800d878:	f04f 0b00 	movls.w	fp, #0
 800d87c:	9201      	str	r2, [sp, #4]
 800d87e:	4616      	mov	r6, r2
 800d880:	46aa      	mov	sl, r5
 800d882:	46a9      	mov	r9, r5
 800d884:	9502      	str	r5, [sp, #8]
 800d886:	68a2      	ldr	r2, [r4, #8]
 800d888:	b152      	cbz	r2, 800d8a0 <_scanf_float+0x64>
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b4e      	cmp	r3, #78	@ 0x4e
 800d890:	d864      	bhi.n	800d95c <_scanf_float+0x120>
 800d892:	2b40      	cmp	r3, #64	@ 0x40
 800d894:	d83c      	bhi.n	800d910 <_scanf_float+0xd4>
 800d896:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d89a:	b2c8      	uxtb	r0, r1
 800d89c:	280e      	cmp	r0, #14
 800d89e:	d93a      	bls.n	800d916 <_scanf_float+0xda>
 800d8a0:	f1b9 0f00 	cmp.w	r9, #0
 800d8a4:	d003      	beq.n	800d8ae <_scanf_float+0x72>
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8b2:	f1ba 0f01 	cmp.w	sl, #1
 800d8b6:	f200 8117 	bhi.w	800dae8 <_scanf_float+0x2ac>
 800d8ba:	9b01      	ldr	r3, [sp, #4]
 800d8bc:	429e      	cmp	r6, r3
 800d8be:	f200 8108 	bhi.w	800dad2 <_scanf_float+0x296>
 800d8c2:	2001      	movs	r0, #1
 800d8c4:	b007      	add	sp, #28
 800d8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d8ce:	2a0d      	cmp	r2, #13
 800d8d0:	d8e6      	bhi.n	800d8a0 <_scanf_float+0x64>
 800d8d2:	a101      	add	r1, pc, #4	@ (adr r1, 800d8d8 <_scanf_float+0x9c>)
 800d8d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d8d8:	0800da1f 	.word	0x0800da1f
 800d8dc:	0800d8a1 	.word	0x0800d8a1
 800d8e0:	0800d8a1 	.word	0x0800d8a1
 800d8e4:	0800d8a1 	.word	0x0800d8a1
 800d8e8:	0800da7f 	.word	0x0800da7f
 800d8ec:	0800da57 	.word	0x0800da57
 800d8f0:	0800d8a1 	.word	0x0800d8a1
 800d8f4:	0800d8a1 	.word	0x0800d8a1
 800d8f8:	0800da2d 	.word	0x0800da2d
 800d8fc:	0800d8a1 	.word	0x0800d8a1
 800d900:	0800d8a1 	.word	0x0800d8a1
 800d904:	0800d8a1 	.word	0x0800d8a1
 800d908:	0800d8a1 	.word	0x0800d8a1
 800d90c:	0800d9e5 	.word	0x0800d9e5
 800d910:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d914:	e7db      	b.n	800d8ce <_scanf_float+0x92>
 800d916:	290e      	cmp	r1, #14
 800d918:	d8c2      	bhi.n	800d8a0 <_scanf_float+0x64>
 800d91a:	a001      	add	r0, pc, #4	@ (adr r0, 800d920 <_scanf_float+0xe4>)
 800d91c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d920:	0800d9d5 	.word	0x0800d9d5
 800d924:	0800d8a1 	.word	0x0800d8a1
 800d928:	0800d9d5 	.word	0x0800d9d5
 800d92c:	0800da6b 	.word	0x0800da6b
 800d930:	0800d8a1 	.word	0x0800d8a1
 800d934:	0800d97d 	.word	0x0800d97d
 800d938:	0800d9bb 	.word	0x0800d9bb
 800d93c:	0800d9bb 	.word	0x0800d9bb
 800d940:	0800d9bb 	.word	0x0800d9bb
 800d944:	0800d9bb 	.word	0x0800d9bb
 800d948:	0800d9bb 	.word	0x0800d9bb
 800d94c:	0800d9bb 	.word	0x0800d9bb
 800d950:	0800d9bb 	.word	0x0800d9bb
 800d954:	0800d9bb 	.word	0x0800d9bb
 800d958:	0800d9bb 	.word	0x0800d9bb
 800d95c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d95e:	d809      	bhi.n	800d974 <_scanf_float+0x138>
 800d960:	2b60      	cmp	r3, #96	@ 0x60
 800d962:	d8b2      	bhi.n	800d8ca <_scanf_float+0x8e>
 800d964:	2b54      	cmp	r3, #84	@ 0x54
 800d966:	d07b      	beq.n	800da60 <_scanf_float+0x224>
 800d968:	2b59      	cmp	r3, #89	@ 0x59
 800d96a:	d199      	bne.n	800d8a0 <_scanf_float+0x64>
 800d96c:	2d07      	cmp	r5, #7
 800d96e:	d197      	bne.n	800d8a0 <_scanf_float+0x64>
 800d970:	2508      	movs	r5, #8
 800d972:	e02c      	b.n	800d9ce <_scanf_float+0x192>
 800d974:	2b74      	cmp	r3, #116	@ 0x74
 800d976:	d073      	beq.n	800da60 <_scanf_float+0x224>
 800d978:	2b79      	cmp	r3, #121	@ 0x79
 800d97a:	e7f6      	b.n	800d96a <_scanf_float+0x12e>
 800d97c:	6821      	ldr	r1, [r4, #0]
 800d97e:	05c8      	lsls	r0, r1, #23
 800d980:	d51b      	bpl.n	800d9ba <_scanf_float+0x17e>
 800d982:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d986:	6021      	str	r1, [r4, #0]
 800d988:	f109 0901 	add.w	r9, r9, #1
 800d98c:	f1bb 0f00 	cmp.w	fp, #0
 800d990:	d003      	beq.n	800d99a <_scanf_float+0x15e>
 800d992:	3201      	adds	r2, #1
 800d994:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d998:	60a2      	str	r2, [r4, #8]
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	60a3      	str	r3, [r4, #8]
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	6123      	str	r3, [r4, #16]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	607b      	str	r3, [r7, #4]
 800d9ae:	f340 8087 	ble.w	800dac0 <_scanf_float+0x284>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	603b      	str	r3, [r7, #0]
 800d9b8:	e765      	b.n	800d886 <_scanf_float+0x4a>
 800d9ba:	eb1a 0105 	adds.w	r1, sl, r5
 800d9be:	f47f af6f 	bne.w	800d8a0 <_scanf_float+0x64>
 800d9c2:	6822      	ldr	r2, [r4, #0]
 800d9c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d9c8:	6022      	str	r2, [r4, #0]
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	468a      	mov	sl, r1
 800d9ce:	f806 3b01 	strb.w	r3, [r6], #1
 800d9d2:	e7e2      	b.n	800d99a <_scanf_float+0x15e>
 800d9d4:	6822      	ldr	r2, [r4, #0]
 800d9d6:	0610      	lsls	r0, r2, #24
 800d9d8:	f57f af62 	bpl.w	800d8a0 <_scanf_float+0x64>
 800d9dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d9e0:	6022      	str	r2, [r4, #0]
 800d9e2:	e7f4      	b.n	800d9ce <_scanf_float+0x192>
 800d9e4:	f1ba 0f00 	cmp.w	sl, #0
 800d9e8:	d10e      	bne.n	800da08 <_scanf_float+0x1cc>
 800d9ea:	f1b9 0f00 	cmp.w	r9, #0
 800d9ee:	d10e      	bne.n	800da0e <_scanf_float+0x1d2>
 800d9f0:	6822      	ldr	r2, [r4, #0]
 800d9f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d9f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d9fa:	d108      	bne.n	800da0e <_scanf_float+0x1d2>
 800d9fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800da00:	6022      	str	r2, [r4, #0]
 800da02:	f04f 0a01 	mov.w	sl, #1
 800da06:	e7e2      	b.n	800d9ce <_scanf_float+0x192>
 800da08:	f1ba 0f02 	cmp.w	sl, #2
 800da0c:	d055      	beq.n	800daba <_scanf_float+0x27e>
 800da0e:	2d01      	cmp	r5, #1
 800da10:	d002      	beq.n	800da18 <_scanf_float+0x1dc>
 800da12:	2d04      	cmp	r5, #4
 800da14:	f47f af44 	bne.w	800d8a0 <_scanf_float+0x64>
 800da18:	3501      	adds	r5, #1
 800da1a:	b2ed      	uxtb	r5, r5
 800da1c:	e7d7      	b.n	800d9ce <_scanf_float+0x192>
 800da1e:	f1ba 0f01 	cmp.w	sl, #1
 800da22:	f47f af3d 	bne.w	800d8a0 <_scanf_float+0x64>
 800da26:	f04f 0a02 	mov.w	sl, #2
 800da2a:	e7d0      	b.n	800d9ce <_scanf_float+0x192>
 800da2c:	b97d      	cbnz	r5, 800da4e <_scanf_float+0x212>
 800da2e:	f1b9 0f00 	cmp.w	r9, #0
 800da32:	f47f af38 	bne.w	800d8a6 <_scanf_float+0x6a>
 800da36:	6822      	ldr	r2, [r4, #0]
 800da38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800da3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800da40:	f040 8108 	bne.w	800dc54 <_scanf_float+0x418>
 800da44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800da48:	6022      	str	r2, [r4, #0]
 800da4a:	2501      	movs	r5, #1
 800da4c:	e7bf      	b.n	800d9ce <_scanf_float+0x192>
 800da4e:	2d03      	cmp	r5, #3
 800da50:	d0e2      	beq.n	800da18 <_scanf_float+0x1dc>
 800da52:	2d05      	cmp	r5, #5
 800da54:	e7de      	b.n	800da14 <_scanf_float+0x1d8>
 800da56:	2d02      	cmp	r5, #2
 800da58:	f47f af22 	bne.w	800d8a0 <_scanf_float+0x64>
 800da5c:	2503      	movs	r5, #3
 800da5e:	e7b6      	b.n	800d9ce <_scanf_float+0x192>
 800da60:	2d06      	cmp	r5, #6
 800da62:	f47f af1d 	bne.w	800d8a0 <_scanf_float+0x64>
 800da66:	2507      	movs	r5, #7
 800da68:	e7b1      	b.n	800d9ce <_scanf_float+0x192>
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	0591      	lsls	r1, r2, #22
 800da6e:	f57f af17 	bpl.w	800d8a0 <_scanf_float+0x64>
 800da72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800da76:	6022      	str	r2, [r4, #0]
 800da78:	f8cd 9008 	str.w	r9, [sp, #8]
 800da7c:	e7a7      	b.n	800d9ce <_scanf_float+0x192>
 800da7e:	6822      	ldr	r2, [r4, #0]
 800da80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800da84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800da88:	d006      	beq.n	800da98 <_scanf_float+0x25c>
 800da8a:	0550      	lsls	r0, r2, #21
 800da8c:	f57f af08 	bpl.w	800d8a0 <_scanf_float+0x64>
 800da90:	f1b9 0f00 	cmp.w	r9, #0
 800da94:	f000 80de 	beq.w	800dc54 <_scanf_float+0x418>
 800da98:	0591      	lsls	r1, r2, #22
 800da9a:	bf58      	it	pl
 800da9c:	9902      	ldrpl	r1, [sp, #8]
 800da9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800daa2:	bf58      	it	pl
 800daa4:	eba9 0101 	subpl.w	r1, r9, r1
 800daa8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800daac:	bf58      	it	pl
 800daae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dab2:	6022      	str	r2, [r4, #0]
 800dab4:	f04f 0900 	mov.w	r9, #0
 800dab8:	e789      	b.n	800d9ce <_scanf_float+0x192>
 800daba:	f04f 0a03 	mov.w	sl, #3
 800dabe:	e786      	b.n	800d9ce <_scanf_float+0x192>
 800dac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dac4:	4639      	mov	r1, r7
 800dac6:	4640      	mov	r0, r8
 800dac8:	4798      	blx	r3
 800daca:	2800      	cmp	r0, #0
 800dacc:	f43f aedb 	beq.w	800d886 <_scanf_float+0x4a>
 800dad0:	e6e6      	b.n	800d8a0 <_scanf_float+0x64>
 800dad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dada:	463a      	mov	r2, r7
 800dadc:	4640      	mov	r0, r8
 800dade:	4798      	blx	r3
 800dae0:	6923      	ldr	r3, [r4, #16]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	e6e8      	b.n	800d8ba <_scanf_float+0x7e>
 800dae8:	1e6b      	subs	r3, r5, #1
 800daea:	2b06      	cmp	r3, #6
 800daec:	d824      	bhi.n	800db38 <_scanf_float+0x2fc>
 800daee:	2d02      	cmp	r5, #2
 800daf0:	d836      	bhi.n	800db60 <_scanf_float+0x324>
 800daf2:	9b01      	ldr	r3, [sp, #4]
 800daf4:	429e      	cmp	r6, r3
 800daf6:	f67f aee4 	bls.w	800d8c2 <_scanf_float+0x86>
 800dafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dafe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db02:	463a      	mov	r2, r7
 800db04:	4640      	mov	r0, r8
 800db06:	4798      	blx	r3
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	e7f0      	b.n	800daf2 <_scanf_float+0x2b6>
 800db10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800db14:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800db18:	463a      	mov	r2, r7
 800db1a:	4640      	mov	r0, r8
 800db1c:	4798      	blx	r3
 800db1e:	6923      	ldr	r3, [r4, #16]
 800db20:	3b01      	subs	r3, #1
 800db22:	6123      	str	r3, [r4, #16]
 800db24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db28:	fa5f fa8a 	uxtb.w	sl, sl
 800db2c:	f1ba 0f02 	cmp.w	sl, #2
 800db30:	d1ee      	bne.n	800db10 <_scanf_float+0x2d4>
 800db32:	3d03      	subs	r5, #3
 800db34:	b2ed      	uxtb	r5, r5
 800db36:	1b76      	subs	r6, r6, r5
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	05da      	lsls	r2, r3, #23
 800db3c:	d530      	bpl.n	800dba0 <_scanf_float+0x364>
 800db3e:	055b      	lsls	r3, r3, #21
 800db40:	d511      	bpl.n	800db66 <_scanf_float+0x32a>
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	429e      	cmp	r6, r3
 800db46:	f67f aebc 	bls.w	800d8c2 <_scanf_float+0x86>
 800db4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800db4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db52:	463a      	mov	r2, r7
 800db54:	4640      	mov	r0, r8
 800db56:	4798      	blx	r3
 800db58:	6923      	ldr	r3, [r4, #16]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	6123      	str	r3, [r4, #16]
 800db5e:	e7f0      	b.n	800db42 <_scanf_float+0x306>
 800db60:	46aa      	mov	sl, r5
 800db62:	46b3      	mov	fp, r6
 800db64:	e7de      	b.n	800db24 <_scanf_float+0x2e8>
 800db66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	2965      	cmp	r1, #101	@ 0x65
 800db6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800db72:	f106 35ff 	add.w	r5, r6, #4294967295
 800db76:	6123      	str	r3, [r4, #16]
 800db78:	d00c      	beq.n	800db94 <_scanf_float+0x358>
 800db7a:	2945      	cmp	r1, #69	@ 0x45
 800db7c:	d00a      	beq.n	800db94 <_scanf_float+0x358>
 800db7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800db82:	463a      	mov	r2, r7
 800db84:	4640      	mov	r0, r8
 800db86:	4798      	blx	r3
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800db8e:	3b01      	subs	r3, #1
 800db90:	1eb5      	subs	r5, r6, #2
 800db92:	6123      	str	r3, [r4, #16]
 800db94:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800db98:	463a      	mov	r2, r7
 800db9a:	4640      	mov	r0, r8
 800db9c:	4798      	blx	r3
 800db9e:	462e      	mov	r6, r5
 800dba0:	6822      	ldr	r2, [r4, #0]
 800dba2:	f012 0210 	ands.w	r2, r2, #16
 800dba6:	d001      	beq.n	800dbac <_scanf_float+0x370>
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e68b      	b.n	800d8c4 <_scanf_float+0x88>
 800dbac:	7032      	strb	r2, [r6, #0]
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dbb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbb8:	d11c      	bne.n	800dbf4 <_scanf_float+0x3b8>
 800dbba:	9b02      	ldr	r3, [sp, #8]
 800dbbc:	454b      	cmp	r3, r9
 800dbbe:	eba3 0209 	sub.w	r2, r3, r9
 800dbc2:	d123      	bne.n	800dc0c <_scanf_float+0x3d0>
 800dbc4:	9901      	ldr	r1, [sp, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	4640      	mov	r0, r8
 800dbca:	f7ff f95d 	bl	800ce88 <_strtod_r>
 800dbce:	9b03      	ldr	r3, [sp, #12]
 800dbd0:	6821      	ldr	r1, [r4, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f011 0f02 	tst.w	r1, #2
 800dbd8:	ec57 6b10 	vmov	r6, r7, d0
 800dbdc:	f103 0204 	add.w	r2, r3, #4
 800dbe0:	d01f      	beq.n	800dc22 <_scanf_float+0x3e6>
 800dbe2:	9903      	ldr	r1, [sp, #12]
 800dbe4:	600a      	str	r2, [r1, #0]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	e9c3 6700 	strd	r6, r7, [r3]
 800dbec:	68e3      	ldr	r3, [r4, #12]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	60e3      	str	r3, [r4, #12]
 800dbf2:	e7d9      	b.n	800dba8 <_scanf_float+0x36c>
 800dbf4:	9b04      	ldr	r3, [sp, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0e4      	beq.n	800dbc4 <_scanf_float+0x388>
 800dbfa:	9905      	ldr	r1, [sp, #20]
 800dbfc:	230a      	movs	r3, #10
 800dbfe:	3101      	adds	r1, #1
 800dc00:	4640      	mov	r0, r8
 800dc02:	f7ff f9c1 	bl	800cf88 <_strtol_r>
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	9e05      	ldr	r6, [sp, #20]
 800dc0a:	1ac2      	subs	r2, r0, r3
 800dc0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800dc10:	429e      	cmp	r6, r3
 800dc12:	bf28      	it	cs
 800dc14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800dc18:	4910      	ldr	r1, [pc, #64]	@ (800dc5c <_scanf_float+0x420>)
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f000 f954 	bl	800dec8 <siprintf>
 800dc20:	e7d0      	b.n	800dbc4 <_scanf_float+0x388>
 800dc22:	f011 0f04 	tst.w	r1, #4
 800dc26:	9903      	ldr	r1, [sp, #12]
 800dc28:	600a      	str	r2, [r1, #0]
 800dc2a:	d1dc      	bne.n	800dbe6 <_scanf_float+0x3aa>
 800dc2c:	681d      	ldr	r5, [r3, #0]
 800dc2e:	4632      	mov	r2, r6
 800dc30:	463b      	mov	r3, r7
 800dc32:	4630      	mov	r0, r6
 800dc34:	4639      	mov	r1, r7
 800dc36:	f7f2 ff91 	bl	8000b5c <__aeabi_dcmpun>
 800dc3a:	b128      	cbz	r0, 800dc48 <_scanf_float+0x40c>
 800dc3c:	4808      	ldr	r0, [pc, #32]	@ (800dc60 <_scanf_float+0x424>)
 800dc3e:	f000 fb8b 	bl	800e358 <nanf>
 800dc42:	ed85 0a00 	vstr	s0, [r5]
 800dc46:	e7d1      	b.n	800dbec <_scanf_float+0x3b0>
 800dc48:	4630      	mov	r0, r6
 800dc4a:	4639      	mov	r1, r7
 800dc4c:	f7f2 ffe4 	bl	8000c18 <__aeabi_d2f>
 800dc50:	6028      	str	r0, [r5, #0]
 800dc52:	e7cb      	b.n	800dbec <_scanf_float+0x3b0>
 800dc54:	f04f 0900 	mov.w	r9, #0
 800dc58:	e629      	b.n	800d8ae <_scanf_float+0x72>
 800dc5a:	bf00      	nop
 800dc5c:	08011535 	.word	0x08011535
 800dc60:	080115ee 	.word	0x080115ee

0800dc64 <std>:
 800dc64:	2300      	movs	r3, #0
 800dc66:	b510      	push	{r4, lr}
 800dc68:	4604      	mov	r4, r0
 800dc6a:	e9c0 3300 	strd	r3, r3, [r0]
 800dc6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc72:	6083      	str	r3, [r0, #8]
 800dc74:	8181      	strh	r1, [r0, #12]
 800dc76:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc78:	81c2      	strh	r2, [r0, #14]
 800dc7a:	6183      	str	r3, [r0, #24]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	2208      	movs	r2, #8
 800dc80:	305c      	adds	r0, #92	@ 0x5c
 800dc82:	f000 fa29 	bl	800e0d8 <memset>
 800dc86:	4b0d      	ldr	r3, [pc, #52]	@ (800dcbc <std+0x58>)
 800dc88:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc0 <std+0x5c>)
 800dc8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc4 <std+0x60>)
 800dc90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc92:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc8 <std+0x64>)
 800dc94:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc96:	4b0d      	ldr	r3, [pc, #52]	@ (800dccc <std+0x68>)
 800dc98:	6224      	str	r4, [r4, #32]
 800dc9a:	429c      	cmp	r4, r3
 800dc9c:	d006      	beq.n	800dcac <std+0x48>
 800dc9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dca2:	4294      	cmp	r4, r2
 800dca4:	d002      	beq.n	800dcac <std+0x48>
 800dca6:	33d0      	adds	r3, #208	@ 0xd0
 800dca8:	429c      	cmp	r4, r3
 800dcaa:	d105      	bne.n	800dcb8 <std+0x54>
 800dcac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcb4:	f000 bb34 	b.w	800e320 <__retarget_lock_init_recursive>
 800dcb8:	bd10      	pop	{r4, pc}
 800dcba:	bf00      	nop
 800dcbc:	0800df09 	.word	0x0800df09
 800dcc0:	0800df2b 	.word	0x0800df2b
 800dcc4:	0800df63 	.word	0x0800df63
 800dcc8:	0800df87 	.word	0x0800df87
 800dccc:	2000115c 	.word	0x2000115c

0800dcd0 <stdio_exit_handler>:
 800dcd0:	4a02      	ldr	r2, [pc, #8]	@ (800dcdc <stdio_exit_handler+0xc>)
 800dcd2:	4903      	ldr	r1, [pc, #12]	@ (800dce0 <stdio_exit_handler+0x10>)
 800dcd4:	4803      	ldr	r0, [pc, #12]	@ (800dce4 <stdio_exit_handler+0x14>)
 800dcd6:	f000 b869 	b.w	800ddac <_fwalk_sglue>
 800dcda:	bf00      	nop
 800dcdc:	20000040 	.word	0x20000040
 800dce0:	0801071d 	.word	0x0801071d
 800dce4:	200001bc 	.word	0x200001bc

0800dce8 <cleanup_stdio>:
 800dce8:	6841      	ldr	r1, [r0, #4]
 800dcea:	4b0c      	ldr	r3, [pc, #48]	@ (800dd1c <cleanup_stdio+0x34>)
 800dcec:	4299      	cmp	r1, r3
 800dcee:	b510      	push	{r4, lr}
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	d001      	beq.n	800dcf8 <cleanup_stdio+0x10>
 800dcf4:	f002 fd12 	bl	801071c <_fflush_r>
 800dcf8:	68a1      	ldr	r1, [r4, #8]
 800dcfa:	4b09      	ldr	r3, [pc, #36]	@ (800dd20 <cleanup_stdio+0x38>)
 800dcfc:	4299      	cmp	r1, r3
 800dcfe:	d002      	beq.n	800dd06 <cleanup_stdio+0x1e>
 800dd00:	4620      	mov	r0, r4
 800dd02:	f002 fd0b 	bl	801071c <_fflush_r>
 800dd06:	68e1      	ldr	r1, [r4, #12]
 800dd08:	4b06      	ldr	r3, [pc, #24]	@ (800dd24 <cleanup_stdio+0x3c>)
 800dd0a:	4299      	cmp	r1, r3
 800dd0c:	d004      	beq.n	800dd18 <cleanup_stdio+0x30>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd14:	f002 bd02 	b.w	801071c <_fflush_r>
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	bf00      	nop
 800dd1c:	2000115c 	.word	0x2000115c
 800dd20:	200011c4 	.word	0x200011c4
 800dd24:	2000122c 	.word	0x2000122c

0800dd28 <global_stdio_init.part.0>:
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd58 <global_stdio_init.part.0+0x30>)
 800dd2c:	4c0b      	ldr	r4, [pc, #44]	@ (800dd5c <global_stdio_init.part.0+0x34>)
 800dd2e:	4a0c      	ldr	r2, [pc, #48]	@ (800dd60 <global_stdio_init.part.0+0x38>)
 800dd30:	601a      	str	r2, [r3, #0]
 800dd32:	4620      	mov	r0, r4
 800dd34:	2200      	movs	r2, #0
 800dd36:	2104      	movs	r1, #4
 800dd38:	f7ff ff94 	bl	800dc64 <std>
 800dd3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd40:	2201      	movs	r2, #1
 800dd42:	2109      	movs	r1, #9
 800dd44:	f7ff ff8e 	bl	800dc64 <std>
 800dd48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd52:	2112      	movs	r1, #18
 800dd54:	f7ff bf86 	b.w	800dc64 <std>
 800dd58:	20001294 	.word	0x20001294
 800dd5c:	2000115c 	.word	0x2000115c
 800dd60:	0800dcd1 	.word	0x0800dcd1

0800dd64 <__sfp_lock_acquire>:
 800dd64:	4801      	ldr	r0, [pc, #4]	@ (800dd6c <__sfp_lock_acquire+0x8>)
 800dd66:	f000 badc 	b.w	800e322 <__retarget_lock_acquire_recursive>
 800dd6a:	bf00      	nop
 800dd6c:	2000129d 	.word	0x2000129d

0800dd70 <__sfp_lock_release>:
 800dd70:	4801      	ldr	r0, [pc, #4]	@ (800dd78 <__sfp_lock_release+0x8>)
 800dd72:	f000 bad7 	b.w	800e324 <__retarget_lock_release_recursive>
 800dd76:	bf00      	nop
 800dd78:	2000129d 	.word	0x2000129d

0800dd7c <__sinit>:
 800dd7c:	b510      	push	{r4, lr}
 800dd7e:	4604      	mov	r4, r0
 800dd80:	f7ff fff0 	bl	800dd64 <__sfp_lock_acquire>
 800dd84:	6a23      	ldr	r3, [r4, #32]
 800dd86:	b11b      	cbz	r3, 800dd90 <__sinit+0x14>
 800dd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd8c:	f7ff bff0 	b.w	800dd70 <__sfp_lock_release>
 800dd90:	4b04      	ldr	r3, [pc, #16]	@ (800dda4 <__sinit+0x28>)
 800dd92:	6223      	str	r3, [r4, #32]
 800dd94:	4b04      	ldr	r3, [pc, #16]	@ (800dda8 <__sinit+0x2c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1f5      	bne.n	800dd88 <__sinit+0xc>
 800dd9c:	f7ff ffc4 	bl	800dd28 <global_stdio_init.part.0>
 800dda0:	e7f2      	b.n	800dd88 <__sinit+0xc>
 800dda2:	bf00      	nop
 800dda4:	0800dce9 	.word	0x0800dce9
 800dda8:	20001294 	.word	0x20001294

0800ddac <_fwalk_sglue>:
 800ddac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb0:	4607      	mov	r7, r0
 800ddb2:	4688      	mov	r8, r1
 800ddb4:	4614      	mov	r4, r2
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddbc:	f1b9 0901 	subs.w	r9, r9, #1
 800ddc0:	d505      	bpl.n	800ddce <_fwalk_sglue+0x22>
 800ddc2:	6824      	ldr	r4, [r4, #0]
 800ddc4:	2c00      	cmp	r4, #0
 800ddc6:	d1f7      	bne.n	800ddb8 <_fwalk_sglue+0xc>
 800ddc8:	4630      	mov	r0, r6
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	89ab      	ldrh	r3, [r5, #12]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d907      	bls.n	800dde4 <_fwalk_sglue+0x38>
 800ddd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	d003      	beq.n	800dde4 <_fwalk_sglue+0x38>
 800dddc:	4629      	mov	r1, r5
 800ddde:	4638      	mov	r0, r7
 800dde0:	47c0      	blx	r8
 800dde2:	4306      	orrs	r6, r0
 800dde4:	3568      	adds	r5, #104	@ 0x68
 800dde6:	e7e9      	b.n	800ddbc <_fwalk_sglue+0x10>

0800dde8 <iprintf>:
 800dde8:	b40f      	push	{r0, r1, r2, r3}
 800ddea:	b507      	push	{r0, r1, r2, lr}
 800ddec:	4906      	ldr	r1, [pc, #24]	@ (800de08 <iprintf+0x20>)
 800ddee:	ab04      	add	r3, sp, #16
 800ddf0:	6808      	ldr	r0, [r1, #0]
 800ddf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddf6:	6881      	ldr	r1, [r0, #8]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	f002 faf3 	bl	80103e4 <_vfiprintf_r>
 800ddfe:	b003      	add	sp, #12
 800de00:	f85d eb04 	ldr.w	lr, [sp], #4
 800de04:	b004      	add	sp, #16
 800de06:	4770      	bx	lr
 800de08:	200001b8 	.word	0x200001b8

0800de0c <_puts_r>:
 800de0c:	6a03      	ldr	r3, [r0, #32]
 800de0e:	b570      	push	{r4, r5, r6, lr}
 800de10:	6884      	ldr	r4, [r0, #8]
 800de12:	4605      	mov	r5, r0
 800de14:	460e      	mov	r6, r1
 800de16:	b90b      	cbnz	r3, 800de1c <_puts_r+0x10>
 800de18:	f7ff ffb0 	bl	800dd7c <__sinit>
 800de1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de1e:	07db      	lsls	r3, r3, #31
 800de20:	d405      	bmi.n	800de2e <_puts_r+0x22>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	0598      	lsls	r0, r3, #22
 800de26:	d402      	bmi.n	800de2e <_puts_r+0x22>
 800de28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de2a:	f000 fa7a 	bl	800e322 <__retarget_lock_acquire_recursive>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	0719      	lsls	r1, r3, #28
 800de32:	d502      	bpl.n	800de3a <_puts_r+0x2e>
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d135      	bne.n	800dea6 <_puts_r+0x9a>
 800de3a:	4621      	mov	r1, r4
 800de3c:	4628      	mov	r0, r5
 800de3e:	f000 f8e5 	bl	800e00c <__swsetup_r>
 800de42:	b380      	cbz	r0, 800dea6 <_puts_r+0x9a>
 800de44:	f04f 35ff 	mov.w	r5, #4294967295
 800de48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de4a:	07da      	lsls	r2, r3, #31
 800de4c:	d405      	bmi.n	800de5a <_puts_r+0x4e>
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	059b      	lsls	r3, r3, #22
 800de52:	d402      	bmi.n	800de5a <_puts_r+0x4e>
 800de54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de56:	f000 fa65 	bl	800e324 <__retarget_lock_release_recursive>
 800de5a:	4628      	mov	r0, r5
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	2b00      	cmp	r3, #0
 800de60:	da04      	bge.n	800de6c <_puts_r+0x60>
 800de62:	69a2      	ldr	r2, [r4, #24]
 800de64:	429a      	cmp	r2, r3
 800de66:	dc17      	bgt.n	800de98 <_puts_r+0x8c>
 800de68:	290a      	cmp	r1, #10
 800de6a:	d015      	beq.n	800de98 <_puts_r+0x8c>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	6022      	str	r2, [r4, #0]
 800de72:	7019      	strb	r1, [r3, #0]
 800de74:	68a3      	ldr	r3, [r4, #8]
 800de76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de7a:	3b01      	subs	r3, #1
 800de7c:	60a3      	str	r3, [r4, #8]
 800de7e:	2900      	cmp	r1, #0
 800de80:	d1ed      	bne.n	800de5e <_puts_r+0x52>
 800de82:	2b00      	cmp	r3, #0
 800de84:	da11      	bge.n	800deaa <_puts_r+0x9e>
 800de86:	4622      	mov	r2, r4
 800de88:	210a      	movs	r1, #10
 800de8a:	4628      	mov	r0, r5
 800de8c:	f000 f87f 	bl	800df8e <__swbuf_r>
 800de90:	3001      	adds	r0, #1
 800de92:	d0d7      	beq.n	800de44 <_puts_r+0x38>
 800de94:	250a      	movs	r5, #10
 800de96:	e7d7      	b.n	800de48 <_puts_r+0x3c>
 800de98:	4622      	mov	r2, r4
 800de9a:	4628      	mov	r0, r5
 800de9c:	f000 f877 	bl	800df8e <__swbuf_r>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d1e7      	bne.n	800de74 <_puts_r+0x68>
 800dea4:	e7ce      	b.n	800de44 <_puts_r+0x38>
 800dea6:	3e01      	subs	r6, #1
 800dea8:	e7e4      	b.n	800de74 <_puts_r+0x68>
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	1c5a      	adds	r2, r3, #1
 800deae:	6022      	str	r2, [r4, #0]
 800deb0:	220a      	movs	r2, #10
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	e7ee      	b.n	800de94 <_puts_r+0x88>
	...

0800deb8 <puts>:
 800deb8:	4b02      	ldr	r3, [pc, #8]	@ (800dec4 <puts+0xc>)
 800deba:	4601      	mov	r1, r0
 800debc:	6818      	ldr	r0, [r3, #0]
 800debe:	f7ff bfa5 	b.w	800de0c <_puts_r>
 800dec2:	bf00      	nop
 800dec4:	200001b8 	.word	0x200001b8

0800dec8 <siprintf>:
 800dec8:	b40e      	push	{r1, r2, r3}
 800deca:	b500      	push	{lr}
 800decc:	b09c      	sub	sp, #112	@ 0x70
 800dece:	ab1d      	add	r3, sp, #116	@ 0x74
 800ded0:	9002      	str	r0, [sp, #8]
 800ded2:	9006      	str	r0, [sp, #24]
 800ded4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ded8:	4809      	ldr	r0, [pc, #36]	@ (800df00 <siprintf+0x38>)
 800deda:	9107      	str	r1, [sp, #28]
 800dedc:	9104      	str	r1, [sp, #16]
 800dede:	4909      	ldr	r1, [pc, #36]	@ (800df04 <siprintf+0x3c>)
 800dee0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee4:	9105      	str	r1, [sp, #20]
 800dee6:	6800      	ldr	r0, [r0, #0]
 800dee8:	9301      	str	r3, [sp, #4]
 800deea:	a902      	add	r1, sp, #8
 800deec:	f002 f954 	bl	8010198 <_svfiprintf_r>
 800def0:	9b02      	ldr	r3, [sp, #8]
 800def2:	2200      	movs	r2, #0
 800def4:	701a      	strb	r2, [r3, #0]
 800def6:	b01c      	add	sp, #112	@ 0x70
 800def8:	f85d eb04 	ldr.w	lr, [sp], #4
 800defc:	b003      	add	sp, #12
 800defe:	4770      	bx	lr
 800df00:	200001b8 	.word	0x200001b8
 800df04:	ffff0208 	.word	0xffff0208

0800df08 <__sread>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	460c      	mov	r4, r1
 800df0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df10:	f000 f9a8 	bl	800e264 <_read_r>
 800df14:	2800      	cmp	r0, #0
 800df16:	bfab      	itete	ge
 800df18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df1a:	89a3      	ldrhlt	r3, [r4, #12]
 800df1c:	181b      	addge	r3, r3, r0
 800df1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df22:	bfac      	ite	ge
 800df24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df26:	81a3      	strhlt	r3, [r4, #12]
 800df28:	bd10      	pop	{r4, pc}

0800df2a <__swrite>:
 800df2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2e:	461f      	mov	r7, r3
 800df30:	898b      	ldrh	r3, [r1, #12]
 800df32:	05db      	lsls	r3, r3, #23
 800df34:	4605      	mov	r5, r0
 800df36:	460c      	mov	r4, r1
 800df38:	4616      	mov	r6, r2
 800df3a:	d505      	bpl.n	800df48 <__swrite+0x1e>
 800df3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df40:	2302      	movs	r3, #2
 800df42:	2200      	movs	r2, #0
 800df44:	f000 f97c 	bl	800e240 <_lseek_r>
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df52:	81a3      	strh	r3, [r4, #12]
 800df54:	4632      	mov	r2, r6
 800df56:	463b      	mov	r3, r7
 800df58:	4628      	mov	r0, r5
 800df5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df5e:	f000 b9a3 	b.w	800e2a8 <_write_r>

0800df62 <__sseek>:
 800df62:	b510      	push	{r4, lr}
 800df64:	460c      	mov	r4, r1
 800df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6a:	f000 f969 	bl	800e240 <_lseek_r>
 800df6e:	1c43      	adds	r3, r0, #1
 800df70:	89a3      	ldrh	r3, [r4, #12]
 800df72:	bf15      	itete	ne
 800df74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df7e:	81a3      	strheq	r3, [r4, #12]
 800df80:	bf18      	it	ne
 800df82:	81a3      	strhne	r3, [r4, #12]
 800df84:	bd10      	pop	{r4, pc}

0800df86 <__sclose>:
 800df86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df8a:	f000 b949 	b.w	800e220 <_close_r>

0800df8e <__swbuf_r>:
 800df8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df90:	460e      	mov	r6, r1
 800df92:	4614      	mov	r4, r2
 800df94:	4605      	mov	r5, r0
 800df96:	b118      	cbz	r0, 800dfa0 <__swbuf_r+0x12>
 800df98:	6a03      	ldr	r3, [r0, #32]
 800df9a:	b90b      	cbnz	r3, 800dfa0 <__swbuf_r+0x12>
 800df9c:	f7ff feee 	bl	800dd7c <__sinit>
 800dfa0:	69a3      	ldr	r3, [r4, #24]
 800dfa2:	60a3      	str	r3, [r4, #8]
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	071a      	lsls	r2, r3, #28
 800dfa8:	d501      	bpl.n	800dfae <__swbuf_r+0x20>
 800dfaa:	6923      	ldr	r3, [r4, #16]
 800dfac:	b943      	cbnz	r3, 800dfc0 <__swbuf_r+0x32>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f000 f82b 	bl	800e00c <__swsetup_r>
 800dfb6:	b118      	cbz	r0, 800dfc0 <__swbuf_r+0x32>
 800dfb8:	f04f 37ff 	mov.w	r7, #4294967295
 800dfbc:	4638      	mov	r0, r7
 800dfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	6922      	ldr	r2, [r4, #16]
 800dfc4:	1a98      	subs	r0, r3, r2
 800dfc6:	6963      	ldr	r3, [r4, #20]
 800dfc8:	b2f6      	uxtb	r6, r6
 800dfca:	4283      	cmp	r3, r0
 800dfcc:	4637      	mov	r7, r6
 800dfce:	dc05      	bgt.n	800dfdc <__swbuf_r+0x4e>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f002 fba2 	bl	801071c <_fflush_r>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1ed      	bne.n	800dfb8 <__swbuf_r+0x2a>
 800dfdc:	68a3      	ldr	r3, [r4, #8]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	60a3      	str	r3, [r4, #8]
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	6022      	str	r2, [r4, #0]
 800dfe8:	701e      	strb	r6, [r3, #0]
 800dfea:	6962      	ldr	r2, [r4, #20]
 800dfec:	1c43      	adds	r3, r0, #1
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d004      	beq.n	800dffc <__swbuf_r+0x6e>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	07db      	lsls	r3, r3, #31
 800dff6:	d5e1      	bpl.n	800dfbc <__swbuf_r+0x2e>
 800dff8:	2e0a      	cmp	r6, #10
 800dffa:	d1df      	bne.n	800dfbc <__swbuf_r+0x2e>
 800dffc:	4621      	mov	r1, r4
 800dffe:	4628      	mov	r0, r5
 800e000:	f002 fb8c 	bl	801071c <_fflush_r>
 800e004:	2800      	cmp	r0, #0
 800e006:	d0d9      	beq.n	800dfbc <__swbuf_r+0x2e>
 800e008:	e7d6      	b.n	800dfb8 <__swbuf_r+0x2a>
	...

0800e00c <__swsetup_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4b29      	ldr	r3, [pc, #164]	@ (800e0b4 <__swsetup_r+0xa8>)
 800e010:	4605      	mov	r5, r0
 800e012:	6818      	ldr	r0, [r3, #0]
 800e014:	460c      	mov	r4, r1
 800e016:	b118      	cbz	r0, 800e020 <__swsetup_r+0x14>
 800e018:	6a03      	ldr	r3, [r0, #32]
 800e01a:	b90b      	cbnz	r3, 800e020 <__swsetup_r+0x14>
 800e01c:	f7ff feae 	bl	800dd7c <__sinit>
 800e020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e024:	0719      	lsls	r1, r3, #28
 800e026:	d422      	bmi.n	800e06e <__swsetup_r+0x62>
 800e028:	06da      	lsls	r2, r3, #27
 800e02a:	d407      	bmi.n	800e03c <__swsetup_r+0x30>
 800e02c:	2209      	movs	r2, #9
 800e02e:	602a      	str	r2, [r5, #0]
 800e030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e034:	81a3      	strh	r3, [r4, #12]
 800e036:	f04f 30ff 	mov.w	r0, #4294967295
 800e03a:	e033      	b.n	800e0a4 <__swsetup_r+0x98>
 800e03c:	0758      	lsls	r0, r3, #29
 800e03e:	d512      	bpl.n	800e066 <__swsetup_r+0x5a>
 800e040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e042:	b141      	cbz	r1, 800e056 <__swsetup_r+0x4a>
 800e044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e048:	4299      	cmp	r1, r3
 800e04a:	d002      	beq.n	800e052 <__swsetup_r+0x46>
 800e04c:	4628      	mov	r0, r5
 800e04e:	f000 fff3 	bl	800f038 <_free_r>
 800e052:	2300      	movs	r3, #0
 800e054:	6363      	str	r3, [r4, #52]	@ 0x34
 800e056:	89a3      	ldrh	r3, [r4, #12]
 800e058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	2300      	movs	r3, #0
 800e060:	6063      	str	r3, [r4, #4]
 800e062:	6923      	ldr	r3, [r4, #16]
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	f043 0308 	orr.w	r3, r3, #8
 800e06c:	81a3      	strh	r3, [r4, #12]
 800e06e:	6923      	ldr	r3, [r4, #16]
 800e070:	b94b      	cbnz	r3, 800e086 <__swsetup_r+0x7a>
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e07c:	d003      	beq.n	800e086 <__swsetup_r+0x7a>
 800e07e:	4621      	mov	r1, r4
 800e080:	4628      	mov	r0, r5
 800e082:	f002 fbab 	bl	80107dc <__smakebuf_r>
 800e086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e08a:	f013 0201 	ands.w	r2, r3, #1
 800e08e:	d00a      	beq.n	800e0a6 <__swsetup_r+0x9a>
 800e090:	2200      	movs	r2, #0
 800e092:	60a2      	str	r2, [r4, #8]
 800e094:	6962      	ldr	r2, [r4, #20]
 800e096:	4252      	negs	r2, r2
 800e098:	61a2      	str	r2, [r4, #24]
 800e09a:	6922      	ldr	r2, [r4, #16]
 800e09c:	b942      	cbnz	r2, 800e0b0 <__swsetup_r+0xa4>
 800e09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0a2:	d1c5      	bne.n	800e030 <__swsetup_r+0x24>
 800e0a4:	bd38      	pop	{r3, r4, r5, pc}
 800e0a6:	0799      	lsls	r1, r3, #30
 800e0a8:	bf58      	it	pl
 800e0aa:	6962      	ldrpl	r2, [r4, #20]
 800e0ac:	60a2      	str	r2, [r4, #8]
 800e0ae:	e7f4      	b.n	800e09a <__swsetup_r+0x8e>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	e7f7      	b.n	800e0a4 <__swsetup_r+0x98>
 800e0b4:	200001b8 	.word	0x200001b8

0800e0b8 <memcmp>:
 800e0b8:	b510      	push	{r4, lr}
 800e0ba:	3901      	subs	r1, #1
 800e0bc:	4402      	add	r2, r0
 800e0be:	4290      	cmp	r0, r2
 800e0c0:	d101      	bne.n	800e0c6 <memcmp+0xe>
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	e005      	b.n	800e0d2 <memcmp+0x1a>
 800e0c6:	7803      	ldrb	r3, [r0, #0]
 800e0c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	d001      	beq.n	800e0d4 <memcmp+0x1c>
 800e0d0:	1b18      	subs	r0, r3, r4
 800e0d2:	bd10      	pop	{r4, pc}
 800e0d4:	3001      	adds	r0, #1
 800e0d6:	e7f2      	b.n	800e0be <memcmp+0x6>

0800e0d8 <memset>:
 800e0d8:	4402      	add	r2, r0
 800e0da:	4603      	mov	r3, r0
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d100      	bne.n	800e0e2 <memset+0xa>
 800e0e0:	4770      	bx	lr
 800e0e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0e6:	e7f9      	b.n	800e0dc <memset+0x4>

0800e0e8 <strncmp>:
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	b16a      	cbz	r2, 800e108 <strncmp+0x20>
 800e0ec:	3901      	subs	r1, #1
 800e0ee:	1884      	adds	r4, r0, r2
 800e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d103      	bne.n	800e104 <strncmp+0x1c>
 800e0fc:	42a0      	cmp	r0, r4
 800e0fe:	d001      	beq.n	800e104 <strncmp+0x1c>
 800e100:	2a00      	cmp	r2, #0
 800e102:	d1f5      	bne.n	800e0f0 <strncmp+0x8>
 800e104:	1ad0      	subs	r0, r2, r3
 800e106:	bd10      	pop	{r4, pc}
 800e108:	4610      	mov	r0, r2
 800e10a:	e7fc      	b.n	800e106 <strncmp+0x1e>

0800e10c <strncpy>:
 800e10c:	b510      	push	{r4, lr}
 800e10e:	3901      	subs	r1, #1
 800e110:	4603      	mov	r3, r0
 800e112:	b132      	cbz	r2, 800e122 <strncpy+0x16>
 800e114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e118:	f803 4b01 	strb.w	r4, [r3], #1
 800e11c:	3a01      	subs	r2, #1
 800e11e:	2c00      	cmp	r4, #0
 800e120:	d1f7      	bne.n	800e112 <strncpy+0x6>
 800e122:	441a      	add	r2, r3
 800e124:	2100      	movs	r1, #0
 800e126:	4293      	cmp	r3, r2
 800e128:	d100      	bne.n	800e12c <strncpy+0x20>
 800e12a:	bd10      	pop	{r4, pc}
 800e12c:	f803 1b01 	strb.w	r1, [r3], #1
 800e130:	e7f9      	b.n	800e126 <strncpy+0x1a>
	...

0800e134 <strtok>:
 800e134:	4b16      	ldr	r3, [pc, #88]	@ (800e190 <strtok+0x5c>)
 800e136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13a:	681f      	ldr	r7, [r3, #0]
 800e13c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e13e:	4605      	mov	r5, r0
 800e140:	460e      	mov	r6, r1
 800e142:	b9ec      	cbnz	r4, 800e180 <strtok+0x4c>
 800e144:	2050      	movs	r0, #80	@ 0x50
 800e146:	f7fd ffdd 	bl	800c104 <malloc>
 800e14a:	4602      	mov	r2, r0
 800e14c:	6478      	str	r0, [r7, #68]	@ 0x44
 800e14e:	b920      	cbnz	r0, 800e15a <strtok+0x26>
 800e150:	4b10      	ldr	r3, [pc, #64]	@ (800e194 <strtok+0x60>)
 800e152:	4811      	ldr	r0, [pc, #68]	@ (800e198 <strtok+0x64>)
 800e154:	215b      	movs	r1, #91	@ 0x5b
 800e156:	f000 f905 	bl	800e364 <__assert_func>
 800e15a:	e9c0 4400 	strd	r4, r4, [r0]
 800e15e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e162:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e166:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e16a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e16e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e172:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e176:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e17a:	6184      	str	r4, [r0, #24]
 800e17c:	7704      	strb	r4, [r0, #28]
 800e17e:	6244      	str	r4, [r0, #36]	@ 0x24
 800e180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e182:	4631      	mov	r1, r6
 800e184:	4628      	mov	r0, r5
 800e186:	2301      	movs	r3, #1
 800e188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e18c:	f000 b806 	b.w	800e19c <__strtok_r>
 800e190:	200001b8 	.word	0x200001b8
 800e194:	0801153a 	.word	0x0801153a
 800e198:	08011551 	.word	0x08011551

0800e19c <__strtok_r>:
 800e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19e:	4604      	mov	r4, r0
 800e1a0:	b908      	cbnz	r0, 800e1a6 <__strtok_r+0xa>
 800e1a2:	6814      	ldr	r4, [r2, #0]
 800e1a4:	b144      	cbz	r4, 800e1b8 <__strtok_r+0x1c>
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e1b2:	b91e      	cbnz	r6, 800e1bc <__strtok_r+0x20>
 800e1b4:	b965      	cbnz	r5, 800e1d0 <__strtok_r+0x34>
 800e1b6:	6015      	str	r5, [r2, #0]
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e005      	b.n	800e1c8 <__strtok_r+0x2c>
 800e1bc:	42b5      	cmp	r5, r6
 800e1be:	d1f6      	bne.n	800e1ae <__strtok_r+0x12>
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1f0      	bne.n	800e1a6 <__strtok_r+0xa>
 800e1c4:	6014      	str	r4, [r2, #0]
 800e1c6:	7003      	strb	r3, [r0, #0]
 800e1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ca:	461c      	mov	r4, r3
 800e1cc:	e00c      	b.n	800e1e8 <__strtok_r+0x4c>
 800e1ce:	b915      	cbnz	r5, 800e1d6 <__strtok_r+0x3a>
 800e1d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1d4:	460e      	mov	r6, r1
 800e1d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e1da:	42ab      	cmp	r3, r5
 800e1dc:	d1f7      	bne.n	800e1ce <__strtok_r+0x32>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d0f3      	beq.n	800e1ca <__strtok_r+0x2e>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e1e8:	6014      	str	r4, [r2, #0]
 800e1ea:	e7ed      	b.n	800e1c8 <__strtok_r+0x2c>

0800e1ec <strstr>:
 800e1ec:	780a      	ldrb	r2, [r1, #0]
 800e1ee:	b570      	push	{r4, r5, r6, lr}
 800e1f0:	b96a      	cbnz	r2, 800e20e <strstr+0x22>
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d109      	bne.n	800e20c <strstr+0x20>
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e200:	2b00      	cmp	r3, #0
 800e202:	d0f6      	beq.n	800e1f2 <strstr+0x6>
 800e204:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e208:	429e      	cmp	r6, r3
 800e20a:	d0f7      	beq.n	800e1fc <strstr+0x10>
 800e20c:	3001      	adds	r0, #1
 800e20e:	7803      	ldrb	r3, [r0, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1ef      	bne.n	800e1f4 <strstr+0x8>
 800e214:	4618      	mov	r0, r3
 800e216:	e7ec      	b.n	800e1f2 <strstr+0x6>

0800e218 <_localeconv_r>:
 800e218:	4800      	ldr	r0, [pc, #0]	@ (800e21c <_localeconv_r+0x4>)
 800e21a:	4770      	bx	lr
 800e21c:	2000013c 	.word	0x2000013c

0800e220 <_close_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4d06      	ldr	r5, [pc, #24]	@ (800e23c <_close_r+0x1c>)
 800e224:	2300      	movs	r3, #0
 800e226:	4604      	mov	r4, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	602b      	str	r3, [r5, #0]
 800e22c:	f7f5 f82d 	bl	800328a <_close>
 800e230:	1c43      	adds	r3, r0, #1
 800e232:	d102      	bne.n	800e23a <_close_r+0x1a>
 800e234:	682b      	ldr	r3, [r5, #0]
 800e236:	b103      	cbz	r3, 800e23a <_close_r+0x1a>
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	bd38      	pop	{r3, r4, r5, pc}
 800e23c:	20001298 	.word	0x20001298

0800e240 <_lseek_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d07      	ldr	r5, [pc, #28]	@ (800e260 <_lseek_r+0x20>)
 800e244:	4604      	mov	r4, r0
 800e246:	4608      	mov	r0, r1
 800e248:	4611      	mov	r1, r2
 800e24a:	2200      	movs	r2, #0
 800e24c:	602a      	str	r2, [r5, #0]
 800e24e:	461a      	mov	r2, r3
 800e250:	f7f5 f842 	bl	80032d8 <_lseek>
 800e254:	1c43      	adds	r3, r0, #1
 800e256:	d102      	bne.n	800e25e <_lseek_r+0x1e>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	b103      	cbz	r3, 800e25e <_lseek_r+0x1e>
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	20001298 	.word	0x20001298

0800e264 <_read_r>:
 800e264:	b538      	push	{r3, r4, r5, lr}
 800e266:	4d07      	ldr	r5, [pc, #28]	@ (800e284 <_read_r+0x20>)
 800e268:	4604      	mov	r4, r0
 800e26a:	4608      	mov	r0, r1
 800e26c:	4611      	mov	r1, r2
 800e26e:	2200      	movs	r2, #0
 800e270:	602a      	str	r2, [r5, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	f7f4 ffd0 	bl	8003218 <_read>
 800e278:	1c43      	adds	r3, r0, #1
 800e27a:	d102      	bne.n	800e282 <_read_r+0x1e>
 800e27c:	682b      	ldr	r3, [r5, #0]
 800e27e:	b103      	cbz	r3, 800e282 <_read_r+0x1e>
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	20001298 	.word	0x20001298

0800e288 <_sbrk_r>:
 800e288:	b538      	push	{r3, r4, r5, lr}
 800e28a:	4d06      	ldr	r5, [pc, #24]	@ (800e2a4 <_sbrk_r+0x1c>)
 800e28c:	2300      	movs	r3, #0
 800e28e:	4604      	mov	r4, r0
 800e290:	4608      	mov	r0, r1
 800e292:	602b      	str	r3, [r5, #0]
 800e294:	f7f5 f82e 	bl	80032f4 <_sbrk>
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	d102      	bne.n	800e2a2 <_sbrk_r+0x1a>
 800e29c:	682b      	ldr	r3, [r5, #0]
 800e29e:	b103      	cbz	r3, 800e2a2 <_sbrk_r+0x1a>
 800e2a0:	6023      	str	r3, [r4, #0]
 800e2a2:	bd38      	pop	{r3, r4, r5, pc}
 800e2a4:	20001298 	.word	0x20001298

0800e2a8 <_write_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	4d07      	ldr	r5, [pc, #28]	@ (800e2c8 <_write_r+0x20>)
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	4608      	mov	r0, r1
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	602a      	str	r2, [r5, #0]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	f7f4 ffcb 	bl	8003252 <_write>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_write_r+0x1e>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_write_r+0x1e>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	20001298 	.word	0x20001298

0800e2cc <__errno>:
 800e2cc:	4b01      	ldr	r3, [pc, #4]	@ (800e2d4 <__errno+0x8>)
 800e2ce:	6818      	ldr	r0, [r3, #0]
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop
 800e2d4:	200001b8 	.word	0x200001b8

0800e2d8 <__libc_init_array>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	4d0d      	ldr	r5, [pc, #52]	@ (800e310 <__libc_init_array+0x38>)
 800e2dc:	4c0d      	ldr	r4, [pc, #52]	@ (800e314 <__libc_init_array+0x3c>)
 800e2de:	1b64      	subs	r4, r4, r5
 800e2e0:	10a4      	asrs	r4, r4, #2
 800e2e2:	2600      	movs	r6, #0
 800e2e4:	42a6      	cmp	r6, r4
 800e2e6:	d109      	bne.n	800e2fc <__libc_init_array+0x24>
 800e2e8:	4d0b      	ldr	r5, [pc, #44]	@ (800e318 <__libc_init_array+0x40>)
 800e2ea:	4c0c      	ldr	r4, [pc, #48]	@ (800e31c <__libc_init_array+0x44>)
 800e2ec:	f002 fb84 	bl	80109f8 <_init>
 800e2f0:	1b64      	subs	r4, r4, r5
 800e2f2:	10a4      	asrs	r4, r4, #2
 800e2f4:	2600      	movs	r6, #0
 800e2f6:	42a6      	cmp	r6, r4
 800e2f8:	d105      	bne.n	800e306 <__libc_init_array+0x2e>
 800e2fa:	bd70      	pop	{r4, r5, r6, pc}
 800e2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e300:	4798      	blx	r3
 800e302:	3601      	adds	r6, #1
 800e304:	e7ee      	b.n	800e2e4 <__libc_init_array+0xc>
 800e306:	f855 3b04 	ldr.w	r3, [r5], #4
 800e30a:	4798      	blx	r3
 800e30c:	3601      	adds	r6, #1
 800e30e:	e7f2      	b.n	800e2f6 <__libc_init_array+0x1e>
 800e310:	0801183c 	.word	0x0801183c
 800e314:	0801183c 	.word	0x0801183c
 800e318:	0801183c 	.word	0x0801183c
 800e31c:	08011840 	.word	0x08011840

0800e320 <__retarget_lock_init_recursive>:
 800e320:	4770      	bx	lr

0800e322 <__retarget_lock_acquire_recursive>:
 800e322:	4770      	bx	lr

0800e324 <__retarget_lock_release_recursive>:
 800e324:	4770      	bx	lr

0800e326 <memcpy>:
 800e326:	440a      	add	r2, r1
 800e328:	4291      	cmp	r1, r2
 800e32a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e32e:	d100      	bne.n	800e332 <memcpy+0xc>
 800e330:	4770      	bx	lr
 800e332:	b510      	push	{r4, lr}
 800e334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e33c:	4291      	cmp	r1, r2
 800e33e:	d1f9      	bne.n	800e334 <memcpy+0xe>
 800e340:	bd10      	pop	{r4, pc}
 800e342:	0000      	movs	r0, r0
 800e344:	0000      	movs	r0, r0
	...

0800e348 <nan>:
 800e348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e350 <nan+0x8>
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	00000000 	.word	0x00000000
 800e354:	7ff80000 	.word	0x7ff80000

0800e358 <nanf>:
 800e358:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e360 <nanf+0x8>
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	7fc00000 	.word	0x7fc00000

0800e364 <__assert_func>:
 800e364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e366:	4614      	mov	r4, r2
 800e368:	461a      	mov	r2, r3
 800e36a:	4b09      	ldr	r3, [pc, #36]	@ (800e390 <__assert_func+0x2c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4605      	mov	r5, r0
 800e370:	68d8      	ldr	r0, [r3, #12]
 800e372:	b954      	cbnz	r4, 800e38a <__assert_func+0x26>
 800e374:	4b07      	ldr	r3, [pc, #28]	@ (800e394 <__assert_func+0x30>)
 800e376:	461c      	mov	r4, r3
 800e378:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e37c:	9100      	str	r1, [sp, #0]
 800e37e:	462b      	mov	r3, r5
 800e380:	4905      	ldr	r1, [pc, #20]	@ (800e398 <__assert_func+0x34>)
 800e382:	f002 f9f3 	bl	801076c <fiprintf>
 800e386:	f002 faa1 	bl	80108cc <abort>
 800e38a:	4b04      	ldr	r3, [pc, #16]	@ (800e39c <__assert_func+0x38>)
 800e38c:	e7f4      	b.n	800e378 <__assert_func+0x14>
 800e38e:	bf00      	nop
 800e390:	200001b8 	.word	0x200001b8
 800e394:	080115ee 	.word	0x080115ee
 800e398:	080115c0 	.word	0x080115c0
 800e39c:	080115b3 	.word	0x080115b3

0800e3a0 <quorem>:
 800e3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a4:	6903      	ldr	r3, [r0, #16]
 800e3a6:	690c      	ldr	r4, [r1, #16]
 800e3a8:	42a3      	cmp	r3, r4
 800e3aa:	4607      	mov	r7, r0
 800e3ac:	db7e      	blt.n	800e4ac <quorem+0x10c>
 800e3ae:	3c01      	subs	r4, #1
 800e3b0:	f101 0814 	add.w	r8, r1, #20
 800e3b4:	00a3      	lsls	r3, r4, #2
 800e3b6:	f100 0514 	add.w	r5, r0, #20
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3c0:	9301      	str	r3, [sp, #4]
 800e3c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3d6:	d32e      	bcc.n	800e436 <quorem+0x96>
 800e3d8:	f04f 0a00 	mov.w	sl, #0
 800e3dc:	46c4      	mov	ip, r8
 800e3de:	46ae      	mov	lr, r5
 800e3e0:	46d3      	mov	fp, sl
 800e3e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3e6:	b298      	uxth	r0, r3
 800e3e8:	fb06 a000 	mla	r0, r6, r0, sl
 800e3ec:	0c02      	lsrs	r2, r0, #16
 800e3ee:	0c1b      	lsrs	r3, r3, #16
 800e3f0:	fb06 2303 	mla	r3, r6, r3, r2
 800e3f4:	f8de 2000 	ldr.w	r2, [lr]
 800e3f8:	b280      	uxth	r0, r0
 800e3fa:	b292      	uxth	r2, r2
 800e3fc:	1a12      	subs	r2, r2, r0
 800e3fe:	445a      	add	r2, fp
 800e400:	f8de 0000 	ldr.w	r0, [lr]
 800e404:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e408:	b29b      	uxth	r3, r3
 800e40a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e40e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e412:	b292      	uxth	r2, r2
 800e414:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e418:	45e1      	cmp	r9, ip
 800e41a:	f84e 2b04 	str.w	r2, [lr], #4
 800e41e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e422:	d2de      	bcs.n	800e3e2 <quorem+0x42>
 800e424:	9b00      	ldr	r3, [sp, #0]
 800e426:	58eb      	ldr	r3, [r5, r3]
 800e428:	b92b      	cbnz	r3, 800e436 <quorem+0x96>
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	3b04      	subs	r3, #4
 800e42e:	429d      	cmp	r5, r3
 800e430:	461a      	mov	r2, r3
 800e432:	d32f      	bcc.n	800e494 <quorem+0xf4>
 800e434:	613c      	str	r4, [r7, #16]
 800e436:	4638      	mov	r0, r7
 800e438:	f001 fc58 	bl	800fcec <__mcmp>
 800e43c:	2800      	cmp	r0, #0
 800e43e:	db25      	blt.n	800e48c <quorem+0xec>
 800e440:	4629      	mov	r1, r5
 800e442:	2000      	movs	r0, #0
 800e444:	f858 2b04 	ldr.w	r2, [r8], #4
 800e448:	f8d1 c000 	ldr.w	ip, [r1]
 800e44c:	fa1f fe82 	uxth.w	lr, r2
 800e450:	fa1f f38c 	uxth.w	r3, ip
 800e454:	eba3 030e 	sub.w	r3, r3, lr
 800e458:	4403      	add	r3, r0
 800e45a:	0c12      	lsrs	r2, r2, #16
 800e45c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e460:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e464:	b29b      	uxth	r3, r3
 800e466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e46a:	45c1      	cmp	r9, r8
 800e46c:	f841 3b04 	str.w	r3, [r1], #4
 800e470:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e474:	d2e6      	bcs.n	800e444 <quorem+0xa4>
 800e476:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e47a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e47e:	b922      	cbnz	r2, 800e48a <quorem+0xea>
 800e480:	3b04      	subs	r3, #4
 800e482:	429d      	cmp	r5, r3
 800e484:	461a      	mov	r2, r3
 800e486:	d30b      	bcc.n	800e4a0 <quorem+0x100>
 800e488:	613c      	str	r4, [r7, #16]
 800e48a:	3601      	adds	r6, #1
 800e48c:	4630      	mov	r0, r6
 800e48e:	b003      	add	sp, #12
 800e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e494:	6812      	ldr	r2, [r2, #0]
 800e496:	3b04      	subs	r3, #4
 800e498:	2a00      	cmp	r2, #0
 800e49a:	d1cb      	bne.n	800e434 <quorem+0x94>
 800e49c:	3c01      	subs	r4, #1
 800e49e:	e7c6      	b.n	800e42e <quorem+0x8e>
 800e4a0:	6812      	ldr	r2, [r2, #0]
 800e4a2:	3b04      	subs	r3, #4
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	d1ef      	bne.n	800e488 <quorem+0xe8>
 800e4a8:	3c01      	subs	r4, #1
 800e4aa:	e7ea      	b.n	800e482 <quorem+0xe2>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	e7ee      	b.n	800e48e <quorem+0xee>

0800e4b0 <_dtoa_r>:
 800e4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	69c7      	ldr	r7, [r0, #28]
 800e4b6:	b099      	sub	sp, #100	@ 0x64
 800e4b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e4bc:	ec55 4b10 	vmov	r4, r5, d0
 800e4c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e4c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e4c4:	4683      	mov	fp, r0
 800e4c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e4ca:	b97f      	cbnz	r7, 800e4ec <_dtoa_r+0x3c>
 800e4cc:	2010      	movs	r0, #16
 800e4ce:	f7fd fe19 	bl	800c104 <malloc>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e4d8:	b920      	cbnz	r0, 800e4e4 <_dtoa_r+0x34>
 800e4da:	4ba7      	ldr	r3, [pc, #668]	@ (800e778 <_dtoa_r+0x2c8>)
 800e4dc:	21ef      	movs	r1, #239	@ 0xef
 800e4de:	48a7      	ldr	r0, [pc, #668]	@ (800e77c <_dtoa_r+0x2cc>)
 800e4e0:	f7ff ff40 	bl	800e364 <__assert_func>
 800e4e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e4e8:	6007      	str	r7, [r0, #0]
 800e4ea:	60c7      	str	r7, [r0, #12]
 800e4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4f0:	6819      	ldr	r1, [r3, #0]
 800e4f2:	b159      	cbz	r1, 800e50c <_dtoa_r+0x5c>
 800e4f4:	685a      	ldr	r2, [r3, #4]
 800e4f6:	604a      	str	r2, [r1, #4]
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	4093      	lsls	r3, r2
 800e4fc:	608b      	str	r3, [r1, #8]
 800e4fe:	4658      	mov	r0, fp
 800e500:	f001 f970 	bl	800f7e4 <_Bfree>
 800e504:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
 800e50c:	1e2b      	subs	r3, r5, #0
 800e50e:	bfb9      	ittee	lt
 800e510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e514:	9303      	strlt	r3, [sp, #12]
 800e516:	2300      	movge	r3, #0
 800e518:	6033      	strge	r3, [r6, #0]
 800e51a:	9f03      	ldr	r7, [sp, #12]
 800e51c:	4b98      	ldr	r3, [pc, #608]	@ (800e780 <_dtoa_r+0x2d0>)
 800e51e:	bfbc      	itt	lt
 800e520:	2201      	movlt	r2, #1
 800e522:	6032      	strlt	r2, [r6, #0]
 800e524:	43bb      	bics	r3, r7
 800e526:	d112      	bne.n	800e54e <_dtoa_r+0x9e>
 800e528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e52a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e52e:	6013      	str	r3, [r2, #0]
 800e530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e534:	4323      	orrs	r3, r4
 800e536:	f000 854d 	beq.w	800efd4 <_dtoa_r+0xb24>
 800e53a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e53c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e794 <_dtoa_r+0x2e4>
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 854f 	beq.w	800efe4 <_dtoa_r+0xb34>
 800e546:	f10a 0303 	add.w	r3, sl, #3
 800e54a:	f000 bd49 	b.w	800efe0 <_dtoa_r+0xb30>
 800e54e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e552:	2200      	movs	r2, #0
 800e554:	ec51 0b17 	vmov	r0, r1, d7
 800e558:	2300      	movs	r3, #0
 800e55a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e55e:	f7f2 facb 	bl	8000af8 <__aeabi_dcmpeq>
 800e562:	4680      	mov	r8, r0
 800e564:	b158      	cbz	r0, 800e57e <_dtoa_r+0xce>
 800e566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e568:	2301      	movs	r3, #1
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e56e:	b113      	cbz	r3, 800e576 <_dtoa_r+0xc6>
 800e570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e572:	4b84      	ldr	r3, [pc, #528]	@ (800e784 <_dtoa_r+0x2d4>)
 800e574:	6013      	str	r3, [r2, #0]
 800e576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e798 <_dtoa_r+0x2e8>
 800e57a:	f000 bd33 	b.w	800efe4 <_dtoa_r+0xb34>
 800e57e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e582:	aa16      	add	r2, sp, #88	@ 0x58
 800e584:	a917      	add	r1, sp, #92	@ 0x5c
 800e586:	4658      	mov	r0, fp
 800e588:	f001 fcd0 	bl	800ff2c <__d2b>
 800e58c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e590:	4681      	mov	r9, r0
 800e592:	2e00      	cmp	r6, #0
 800e594:	d077      	beq.n	800e686 <_dtoa_r+0x1d6>
 800e596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e5a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e5ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4b74      	ldr	r3, [pc, #464]	@ (800e788 <_dtoa_r+0x2d8>)
 800e5b6:	f7f1 fe7f 	bl	80002b8 <__aeabi_dsub>
 800e5ba:	a369      	add	r3, pc, #420	@ (adr r3, 800e760 <_dtoa_r+0x2b0>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f2 f832 	bl	8000628 <__aeabi_dmul>
 800e5c4:	a368      	add	r3, pc, #416	@ (adr r3, 800e768 <_dtoa_r+0x2b8>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7f1 fe77 	bl	80002bc <__adddf3>
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	f7f1 ffbe 	bl	8000554 <__aeabi_i2d>
 800e5d8:	a365      	add	r3, pc, #404	@ (adr r3, 800e770 <_dtoa_r+0x2c0>)
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	f7f2 f823 	bl	8000628 <__aeabi_dmul>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	f7f1 fe67 	bl	80002bc <__adddf3>
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	f7f2 fac9 	bl	8000b88 <__aeabi_d2iz>
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	4607      	mov	r7, r0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	f7f2 fa84 	bl	8000b0c <__aeabi_dcmplt>
 800e604:	b140      	cbz	r0, 800e618 <_dtoa_r+0x168>
 800e606:	4638      	mov	r0, r7
 800e608:	f7f1 ffa4 	bl	8000554 <__aeabi_i2d>
 800e60c:	4622      	mov	r2, r4
 800e60e:	462b      	mov	r3, r5
 800e610:	f7f2 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 800e614:	b900      	cbnz	r0, 800e618 <_dtoa_r+0x168>
 800e616:	3f01      	subs	r7, #1
 800e618:	2f16      	cmp	r7, #22
 800e61a:	d851      	bhi.n	800e6c0 <_dtoa_r+0x210>
 800e61c:	4b5b      	ldr	r3, [pc, #364]	@ (800e78c <_dtoa_r+0x2dc>)
 800e61e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e62a:	f7f2 fa6f 	bl	8000b0c <__aeabi_dcmplt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	d048      	beq.n	800e6c4 <_dtoa_r+0x214>
 800e632:	3f01      	subs	r7, #1
 800e634:	2300      	movs	r3, #0
 800e636:	9312      	str	r3, [sp, #72]	@ 0x48
 800e638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e63a:	1b9b      	subs	r3, r3, r6
 800e63c:	1e5a      	subs	r2, r3, #1
 800e63e:	bf44      	itt	mi
 800e640:	f1c3 0801 	rsbmi	r8, r3, #1
 800e644:	2300      	movmi	r3, #0
 800e646:	9208      	str	r2, [sp, #32]
 800e648:	bf54      	ite	pl
 800e64a:	f04f 0800 	movpl.w	r8, #0
 800e64e:	9308      	strmi	r3, [sp, #32]
 800e650:	2f00      	cmp	r7, #0
 800e652:	db39      	blt.n	800e6c8 <_dtoa_r+0x218>
 800e654:	9b08      	ldr	r3, [sp, #32]
 800e656:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e658:	443b      	add	r3, r7
 800e65a:	9308      	str	r3, [sp, #32]
 800e65c:	2300      	movs	r3, #0
 800e65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e662:	2b09      	cmp	r3, #9
 800e664:	d864      	bhi.n	800e730 <_dtoa_r+0x280>
 800e666:	2b05      	cmp	r3, #5
 800e668:	bfc4      	itt	gt
 800e66a:	3b04      	subgt	r3, #4
 800e66c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e670:	f1a3 0302 	sub.w	r3, r3, #2
 800e674:	bfcc      	ite	gt
 800e676:	2400      	movgt	r4, #0
 800e678:	2401      	movle	r4, #1
 800e67a:	2b03      	cmp	r3, #3
 800e67c:	d863      	bhi.n	800e746 <_dtoa_r+0x296>
 800e67e:	e8df f003 	tbb	[pc, r3]
 800e682:	372a      	.short	0x372a
 800e684:	5535      	.short	0x5535
 800e686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e68a:	441e      	add	r6, r3
 800e68c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e690:	2b20      	cmp	r3, #32
 800e692:	bfc1      	itttt	gt
 800e694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e698:	409f      	lslgt	r7, r3
 800e69a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e69e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e6a2:	bfd6      	itet	le
 800e6a4:	f1c3 0320 	rsble	r3, r3, #32
 800e6a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e6ac:	fa04 f003 	lslle.w	r0, r4, r3
 800e6b0:	f7f1 ff40 	bl	8000534 <__aeabi_ui2d>
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e6ba:	3e01      	subs	r6, #1
 800e6bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e6be:	e777      	b.n	800e5b0 <_dtoa_r+0x100>
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e7b8      	b.n	800e636 <_dtoa_r+0x186>
 800e6c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e6c6:	e7b7      	b.n	800e638 <_dtoa_r+0x188>
 800e6c8:	427b      	negs	r3, r7
 800e6ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	eba8 0807 	sub.w	r8, r8, r7
 800e6d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e6d4:	e7c4      	b.n	800e660 <_dtoa_r+0x1b0>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dc35      	bgt.n	800e74c <_dtoa_r+0x29c>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	9307      	str	r3, [sp, #28]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ea:	e00b      	b.n	800e704 <_dtoa_r+0x254>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e7f3      	b.n	800e6d8 <_dtoa_r+0x228>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6f6:	18fb      	adds	r3, r7, r3
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	9307      	str	r3, [sp, #28]
 800e700:	bfb8      	it	lt
 800e702:	2301      	movlt	r3, #1
 800e704:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e708:	2100      	movs	r1, #0
 800e70a:	2204      	movs	r2, #4
 800e70c:	f102 0514 	add.w	r5, r2, #20
 800e710:	429d      	cmp	r5, r3
 800e712:	d91f      	bls.n	800e754 <_dtoa_r+0x2a4>
 800e714:	6041      	str	r1, [r0, #4]
 800e716:	4658      	mov	r0, fp
 800e718:	f001 f824 	bl	800f764 <_Balloc>
 800e71c:	4682      	mov	sl, r0
 800e71e:	2800      	cmp	r0, #0
 800e720:	d13c      	bne.n	800e79c <_dtoa_r+0x2ec>
 800e722:	4b1b      	ldr	r3, [pc, #108]	@ (800e790 <_dtoa_r+0x2e0>)
 800e724:	4602      	mov	r2, r0
 800e726:	f240 11af 	movw	r1, #431	@ 0x1af
 800e72a:	e6d8      	b.n	800e4de <_dtoa_r+0x2e>
 800e72c:	2301      	movs	r3, #1
 800e72e:	e7e0      	b.n	800e6f2 <_dtoa_r+0x242>
 800e730:	2401      	movs	r4, #1
 800e732:	2300      	movs	r3, #0
 800e734:	9309      	str	r3, [sp, #36]	@ 0x24
 800e736:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e738:	f04f 33ff 	mov.w	r3, #4294967295
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	9307      	str	r3, [sp, #28]
 800e740:	2200      	movs	r2, #0
 800e742:	2312      	movs	r3, #18
 800e744:	e7d0      	b.n	800e6e8 <_dtoa_r+0x238>
 800e746:	2301      	movs	r3, #1
 800e748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e74a:	e7f5      	b.n	800e738 <_dtoa_r+0x288>
 800e74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	9307      	str	r3, [sp, #28]
 800e752:	e7d7      	b.n	800e704 <_dtoa_r+0x254>
 800e754:	3101      	adds	r1, #1
 800e756:	0052      	lsls	r2, r2, #1
 800e758:	e7d8      	b.n	800e70c <_dtoa_r+0x25c>
 800e75a:	bf00      	nop
 800e75c:	f3af 8000 	nop.w
 800e760:	636f4361 	.word	0x636f4361
 800e764:	3fd287a7 	.word	0x3fd287a7
 800e768:	8b60c8b3 	.word	0x8b60c8b3
 800e76c:	3fc68a28 	.word	0x3fc68a28
 800e770:	509f79fb 	.word	0x509f79fb
 800e774:	3fd34413 	.word	0x3fd34413
 800e778:	0801153a 	.word	0x0801153a
 800e77c:	080115fc 	.word	0x080115fc
 800e780:	7ff00000 	.word	0x7ff00000
 800e784:	08011512 	.word	0x08011512
 800e788:	3ff80000 	.word	0x3ff80000
 800e78c:	08011758 	.word	0x08011758
 800e790:	08011654 	.word	0x08011654
 800e794:	080115f8 	.word	0x080115f8
 800e798:	08011511 	.word	0x08011511
 800e79c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e7a0:	6018      	str	r0, [r3, #0]
 800e7a2:	9b07      	ldr	r3, [sp, #28]
 800e7a4:	2b0e      	cmp	r3, #14
 800e7a6:	f200 80a4 	bhi.w	800e8f2 <_dtoa_r+0x442>
 800e7aa:	2c00      	cmp	r4, #0
 800e7ac:	f000 80a1 	beq.w	800e8f2 <_dtoa_r+0x442>
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	dd33      	ble.n	800e81c <_dtoa_r+0x36c>
 800e7b4:	4bad      	ldr	r3, [pc, #692]	@ (800ea6c <_dtoa_r+0x5bc>)
 800e7b6:	f007 020f 	and.w	r2, r7, #15
 800e7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7be:	ed93 7b00 	vldr	d7, [r3]
 800e7c2:	05f8      	lsls	r0, r7, #23
 800e7c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e7c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e7cc:	d516      	bpl.n	800e7fc <_dtoa_r+0x34c>
 800e7ce:	4ba8      	ldr	r3, [pc, #672]	@ (800ea70 <_dtoa_r+0x5c0>)
 800e7d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7d8:	f7f2 f850 	bl	800087c <__aeabi_ddiv>
 800e7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7e0:	f004 040f 	and.w	r4, r4, #15
 800e7e4:	2603      	movs	r6, #3
 800e7e6:	4da2      	ldr	r5, [pc, #648]	@ (800ea70 <_dtoa_r+0x5c0>)
 800e7e8:	b954      	cbnz	r4, 800e800 <_dtoa_r+0x350>
 800e7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f843 	bl	800087c <__aeabi_ddiv>
 800e7f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7fa:	e028      	b.n	800e84e <_dtoa_r+0x39e>
 800e7fc:	2602      	movs	r6, #2
 800e7fe:	e7f2      	b.n	800e7e6 <_dtoa_r+0x336>
 800e800:	07e1      	lsls	r1, r4, #31
 800e802:	d508      	bpl.n	800e816 <_dtoa_r+0x366>
 800e804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e80c:	f7f1 ff0c 	bl	8000628 <__aeabi_dmul>
 800e810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e814:	3601      	adds	r6, #1
 800e816:	1064      	asrs	r4, r4, #1
 800e818:	3508      	adds	r5, #8
 800e81a:	e7e5      	b.n	800e7e8 <_dtoa_r+0x338>
 800e81c:	f000 80d2 	beq.w	800e9c4 <_dtoa_r+0x514>
 800e820:	427c      	negs	r4, r7
 800e822:	4b92      	ldr	r3, [pc, #584]	@ (800ea6c <_dtoa_r+0x5bc>)
 800e824:	4d92      	ldr	r5, [pc, #584]	@ (800ea70 <_dtoa_r+0x5c0>)
 800e826:	f004 020f 	and.w	r2, r4, #15
 800e82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e836:	f7f1 fef7 	bl	8000628 <__aeabi_dmul>
 800e83a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e83e:	1124      	asrs	r4, r4, #4
 800e840:	2300      	movs	r3, #0
 800e842:	2602      	movs	r6, #2
 800e844:	2c00      	cmp	r4, #0
 800e846:	f040 80b2 	bne.w	800e9ae <_dtoa_r+0x4fe>
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1d3      	bne.n	800e7f6 <_dtoa_r+0x346>
 800e84e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80b7 	beq.w	800e9c8 <_dtoa_r+0x518>
 800e85a:	4b86      	ldr	r3, [pc, #536]	@ (800ea74 <_dtoa_r+0x5c4>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	4620      	mov	r0, r4
 800e860:	4629      	mov	r1, r5
 800e862:	f7f2 f953 	bl	8000b0c <__aeabi_dcmplt>
 800e866:	2800      	cmp	r0, #0
 800e868:	f000 80ae 	beq.w	800e9c8 <_dtoa_r+0x518>
 800e86c:	9b07      	ldr	r3, [sp, #28]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 80aa 	beq.w	800e9c8 <_dtoa_r+0x518>
 800e874:	9b00      	ldr	r3, [sp, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	dd37      	ble.n	800e8ea <_dtoa_r+0x43a>
 800e87a:	1e7b      	subs	r3, r7, #1
 800e87c:	9304      	str	r3, [sp, #16]
 800e87e:	4620      	mov	r0, r4
 800e880:	4b7d      	ldr	r3, [pc, #500]	@ (800ea78 <_dtoa_r+0x5c8>)
 800e882:	2200      	movs	r2, #0
 800e884:	4629      	mov	r1, r5
 800e886:	f7f1 fecf 	bl	8000628 <__aeabi_dmul>
 800e88a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e88e:	9c00      	ldr	r4, [sp, #0]
 800e890:	3601      	adds	r6, #1
 800e892:	4630      	mov	r0, r6
 800e894:	f7f1 fe5e 	bl	8000554 <__aeabi_i2d>
 800e898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e89c:	f7f1 fec4 	bl	8000628 <__aeabi_dmul>
 800e8a0:	4b76      	ldr	r3, [pc, #472]	@ (800ea7c <_dtoa_r+0x5cc>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f7f1 fd0a 	bl	80002bc <__adddf3>
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e8ae:	2c00      	cmp	r4, #0
 800e8b0:	f040 808d 	bne.w	800e9ce <_dtoa_r+0x51e>
 800e8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8b8:	4b71      	ldr	r3, [pc, #452]	@ (800ea80 <_dtoa_r+0x5d0>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f7f1 fcfc 	bl	80002b8 <__aeabi_dsub>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8c8:	462a      	mov	r2, r5
 800e8ca:	4633      	mov	r3, r6
 800e8cc:	f7f2 f93c 	bl	8000b48 <__aeabi_dcmpgt>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	f040 828b 	bne.w	800edec <_dtoa_r+0x93c>
 800e8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8da:	462a      	mov	r2, r5
 800e8dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8e0:	f7f2 f914 	bl	8000b0c <__aeabi_dcmplt>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f040 8128 	bne.w	800eb3a <_dtoa_r+0x68a>
 800e8ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e8ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e8f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f2c0 815a 	blt.w	800ebae <_dtoa_r+0x6fe>
 800e8fa:	2f0e      	cmp	r7, #14
 800e8fc:	f300 8157 	bgt.w	800ebae <_dtoa_r+0x6fe>
 800e900:	4b5a      	ldr	r3, [pc, #360]	@ (800ea6c <_dtoa_r+0x5bc>)
 800e902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e906:	ed93 7b00 	vldr	d7, [r3]
 800e90a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	ed8d 7b00 	vstr	d7, [sp]
 800e912:	da03      	bge.n	800e91c <_dtoa_r+0x46c>
 800e914:	9b07      	ldr	r3, [sp, #28]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f340 8101 	ble.w	800eb1e <_dtoa_r+0x66e>
 800e91c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e920:	4656      	mov	r6, sl
 800e922:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e926:	4620      	mov	r0, r4
 800e928:	4629      	mov	r1, r5
 800e92a:	f7f1 ffa7 	bl	800087c <__aeabi_ddiv>
 800e92e:	f7f2 f92b 	bl	8000b88 <__aeabi_d2iz>
 800e932:	4680      	mov	r8, r0
 800e934:	f7f1 fe0e 	bl	8000554 <__aeabi_i2d>
 800e938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e93c:	f7f1 fe74 	bl	8000628 <__aeabi_dmul>
 800e940:	4602      	mov	r2, r0
 800e942:	460b      	mov	r3, r1
 800e944:	4620      	mov	r0, r4
 800e946:	4629      	mov	r1, r5
 800e948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e94c:	f7f1 fcb4 	bl	80002b8 <__aeabi_dsub>
 800e950:	f806 4b01 	strb.w	r4, [r6], #1
 800e954:	9d07      	ldr	r5, [sp, #28]
 800e956:	eba6 040a 	sub.w	r4, r6, sl
 800e95a:	42a5      	cmp	r5, r4
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	f040 8117 	bne.w	800eb92 <_dtoa_r+0x6e2>
 800e964:	f7f1 fcaa 	bl	80002bc <__adddf3>
 800e968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e96c:	4604      	mov	r4, r0
 800e96e:	460d      	mov	r5, r1
 800e970:	f7f2 f8ea 	bl	8000b48 <__aeabi_dcmpgt>
 800e974:	2800      	cmp	r0, #0
 800e976:	f040 80f9 	bne.w	800eb6c <_dtoa_r+0x6bc>
 800e97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e97e:	4620      	mov	r0, r4
 800e980:	4629      	mov	r1, r5
 800e982:	f7f2 f8b9 	bl	8000af8 <__aeabi_dcmpeq>
 800e986:	b118      	cbz	r0, 800e990 <_dtoa_r+0x4e0>
 800e988:	f018 0f01 	tst.w	r8, #1
 800e98c:	f040 80ee 	bne.w	800eb6c <_dtoa_r+0x6bc>
 800e990:	4649      	mov	r1, r9
 800e992:	4658      	mov	r0, fp
 800e994:	f000 ff26 	bl	800f7e4 <_Bfree>
 800e998:	2300      	movs	r3, #0
 800e99a:	7033      	strb	r3, [r6, #0]
 800e99c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e99e:	3701      	adds	r7, #1
 800e9a0:	601f      	str	r7, [r3, #0]
 800e9a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 831d 	beq.w	800efe4 <_dtoa_r+0xb34>
 800e9aa:	601e      	str	r6, [r3, #0]
 800e9ac:	e31a      	b.n	800efe4 <_dtoa_r+0xb34>
 800e9ae:	07e2      	lsls	r2, r4, #31
 800e9b0:	d505      	bpl.n	800e9be <_dtoa_r+0x50e>
 800e9b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9b6:	f7f1 fe37 	bl	8000628 <__aeabi_dmul>
 800e9ba:	3601      	adds	r6, #1
 800e9bc:	2301      	movs	r3, #1
 800e9be:	1064      	asrs	r4, r4, #1
 800e9c0:	3508      	adds	r5, #8
 800e9c2:	e73f      	b.n	800e844 <_dtoa_r+0x394>
 800e9c4:	2602      	movs	r6, #2
 800e9c6:	e742      	b.n	800e84e <_dtoa_r+0x39e>
 800e9c8:	9c07      	ldr	r4, [sp, #28]
 800e9ca:	9704      	str	r7, [sp, #16]
 800e9cc:	e761      	b.n	800e892 <_dtoa_r+0x3e2>
 800e9ce:	4b27      	ldr	r3, [pc, #156]	@ (800ea6c <_dtoa_r+0x5bc>)
 800e9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e9da:	4454      	add	r4, sl
 800e9dc:	2900      	cmp	r1, #0
 800e9de:	d053      	beq.n	800ea88 <_dtoa_r+0x5d8>
 800e9e0:	4928      	ldr	r1, [pc, #160]	@ (800ea84 <_dtoa_r+0x5d4>)
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	f7f1 ff4a 	bl	800087c <__aeabi_ddiv>
 800e9e8:	4633      	mov	r3, r6
 800e9ea:	462a      	mov	r2, r5
 800e9ec:	f7f1 fc64 	bl	80002b8 <__aeabi_dsub>
 800e9f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9f4:	4656      	mov	r6, sl
 800e9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9fa:	f7f2 f8c5 	bl	8000b88 <__aeabi_d2iz>
 800e9fe:	4605      	mov	r5, r0
 800ea00:	f7f1 fda8 	bl	8000554 <__aeabi_i2d>
 800ea04:	4602      	mov	r2, r0
 800ea06:	460b      	mov	r3, r1
 800ea08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea0c:	f7f1 fc54 	bl	80002b8 <__aeabi_dsub>
 800ea10:	3530      	adds	r5, #48	@ 0x30
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea1a:	f806 5b01 	strb.w	r5, [r6], #1
 800ea1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea22:	f7f2 f873 	bl	8000b0c <__aeabi_dcmplt>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d171      	bne.n	800eb0e <_dtoa_r+0x65e>
 800ea2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea2e:	4911      	ldr	r1, [pc, #68]	@ (800ea74 <_dtoa_r+0x5c4>)
 800ea30:	2000      	movs	r0, #0
 800ea32:	f7f1 fc41 	bl	80002b8 <__aeabi_dsub>
 800ea36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ea3a:	f7f2 f867 	bl	8000b0c <__aeabi_dcmplt>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	f040 8095 	bne.w	800eb6e <_dtoa_r+0x6be>
 800ea44:	42a6      	cmp	r6, r4
 800ea46:	f43f af50 	beq.w	800e8ea <_dtoa_r+0x43a>
 800ea4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ea78 <_dtoa_r+0x5c8>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	f7f1 fde9 	bl	8000628 <__aeabi_dmul>
 800ea56:	4b08      	ldr	r3, [pc, #32]	@ (800ea78 <_dtoa_r+0x5c8>)
 800ea58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea62:	f7f1 fde1 	bl	8000628 <__aeabi_dmul>
 800ea66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6a:	e7c4      	b.n	800e9f6 <_dtoa_r+0x546>
 800ea6c:	08011758 	.word	0x08011758
 800ea70:	08011730 	.word	0x08011730
 800ea74:	3ff00000 	.word	0x3ff00000
 800ea78:	40240000 	.word	0x40240000
 800ea7c:	401c0000 	.word	0x401c0000
 800ea80:	40140000 	.word	0x40140000
 800ea84:	3fe00000 	.word	0x3fe00000
 800ea88:	4631      	mov	r1, r6
 800ea8a:	4628      	mov	r0, r5
 800ea8c:	f7f1 fdcc 	bl	8000628 <__aeabi_dmul>
 800ea90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea94:	9415      	str	r4, [sp, #84]	@ 0x54
 800ea96:	4656      	mov	r6, sl
 800ea98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9c:	f7f2 f874 	bl	8000b88 <__aeabi_d2iz>
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	f7f1 fd57 	bl	8000554 <__aeabi_i2d>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaae:	f7f1 fc03 	bl	80002b8 <__aeabi_dsub>
 800eab2:	3530      	adds	r5, #48	@ 0x30
 800eab4:	f806 5b01 	strb.w	r5, [r6], #1
 800eab8:	4602      	mov	r2, r0
 800eaba:	460b      	mov	r3, r1
 800eabc:	42a6      	cmp	r6, r4
 800eabe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eac2:	f04f 0200 	mov.w	r2, #0
 800eac6:	d124      	bne.n	800eb12 <_dtoa_r+0x662>
 800eac8:	4bac      	ldr	r3, [pc, #688]	@ (800ed7c <_dtoa_r+0x8cc>)
 800eaca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eace:	f7f1 fbf5 	bl	80002bc <__adddf3>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eada:	f7f2 f835 	bl	8000b48 <__aeabi_dcmpgt>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d145      	bne.n	800eb6e <_dtoa_r+0x6be>
 800eae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eae6:	49a5      	ldr	r1, [pc, #660]	@ (800ed7c <_dtoa_r+0x8cc>)
 800eae8:	2000      	movs	r0, #0
 800eaea:	f7f1 fbe5 	bl	80002b8 <__aeabi_dsub>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaf6:	f7f2 f809 	bl	8000b0c <__aeabi_dcmplt>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	f43f aef5 	beq.w	800e8ea <_dtoa_r+0x43a>
 800eb00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eb02:	1e73      	subs	r3, r6, #1
 800eb04:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb0a:	2b30      	cmp	r3, #48	@ 0x30
 800eb0c:	d0f8      	beq.n	800eb00 <_dtoa_r+0x650>
 800eb0e:	9f04      	ldr	r7, [sp, #16]
 800eb10:	e73e      	b.n	800e990 <_dtoa_r+0x4e0>
 800eb12:	4b9b      	ldr	r3, [pc, #620]	@ (800ed80 <_dtoa_r+0x8d0>)
 800eb14:	f7f1 fd88 	bl	8000628 <__aeabi_dmul>
 800eb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb1c:	e7bc      	b.n	800ea98 <_dtoa_r+0x5e8>
 800eb1e:	d10c      	bne.n	800eb3a <_dtoa_r+0x68a>
 800eb20:	4b98      	ldr	r3, [pc, #608]	@ (800ed84 <_dtoa_r+0x8d4>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb28:	f7f1 fd7e 	bl	8000628 <__aeabi_dmul>
 800eb2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb30:	f7f2 f800 	bl	8000b34 <__aeabi_dcmpge>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	f000 8157 	beq.w	800ede8 <_dtoa_r+0x938>
 800eb3a:	2400      	movs	r4, #0
 800eb3c:	4625      	mov	r5, r4
 800eb3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb40:	43db      	mvns	r3, r3
 800eb42:	9304      	str	r3, [sp, #16]
 800eb44:	4656      	mov	r6, sl
 800eb46:	2700      	movs	r7, #0
 800eb48:	4621      	mov	r1, r4
 800eb4a:	4658      	mov	r0, fp
 800eb4c:	f000 fe4a 	bl	800f7e4 <_Bfree>
 800eb50:	2d00      	cmp	r5, #0
 800eb52:	d0dc      	beq.n	800eb0e <_dtoa_r+0x65e>
 800eb54:	b12f      	cbz	r7, 800eb62 <_dtoa_r+0x6b2>
 800eb56:	42af      	cmp	r7, r5
 800eb58:	d003      	beq.n	800eb62 <_dtoa_r+0x6b2>
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	4658      	mov	r0, fp
 800eb5e:	f000 fe41 	bl	800f7e4 <_Bfree>
 800eb62:	4629      	mov	r1, r5
 800eb64:	4658      	mov	r0, fp
 800eb66:	f000 fe3d 	bl	800f7e4 <_Bfree>
 800eb6a:	e7d0      	b.n	800eb0e <_dtoa_r+0x65e>
 800eb6c:	9704      	str	r7, [sp, #16]
 800eb6e:	4633      	mov	r3, r6
 800eb70:	461e      	mov	r6, r3
 800eb72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb76:	2a39      	cmp	r2, #57	@ 0x39
 800eb78:	d107      	bne.n	800eb8a <_dtoa_r+0x6da>
 800eb7a:	459a      	cmp	sl, r3
 800eb7c:	d1f8      	bne.n	800eb70 <_dtoa_r+0x6c0>
 800eb7e:	9a04      	ldr	r2, [sp, #16]
 800eb80:	3201      	adds	r2, #1
 800eb82:	9204      	str	r2, [sp, #16]
 800eb84:	2230      	movs	r2, #48	@ 0x30
 800eb86:	f88a 2000 	strb.w	r2, [sl]
 800eb8a:	781a      	ldrb	r2, [r3, #0]
 800eb8c:	3201      	adds	r2, #1
 800eb8e:	701a      	strb	r2, [r3, #0]
 800eb90:	e7bd      	b.n	800eb0e <_dtoa_r+0x65e>
 800eb92:	4b7b      	ldr	r3, [pc, #492]	@ (800ed80 <_dtoa_r+0x8d0>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	f7f1 fd47 	bl	8000628 <__aeabi_dmul>
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	4604      	mov	r4, r0
 800eba0:	460d      	mov	r5, r1
 800eba2:	f7f1 ffa9 	bl	8000af8 <__aeabi_dcmpeq>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	f43f aebb 	beq.w	800e922 <_dtoa_r+0x472>
 800ebac:	e6f0      	b.n	800e990 <_dtoa_r+0x4e0>
 800ebae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ebb0:	2a00      	cmp	r2, #0
 800ebb2:	f000 80db 	beq.w	800ed6c <_dtoa_r+0x8bc>
 800ebb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebb8:	2a01      	cmp	r2, #1
 800ebba:	f300 80bf 	bgt.w	800ed3c <_dtoa_r+0x88c>
 800ebbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ebc0:	2a00      	cmp	r2, #0
 800ebc2:	f000 80b7 	beq.w	800ed34 <_dtoa_r+0x884>
 800ebc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ebca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ebcc:	4646      	mov	r6, r8
 800ebce:	9a08      	ldr	r2, [sp, #32]
 800ebd0:	2101      	movs	r1, #1
 800ebd2:	441a      	add	r2, r3
 800ebd4:	4658      	mov	r0, fp
 800ebd6:	4498      	add	r8, r3
 800ebd8:	9208      	str	r2, [sp, #32]
 800ebda:	f000 ff01 	bl	800f9e0 <__i2b>
 800ebde:	4605      	mov	r5, r0
 800ebe0:	b15e      	cbz	r6, 800ebfa <_dtoa_r+0x74a>
 800ebe2:	9b08      	ldr	r3, [sp, #32]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	dd08      	ble.n	800ebfa <_dtoa_r+0x74a>
 800ebe8:	42b3      	cmp	r3, r6
 800ebea:	9a08      	ldr	r2, [sp, #32]
 800ebec:	bfa8      	it	ge
 800ebee:	4633      	movge	r3, r6
 800ebf0:	eba8 0803 	sub.w	r8, r8, r3
 800ebf4:	1af6      	subs	r6, r6, r3
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	9308      	str	r3, [sp, #32]
 800ebfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebfc:	b1f3      	cbz	r3, 800ec3c <_dtoa_r+0x78c>
 800ebfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f000 80b7 	beq.w	800ed74 <_dtoa_r+0x8c4>
 800ec06:	b18c      	cbz	r4, 800ec2c <_dtoa_r+0x77c>
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	4658      	mov	r0, fp
 800ec0e:	f000 ffa7 	bl	800fb60 <__pow5mult>
 800ec12:	464a      	mov	r2, r9
 800ec14:	4601      	mov	r1, r0
 800ec16:	4605      	mov	r5, r0
 800ec18:	4658      	mov	r0, fp
 800ec1a:	f000 fef7 	bl	800fa0c <__multiply>
 800ec1e:	4649      	mov	r1, r9
 800ec20:	9004      	str	r0, [sp, #16]
 800ec22:	4658      	mov	r0, fp
 800ec24:	f000 fdde 	bl	800f7e4 <_Bfree>
 800ec28:	9b04      	ldr	r3, [sp, #16]
 800ec2a:	4699      	mov	r9, r3
 800ec2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec2e:	1b1a      	subs	r2, r3, r4
 800ec30:	d004      	beq.n	800ec3c <_dtoa_r+0x78c>
 800ec32:	4649      	mov	r1, r9
 800ec34:	4658      	mov	r0, fp
 800ec36:	f000 ff93 	bl	800fb60 <__pow5mult>
 800ec3a:	4681      	mov	r9, r0
 800ec3c:	2101      	movs	r1, #1
 800ec3e:	4658      	mov	r0, fp
 800ec40:	f000 fece 	bl	800f9e0 <__i2b>
 800ec44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec46:	4604      	mov	r4, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	f000 81cf 	beq.w	800efec <_dtoa_r+0xb3c>
 800ec4e:	461a      	mov	r2, r3
 800ec50:	4601      	mov	r1, r0
 800ec52:	4658      	mov	r0, fp
 800ec54:	f000 ff84 	bl	800fb60 <__pow5mult>
 800ec58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	f300 8095 	bgt.w	800ed8c <_dtoa_r+0x8dc>
 800ec62:	9b02      	ldr	r3, [sp, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f040 8087 	bne.w	800ed78 <_dtoa_r+0x8c8>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f040 8089 	bne.w	800ed88 <_dtoa_r+0x8d8>
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec7c:	0d1b      	lsrs	r3, r3, #20
 800ec7e:	051b      	lsls	r3, r3, #20
 800ec80:	b12b      	cbz	r3, 800ec8e <_dtoa_r+0x7de>
 800ec82:	9b08      	ldr	r3, [sp, #32]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9308      	str	r3, [sp, #32]
 800ec88:	f108 0801 	add.w	r8, r8, #1
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f000 81b0 	beq.w	800eff8 <_dtoa_r+0xb48>
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec9e:	6918      	ldr	r0, [r3, #16]
 800eca0:	f000 fe52 	bl	800f948 <__hi0bits>
 800eca4:	f1c0 0020 	rsb	r0, r0, #32
 800eca8:	9b08      	ldr	r3, [sp, #32]
 800ecaa:	4418      	add	r0, r3
 800ecac:	f010 001f 	ands.w	r0, r0, #31
 800ecb0:	d077      	beq.n	800eda2 <_dtoa_r+0x8f2>
 800ecb2:	f1c0 0320 	rsb	r3, r0, #32
 800ecb6:	2b04      	cmp	r3, #4
 800ecb8:	dd6b      	ble.n	800ed92 <_dtoa_r+0x8e2>
 800ecba:	9b08      	ldr	r3, [sp, #32]
 800ecbc:	f1c0 001c 	rsb	r0, r0, #28
 800ecc0:	4403      	add	r3, r0
 800ecc2:	4480      	add	r8, r0
 800ecc4:	4406      	add	r6, r0
 800ecc6:	9308      	str	r3, [sp, #32]
 800ecc8:	f1b8 0f00 	cmp.w	r8, #0
 800eccc:	dd05      	ble.n	800ecda <_dtoa_r+0x82a>
 800ecce:	4649      	mov	r1, r9
 800ecd0:	4642      	mov	r2, r8
 800ecd2:	4658      	mov	r0, fp
 800ecd4:	f000 ff9e 	bl	800fc14 <__lshift>
 800ecd8:	4681      	mov	r9, r0
 800ecda:	9b08      	ldr	r3, [sp, #32]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd05      	ble.n	800ecec <_dtoa_r+0x83c>
 800ece0:	4621      	mov	r1, r4
 800ece2:	461a      	mov	r2, r3
 800ece4:	4658      	mov	r0, fp
 800ece6:	f000 ff95 	bl	800fc14 <__lshift>
 800ecea:	4604      	mov	r4, r0
 800ecec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d059      	beq.n	800eda6 <_dtoa_r+0x8f6>
 800ecf2:	4621      	mov	r1, r4
 800ecf4:	4648      	mov	r0, r9
 800ecf6:	f000 fff9 	bl	800fcec <__mcmp>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	da53      	bge.n	800eda6 <_dtoa_r+0x8f6>
 800ecfe:	1e7b      	subs	r3, r7, #1
 800ed00:	9304      	str	r3, [sp, #16]
 800ed02:	4649      	mov	r1, r9
 800ed04:	2300      	movs	r3, #0
 800ed06:	220a      	movs	r2, #10
 800ed08:	4658      	mov	r0, fp
 800ed0a:	f000 fd8d 	bl	800f828 <__multadd>
 800ed0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed10:	4681      	mov	r9, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f000 8172 	beq.w	800effc <_dtoa_r+0xb4c>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	220a      	movs	r2, #10
 800ed1e:	4658      	mov	r0, fp
 800ed20:	f000 fd82 	bl	800f828 <__multadd>
 800ed24:	9b00      	ldr	r3, [sp, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	4605      	mov	r5, r0
 800ed2a:	dc67      	bgt.n	800edfc <_dtoa_r+0x94c>
 800ed2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed2e:	2b02      	cmp	r3, #2
 800ed30:	dc41      	bgt.n	800edb6 <_dtoa_r+0x906>
 800ed32:	e063      	b.n	800edfc <_dtoa_r+0x94c>
 800ed34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ed36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ed3a:	e746      	b.n	800ebca <_dtoa_r+0x71a>
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	1e5c      	subs	r4, r3, #1
 800ed40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed42:	42a3      	cmp	r3, r4
 800ed44:	bfbf      	itttt	lt
 800ed46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ed4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ed4c:	1ae3      	sublt	r3, r4, r3
 800ed4e:	bfb4      	ite	lt
 800ed50:	18d2      	addlt	r2, r2, r3
 800ed52:	1b1c      	subge	r4, r3, r4
 800ed54:	9b07      	ldr	r3, [sp, #28]
 800ed56:	bfbc      	itt	lt
 800ed58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ed5a:	2400      	movlt	r4, #0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bfb5      	itete	lt
 800ed60:	eba8 0603 	sublt.w	r6, r8, r3
 800ed64:	9b07      	ldrge	r3, [sp, #28]
 800ed66:	2300      	movlt	r3, #0
 800ed68:	4646      	movge	r6, r8
 800ed6a:	e730      	b.n	800ebce <_dtoa_r+0x71e>
 800ed6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ed70:	4646      	mov	r6, r8
 800ed72:	e735      	b.n	800ebe0 <_dtoa_r+0x730>
 800ed74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed76:	e75c      	b.n	800ec32 <_dtoa_r+0x782>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e788      	b.n	800ec8e <_dtoa_r+0x7de>
 800ed7c:	3fe00000 	.word	0x3fe00000
 800ed80:	40240000 	.word	0x40240000
 800ed84:	40140000 	.word	0x40140000
 800ed88:	9b02      	ldr	r3, [sp, #8]
 800ed8a:	e780      	b.n	800ec8e <_dtoa_r+0x7de>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed90:	e782      	b.n	800ec98 <_dtoa_r+0x7e8>
 800ed92:	d099      	beq.n	800ecc8 <_dtoa_r+0x818>
 800ed94:	9a08      	ldr	r2, [sp, #32]
 800ed96:	331c      	adds	r3, #28
 800ed98:	441a      	add	r2, r3
 800ed9a:	4498      	add	r8, r3
 800ed9c:	441e      	add	r6, r3
 800ed9e:	9208      	str	r2, [sp, #32]
 800eda0:	e792      	b.n	800ecc8 <_dtoa_r+0x818>
 800eda2:	4603      	mov	r3, r0
 800eda4:	e7f6      	b.n	800ed94 <_dtoa_r+0x8e4>
 800eda6:	9b07      	ldr	r3, [sp, #28]
 800eda8:	9704      	str	r7, [sp, #16]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dc20      	bgt.n	800edf0 <_dtoa_r+0x940>
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	dd1e      	ble.n	800edf4 <_dtoa_r+0x944>
 800edb6:	9b00      	ldr	r3, [sp, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f47f aec0 	bne.w	800eb3e <_dtoa_r+0x68e>
 800edbe:	4621      	mov	r1, r4
 800edc0:	2205      	movs	r2, #5
 800edc2:	4658      	mov	r0, fp
 800edc4:	f000 fd30 	bl	800f828 <__multadd>
 800edc8:	4601      	mov	r1, r0
 800edca:	4604      	mov	r4, r0
 800edcc:	4648      	mov	r0, r9
 800edce:	f000 ff8d 	bl	800fcec <__mcmp>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	f77f aeb3 	ble.w	800eb3e <_dtoa_r+0x68e>
 800edd8:	4656      	mov	r6, sl
 800edda:	2331      	movs	r3, #49	@ 0x31
 800eddc:	f806 3b01 	strb.w	r3, [r6], #1
 800ede0:	9b04      	ldr	r3, [sp, #16]
 800ede2:	3301      	adds	r3, #1
 800ede4:	9304      	str	r3, [sp, #16]
 800ede6:	e6ae      	b.n	800eb46 <_dtoa_r+0x696>
 800ede8:	9c07      	ldr	r4, [sp, #28]
 800edea:	9704      	str	r7, [sp, #16]
 800edec:	4625      	mov	r5, r4
 800edee:	e7f3      	b.n	800edd8 <_dtoa_r+0x928>
 800edf0:	9b07      	ldr	r3, [sp, #28]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 8104 	beq.w	800f004 <_dtoa_r+0xb54>
 800edfc:	2e00      	cmp	r6, #0
 800edfe:	dd05      	ble.n	800ee0c <_dtoa_r+0x95c>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4632      	mov	r2, r6
 800ee04:	4658      	mov	r0, fp
 800ee06:	f000 ff05 	bl	800fc14 <__lshift>
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d05a      	beq.n	800eec8 <_dtoa_r+0xa18>
 800ee12:	6869      	ldr	r1, [r5, #4]
 800ee14:	4658      	mov	r0, fp
 800ee16:	f000 fca5 	bl	800f764 <_Balloc>
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	b928      	cbnz	r0, 800ee2a <_dtoa_r+0x97a>
 800ee1e:	4b84      	ldr	r3, [pc, #528]	@ (800f030 <_dtoa_r+0xb80>)
 800ee20:	4602      	mov	r2, r0
 800ee22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ee26:	f7ff bb5a 	b.w	800e4de <_dtoa_r+0x2e>
 800ee2a:	692a      	ldr	r2, [r5, #16]
 800ee2c:	3202      	adds	r2, #2
 800ee2e:	0092      	lsls	r2, r2, #2
 800ee30:	f105 010c 	add.w	r1, r5, #12
 800ee34:	300c      	adds	r0, #12
 800ee36:	f7ff fa76 	bl	800e326 <memcpy>
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	4631      	mov	r1, r6
 800ee3e:	4658      	mov	r0, fp
 800ee40:	f000 fee8 	bl	800fc14 <__lshift>
 800ee44:	f10a 0301 	add.w	r3, sl, #1
 800ee48:	9307      	str	r3, [sp, #28]
 800ee4a:	9b00      	ldr	r3, [sp, #0]
 800ee4c:	4453      	add	r3, sl
 800ee4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee50:	9b02      	ldr	r3, [sp, #8]
 800ee52:	f003 0301 	and.w	r3, r3, #1
 800ee56:	462f      	mov	r7, r5
 800ee58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	9b07      	ldr	r3, [sp, #28]
 800ee5e:	4621      	mov	r1, r4
 800ee60:	3b01      	subs	r3, #1
 800ee62:	4648      	mov	r0, r9
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	f7ff fa9b 	bl	800e3a0 <quorem>
 800ee6a:	4639      	mov	r1, r7
 800ee6c:	9002      	str	r0, [sp, #8]
 800ee6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee72:	4648      	mov	r0, r9
 800ee74:	f000 ff3a 	bl	800fcec <__mcmp>
 800ee78:	462a      	mov	r2, r5
 800ee7a:	9008      	str	r0, [sp, #32]
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4658      	mov	r0, fp
 800ee80:	f000 ff50 	bl	800fd24 <__mdiff>
 800ee84:	68c2      	ldr	r2, [r0, #12]
 800ee86:	4606      	mov	r6, r0
 800ee88:	bb02      	cbnz	r2, 800eecc <_dtoa_r+0xa1c>
 800ee8a:	4601      	mov	r1, r0
 800ee8c:	4648      	mov	r0, r9
 800ee8e:	f000 ff2d 	bl	800fcec <__mcmp>
 800ee92:	4602      	mov	r2, r0
 800ee94:	4631      	mov	r1, r6
 800ee96:	4658      	mov	r0, fp
 800ee98:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee9a:	f000 fca3 	bl	800f7e4 <_Bfree>
 800ee9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eea2:	9e07      	ldr	r6, [sp, #28]
 800eea4:	ea43 0102 	orr.w	r1, r3, r2
 800eea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eeaa:	4319      	orrs	r1, r3
 800eeac:	d110      	bne.n	800eed0 <_dtoa_r+0xa20>
 800eeae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eeb2:	d029      	beq.n	800ef08 <_dtoa_r+0xa58>
 800eeb4:	9b08      	ldr	r3, [sp, #32]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dd02      	ble.n	800eec0 <_dtoa_r+0xa10>
 800eeba:	9b02      	ldr	r3, [sp, #8]
 800eebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eec0:	9b00      	ldr	r3, [sp, #0]
 800eec2:	f883 8000 	strb.w	r8, [r3]
 800eec6:	e63f      	b.n	800eb48 <_dtoa_r+0x698>
 800eec8:	4628      	mov	r0, r5
 800eeca:	e7bb      	b.n	800ee44 <_dtoa_r+0x994>
 800eecc:	2201      	movs	r2, #1
 800eece:	e7e1      	b.n	800ee94 <_dtoa_r+0x9e4>
 800eed0:	9b08      	ldr	r3, [sp, #32]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	db04      	blt.n	800eee0 <_dtoa_r+0xa30>
 800eed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eed8:	430b      	orrs	r3, r1
 800eeda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eedc:	430b      	orrs	r3, r1
 800eede:	d120      	bne.n	800ef22 <_dtoa_r+0xa72>
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	dded      	ble.n	800eec0 <_dtoa_r+0xa10>
 800eee4:	4649      	mov	r1, r9
 800eee6:	2201      	movs	r2, #1
 800eee8:	4658      	mov	r0, fp
 800eeea:	f000 fe93 	bl	800fc14 <__lshift>
 800eeee:	4621      	mov	r1, r4
 800eef0:	4681      	mov	r9, r0
 800eef2:	f000 fefb 	bl	800fcec <__mcmp>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	dc03      	bgt.n	800ef02 <_dtoa_r+0xa52>
 800eefa:	d1e1      	bne.n	800eec0 <_dtoa_r+0xa10>
 800eefc:	f018 0f01 	tst.w	r8, #1
 800ef00:	d0de      	beq.n	800eec0 <_dtoa_r+0xa10>
 800ef02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef06:	d1d8      	bne.n	800eeba <_dtoa_r+0xa0a>
 800ef08:	9a00      	ldr	r2, [sp, #0]
 800ef0a:	2339      	movs	r3, #57	@ 0x39
 800ef0c:	7013      	strb	r3, [r2, #0]
 800ef0e:	4633      	mov	r3, r6
 800ef10:	461e      	mov	r6, r3
 800ef12:	3b01      	subs	r3, #1
 800ef14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ef18:	2a39      	cmp	r2, #57	@ 0x39
 800ef1a:	d052      	beq.n	800efc2 <_dtoa_r+0xb12>
 800ef1c:	3201      	adds	r2, #1
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	e612      	b.n	800eb48 <_dtoa_r+0x698>
 800ef22:	2a00      	cmp	r2, #0
 800ef24:	dd07      	ble.n	800ef36 <_dtoa_r+0xa86>
 800ef26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ef2a:	d0ed      	beq.n	800ef08 <_dtoa_r+0xa58>
 800ef2c:	9a00      	ldr	r2, [sp, #0]
 800ef2e:	f108 0301 	add.w	r3, r8, #1
 800ef32:	7013      	strb	r3, [r2, #0]
 800ef34:	e608      	b.n	800eb48 <_dtoa_r+0x698>
 800ef36:	9b07      	ldr	r3, [sp, #28]
 800ef38:	9a07      	ldr	r2, [sp, #28]
 800ef3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ef3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d028      	beq.n	800ef96 <_dtoa_r+0xae6>
 800ef44:	4649      	mov	r1, r9
 800ef46:	2300      	movs	r3, #0
 800ef48:	220a      	movs	r2, #10
 800ef4a:	4658      	mov	r0, fp
 800ef4c:	f000 fc6c 	bl	800f828 <__multadd>
 800ef50:	42af      	cmp	r7, r5
 800ef52:	4681      	mov	r9, r0
 800ef54:	f04f 0300 	mov.w	r3, #0
 800ef58:	f04f 020a 	mov.w	r2, #10
 800ef5c:	4639      	mov	r1, r7
 800ef5e:	4658      	mov	r0, fp
 800ef60:	d107      	bne.n	800ef72 <_dtoa_r+0xac2>
 800ef62:	f000 fc61 	bl	800f828 <__multadd>
 800ef66:	4607      	mov	r7, r0
 800ef68:	4605      	mov	r5, r0
 800ef6a:	9b07      	ldr	r3, [sp, #28]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	9307      	str	r3, [sp, #28]
 800ef70:	e774      	b.n	800ee5c <_dtoa_r+0x9ac>
 800ef72:	f000 fc59 	bl	800f828 <__multadd>
 800ef76:	4629      	mov	r1, r5
 800ef78:	4607      	mov	r7, r0
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	220a      	movs	r2, #10
 800ef7e:	4658      	mov	r0, fp
 800ef80:	f000 fc52 	bl	800f828 <__multadd>
 800ef84:	4605      	mov	r5, r0
 800ef86:	e7f0      	b.n	800ef6a <_dtoa_r+0xaba>
 800ef88:	9b00      	ldr	r3, [sp, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	bfcc      	ite	gt
 800ef8e:	461e      	movgt	r6, r3
 800ef90:	2601      	movle	r6, #1
 800ef92:	4456      	add	r6, sl
 800ef94:	2700      	movs	r7, #0
 800ef96:	4649      	mov	r1, r9
 800ef98:	2201      	movs	r2, #1
 800ef9a:	4658      	mov	r0, fp
 800ef9c:	f000 fe3a 	bl	800fc14 <__lshift>
 800efa0:	4621      	mov	r1, r4
 800efa2:	4681      	mov	r9, r0
 800efa4:	f000 fea2 	bl	800fcec <__mcmp>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	dcb0      	bgt.n	800ef0e <_dtoa_r+0xa5e>
 800efac:	d102      	bne.n	800efb4 <_dtoa_r+0xb04>
 800efae:	f018 0f01 	tst.w	r8, #1
 800efb2:	d1ac      	bne.n	800ef0e <_dtoa_r+0xa5e>
 800efb4:	4633      	mov	r3, r6
 800efb6:	461e      	mov	r6, r3
 800efb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efbc:	2a30      	cmp	r2, #48	@ 0x30
 800efbe:	d0fa      	beq.n	800efb6 <_dtoa_r+0xb06>
 800efc0:	e5c2      	b.n	800eb48 <_dtoa_r+0x698>
 800efc2:	459a      	cmp	sl, r3
 800efc4:	d1a4      	bne.n	800ef10 <_dtoa_r+0xa60>
 800efc6:	9b04      	ldr	r3, [sp, #16]
 800efc8:	3301      	adds	r3, #1
 800efca:	9304      	str	r3, [sp, #16]
 800efcc:	2331      	movs	r3, #49	@ 0x31
 800efce:	f88a 3000 	strb.w	r3, [sl]
 800efd2:	e5b9      	b.n	800eb48 <_dtoa_r+0x698>
 800efd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800efd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f034 <_dtoa_r+0xb84>
 800efda:	b11b      	cbz	r3, 800efe4 <_dtoa_r+0xb34>
 800efdc:	f10a 0308 	add.w	r3, sl, #8
 800efe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800efe2:	6013      	str	r3, [r2, #0]
 800efe4:	4650      	mov	r0, sl
 800efe6:	b019      	add	sp, #100	@ 0x64
 800efe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efee:	2b01      	cmp	r3, #1
 800eff0:	f77f ae37 	ble.w	800ec62 <_dtoa_r+0x7b2>
 800eff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eff8:	2001      	movs	r0, #1
 800effa:	e655      	b.n	800eca8 <_dtoa_r+0x7f8>
 800effc:	9b00      	ldr	r3, [sp, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	f77f aed6 	ble.w	800edb0 <_dtoa_r+0x900>
 800f004:	4656      	mov	r6, sl
 800f006:	4621      	mov	r1, r4
 800f008:	4648      	mov	r0, r9
 800f00a:	f7ff f9c9 	bl	800e3a0 <quorem>
 800f00e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f012:	f806 8b01 	strb.w	r8, [r6], #1
 800f016:	9b00      	ldr	r3, [sp, #0]
 800f018:	eba6 020a 	sub.w	r2, r6, sl
 800f01c:	4293      	cmp	r3, r2
 800f01e:	ddb3      	ble.n	800ef88 <_dtoa_r+0xad8>
 800f020:	4649      	mov	r1, r9
 800f022:	2300      	movs	r3, #0
 800f024:	220a      	movs	r2, #10
 800f026:	4658      	mov	r0, fp
 800f028:	f000 fbfe 	bl	800f828 <__multadd>
 800f02c:	4681      	mov	r9, r0
 800f02e:	e7ea      	b.n	800f006 <_dtoa_r+0xb56>
 800f030:	08011654 	.word	0x08011654
 800f034:	080115ef 	.word	0x080115ef

0800f038 <_free_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4605      	mov	r5, r0
 800f03c:	2900      	cmp	r1, #0
 800f03e:	d041      	beq.n	800f0c4 <_free_r+0x8c>
 800f040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f044:	1f0c      	subs	r4, r1, #4
 800f046:	2b00      	cmp	r3, #0
 800f048:	bfb8      	it	lt
 800f04a:	18e4      	addlt	r4, r4, r3
 800f04c:	f7fd f90c 	bl	800c268 <__malloc_lock>
 800f050:	4a1d      	ldr	r2, [pc, #116]	@ (800f0c8 <_free_r+0x90>)
 800f052:	6813      	ldr	r3, [r2, #0]
 800f054:	b933      	cbnz	r3, 800f064 <_free_r+0x2c>
 800f056:	6063      	str	r3, [r4, #4]
 800f058:	6014      	str	r4, [r2, #0]
 800f05a:	4628      	mov	r0, r5
 800f05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f060:	f7fd b908 	b.w	800c274 <__malloc_unlock>
 800f064:	42a3      	cmp	r3, r4
 800f066:	d908      	bls.n	800f07a <_free_r+0x42>
 800f068:	6820      	ldr	r0, [r4, #0]
 800f06a:	1821      	adds	r1, r4, r0
 800f06c:	428b      	cmp	r3, r1
 800f06e:	bf01      	itttt	eq
 800f070:	6819      	ldreq	r1, [r3, #0]
 800f072:	685b      	ldreq	r3, [r3, #4]
 800f074:	1809      	addeq	r1, r1, r0
 800f076:	6021      	streq	r1, [r4, #0]
 800f078:	e7ed      	b.n	800f056 <_free_r+0x1e>
 800f07a:	461a      	mov	r2, r3
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	b10b      	cbz	r3, 800f084 <_free_r+0x4c>
 800f080:	42a3      	cmp	r3, r4
 800f082:	d9fa      	bls.n	800f07a <_free_r+0x42>
 800f084:	6811      	ldr	r1, [r2, #0]
 800f086:	1850      	adds	r0, r2, r1
 800f088:	42a0      	cmp	r0, r4
 800f08a:	d10b      	bne.n	800f0a4 <_free_r+0x6c>
 800f08c:	6820      	ldr	r0, [r4, #0]
 800f08e:	4401      	add	r1, r0
 800f090:	1850      	adds	r0, r2, r1
 800f092:	4283      	cmp	r3, r0
 800f094:	6011      	str	r1, [r2, #0]
 800f096:	d1e0      	bne.n	800f05a <_free_r+0x22>
 800f098:	6818      	ldr	r0, [r3, #0]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	6053      	str	r3, [r2, #4]
 800f09e:	4408      	add	r0, r1
 800f0a0:	6010      	str	r0, [r2, #0]
 800f0a2:	e7da      	b.n	800f05a <_free_r+0x22>
 800f0a4:	d902      	bls.n	800f0ac <_free_r+0x74>
 800f0a6:	230c      	movs	r3, #12
 800f0a8:	602b      	str	r3, [r5, #0]
 800f0aa:	e7d6      	b.n	800f05a <_free_r+0x22>
 800f0ac:	6820      	ldr	r0, [r4, #0]
 800f0ae:	1821      	adds	r1, r4, r0
 800f0b0:	428b      	cmp	r3, r1
 800f0b2:	bf04      	itt	eq
 800f0b4:	6819      	ldreq	r1, [r3, #0]
 800f0b6:	685b      	ldreq	r3, [r3, #4]
 800f0b8:	6063      	str	r3, [r4, #4]
 800f0ba:	bf04      	itt	eq
 800f0bc:	1809      	addeq	r1, r1, r0
 800f0be:	6021      	streq	r1, [r4, #0]
 800f0c0:	6054      	str	r4, [r2, #4]
 800f0c2:	e7ca      	b.n	800f05a <_free_r+0x22>
 800f0c4:	bd38      	pop	{r3, r4, r5, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20001158 	.word	0x20001158

0800f0cc <rshift>:
 800f0cc:	6903      	ldr	r3, [r0, #16]
 800f0ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f0d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f0da:	f100 0414 	add.w	r4, r0, #20
 800f0de:	dd45      	ble.n	800f16c <rshift+0xa0>
 800f0e0:	f011 011f 	ands.w	r1, r1, #31
 800f0e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0ec:	d10c      	bne.n	800f108 <rshift+0x3c>
 800f0ee:	f100 0710 	add.w	r7, r0, #16
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	42b1      	cmp	r1, r6
 800f0f6:	d334      	bcc.n	800f162 <rshift+0x96>
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	1eea      	subs	r2, r5, #3
 800f0fe:	4296      	cmp	r6, r2
 800f100:	bf38      	it	cc
 800f102:	2300      	movcc	r3, #0
 800f104:	4423      	add	r3, r4
 800f106:	e015      	b.n	800f134 <rshift+0x68>
 800f108:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f10c:	f1c1 0820 	rsb	r8, r1, #32
 800f110:	40cf      	lsrs	r7, r1
 800f112:	f105 0e04 	add.w	lr, r5, #4
 800f116:	46a1      	mov	r9, r4
 800f118:	4576      	cmp	r6, lr
 800f11a:	46f4      	mov	ip, lr
 800f11c:	d815      	bhi.n	800f14a <rshift+0x7e>
 800f11e:	1a9a      	subs	r2, r3, r2
 800f120:	0092      	lsls	r2, r2, #2
 800f122:	3a04      	subs	r2, #4
 800f124:	3501      	adds	r5, #1
 800f126:	42ae      	cmp	r6, r5
 800f128:	bf38      	it	cc
 800f12a:	2200      	movcc	r2, #0
 800f12c:	18a3      	adds	r3, r4, r2
 800f12e:	50a7      	str	r7, [r4, r2]
 800f130:	b107      	cbz	r7, 800f134 <rshift+0x68>
 800f132:	3304      	adds	r3, #4
 800f134:	1b1a      	subs	r2, r3, r4
 800f136:	42a3      	cmp	r3, r4
 800f138:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f13c:	bf08      	it	eq
 800f13e:	2300      	moveq	r3, #0
 800f140:	6102      	str	r2, [r0, #16]
 800f142:	bf08      	it	eq
 800f144:	6143      	streq	r3, [r0, #20]
 800f146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f14a:	f8dc c000 	ldr.w	ip, [ip]
 800f14e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f152:	ea4c 0707 	orr.w	r7, ip, r7
 800f156:	f849 7b04 	str.w	r7, [r9], #4
 800f15a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f15e:	40cf      	lsrs	r7, r1
 800f160:	e7da      	b.n	800f118 <rshift+0x4c>
 800f162:	f851 cb04 	ldr.w	ip, [r1], #4
 800f166:	f847 cf04 	str.w	ip, [r7, #4]!
 800f16a:	e7c3      	b.n	800f0f4 <rshift+0x28>
 800f16c:	4623      	mov	r3, r4
 800f16e:	e7e1      	b.n	800f134 <rshift+0x68>

0800f170 <__hexdig_fun>:
 800f170:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f174:	2b09      	cmp	r3, #9
 800f176:	d802      	bhi.n	800f17e <__hexdig_fun+0xe>
 800f178:	3820      	subs	r0, #32
 800f17a:	b2c0      	uxtb	r0, r0
 800f17c:	4770      	bx	lr
 800f17e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f182:	2b05      	cmp	r3, #5
 800f184:	d801      	bhi.n	800f18a <__hexdig_fun+0x1a>
 800f186:	3847      	subs	r0, #71	@ 0x47
 800f188:	e7f7      	b.n	800f17a <__hexdig_fun+0xa>
 800f18a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f18e:	2b05      	cmp	r3, #5
 800f190:	d801      	bhi.n	800f196 <__hexdig_fun+0x26>
 800f192:	3827      	subs	r0, #39	@ 0x27
 800f194:	e7f1      	b.n	800f17a <__hexdig_fun+0xa>
 800f196:	2000      	movs	r0, #0
 800f198:	4770      	bx	lr
	...

0800f19c <__gethex>:
 800f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	b085      	sub	sp, #20
 800f1a2:	468a      	mov	sl, r1
 800f1a4:	9302      	str	r3, [sp, #8]
 800f1a6:	680b      	ldr	r3, [r1, #0]
 800f1a8:	9001      	str	r0, [sp, #4]
 800f1aa:	4690      	mov	r8, r2
 800f1ac:	1c9c      	adds	r4, r3, #2
 800f1ae:	46a1      	mov	r9, r4
 800f1b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f1b4:	2830      	cmp	r0, #48	@ 0x30
 800f1b6:	d0fa      	beq.n	800f1ae <__gethex+0x12>
 800f1b8:	eba9 0303 	sub.w	r3, r9, r3
 800f1bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f1c0:	f7ff ffd6 	bl	800f170 <__hexdig_fun>
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d168      	bne.n	800f29c <__gethex+0x100>
 800f1ca:	49a0      	ldr	r1, [pc, #640]	@ (800f44c <__gethex+0x2b0>)
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	4648      	mov	r0, r9
 800f1d0:	f7fe ff8a 	bl	800e0e8 <strncmp>
 800f1d4:	4607      	mov	r7, r0
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d167      	bne.n	800f2aa <__gethex+0x10e>
 800f1da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f1de:	4626      	mov	r6, r4
 800f1e0:	f7ff ffc6 	bl	800f170 <__hexdig_fun>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d062      	beq.n	800f2ae <__gethex+0x112>
 800f1e8:	4623      	mov	r3, r4
 800f1ea:	7818      	ldrb	r0, [r3, #0]
 800f1ec:	2830      	cmp	r0, #48	@ 0x30
 800f1ee:	4699      	mov	r9, r3
 800f1f0:	f103 0301 	add.w	r3, r3, #1
 800f1f4:	d0f9      	beq.n	800f1ea <__gethex+0x4e>
 800f1f6:	f7ff ffbb 	bl	800f170 <__hexdig_fun>
 800f1fa:	fab0 f580 	clz	r5, r0
 800f1fe:	096d      	lsrs	r5, r5, #5
 800f200:	f04f 0b01 	mov.w	fp, #1
 800f204:	464a      	mov	r2, r9
 800f206:	4616      	mov	r6, r2
 800f208:	3201      	adds	r2, #1
 800f20a:	7830      	ldrb	r0, [r6, #0]
 800f20c:	f7ff ffb0 	bl	800f170 <__hexdig_fun>
 800f210:	2800      	cmp	r0, #0
 800f212:	d1f8      	bne.n	800f206 <__gethex+0x6a>
 800f214:	498d      	ldr	r1, [pc, #564]	@ (800f44c <__gethex+0x2b0>)
 800f216:	2201      	movs	r2, #1
 800f218:	4630      	mov	r0, r6
 800f21a:	f7fe ff65 	bl	800e0e8 <strncmp>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d13f      	bne.n	800f2a2 <__gethex+0x106>
 800f222:	b944      	cbnz	r4, 800f236 <__gethex+0x9a>
 800f224:	1c74      	adds	r4, r6, #1
 800f226:	4622      	mov	r2, r4
 800f228:	4616      	mov	r6, r2
 800f22a:	3201      	adds	r2, #1
 800f22c:	7830      	ldrb	r0, [r6, #0]
 800f22e:	f7ff ff9f 	bl	800f170 <__hexdig_fun>
 800f232:	2800      	cmp	r0, #0
 800f234:	d1f8      	bne.n	800f228 <__gethex+0x8c>
 800f236:	1ba4      	subs	r4, r4, r6
 800f238:	00a7      	lsls	r7, r4, #2
 800f23a:	7833      	ldrb	r3, [r6, #0]
 800f23c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f240:	2b50      	cmp	r3, #80	@ 0x50
 800f242:	d13e      	bne.n	800f2c2 <__gethex+0x126>
 800f244:	7873      	ldrb	r3, [r6, #1]
 800f246:	2b2b      	cmp	r3, #43	@ 0x2b
 800f248:	d033      	beq.n	800f2b2 <__gethex+0x116>
 800f24a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f24c:	d034      	beq.n	800f2b8 <__gethex+0x11c>
 800f24e:	1c71      	adds	r1, r6, #1
 800f250:	2400      	movs	r4, #0
 800f252:	7808      	ldrb	r0, [r1, #0]
 800f254:	f7ff ff8c 	bl	800f170 <__hexdig_fun>
 800f258:	1e43      	subs	r3, r0, #1
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b18      	cmp	r3, #24
 800f25e:	d830      	bhi.n	800f2c2 <__gethex+0x126>
 800f260:	f1a0 0210 	sub.w	r2, r0, #16
 800f264:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f268:	f7ff ff82 	bl	800f170 <__hexdig_fun>
 800f26c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f270:	fa5f fc8c 	uxtb.w	ip, ip
 800f274:	f1bc 0f18 	cmp.w	ip, #24
 800f278:	f04f 030a 	mov.w	r3, #10
 800f27c:	d91e      	bls.n	800f2bc <__gethex+0x120>
 800f27e:	b104      	cbz	r4, 800f282 <__gethex+0xe6>
 800f280:	4252      	negs	r2, r2
 800f282:	4417      	add	r7, r2
 800f284:	f8ca 1000 	str.w	r1, [sl]
 800f288:	b1ed      	cbz	r5, 800f2c6 <__gethex+0x12a>
 800f28a:	f1bb 0f00 	cmp.w	fp, #0
 800f28e:	bf0c      	ite	eq
 800f290:	2506      	moveq	r5, #6
 800f292:	2500      	movne	r5, #0
 800f294:	4628      	mov	r0, r5
 800f296:	b005      	add	sp, #20
 800f298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29c:	2500      	movs	r5, #0
 800f29e:	462c      	mov	r4, r5
 800f2a0:	e7b0      	b.n	800f204 <__gethex+0x68>
 800f2a2:	2c00      	cmp	r4, #0
 800f2a4:	d1c7      	bne.n	800f236 <__gethex+0x9a>
 800f2a6:	4627      	mov	r7, r4
 800f2a8:	e7c7      	b.n	800f23a <__gethex+0x9e>
 800f2aa:	464e      	mov	r6, r9
 800f2ac:	462f      	mov	r7, r5
 800f2ae:	2501      	movs	r5, #1
 800f2b0:	e7c3      	b.n	800f23a <__gethex+0x9e>
 800f2b2:	2400      	movs	r4, #0
 800f2b4:	1cb1      	adds	r1, r6, #2
 800f2b6:	e7cc      	b.n	800f252 <__gethex+0xb6>
 800f2b8:	2401      	movs	r4, #1
 800f2ba:	e7fb      	b.n	800f2b4 <__gethex+0x118>
 800f2bc:	fb03 0002 	mla	r0, r3, r2, r0
 800f2c0:	e7ce      	b.n	800f260 <__gethex+0xc4>
 800f2c2:	4631      	mov	r1, r6
 800f2c4:	e7de      	b.n	800f284 <__gethex+0xe8>
 800f2c6:	eba6 0309 	sub.w	r3, r6, r9
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	2b07      	cmp	r3, #7
 800f2d0:	dc0a      	bgt.n	800f2e8 <__gethex+0x14c>
 800f2d2:	9801      	ldr	r0, [sp, #4]
 800f2d4:	f000 fa46 	bl	800f764 <_Balloc>
 800f2d8:	4604      	mov	r4, r0
 800f2da:	b940      	cbnz	r0, 800f2ee <__gethex+0x152>
 800f2dc:	4b5c      	ldr	r3, [pc, #368]	@ (800f450 <__gethex+0x2b4>)
 800f2de:	4602      	mov	r2, r0
 800f2e0:	21e4      	movs	r1, #228	@ 0xe4
 800f2e2:	485c      	ldr	r0, [pc, #368]	@ (800f454 <__gethex+0x2b8>)
 800f2e4:	f7ff f83e 	bl	800e364 <__assert_func>
 800f2e8:	3101      	adds	r1, #1
 800f2ea:	105b      	asrs	r3, r3, #1
 800f2ec:	e7ef      	b.n	800f2ce <__gethex+0x132>
 800f2ee:	f100 0a14 	add.w	sl, r0, #20
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	4655      	mov	r5, sl
 800f2f6:	469b      	mov	fp, r3
 800f2f8:	45b1      	cmp	r9, r6
 800f2fa:	d337      	bcc.n	800f36c <__gethex+0x1d0>
 800f2fc:	f845 bb04 	str.w	fp, [r5], #4
 800f300:	eba5 050a 	sub.w	r5, r5, sl
 800f304:	10ad      	asrs	r5, r5, #2
 800f306:	6125      	str	r5, [r4, #16]
 800f308:	4658      	mov	r0, fp
 800f30a:	f000 fb1d 	bl	800f948 <__hi0bits>
 800f30e:	016d      	lsls	r5, r5, #5
 800f310:	f8d8 6000 	ldr.w	r6, [r8]
 800f314:	1a2d      	subs	r5, r5, r0
 800f316:	42b5      	cmp	r5, r6
 800f318:	dd54      	ble.n	800f3c4 <__gethex+0x228>
 800f31a:	1bad      	subs	r5, r5, r6
 800f31c:	4629      	mov	r1, r5
 800f31e:	4620      	mov	r0, r4
 800f320:	f000 feb1 	bl	8010086 <__any_on>
 800f324:	4681      	mov	r9, r0
 800f326:	b178      	cbz	r0, 800f348 <__gethex+0x1ac>
 800f328:	1e6b      	subs	r3, r5, #1
 800f32a:	1159      	asrs	r1, r3, #5
 800f32c:	f003 021f 	and.w	r2, r3, #31
 800f330:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f334:	f04f 0901 	mov.w	r9, #1
 800f338:	fa09 f202 	lsl.w	r2, r9, r2
 800f33c:	420a      	tst	r2, r1
 800f33e:	d003      	beq.n	800f348 <__gethex+0x1ac>
 800f340:	454b      	cmp	r3, r9
 800f342:	dc36      	bgt.n	800f3b2 <__gethex+0x216>
 800f344:	f04f 0902 	mov.w	r9, #2
 800f348:	4629      	mov	r1, r5
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff febe 	bl	800f0cc <rshift>
 800f350:	442f      	add	r7, r5
 800f352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f356:	42bb      	cmp	r3, r7
 800f358:	da42      	bge.n	800f3e0 <__gethex+0x244>
 800f35a:	9801      	ldr	r0, [sp, #4]
 800f35c:	4621      	mov	r1, r4
 800f35e:	f000 fa41 	bl	800f7e4 <_Bfree>
 800f362:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f364:	2300      	movs	r3, #0
 800f366:	6013      	str	r3, [r2, #0]
 800f368:	25a3      	movs	r5, #163	@ 0xa3
 800f36a:	e793      	b.n	800f294 <__gethex+0xf8>
 800f36c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f370:	2a2e      	cmp	r2, #46	@ 0x2e
 800f372:	d012      	beq.n	800f39a <__gethex+0x1fe>
 800f374:	2b20      	cmp	r3, #32
 800f376:	d104      	bne.n	800f382 <__gethex+0x1e6>
 800f378:	f845 bb04 	str.w	fp, [r5], #4
 800f37c:	f04f 0b00 	mov.w	fp, #0
 800f380:	465b      	mov	r3, fp
 800f382:	7830      	ldrb	r0, [r6, #0]
 800f384:	9303      	str	r3, [sp, #12]
 800f386:	f7ff fef3 	bl	800f170 <__hexdig_fun>
 800f38a:	9b03      	ldr	r3, [sp, #12]
 800f38c:	f000 000f 	and.w	r0, r0, #15
 800f390:	4098      	lsls	r0, r3
 800f392:	ea4b 0b00 	orr.w	fp, fp, r0
 800f396:	3304      	adds	r3, #4
 800f398:	e7ae      	b.n	800f2f8 <__gethex+0x15c>
 800f39a:	45b1      	cmp	r9, r6
 800f39c:	d8ea      	bhi.n	800f374 <__gethex+0x1d8>
 800f39e:	492b      	ldr	r1, [pc, #172]	@ (800f44c <__gethex+0x2b0>)
 800f3a0:	9303      	str	r3, [sp, #12]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f7fe fe9f 	bl	800e0e8 <strncmp>
 800f3aa:	9b03      	ldr	r3, [sp, #12]
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d1e1      	bne.n	800f374 <__gethex+0x1d8>
 800f3b0:	e7a2      	b.n	800f2f8 <__gethex+0x15c>
 800f3b2:	1ea9      	subs	r1, r5, #2
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f000 fe66 	bl	8010086 <__any_on>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d0c2      	beq.n	800f344 <__gethex+0x1a8>
 800f3be:	f04f 0903 	mov.w	r9, #3
 800f3c2:	e7c1      	b.n	800f348 <__gethex+0x1ac>
 800f3c4:	da09      	bge.n	800f3da <__gethex+0x23e>
 800f3c6:	1b75      	subs	r5, r6, r5
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	9801      	ldr	r0, [sp, #4]
 800f3cc:	462a      	mov	r2, r5
 800f3ce:	f000 fc21 	bl	800fc14 <__lshift>
 800f3d2:	1b7f      	subs	r7, r7, r5
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	f100 0a14 	add.w	sl, r0, #20
 800f3da:	f04f 0900 	mov.w	r9, #0
 800f3de:	e7b8      	b.n	800f352 <__gethex+0x1b6>
 800f3e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3e4:	42bd      	cmp	r5, r7
 800f3e6:	dd6f      	ble.n	800f4c8 <__gethex+0x32c>
 800f3e8:	1bed      	subs	r5, r5, r7
 800f3ea:	42ae      	cmp	r6, r5
 800f3ec:	dc34      	bgt.n	800f458 <__gethex+0x2bc>
 800f3ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d022      	beq.n	800f43c <__gethex+0x2a0>
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	d024      	beq.n	800f444 <__gethex+0x2a8>
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d115      	bne.n	800f42a <__gethex+0x28e>
 800f3fe:	42ae      	cmp	r6, r5
 800f400:	d113      	bne.n	800f42a <__gethex+0x28e>
 800f402:	2e01      	cmp	r6, #1
 800f404:	d10b      	bne.n	800f41e <__gethex+0x282>
 800f406:	9a02      	ldr	r2, [sp, #8]
 800f408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f40c:	6013      	str	r3, [r2, #0]
 800f40e:	2301      	movs	r3, #1
 800f410:	6123      	str	r3, [r4, #16]
 800f412:	f8ca 3000 	str.w	r3, [sl]
 800f416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f418:	2562      	movs	r5, #98	@ 0x62
 800f41a:	601c      	str	r4, [r3, #0]
 800f41c:	e73a      	b.n	800f294 <__gethex+0xf8>
 800f41e:	1e71      	subs	r1, r6, #1
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fe30 	bl	8010086 <__any_on>
 800f426:	2800      	cmp	r0, #0
 800f428:	d1ed      	bne.n	800f406 <__gethex+0x26a>
 800f42a:	9801      	ldr	r0, [sp, #4]
 800f42c:	4621      	mov	r1, r4
 800f42e:	f000 f9d9 	bl	800f7e4 <_Bfree>
 800f432:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f434:	2300      	movs	r3, #0
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	2550      	movs	r5, #80	@ 0x50
 800f43a:	e72b      	b.n	800f294 <__gethex+0xf8>
 800f43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1f3      	bne.n	800f42a <__gethex+0x28e>
 800f442:	e7e0      	b.n	800f406 <__gethex+0x26a>
 800f444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1dd      	bne.n	800f406 <__gethex+0x26a>
 800f44a:	e7ee      	b.n	800f42a <__gethex+0x28e>
 800f44c:	080113a8 	.word	0x080113a8
 800f450:	08011654 	.word	0x08011654
 800f454:	08011665 	.word	0x08011665
 800f458:	1e6f      	subs	r7, r5, #1
 800f45a:	f1b9 0f00 	cmp.w	r9, #0
 800f45e:	d130      	bne.n	800f4c2 <__gethex+0x326>
 800f460:	b127      	cbz	r7, 800f46c <__gethex+0x2d0>
 800f462:	4639      	mov	r1, r7
 800f464:	4620      	mov	r0, r4
 800f466:	f000 fe0e 	bl	8010086 <__any_on>
 800f46a:	4681      	mov	r9, r0
 800f46c:	117a      	asrs	r2, r7, #5
 800f46e:	2301      	movs	r3, #1
 800f470:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f474:	f007 071f 	and.w	r7, r7, #31
 800f478:	40bb      	lsls	r3, r7
 800f47a:	4213      	tst	r3, r2
 800f47c:	4629      	mov	r1, r5
 800f47e:	4620      	mov	r0, r4
 800f480:	bf18      	it	ne
 800f482:	f049 0902 	orrne.w	r9, r9, #2
 800f486:	f7ff fe21 	bl	800f0cc <rshift>
 800f48a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f48e:	1b76      	subs	r6, r6, r5
 800f490:	2502      	movs	r5, #2
 800f492:	f1b9 0f00 	cmp.w	r9, #0
 800f496:	d047      	beq.n	800f528 <__gethex+0x38c>
 800f498:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d015      	beq.n	800f4cc <__gethex+0x330>
 800f4a0:	2b03      	cmp	r3, #3
 800f4a2:	d017      	beq.n	800f4d4 <__gethex+0x338>
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d109      	bne.n	800f4bc <__gethex+0x320>
 800f4a8:	f019 0f02 	tst.w	r9, #2
 800f4ac:	d006      	beq.n	800f4bc <__gethex+0x320>
 800f4ae:	f8da 3000 	ldr.w	r3, [sl]
 800f4b2:	ea49 0903 	orr.w	r9, r9, r3
 800f4b6:	f019 0f01 	tst.w	r9, #1
 800f4ba:	d10e      	bne.n	800f4da <__gethex+0x33e>
 800f4bc:	f045 0510 	orr.w	r5, r5, #16
 800f4c0:	e032      	b.n	800f528 <__gethex+0x38c>
 800f4c2:	f04f 0901 	mov.w	r9, #1
 800f4c6:	e7d1      	b.n	800f46c <__gethex+0x2d0>
 800f4c8:	2501      	movs	r5, #1
 800f4ca:	e7e2      	b.n	800f492 <__gethex+0x2f6>
 800f4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4ce:	f1c3 0301 	rsb	r3, r3, #1
 800f4d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d0f0      	beq.n	800f4bc <__gethex+0x320>
 800f4da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f4de:	f104 0314 	add.w	r3, r4, #20
 800f4e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4ea:	f04f 0c00 	mov.w	ip, #0
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4f8:	d01b      	beq.n	800f532 <__gethex+0x396>
 800f4fa:	3201      	adds	r2, #1
 800f4fc:	6002      	str	r2, [r0, #0]
 800f4fe:	2d02      	cmp	r5, #2
 800f500:	f104 0314 	add.w	r3, r4, #20
 800f504:	d13c      	bne.n	800f580 <__gethex+0x3e4>
 800f506:	f8d8 2000 	ldr.w	r2, [r8]
 800f50a:	3a01      	subs	r2, #1
 800f50c:	42b2      	cmp	r2, r6
 800f50e:	d109      	bne.n	800f524 <__gethex+0x388>
 800f510:	1171      	asrs	r1, r6, #5
 800f512:	2201      	movs	r2, #1
 800f514:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f518:	f006 061f 	and.w	r6, r6, #31
 800f51c:	fa02 f606 	lsl.w	r6, r2, r6
 800f520:	421e      	tst	r6, r3
 800f522:	d13a      	bne.n	800f59a <__gethex+0x3fe>
 800f524:	f045 0520 	orr.w	r5, r5, #32
 800f528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f52a:	601c      	str	r4, [r3, #0]
 800f52c:	9b02      	ldr	r3, [sp, #8]
 800f52e:	601f      	str	r7, [r3, #0]
 800f530:	e6b0      	b.n	800f294 <__gethex+0xf8>
 800f532:	4299      	cmp	r1, r3
 800f534:	f843 cc04 	str.w	ip, [r3, #-4]
 800f538:	d8d9      	bhi.n	800f4ee <__gethex+0x352>
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	459b      	cmp	fp, r3
 800f53e:	db17      	blt.n	800f570 <__gethex+0x3d4>
 800f540:	6861      	ldr	r1, [r4, #4]
 800f542:	9801      	ldr	r0, [sp, #4]
 800f544:	3101      	adds	r1, #1
 800f546:	f000 f90d 	bl	800f764 <_Balloc>
 800f54a:	4681      	mov	r9, r0
 800f54c:	b918      	cbnz	r0, 800f556 <__gethex+0x3ba>
 800f54e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b8 <__gethex+0x41c>)
 800f550:	4602      	mov	r2, r0
 800f552:	2184      	movs	r1, #132	@ 0x84
 800f554:	e6c5      	b.n	800f2e2 <__gethex+0x146>
 800f556:	6922      	ldr	r2, [r4, #16]
 800f558:	3202      	adds	r2, #2
 800f55a:	f104 010c 	add.w	r1, r4, #12
 800f55e:	0092      	lsls	r2, r2, #2
 800f560:	300c      	adds	r0, #12
 800f562:	f7fe fee0 	bl	800e326 <memcpy>
 800f566:	4621      	mov	r1, r4
 800f568:	9801      	ldr	r0, [sp, #4]
 800f56a:	f000 f93b 	bl	800f7e4 <_Bfree>
 800f56e:	464c      	mov	r4, r9
 800f570:	6923      	ldr	r3, [r4, #16]
 800f572:	1c5a      	adds	r2, r3, #1
 800f574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f578:	6122      	str	r2, [r4, #16]
 800f57a:	2201      	movs	r2, #1
 800f57c:	615a      	str	r2, [r3, #20]
 800f57e:	e7be      	b.n	800f4fe <__gethex+0x362>
 800f580:	6922      	ldr	r2, [r4, #16]
 800f582:	455a      	cmp	r2, fp
 800f584:	dd0b      	ble.n	800f59e <__gethex+0x402>
 800f586:	2101      	movs	r1, #1
 800f588:	4620      	mov	r0, r4
 800f58a:	f7ff fd9f 	bl	800f0cc <rshift>
 800f58e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f592:	3701      	adds	r7, #1
 800f594:	42bb      	cmp	r3, r7
 800f596:	f6ff aee0 	blt.w	800f35a <__gethex+0x1be>
 800f59a:	2501      	movs	r5, #1
 800f59c:	e7c2      	b.n	800f524 <__gethex+0x388>
 800f59e:	f016 061f 	ands.w	r6, r6, #31
 800f5a2:	d0fa      	beq.n	800f59a <__gethex+0x3fe>
 800f5a4:	4453      	add	r3, sl
 800f5a6:	f1c6 0620 	rsb	r6, r6, #32
 800f5aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f5ae:	f000 f9cb 	bl	800f948 <__hi0bits>
 800f5b2:	42b0      	cmp	r0, r6
 800f5b4:	dbe7      	blt.n	800f586 <__gethex+0x3ea>
 800f5b6:	e7f0      	b.n	800f59a <__gethex+0x3fe>
 800f5b8:	08011654 	.word	0x08011654

0800f5bc <L_shift>:
 800f5bc:	f1c2 0208 	rsb	r2, r2, #8
 800f5c0:	0092      	lsls	r2, r2, #2
 800f5c2:	b570      	push	{r4, r5, r6, lr}
 800f5c4:	f1c2 0620 	rsb	r6, r2, #32
 800f5c8:	6843      	ldr	r3, [r0, #4]
 800f5ca:	6804      	ldr	r4, [r0, #0]
 800f5cc:	fa03 f506 	lsl.w	r5, r3, r6
 800f5d0:	432c      	orrs	r4, r5
 800f5d2:	40d3      	lsrs	r3, r2
 800f5d4:	6004      	str	r4, [r0, #0]
 800f5d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f5da:	4288      	cmp	r0, r1
 800f5dc:	d3f4      	bcc.n	800f5c8 <L_shift+0xc>
 800f5de:	bd70      	pop	{r4, r5, r6, pc}

0800f5e0 <__match>:
 800f5e0:	b530      	push	{r4, r5, lr}
 800f5e2:	6803      	ldr	r3, [r0, #0]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ea:	b914      	cbnz	r4, 800f5f2 <__match+0x12>
 800f5ec:	6003      	str	r3, [r0, #0]
 800f5ee:	2001      	movs	r0, #1
 800f5f0:	bd30      	pop	{r4, r5, pc}
 800f5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f5fa:	2d19      	cmp	r5, #25
 800f5fc:	bf98      	it	ls
 800f5fe:	3220      	addls	r2, #32
 800f600:	42a2      	cmp	r2, r4
 800f602:	d0f0      	beq.n	800f5e6 <__match+0x6>
 800f604:	2000      	movs	r0, #0
 800f606:	e7f3      	b.n	800f5f0 <__match+0x10>

0800f608 <__hexnan>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	680b      	ldr	r3, [r1, #0]
 800f60e:	6801      	ldr	r1, [r0, #0]
 800f610:	115e      	asrs	r6, r3, #5
 800f612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f616:	f013 031f 	ands.w	r3, r3, #31
 800f61a:	b087      	sub	sp, #28
 800f61c:	bf18      	it	ne
 800f61e:	3604      	addne	r6, #4
 800f620:	2500      	movs	r5, #0
 800f622:	1f37      	subs	r7, r6, #4
 800f624:	4682      	mov	sl, r0
 800f626:	4690      	mov	r8, r2
 800f628:	9301      	str	r3, [sp, #4]
 800f62a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f62e:	46b9      	mov	r9, r7
 800f630:	463c      	mov	r4, r7
 800f632:	9502      	str	r5, [sp, #8]
 800f634:	46ab      	mov	fp, r5
 800f636:	784a      	ldrb	r2, [r1, #1]
 800f638:	1c4b      	adds	r3, r1, #1
 800f63a:	9303      	str	r3, [sp, #12]
 800f63c:	b342      	cbz	r2, 800f690 <__hexnan+0x88>
 800f63e:	4610      	mov	r0, r2
 800f640:	9105      	str	r1, [sp, #20]
 800f642:	9204      	str	r2, [sp, #16]
 800f644:	f7ff fd94 	bl	800f170 <__hexdig_fun>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d151      	bne.n	800f6f0 <__hexnan+0xe8>
 800f64c:	9a04      	ldr	r2, [sp, #16]
 800f64e:	9905      	ldr	r1, [sp, #20]
 800f650:	2a20      	cmp	r2, #32
 800f652:	d818      	bhi.n	800f686 <__hexnan+0x7e>
 800f654:	9b02      	ldr	r3, [sp, #8]
 800f656:	459b      	cmp	fp, r3
 800f658:	dd13      	ble.n	800f682 <__hexnan+0x7a>
 800f65a:	454c      	cmp	r4, r9
 800f65c:	d206      	bcs.n	800f66c <__hexnan+0x64>
 800f65e:	2d07      	cmp	r5, #7
 800f660:	dc04      	bgt.n	800f66c <__hexnan+0x64>
 800f662:	462a      	mov	r2, r5
 800f664:	4649      	mov	r1, r9
 800f666:	4620      	mov	r0, r4
 800f668:	f7ff ffa8 	bl	800f5bc <L_shift>
 800f66c:	4544      	cmp	r4, r8
 800f66e:	d952      	bls.n	800f716 <__hexnan+0x10e>
 800f670:	2300      	movs	r3, #0
 800f672:	f1a4 0904 	sub.w	r9, r4, #4
 800f676:	f844 3c04 	str.w	r3, [r4, #-4]
 800f67a:	f8cd b008 	str.w	fp, [sp, #8]
 800f67e:	464c      	mov	r4, r9
 800f680:	461d      	mov	r5, r3
 800f682:	9903      	ldr	r1, [sp, #12]
 800f684:	e7d7      	b.n	800f636 <__hexnan+0x2e>
 800f686:	2a29      	cmp	r2, #41	@ 0x29
 800f688:	d157      	bne.n	800f73a <__hexnan+0x132>
 800f68a:	3102      	adds	r1, #2
 800f68c:	f8ca 1000 	str.w	r1, [sl]
 800f690:	f1bb 0f00 	cmp.w	fp, #0
 800f694:	d051      	beq.n	800f73a <__hexnan+0x132>
 800f696:	454c      	cmp	r4, r9
 800f698:	d206      	bcs.n	800f6a8 <__hexnan+0xa0>
 800f69a:	2d07      	cmp	r5, #7
 800f69c:	dc04      	bgt.n	800f6a8 <__hexnan+0xa0>
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4649      	mov	r1, r9
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff ff8a 	bl	800f5bc <L_shift>
 800f6a8:	4544      	cmp	r4, r8
 800f6aa:	d936      	bls.n	800f71a <__hexnan+0x112>
 800f6ac:	f1a8 0204 	sub.w	r2, r8, #4
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f6b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f6ba:	429f      	cmp	r7, r3
 800f6bc:	d2f9      	bcs.n	800f6b2 <__hexnan+0xaa>
 800f6be:	1b3b      	subs	r3, r7, r4
 800f6c0:	f023 0303 	bic.w	r3, r3, #3
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	3401      	adds	r4, #1
 800f6c8:	3e03      	subs	r6, #3
 800f6ca:	42b4      	cmp	r4, r6
 800f6cc:	bf88      	it	hi
 800f6ce:	2304      	movhi	r3, #4
 800f6d0:	4443      	add	r3, r8
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f843 2b04 	str.w	r2, [r3], #4
 800f6d8:	429f      	cmp	r7, r3
 800f6da:	d2fb      	bcs.n	800f6d4 <__hexnan+0xcc>
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	b91b      	cbnz	r3, 800f6e8 <__hexnan+0xe0>
 800f6e0:	4547      	cmp	r7, r8
 800f6e2:	d128      	bne.n	800f736 <__hexnan+0x12e>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	603b      	str	r3, [r7, #0]
 800f6e8:	2005      	movs	r0, #5
 800f6ea:	b007      	add	sp, #28
 800f6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f0:	3501      	adds	r5, #1
 800f6f2:	2d08      	cmp	r5, #8
 800f6f4:	f10b 0b01 	add.w	fp, fp, #1
 800f6f8:	dd06      	ble.n	800f708 <__hexnan+0x100>
 800f6fa:	4544      	cmp	r4, r8
 800f6fc:	d9c1      	bls.n	800f682 <__hexnan+0x7a>
 800f6fe:	2300      	movs	r3, #0
 800f700:	f844 3c04 	str.w	r3, [r4, #-4]
 800f704:	2501      	movs	r5, #1
 800f706:	3c04      	subs	r4, #4
 800f708:	6822      	ldr	r2, [r4, #0]
 800f70a:	f000 000f 	and.w	r0, r0, #15
 800f70e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f712:	6020      	str	r0, [r4, #0]
 800f714:	e7b5      	b.n	800f682 <__hexnan+0x7a>
 800f716:	2508      	movs	r5, #8
 800f718:	e7b3      	b.n	800f682 <__hexnan+0x7a>
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d0dd      	beq.n	800f6dc <__hexnan+0xd4>
 800f720:	f1c3 0320 	rsb	r3, r3, #32
 800f724:	f04f 32ff 	mov.w	r2, #4294967295
 800f728:	40da      	lsrs	r2, r3
 800f72a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f72e:	4013      	ands	r3, r2
 800f730:	f846 3c04 	str.w	r3, [r6, #-4]
 800f734:	e7d2      	b.n	800f6dc <__hexnan+0xd4>
 800f736:	3f04      	subs	r7, #4
 800f738:	e7d0      	b.n	800f6dc <__hexnan+0xd4>
 800f73a:	2004      	movs	r0, #4
 800f73c:	e7d5      	b.n	800f6ea <__hexnan+0xe2>

0800f73e <__ascii_mbtowc>:
 800f73e:	b082      	sub	sp, #8
 800f740:	b901      	cbnz	r1, 800f744 <__ascii_mbtowc+0x6>
 800f742:	a901      	add	r1, sp, #4
 800f744:	b142      	cbz	r2, 800f758 <__ascii_mbtowc+0x1a>
 800f746:	b14b      	cbz	r3, 800f75c <__ascii_mbtowc+0x1e>
 800f748:	7813      	ldrb	r3, [r2, #0]
 800f74a:	600b      	str	r3, [r1, #0]
 800f74c:	7812      	ldrb	r2, [r2, #0]
 800f74e:	1e10      	subs	r0, r2, #0
 800f750:	bf18      	it	ne
 800f752:	2001      	movne	r0, #1
 800f754:	b002      	add	sp, #8
 800f756:	4770      	bx	lr
 800f758:	4610      	mov	r0, r2
 800f75a:	e7fb      	b.n	800f754 <__ascii_mbtowc+0x16>
 800f75c:	f06f 0001 	mvn.w	r0, #1
 800f760:	e7f8      	b.n	800f754 <__ascii_mbtowc+0x16>
	...

0800f764 <_Balloc>:
 800f764:	b570      	push	{r4, r5, r6, lr}
 800f766:	69c6      	ldr	r6, [r0, #28]
 800f768:	4604      	mov	r4, r0
 800f76a:	460d      	mov	r5, r1
 800f76c:	b976      	cbnz	r6, 800f78c <_Balloc+0x28>
 800f76e:	2010      	movs	r0, #16
 800f770:	f7fc fcc8 	bl	800c104 <malloc>
 800f774:	4602      	mov	r2, r0
 800f776:	61e0      	str	r0, [r4, #28]
 800f778:	b920      	cbnz	r0, 800f784 <_Balloc+0x20>
 800f77a:	4b18      	ldr	r3, [pc, #96]	@ (800f7dc <_Balloc+0x78>)
 800f77c:	4818      	ldr	r0, [pc, #96]	@ (800f7e0 <_Balloc+0x7c>)
 800f77e:	216b      	movs	r1, #107	@ 0x6b
 800f780:	f7fe fdf0 	bl	800e364 <__assert_func>
 800f784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f788:	6006      	str	r6, [r0, #0]
 800f78a:	60c6      	str	r6, [r0, #12]
 800f78c:	69e6      	ldr	r6, [r4, #28]
 800f78e:	68f3      	ldr	r3, [r6, #12]
 800f790:	b183      	cbz	r3, 800f7b4 <_Balloc+0x50>
 800f792:	69e3      	ldr	r3, [r4, #28]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f79a:	b9b8      	cbnz	r0, 800f7cc <_Balloc+0x68>
 800f79c:	2101      	movs	r1, #1
 800f79e:	fa01 f605 	lsl.w	r6, r1, r5
 800f7a2:	1d72      	adds	r2, r6, #5
 800f7a4:	0092      	lsls	r2, r2, #2
 800f7a6:	4620      	mov	r0, r4
 800f7a8:	f001 f897 	bl	80108da <_calloc_r>
 800f7ac:	b160      	cbz	r0, 800f7c8 <_Balloc+0x64>
 800f7ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f7b2:	e00e      	b.n	800f7d2 <_Balloc+0x6e>
 800f7b4:	2221      	movs	r2, #33	@ 0x21
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f001 f88e 	bl	80108da <_calloc_r>
 800f7be:	69e3      	ldr	r3, [r4, #28]
 800f7c0:	60f0      	str	r0, [r6, #12]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d1e4      	bne.n	800f792 <_Balloc+0x2e>
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	6802      	ldr	r2, [r0, #0]
 800f7ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7d8:	e7f7      	b.n	800f7ca <_Balloc+0x66>
 800f7da:	bf00      	nop
 800f7dc:	0801153a 	.word	0x0801153a
 800f7e0:	080116c5 	.word	0x080116c5

0800f7e4 <_Bfree>:
 800f7e4:	b570      	push	{r4, r5, r6, lr}
 800f7e6:	69c6      	ldr	r6, [r0, #28]
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	b976      	cbnz	r6, 800f80c <_Bfree+0x28>
 800f7ee:	2010      	movs	r0, #16
 800f7f0:	f7fc fc88 	bl	800c104 <malloc>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	61e8      	str	r0, [r5, #28]
 800f7f8:	b920      	cbnz	r0, 800f804 <_Bfree+0x20>
 800f7fa:	4b09      	ldr	r3, [pc, #36]	@ (800f820 <_Bfree+0x3c>)
 800f7fc:	4809      	ldr	r0, [pc, #36]	@ (800f824 <_Bfree+0x40>)
 800f7fe:	218f      	movs	r1, #143	@ 0x8f
 800f800:	f7fe fdb0 	bl	800e364 <__assert_func>
 800f804:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f808:	6006      	str	r6, [r0, #0]
 800f80a:	60c6      	str	r6, [r0, #12]
 800f80c:	b13c      	cbz	r4, 800f81e <_Bfree+0x3a>
 800f80e:	69eb      	ldr	r3, [r5, #28]
 800f810:	6862      	ldr	r2, [r4, #4]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f818:	6021      	str	r1, [r4, #0]
 800f81a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f81e:	bd70      	pop	{r4, r5, r6, pc}
 800f820:	0801153a 	.word	0x0801153a
 800f824:	080116c5 	.word	0x080116c5

0800f828 <__multadd>:
 800f828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f82c:	690d      	ldr	r5, [r1, #16]
 800f82e:	4607      	mov	r7, r0
 800f830:	460c      	mov	r4, r1
 800f832:	461e      	mov	r6, r3
 800f834:	f101 0c14 	add.w	ip, r1, #20
 800f838:	2000      	movs	r0, #0
 800f83a:	f8dc 3000 	ldr.w	r3, [ip]
 800f83e:	b299      	uxth	r1, r3
 800f840:	fb02 6101 	mla	r1, r2, r1, r6
 800f844:	0c1e      	lsrs	r6, r3, #16
 800f846:	0c0b      	lsrs	r3, r1, #16
 800f848:	fb02 3306 	mla	r3, r2, r6, r3
 800f84c:	b289      	uxth	r1, r1
 800f84e:	3001      	adds	r0, #1
 800f850:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f854:	4285      	cmp	r5, r0
 800f856:	f84c 1b04 	str.w	r1, [ip], #4
 800f85a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f85e:	dcec      	bgt.n	800f83a <__multadd+0x12>
 800f860:	b30e      	cbz	r6, 800f8a6 <__multadd+0x7e>
 800f862:	68a3      	ldr	r3, [r4, #8]
 800f864:	42ab      	cmp	r3, r5
 800f866:	dc19      	bgt.n	800f89c <__multadd+0x74>
 800f868:	6861      	ldr	r1, [r4, #4]
 800f86a:	4638      	mov	r0, r7
 800f86c:	3101      	adds	r1, #1
 800f86e:	f7ff ff79 	bl	800f764 <_Balloc>
 800f872:	4680      	mov	r8, r0
 800f874:	b928      	cbnz	r0, 800f882 <__multadd+0x5a>
 800f876:	4602      	mov	r2, r0
 800f878:	4b0c      	ldr	r3, [pc, #48]	@ (800f8ac <__multadd+0x84>)
 800f87a:	480d      	ldr	r0, [pc, #52]	@ (800f8b0 <__multadd+0x88>)
 800f87c:	21ba      	movs	r1, #186	@ 0xba
 800f87e:	f7fe fd71 	bl	800e364 <__assert_func>
 800f882:	6922      	ldr	r2, [r4, #16]
 800f884:	3202      	adds	r2, #2
 800f886:	f104 010c 	add.w	r1, r4, #12
 800f88a:	0092      	lsls	r2, r2, #2
 800f88c:	300c      	adds	r0, #12
 800f88e:	f7fe fd4a 	bl	800e326 <memcpy>
 800f892:	4621      	mov	r1, r4
 800f894:	4638      	mov	r0, r7
 800f896:	f7ff ffa5 	bl	800f7e4 <_Bfree>
 800f89a:	4644      	mov	r4, r8
 800f89c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f8a0:	3501      	adds	r5, #1
 800f8a2:	615e      	str	r6, [r3, #20]
 800f8a4:	6125      	str	r5, [r4, #16]
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ac:	08011654 	.word	0x08011654
 800f8b0:	080116c5 	.word	0x080116c5

0800f8b4 <__s2b>:
 800f8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b8:	460c      	mov	r4, r1
 800f8ba:	4615      	mov	r5, r2
 800f8bc:	461f      	mov	r7, r3
 800f8be:	2209      	movs	r2, #9
 800f8c0:	3308      	adds	r3, #8
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8c8:	2100      	movs	r1, #0
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	db09      	blt.n	800f8e4 <__s2b+0x30>
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7ff ff47 	bl	800f764 <_Balloc>
 800f8d6:	b940      	cbnz	r0, 800f8ea <__s2b+0x36>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	4b19      	ldr	r3, [pc, #100]	@ (800f940 <__s2b+0x8c>)
 800f8dc:	4819      	ldr	r0, [pc, #100]	@ (800f944 <__s2b+0x90>)
 800f8de:	21d3      	movs	r1, #211	@ 0xd3
 800f8e0:	f7fe fd40 	bl	800e364 <__assert_func>
 800f8e4:	0052      	lsls	r2, r2, #1
 800f8e6:	3101      	adds	r1, #1
 800f8e8:	e7f0      	b.n	800f8cc <__s2b+0x18>
 800f8ea:	9b08      	ldr	r3, [sp, #32]
 800f8ec:	6143      	str	r3, [r0, #20]
 800f8ee:	2d09      	cmp	r5, #9
 800f8f0:	f04f 0301 	mov.w	r3, #1
 800f8f4:	6103      	str	r3, [r0, #16]
 800f8f6:	dd16      	ble.n	800f926 <__s2b+0x72>
 800f8f8:	f104 0909 	add.w	r9, r4, #9
 800f8fc:	46c8      	mov	r8, r9
 800f8fe:	442c      	add	r4, r5
 800f900:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f904:	4601      	mov	r1, r0
 800f906:	3b30      	subs	r3, #48	@ 0x30
 800f908:	220a      	movs	r2, #10
 800f90a:	4630      	mov	r0, r6
 800f90c:	f7ff ff8c 	bl	800f828 <__multadd>
 800f910:	45a0      	cmp	r8, r4
 800f912:	d1f5      	bne.n	800f900 <__s2b+0x4c>
 800f914:	f1a5 0408 	sub.w	r4, r5, #8
 800f918:	444c      	add	r4, r9
 800f91a:	1b2d      	subs	r5, r5, r4
 800f91c:	1963      	adds	r3, r4, r5
 800f91e:	42bb      	cmp	r3, r7
 800f920:	db04      	blt.n	800f92c <__s2b+0x78>
 800f922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f926:	340a      	adds	r4, #10
 800f928:	2509      	movs	r5, #9
 800f92a:	e7f6      	b.n	800f91a <__s2b+0x66>
 800f92c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f930:	4601      	mov	r1, r0
 800f932:	3b30      	subs	r3, #48	@ 0x30
 800f934:	220a      	movs	r2, #10
 800f936:	4630      	mov	r0, r6
 800f938:	f7ff ff76 	bl	800f828 <__multadd>
 800f93c:	e7ee      	b.n	800f91c <__s2b+0x68>
 800f93e:	bf00      	nop
 800f940:	08011654 	.word	0x08011654
 800f944:	080116c5 	.word	0x080116c5

0800f948 <__hi0bits>:
 800f948:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f94c:	4603      	mov	r3, r0
 800f94e:	bf36      	itet	cc
 800f950:	0403      	lslcc	r3, r0, #16
 800f952:	2000      	movcs	r0, #0
 800f954:	2010      	movcc	r0, #16
 800f956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f95a:	bf3c      	itt	cc
 800f95c:	021b      	lslcc	r3, r3, #8
 800f95e:	3008      	addcc	r0, #8
 800f960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f964:	bf3c      	itt	cc
 800f966:	011b      	lslcc	r3, r3, #4
 800f968:	3004      	addcc	r0, #4
 800f96a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f96e:	bf3c      	itt	cc
 800f970:	009b      	lslcc	r3, r3, #2
 800f972:	3002      	addcc	r0, #2
 800f974:	2b00      	cmp	r3, #0
 800f976:	db05      	blt.n	800f984 <__hi0bits+0x3c>
 800f978:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f97c:	f100 0001 	add.w	r0, r0, #1
 800f980:	bf08      	it	eq
 800f982:	2020      	moveq	r0, #32
 800f984:	4770      	bx	lr

0800f986 <__lo0bits>:
 800f986:	6803      	ldr	r3, [r0, #0]
 800f988:	4602      	mov	r2, r0
 800f98a:	f013 0007 	ands.w	r0, r3, #7
 800f98e:	d00b      	beq.n	800f9a8 <__lo0bits+0x22>
 800f990:	07d9      	lsls	r1, r3, #31
 800f992:	d421      	bmi.n	800f9d8 <__lo0bits+0x52>
 800f994:	0798      	lsls	r0, r3, #30
 800f996:	bf49      	itett	mi
 800f998:	085b      	lsrmi	r3, r3, #1
 800f99a:	089b      	lsrpl	r3, r3, #2
 800f99c:	2001      	movmi	r0, #1
 800f99e:	6013      	strmi	r3, [r2, #0]
 800f9a0:	bf5c      	itt	pl
 800f9a2:	6013      	strpl	r3, [r2, #0]
 800f9a4:	2002      	movpl	r0, #2
 800f9a6:	4770      	bx	lr
 800f9a8:	b299      	uxth	r1, r3
 800f9aa:	b909      	cbnz	r1, 800f9b0 <__lo0bits+0x2a>
 800f9ac:	0c1b      	lsrs	r3, r3, #16
 800f9ae:	2010      	movs	r0, #16
 800f9b0:	b2d9      	uxtb	r1, r3
 800f9b2:	b909      	cbnz	r1, 800f9b8 <__lo0bits+0x32>
 800f9b4:	3008      	adds	r0, #8
 800f9b6:	0a1b      	lsrs	r3, r3, #8
 800f9b8:	0719      	lsls	r1, r3, #28
 800f9ba:	bf04      	itt	eq
 800f9bc:	091b      	lsreq	r3, r3, #4
 800f9be:	3004      	addeq	r0, #4
 800f9c0:	0799      	lsls	r1, r3, #30
 800f9c2:	bf04      	itt	eq
 800f9c4:	089b      	lsreq	r3, r3, #2
 800f9c6:	3002      	addeq	r0, #2
 800f9c8:	07d9      	lsls	r1, r3, #31
 800f9ca:	d403      	bmi.n	800f9d4 <__lo0bits+0x4e>
 800f9cc:	085b      	lsrs	r3, r3, #1
 800f9ce:	f100 0001 	add.w	r0, r0, #1
 800f9d2:	d003      	beq.n	800f9dc <__lo0bits+0x56>
 800f9d4:	6013      	str	r3, [r2, #0]
 800f9d6:	4770      	bx	lr
 800f9d8:	2000      	movs	r0, #0
 800f9da:	4770      	bx	lr
 800f9dc:	2020      	movs	r0, #32
 800f9de:	4770      	bx	lr

0800f9e0 <__i2b>:
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	f7ff febd 	bl	800f764 <_Balloc>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	b928      	cbnz	r0, 800f9fa <__i2b+0x1a>
 800f9ee:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <__i2b+0x24>)
 800f9f0:	4805      	ldr	r0, [pc, #20]	@ (800fa08 <__i2b+0x28>)
 800f9f2:	f240 1145 	movw	r1, #325	@ 0x145
 800f9f6:	f7fe fcb5 	bl	800e364 <__assert_func>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	6144      	str	r4, [r0, #20]
 800f9fe:	6103      	str	r3, [r0, #16]
 800fa00:	bd10      	pop	{r4, pc}
 800fa02:	bf00      	nop
 800fa04:	08011654 	.word	0x08011654
 800fa08:	080116c5 	.word	0x080116c5

0800fa0c <__multiply>:
 800fa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa10:	4614      	mov	r4, r2
 800fa12:	690a      	ldr	r2, [r1, #16]
 800fa14:	6923      	ldr	r3, [r4, #16]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	bfa8      	it	ge
 800fa1a:	4623      	movge	r3, r4
 800fa1c:	460f      	mov	r7, r1
 800fa1e:	bfa4      	itt	ge
 800fa20:	460c      	movge	r4, r1
 800fa22:	461f      	movge	r7, r3
 800fa24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fa28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fa2c:	68a3      	ldr	r3, [r4, #8]
 800fa2e:	6861      	ldr	r1, [r4, #4]
 800fa30:	eb0a 0609 	add.w	r6, sl, r9
 800fa34:	42b3      	cmp	r3, r6
 800fa36:	b085      	sub	sp, #20
 800fa38:	bfb8      	it	lt
 800fa3a:	3101      	addlt	r1, #1
 800fa3c:	f7ff fe92 	bl	800f764 <_Balloc>
 800fa40:	b930      	cbnz	r0, 800fa50 <__multiply+0x44>
 800fa42:	4602      	mov	r2, r0
 800fa44:	4b44      	ldr	r3, [pc, #272]	@ (800fb58 <__multiply+0x14c>)
 800fa46:	4845      	ldr	r0, [pc, #276]	@ (800fb5c <__multiply+0x150>)
 800fa48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fa4c:	f7fe fc8a 	bl	800e364 <__assert_func>
 800fa50:	f100 0514 	add.w	r5, r0, #20
 800fa54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fa58:	462b      	mov	r3, r5
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4543      	cmp	r3, r8
 800fa5e:	d321      	bcc.n	800faa4 <__multiply+0x98>
 800fa60:	f107 0114 	add.w	r1, r7, #20
 800fa64:	f104 0214 	add.w	r2, r4, #20
 800fa68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fa6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fa70:	9302      	str	r3, [sp, #8]
 800fa72:	1b13      	subs	r3, r2, r4
 800fa74:	3b15      	subs	r3, #21
 800fa76:	f023 0303 	bic.w	r3, r3, #3
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	f104 0715 	add.w	r7, r4, #21
 800fa80:	42ba      	cmp	r2, r7
 800fa82:	bf38      	it	cc
 800fa84:	2304      	movcc	r3, #4
 800fa86:	9301      	str	r3, [sp, #4]
 800fa88:	9b02      	ldr	r3, [sp, #8]
 800fa8a:	9103      	str	r1, [sp, #12]
 800fa8c:	428b      	cmp	r3, r1
 800fa8e:	d80c      	bhi.n	800faaa <__multiply+0x9e>
 800fa90:	2e00      	cmp	r6, #0
 800fa92:	dd03      	ble.n	800fa9c <__multiply+0x90>
 800fa94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d05b      	beq.n	800fb54 <__multiply+0x148>
 800fa9c:	6106      	str	r6, [r0, #16]
 800fa9e:	b005      	add	sp, #20
 800faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa4:	f843 2b04 	str.w	r2, [r3], #4
 800faa8:	e7d8      	b.n	800fa5c <__multiply+0x50>
 800faaa:	f8b1 a000 	ldrh.w	sl, [r1]
 800faae:	f1ba 0f00 	cmp.w	sl, #0
 800fab2:	d024      	beq.n	800fafe <__multiply+0xf2>
 800fab4:	f104 0e14 	add.w	lr, r4, #20
 800fab8:	46a9      	mov	r9, r5
 800faba:	f04f 0c00 	mov.w	ip, #0
 800fabe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fac2:	f8d9 3000 	ldr.w	r3, [r9]
 800fac6:	fa1f fb87 	uxth.w	fp, r7
 800faca:	b29b      	uxth	r3, r3
 800facc:	fb0a 330b 	mla	r3, sl, fp, r3
 800fad0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fad4:	f8d9 7000 	ldr.w	r7, [r9]
 800fad8:	4463      	add	r3, ip
 800fada:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fade:	fb0a c70b 	mla	r7, sl, fp, ip
 800fae2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800faec:	4572      	cmp	r2, lr
 800faee:	f849 3b04 	str.w	r3, [r9], #4
 800faf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800faf6:	d8e2      	bhi.n	800fabe <__multiply+0xb2>
 800faf8:	9b01      	ldr	r3, [sp, #4]
 800fafa:	f845 c003 	str.w	ip, [r5, r3]
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fb04:	3104      	adds	r1, #4
 800fb06:	f1b9 0f00 	cmp.w	r9, #0
 800fb0a:	d021      	beq.n	800fb50 <__multiply+0x144>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	f104 0c14 	add.w	ip, r4, #20
 800fb12:	46ae      	mov	lr, r5
 800fb14:	f04f 0a00 	mov.w	sl, #0
 800fb18:	f8bc b000 	ldrh.w	fp, [ip]
 800fb1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fb20:	fb09 770b 	mla	r7, r9, fp, r7
 800fb24:	4457      	add	r7, sl
 800fb26:	b29b      	uxth	r3, r3
 800fb28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fb2c:	f84e 3b04 	str.w	r3, [lr], #4
 800fb30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb38:	f8be 3000 	ldrh.w	r3, [lr]
 800fb3c:	fb09 330a 	mla	r3, r9, sl, r3
 800fb40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fb44:	4562      	cmp	r2, ip
 800fb46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb4a:	d8e5      	bhi.n	800fb18 <__multiply+0x10c>
 800fb4c:	9f01      	ldr	r7, [sp, #4]
 800fb4e:	51eb      	str	r3, [r5, r7]
 800fb50:	3504      	adds	r5, #4
 800fb52:	e799      	b.n	800fa88 <__multiply+0x7c>
 800fb54:	3e01      	subs	r6, #1
 800fb56:	e79b      	b.n	800fa90 <__multiply+0x84>
 800fb58:	08011654 	.word	0x08011654
 800fb5c:	080116c5 	.word	0x080116c5

0800fb60 <__pow5mult>:
 800fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb64:	4615      	mov	r5, r2
 800fb66:	f012 0203 	ands.w	r2, r2, #3
 800fb6a:	4607      	mov	r7, r0
 800fb6c:	460e      	mov	r6, r1
 800fb6e:	d007      	beq.n	800fb80 <__pow5mult+0x20>
 800fb70:	4c25      	ldr	r4, [pc, #148]	@ (800fc08 <__pow5mult+0xa8>)
 800fb72:	3a01      	subs	r2, #1
 800fb74:	2300      	movs	r3, #0
 800fb76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb7a:	f7ff fe55 	bl	800f828 <__multadd>
 800fb7e:	4606      	mov	r6, r0
 800fb80:	10ad      	asrs	r5, r5, #2
 800fb82:	d03d      	beq.n	800fc00 <__pow5mult+0xa0>
 800fb84:	69fc      	ldr	r4, [r7, #28]
 800fb86:	b97c      	cbnz	r4, 800fba8 <__pow5mult+0x48>
 800fb88:	2010      	movs	r0, #16
 800fb8a:	f7fc fabb 	bl	800c104 <malloc>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	61f8      	str	r0, [r7, #28]
 800fb92:	b928      	cbnz	r0, 800fba0 <__pow5mult+0x40>
 800fb94:	4b1d      	ldr	r3, [pc, #116]	@ (800fc0c <__pow5mult+0xac>)
 800fb96:	481e      	ldr	r0, [pc, #120]	@ (800fc10 <__pow5mult+0xb0>)
 800fb98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fb9c:	f7fe fbe2 	bl	800e364 <__assert_func>
 800fba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fba4:	6004      	str	r4, [r0, #0]
 800fba6:	60c4      	str	r4, [r0, #12]
 800fba8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fbac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fbb0:	b94c      	cbnz	r4, 800fbc6 <__pow5mult+0x66>
 800fbb2:	f240 2171 	movw	r1, #625	@ 0x271
 800fbb6:	4638      	mov	r0, r7
 800fbb8:	f7ff ff12 	bl	800f9e0 <__i2b>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	6003      	str	r3, [r0, #0]
 800fbc6:	f04f 0900 	mov.w	r9, #0
 800fbca:	07eb      	lsls	r3, r5, #31
 800fbcc:	d50a      	bpl.n	800fbe4 <__pow5mult+0x84>
 800fbce:	4631      	mov	r1, r6
 800fbd0:	4622      	mov	r2, r4
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	f7ff ff1a 	bl	800fa0c <__multiply>
 800fbd8:	4631      	mov	r1, r6
 800fbda:	4680      	mov	r8, r0
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f7ff fe01 	bl	800f7e4 <_Bfree>
 800fbe2:	4646      	mov	r6, r8
 800fbe4:	106d      	asrs	r5, r5, #1
 800fbe6:	d00b      	beq.n	800fc00 <__pow5mult+0xa0>
 800fbe8:	6820      	ldr	r0, [r4, #0]
 800fbea:	b938      	cbnz	r0, 800fbfc <__pow5mult+0x9c>
 800fbec:	4622      	mov	r2, r4
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f7ff ff0b 	bl	800fa0c <__multiply>
 800fbf6:	6020      	str	r0, [r4, #0]
 800fbf8:	f8c0 9000 	str.w	r9, [r0]
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	e7e4      	b.n	800fbca <__pow5mult+0x6a>
 800fc00:	4630      	mov	r0, r6
 800fc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc06:	bf00      	nop
 800fc08:	08011720 	.word	0x08011720
 800fc0c:	0801153a 	.word	0x0801153a
 800fc10:	080116c5 	.word	0x080116c5

0800fc14 <__lshift>:
 800fc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc18:	460c      	mov	r4, r1
 800fc1a:	6849      	ldr	r1, [r1, #4]
 800fc1c:	6923      	ldr	r3, [r4, #16]
 800fc1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc22:	68a3      	ldr	r3, [r4, #8]
 800fc24:	4607      	mov	r7, r0
 800fc26:	4691      	mov	r9, r2
 800fc28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fc2c:	f108 0601 	add.w	r6, r8, #1
 800fc30:	42b3      	cmp	r3, r6
 800fc32:	db0b      	blt.n	800fc4c <__lshift+0x38>
 800fc34:	4638      	mov	r0, r7
 800fc36:	f7ff fd95 	bl	800f764 <_Balloc>
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	b948      	cbnz	r0, 800fc52 <__lshift+0x3e>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	4b28      	ldr	r3, [pc, #160]	@ (800fce4 <__lshift+0xd0>)
 800fc42:	4829      	ldr	r0, [pc, #164]	@ (800fce8 <__lshift+0xd4>)
 800fc44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fc48:	f7fe fb8c 	bl	800e364 <__assert_func>
 800fc4c:	3101      	adds	r1, #1
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	e7ee      	b.n	800fc30 <__lshift+0x1c>
 800fc52:	2300      	movs	r3, #0
 800fc54:	f100 0114 	add.w	r1, r0, #20
 800fc58:	f100 0210 	add.w	r2, r0, #16
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	4553      	cmp	r3, sl
 800fc60:	db33      	blt.n	800fcca <__lshift+0xb6>
 800fc62:	6920      	ldr	r0, [r4, #16]
 800fc64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc68:	f104 0314 	add.w	r3, r4, #20
 800fc6c:	f019 091f 	ands.w	r9, r9, #31
 800fc70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fc78:	d02b      	beq.n	800fcd2 <__lshift+0xbe>
 800fc7a:	f1c9 0e20 	rsb	lr, r9, #32
 800fc7e:	468a      	mov	sl, r1
 800fc80:	2200      	movs	r2, #0
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	fa00 f009 	lsl.w	r0, r0, r9
 800fc88:	4310      	orrs	r0, r2
 800fc8a:	f84a 0b04 	str.w	r0, [sl], #4
 800fc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc92:	459c      	cmp	ip, r3
 800fc94:	fa22 f20e 	lsr.w	r2, r2, lr
 800fc98:	d8f3      	bhi.n	800fc82 <__lshift+0x6e>
 800fc9a:	ebac 0304 	sub.w	r3, ip, r4
 800fc9e:	3b15      	subs	r3, #21
 800fca0:	f023 0303 	bic.w	r3, r3, #3
 800fca4:	3304      	adds	r3, #4
 800fca6:	f104 0015 	add.w	r0, r4, #21
 800fcaa:	4584      	cmp	ip, r0
 800fcac:	bf38      	it	cc
 800fcae:	2304      	movcc	r3, #4
 800fcb0:	50ca      	str	r2, [r1, r3]
 800fcb2:	b10a      	cbz	r2, 800fcb8 <__lshift+0xa4>
 800fcb4:	f108 0602 	add.w	r6, r8, #2
 800fcb8:	3e01      	subs	r6, #1
 800fcba:	4638      	mov	r0, r7
 800fcbc:	612e      	str	r6, [r5, #16]
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	f7ff fd90 	bl	800f7e4 <_Bfree>
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcca:	f842 0f04 	str.w	r0, [r2, #4]!
 800fcce:	3301      	adds	r3, #1
 800fcd0:	e7c5      	b.n	800fc5e <__lshift+0x4a>
 800fcd2:	3904      	subs	r1, #4
 800fcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fcdc:	459c      	cmp	ip, r3
 800fcde:	d8f9      	bhi.n	800fcd4 <__lshift+0xc0>
 800fce0:	e7ea      	b.n	800fcb8 <__lshift+0xa4>
 800fce2:	bf00      	nop
 800fce4:	08011654 	.word	0x08011654
 800fce8:	080116c5 	.word	0x080116c5

0800fcec <__mcmp>:
 800fcec:	690a      	ldr	r2, [r1, #16]
 800fcee:	4603      	mov	r3, r0
 800fcf0:	6900      	ldr	r0, [r0, #16]
 800fcf2:	1a80      	subs	r0, r0, r2
 800fcf4:	b530      	push	{r4, r5, lr}
 800fcf6:	d10e      	bne.n	800fd16 <__mcmp+0x2a>
 800fcf8:	3314      	adds	r3, #20
 800fcfa:	3114      	adds	r1, #20
 800fcfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fd00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fd04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fd08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fd0c:	4295      	cmp	r5, r2
 800fd0e:	d003      	beq.n	800fd18 <__mcmp+0x2c>
 800fd10:	d205      	bcs.n	800fd1e <__mcmp+0x32>
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295
 800fd16:	bd30      	pop	{r4, r5, pc}
 800fd18:	42a3      	cmp	r3, r4
 800fd1a:	d3f3      	bcc.n	800fd04 <__mcmp+0x18>
 800fd1c:	e7fb      	b.n	800fd16 <__mcmp+0x2a>
 800fd1e:	2001      	movs	r0, #1
 800fd20:	e7f9      	b.n	800fd16 <__mcmp+0x2a>
	...

0800fd24 <__mdiff>:
 800fd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	4689      	mov	r9, r1
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	4611      	mov	r1, r2
 800fd2e:	4648      	mov	r0, r9
 800fd30:	4614      	mov	r4, r2
 800fd32:	f7ff ffdb 	bl	800fcec <__mcmp>
 800fd36:	1e05      	subs	r5, r0, #0
 800fd38:	d112      	bne.n	800fd60 <__mdiff+0x3c>
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7ff fd11 	bl	800f764 <_Balloc>
 800fd42:	4602      	mov	r2, r0
 800fd44:	b928      	cbnz	r0, 800fd52 <__mdiff+0x2e>
 800fd46:	4b3f      	ldr	r3, [pc, #252]	@ (800fe44 <__mdiff+0x120>)
 800fd48:	f240 2137 	movw	r1, #567	@ 0x237
 800fd4c:	483e      	ldr	r0, [pc, #248]	@ (800fe48 <__mdiff+0x124>)
 800fd4e:	f7fe fb09 	bl	800e364 <__assert_func>
 800fd52:	2301      	movs	r3, #1
 800fd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd58:	4610      	mov	r0, r2
 800fd5a:	b003      	add	sp, #12
 800fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd60:	bfbc      	itt	lt
 800fd62:	464b      	movlt	r3, r9
 800fd64:	46a1      	movlt	r9, r4
 800fd66:	4630      	mov	r0, r6
 800fd68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fd6c:	bfba      	itte	lt
 800fd6e:	461c      	movlt	r4, r3
 800fd70:	2501      	movlt	r5, #1
 800fd72:	2500      	movge	r5, #0
 800fd74:	f7ff fcf6 	bl	800f764 <_Balloc>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	b918      	cbnz	r0, 800fd84 <__mdiff+0x60>
 800fd7c:	4b31      	ldr	r3, [pc, #196]	@ (800fe44 <__mdiff+0x120>)
 800fd7e:	f240 2145 	movw	r1, #581	@ 0x245
 800fd82:	e7e3      	b.n	800fd4c <__mdiff+0x28>
 800fd84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fd88:	6926      	ldr	r6, [r4, #16]
 800fd8a:	60c5      	str	r5, [r0, #12]
 800fd8c:	f109 0310 	add.w	r3, r9, #16
 800fd90:	f109 0514 	add.w	r5, r9, #20
 800fd94:	f104 0e14 	add.w	lr, r4, #20
 800fd98:	f100 0b14 	add.w	fp, r0, #20
 800fd9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fda0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	46d9      	mov	r9, fp
 800fda8:	f04f 0c00 	mov.w	ip, #0
 800fdac:	9b01      	ldr	r3, [sp, #4]
 800fdae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fdb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	fa1f f38a 	uxth.w	r3, sl
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	b283      	uxth	r3, r0
 800fdc0:	1acb      	subs	r3, r1, r3
 800fdc2:	0c00      	lsrs	r0, r0, #16
 800fdc4:	4463      	add	r3, ip
 800fdc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fdca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fdd4:	4576      	cmp	r6, lr
 800fdd6:	f849 3b04 	str.w	r3, [r9], #4
 800fdda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fdde:	d8e5      	bhi.n	800fdac <__mdiff+0x88>
 800fde0:	1b33      	subs	r3, r6, r4
 800fde2:	3b15      	subs	r3, #21
 800fde4:	f023 0303 	bic.w	r3, r3, #3
 800fde8:	3415      	adds	r4, #21
 800fdea:	3304      	adds	r3, #4
 800fdec:	42a6      	cmp	r6, r4
 800fdee:	bf38      	it	cc
 800fdf0:	2304      	movcc	r3, #4
 800fdf2:	441d      	add	r5, r3
 800fdf4:	445b      	add	r3, fp
 800fdf6:	461e      	mov	r6, r3
 800fdf8:	462c      	mov	r4, r5
 800fdfa:	4544      	cmp	r4, r8
 800fdfc:	d30e      	bcc.n	800fe1c <__mdiff+0xf8>
 800fdfe:	f108 0103 	add.w	r1, r8, #3
 800fe02:	1b49      	subs	r1, r1, r5
 800fe04:	f021 0103 	bic.w	r1, r1, #3
 800fe08:	3d03      	subs	r5, #3
 800fe0a:	45a8      	cmp	r8, r5
 800fe0c:	bf38      	it	cc
 800fe0e:	2100      	movcc	r1, #0
 800fe10:	440b      	add	r3, r1
 800fe12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe16:	b191      	cbz	r1, 800fe3e <__mdiff+0x11a>
 800fe18:	6117      	str	r7, [r2, #16]
 800fe1a:	e79d      	b.n	800fd58 <__mdiff+0x34>
 800fe1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fe20:	46e6      	mov	lr, ip
 800fe22:	0c08      	lsrs	r0, r1, #16
 800fe24:	fa1c fc81 	uxtah	ip, ip, r1
 800fe28:	4471      	add	r1, lr
 800fe2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fe2e:	b289      	uxth	r1, r1
 800fe30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fe34:	f846 1b04 	str.w	r1, [r6], #4
 800fe38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fe3c:	e7dd      	b.n	800fdfa <__mdiff+0xd6>
 800fe3e:	3f01      	subs	r7, #1
 800fe40:	e7e7      	b.n	800fe12 <__mdiff+0xee>
 800fe42:	bf00      	nop
 800fe44:	08011654 	.word	0x08011654
 800fe48:	080116c5 	.word	0x080116c5

0800fe4c <__ulp>:
 800fe4c:	b082      	sub	sp, #8
 800fe4e:	ed8d 0b00 	vstr	d0, [sp]
 800fe52:	9a01      	ldr	r2, [sp, #4]
 800fe54:	4b0f      	ldr	r3, [pc, #60]	@ (800fe94 <__ulp+0x48>)
 800fe56:	4013      	ands	r3, r2
 800fe58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	dc08      	bgt.n	800fe72 <__ulp+0x26>
 800fe60:	425b      	negs	r3, r3
 800fe62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fe66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe6a:	da04      	bge.n	800fe76 <__ulp+0x2a>
 800fe6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fe70:	4113      	asrs	r3, r2
 800fe72:	2200      	movs	r2, #0
 800fe74:	e008      	b.n	800fe88 <__ulp+0x3c>
 800fe76:	f1a2 0314 	sub.w	r3, r2, #20
 800fe7a:	2b1e      	cmp	r3, #30
 800fe7c:	bfda      	itte	le
 800fe7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fe82:	40da      	lsrle	r2, r3
 800fe84:	2201      	movgt	r2, #1
 800fe86:	2300      	movs	r3, #0
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4610      	mov	r0, r2
 800fe8c:	ec41 0b10 	vmov	d0, r0, r1
 800fe90:	b002      	add	sp, #8
 800fe92:	4770      	bx	lr
 800fe94:	7ff00000 	.word	0x7ff00000

0800fe98 <__b2d>:
 800fe98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9c:	6906      	ldr	r6, [r0, #16]
 800fe9e:	f100 0814 	add.w	r8, r0, #20
 800fea2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fea6:	1f37      	subs	r7, r6, #4
 800fea8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800feac:	4610      	mov	r0, r2
 800feae:	f7ff fd4b 	bl	800f948 <__hi0bits>
 800feb2:	f1c0 0320 	rsb	r3, r0, #32
 800feb6:	280a      	cmp	r0, #10
 800feb8:	600b      	str	r3, [r1, #0]
 800feba:	491b      	ldr	r1, [pc, #108]	@ (800ff28 <__b2d+0x90>)
 800febc:	dc15      	bgt.n	800feea <__b2d+0x52>
 800febe:	f1c0 0c0b 	rsb	ip, r0, #11
 800fec2:	fa22 f30c 	lsr.w	r3, r2, ip
 800fec6:	45b8      	cmp	r8, r7
 800fec8:	ea43 0501 	orr.w	r5, r3, r1
 800fecc:	bf34      	ite	cc
 800fece:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fed2:	2300      	movcs	r3, #0
 800fed4:	3015      	adds	r0, #21
 800fed6:	fa02 f000 	lsl.w	r0, r2, r0
 800feda:	fa23 f30c 	lsr.w	r3, r3, ip
 800fede:	4303      	orrs	r3, r0
 800fee0:	461c      	mov	r4, r3
 800fee2:	ec45 4b10 	vmov	d0, r4, r5
 800fee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feea:	45b8      	cmp	r8, r7
 800feec:	bf3a      	itte	cc
 800feee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fef2:	f1a6 0708 	subcc.w	r7, r6, #8
 800fef6:	2300      	movcs	r3, #0
 800fef8:	380b      	subs	r0, #11
 800fefa:	d012      	beq.n	800ff22 <__b2d+0x8a>
 800fefc:	f1c0 0120 	rsb	r1, r0, #32
 800ff00:	fa23 f401 	lsr.w	r4, r3, r1
 800ff04:	4082      	lsls	r2, r0
 800ff06:	4322      	orrs	r2, r4
 800ff08:	4547      	cmp	r7, r8
 800ff0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ff0e:	bf8c      	ite	hi
 800ff10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ff14:	2200      	movls	r2, #0
 800ff16:	4083      	lsls	r3, r0
 800ff18:	40ca      	lsrs	r2, r1
 800ff1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	e7de      	b.n	800fee0 <__b2d+0x48>
 800ff22:	ea42 0501 	orr.w	r5, r2, r1
 800ff26:	e7db      	b.n	800fee0 <__b2d+0x48>
 800ff28:	3ff00000 	.word	0x3ff00000

0800ff2c <__d2b>:
 800ff2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff30:	460f      	mov	r7, r1
 800ff32:	2101      	movs	r1, #1
 800ff34:	ec59 8b10 	vmov	r8, r9, d0
 800ff38:	4616      	mov	r6, r2
 800ff3a:	f7ff fc13 	bl	800f764 <_Balloc>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	b930      	cbnz	r0, 800ff50 <__d2b+0x24>
 800ff42:	4602      	mov	r2, r0
 800ff44:	4b23      	ldr	r3, [pc, #140]	@ (800ffd4 <__d2b+0xa8>)
 800ff46:	4824      	ldr	r0, [pc, #144]	@ (800ffd8 <__d2b+0xac>)
 800ff48:	f240 310f 	movw	r1, #783	@ 0x30f
 800ff4c:	f7fe fa0a 	bl	800e364 <__assert_func>
 800ff50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ff54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff58:	b10d      	cbz	r5, 800ff5e <__d2b+0x32>
 800ff5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ff5e:	9301      	str	r3, [sp, #4]
 800ff60:	f1b8 0300 	subs.w	r3, r8, #0
 800ff64:	d023      	beq.n	800ffae <__d2b+0x82>
 800ff66:	4668      	mov	r0, sp
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	f7ff fd0c 	bl	800f986 <__lo0bits>
 800ff6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ff72:	b1d0      	cbz	r0, 800ffaa <__d2b+0x7e>
 800ff74:	f1c0 0320 	rsb	r3, r0, #32
 800ff78:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7c:	430b      	orrs	r3, r1
 800ff7e:	40c2      	lsrs	r2, r0
 800ff80:	6163      	str	r3, [r4, #20]
 800ff82:	9201      	str	r2, [sp, #4]
 800ff84:	9b01      	ldr	r3, [sp, #4]
 800ff86:	61a3      	str	r3, [r4, #24]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	bf0c      	ite	eq
 800ff8c:	2201      	moveq	r2, #1
 800ff8e:	2202      	movne	r2, #2
 800ff90:	6122      	str	r2, [r4, #16]
 800ff92:	b1a5      	cbz	r5, 800ffbe <__d2b+0x92>
 800ff94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ff98:	4405      	add	r5, r0
 800ff9a:	603d      	str	r5, [r7, #0]
 800ff9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ffa0:	6030      	str	r0, [r6, #0]
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	b003      	add	sp, #12
 800ffa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffaa:	6161      	str	r1, [r4, #20]
 800ffac:	e7ea      	b.n	800ff84 <__d2b+0x58>
 800ffae:	a801      	add	r0, sp, #4
 800ffb0:	f7ff fce9 	bl	800f986 <__lo0bits>
 800ffb4:	9b01      	ldr	r3, [sp, #4]
 800ffb6:	6163      	str	r3, [r4, #20]
 800ffb8:	3020      	adds	r0, #32
 800ffba:	2201      	movs	r2, #1
 800ffbc:	e7e8      	b.n	800ff90 <__d2b+0x64>
 800ffbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ffc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ffc6:	6038      	str	r0, [r7, #0]
 800ffc8:	6918      	ldr	r0, [r3, #16]
 800ffca:	f7ff fcbd 	bl	800f948 <__hi0bits>
 800ffce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ffd2:	e7e5      	b.n	800ffa0 <__d2b+0x74>
 800ffd4:	08011654 	.word	0x08011654
 800ffd8:	080116c5 	.word	0x080116c5

0800ffdc <__ratio>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	e9cd 1000 	strd	r1, r0, [sp]
 800ffe6:	a902      	add	r1, sp, #8
 800ffe8:	f7ff ff56 	bl	800fe98 <__b2d>
 800ffec:	9800      	ldr	r0, [sp, #0]
 800ffee:	a903      	add	r1, sp, #12
 800fff0:	ec55 4b10 	vmov	r4, r5, d0
 800fff4:	f7ff ff50 	bl	800fe98 <__b2d>
 800fff8:	9b01      	ldr	r3, [sp, #4]
 800fffa:	6919      	ldr	r1, [r3, #16]
 800fffc:	9b00      	ldr	r3, [sp, #0]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	1ac9      	subs	r1, r1, r3
 8010002:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010006:	1a9b      	subs	r3, r3, r2
 8010008:	ec5b ab10 	vmov	sl, fp, d0
 801000c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010010:	2b00      	cmp	r3, #0
 8010012:	bfce      	itee	gt
 8010014:	462a      	movgt	r2, r5
 8010016:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801001a:	465a      	movle	r2, fp
 801001c:	462f      	mov	r7, r5
 801001e:	46d9      	mov	r9, fp
 8010020:	bfcc      	ite	gt
 8010022:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010026:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801002a:	464b      	mov	r3, r9
 801002c:	4652      	mov	r2, sl
 801002e:	4620      	mov	r0, r4
 8010030:	4639      	mov	r1, r7
 8010032:	f7f0 fc23 	bl	800087c <__aeabi_ddiv>
 8010036:	ec41 0b10 	vmov	d0, r0, r1
 801003a:	b005      	add	sp, #20
 801003c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010040 <__copybits>:
 8010040:	3901      	subs	r1, #1
 8010042:	b570      	push	{r4, r5, r6, lr}
 8010044:	1149      	asrs	r1, r1, #5
 8010046:	6914      	ldr	r4, [r2, #16]
 8010048:	3101      	adds	r1, #1
 801004a:	f102 0314 	add.w	r3, r2, #20
 801004e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010052:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010056:	1f05      	subs	r5, r0, #4
 8010058:	42a3      	cmp	r3, r4
 801005a:	d30c      	bcc.n	8010076 <__copybits+0x36>
 801005c:	1aa3      	subs	r3, r4, r2
 801005e:	3b11      	subs	r3, #17
 8010060:	f023 0303 	bic.w	r3, r3, #3
 8010064:	3211      	adds	r2, #17
 8010066:	42a2      	cmp	r2, r4
 8010068:	bf88      	it	hi
 801006a:	2300      	movhi	r3, #0
 801006c:	4418      	add	r0, r3
 801006e:	2300      	movs	r3, #0
 8010070:	4288      	cmp	r0, r1
 8010072:	d305      	bcc.n	8010080 <__copybits+0x40>
 8010074:	bd70      	pop	{r4, r5, r6, pc}
 8010076:	f853 6b04 	ldr.w	r6, [r3], #4
 801007a:	f845 6f04 	str.w	r6, [r5, #4]!
 801007e:	e7eb      	b.n	8010058 <__copybits+0x18>
 8010080:	f840 3b04 	str.w	r3, [r0], #4
 8010084:	e7f4      	b.n	8010070 <__copybits+0x30>

08010086 <__any_on>:
 8010086:	f100 0214 	add.w	r2, r0, #20
 801008a:	6900      	ldr	r0, [r0, #16]
 801008c:	114b      	asrs	r3, r1, #5
 801008e:	4298      	cmp	r0, r3
 8010090:	b510      	push	{r4, lr}
 8010092:	db11      	blt.n	80100b8 <__any_on+0x32>
 8010094:	dd0a      	ble.n	80100ac <__any_on+0x26>
 8010096:	f011 011f 	ands.w	r1, r1, #31
 801009a:	d007      	beq.n	80100ac <__any_on+0x26>
 801009c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80100a0:	fa24 f001 	lsr.w	r0, r4, r1
 80100a4:	fa00 f101 	lsl.w	r1, r0, r1
 80100a8:	428c      	cmp	r4, r1
 80100aa:	d10b      	bne.n	80100c4 <__any_on+0x3e>
 80100ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d803      	bhi.n	80100bc <__any_on+0x36>
 80100b4:	2000      	movs	r0, #0
 80100b6:	bd10      	pop	{r4, pc}
 80100b8:	4603      	mov	r3, r0
 80100ba:	e7f7      	b.n	80100ac <__any_on+0x26>
 80100bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80100c0:	2900      	cmp	r1, #0
 80100c2:	d0f5      	beq.n	80100b0 <__any_on+0x2a>
 80100c4:	2001      	movs	r0, #1
 80100c6:	e7f6      	b.n	80100b6 <__any_on+0x30>

080100c8 <__ascii_wctomb>:
 80100c8:	4603      	mov	r3, r0
 80100ca:	4608      	mov	r0, r1
 80100cc:	b141      	cbz	r1, 80100e0 <__ascii_wctomb+0x18>
 80100ce:	2aff      	cmp	r2, #255	@ 0xff
 80100d0:	d904      	bls.n	80100dc <__ascii_wctomb+0x14>
 80100d2:	228a      	movs	r2, #138	@ 0x8a
 80100d4:	601a      	str	r2, [r3, #0]
 80100d6:	f04f 30ff 	mov.w	r0, #4294967295
 80100da:	4770      	bx	lr
 80100dc:	700a      	strb	r2, [r1, #0]
 80100de:	2001      	movs	r0, #1
 80100e0:	4770      	bx	lr

080100e2 <__ssputs_r>:
 80100e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e6:	688e      	ldr	r6, [r1, #8]
 80100e8:	461f      	mov	r7, r3
 80100ea:	42be      	cmp	r6, r7
 80100ec:	680b      	ldr	r3, [r1, #0]
 80100ee:	4682      	mov	sl, r0
 80100f0:	460c      	mov	r4, r1
 80100f2:	4690      	mov	r8, r2
 80100f4:	d82d      	bhi.n	8010152 <__ssputs_r+0x70>
 80100f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100fe:	d026      	beq.n	801014e <__ssputs_r+0x6c>
 8010100:	6965      	ldr	r5, [r4, #20]
 8010102:	6909      	ldr	r1, [r1, #16]
 8010104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010108:	eba3 0901 	sub.w	r9, r3, r1
 801010c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010110:	1c7b      	adds	r3, r7, #1
 8010112:	444b      	add	r3, r9
 8010114:	106d      	asrs	r5, r5, #1
 8010116:	429d      	cmp	r5, r3
 8010118:	bf38      	it	cc
 801011a:	461d      	movcc	r5, r3
 801011c:	0553      	lsls	r3, r2, #21
 801011e:	d527      	bpl.n	8010170 <__ssputs_r+0x8e>
 8010120:	4629      	mov	r1, r5
 8010122:	f7fc f821 	bl	800c168 <_malloc_r>
 8010126:	4606      	mov	r6, r0
 8010128:	b360      	cbz	r0, 8010184 <__ssputs_r+0xa2>
 801012a:	6921      	ldr	r1, [r4, #16]
 801012c:	464a      	mov	r2, r9
 801012e:	f7fe f8fa 	bl	800e326 <memcpy>
 8010132:	89a3      	ldrh	r3, [r4, #12]
 8010134:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801013c:	81a3      	strh	r3, [r4, #12]
 801013e:	6126      	str	r6, [r4, #16]
 8010140:	6165      	str	r5, [r4, #20]
 8010142:	444e      	add	r6, r9
 8010144:	eba5 0509 	sub.w	r5, r5, r9
 8010148:	6026      	str	r6, [r4, #0]
 801014a:	60a5      	str	r5, [r4, #8]
 801014c:	463e      	mov	r6, r7
 801014e:	42be      	cmp	r6, r7
 8010150:	d900      	bls.n	8010154 <__ssputs_r+0x72>
 8010152:	463e      	mov	r6, r7
 8010154:	6820      	ldr	r0, [r4, #0]
 8010156:	4632      	mov	r2, r6
 8010158:	4641      	mov	r1, r8
 801015a:	f000 fb7b 	bl	8010854 <memmove>
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	1b9b      	subs	r3, r3, r6
 8010162:	60a3      	str	r3, [r4, #8]
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	4433      	add	r3, r6
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	2000      	movs	r0, #0
 801016c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010170:	462a      	mov	r2, r5
 8010172:	f000 fbc6 	bl	8010902 <_realloc_r>
 8010176:	4606      	mov	r6, r0
 8010178:	2800      	cmp	r0, #0
 801017a:	d1e0      	bne.n	801013e <__ssputs_r+0x5c>
 801017c:	6921      	ldr	r1, [r4, #16]
 801017e:	4650      	mov	r0, sl
 8010180:	f7fe ff5a 	bl	800f038 <_free_r>
 8010184:	230c      	movs	r3, #12
 8010186:	f8ca 3000 	str.w	r3, [sl]
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	f04f 30ff 	mov.w	r0, #4294967295
 8010196:	e7e9      	b.n	801016c <__ssputs_r+0x8a>

08010198 <_svfiprintf_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	4698      	mov	r8, r3
 801019e:	898b      	ldrh	r3, [r1, #12]
 80101a0:	061b      	lsls	r3, r3, #24
 80101a2:	b09d      	sub	sp, #116	@ 0x74
 80101a4:	4607      	mov	r7, r0
 80101a6:	460d      	mov	r5, r1
 80101a8:	4614      	mov	r4, r2
 80101aa:	d510      	bpl.n	80101ce <_svfiprintf_r+0x36>
 80101ac:	690b      	ldr	r3, [r1, #16]
 80101ae:	b973      	cbnz	r3, 80101ce <_svfiprintf_r+0x36>
 80101b0:	2140      	movs	r1, #64	@ 0x40
 80101b2:	f7fb ffd9 	bl	800c168 <_malloc_r>
 80101b6:	6028      	str	r0, [r5, #0]
 80101b8:	6128      	str	r0, [r5, #16]
 80101ba:	b930      	cbnz	r0, 80101ca <_svfiprintf_r+0x32>
 80101bc:	230c      	movs	r3, #12
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295
 80101c4:	b01d      	add	sp, #116	@ 0x74
 80101c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ca:	2340      	movs	r3, #64	@ 0x40
 80101cc:	616b      	str	r3, [r5, #20]
 80101ce:	2300      	movs	r3, #0
 80101d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80101d2:	2320      	movs	r3, #32
 80101d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80101dc:	2330      	movs	r3, #48	@ 0x30
 80101de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801037c <_svfiprintf_r+0x1e4>
 80101e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101e6:	f04f 0901 	mov.w	r9, #1
 80101ea:	4623      	mov	r3, r4
 80101ec:	469a      	mov	sl, r3
 80101ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101f2:	b10a      	cbz	r2, 80101f8 <_svfiprintf_r+0x60>
 80101f4:	2a25      	cmp	r2, #37	@ 0x25
 80101f6:	d1f9      	bne.n	80101ec <_svfiprintf_r+0x54>
 80101f8:	ebba 0b04 	subs.w	fp, sl, r4
 80101fc:	d00b      	beq.n	8010216 <_svfiprintf_r+0x7e>
 80101fe:	465b      	mov	r3, fp
 8010200:	4622      	mov	r2, r4
 8010202:	4629      	mov	r1, r5
 8010204:	4638      	mov	r0, r7
 8010206:	f7ff ff6c 	bl	80100e2 <__ssputs_r>
 801020a:	3001      	adds	r0, #1
 801020c:	f000 80a7 	beq.w	801035e <_svfiprintf_r+0x1c6>
 8010210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010212:	445a      	add	r2, fp
 8010214:	9209      	str	r2, [sp, #36]	@ 0x24
 8010216:	f89a 3000 	ldrb.w	r3, [sl]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 809f 	beq.w	801035e <_svfiprintf_r+0x1c6>
 8010220:	2300      	movs	r3, #0
 8010222:	f04f 32ff 	mov.w	r2, #4294967295
 8010226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801022a:	f10a 0a01 	add.w	sl, sl, #1
 801022e:	9304      	str	r3, [sp, #16]
 8010230:	9307      	str	r3, [sp, #28]
 8010232:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010236:	931a      	str	r3, [sp, #104]	@ 0x68
 8010238:	4654      	mov	r4, sl
 801023a:	2205      	movs	r2, #5
 801023c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010240:	484e      	ldr	r0, [pc, #312]	@ (801037c <_svfiprintf_r+0x1e4>)
 8010242:	f7ef ffdd 	bl	8000200 <memchr>
 8010246:	9a04      	ldr	r2, [sp, #16]
 8010248:	b9d8      	cbnz	r0, 8010282 <_svfiprintf_r+0xea>
 801024a:	06d0      	lsls	r0, r2, #27
 801024c:	bf44      	itt	mi
 801024e:	2320      	movmi	r3, #32
 8010250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010254:	0711      	lsls	r1, r2, #28
 8010256:	bf44      	itt	mi
 8010258:	232b      	movmi	r3, #43	@ 0x2b
 801025a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801025e:	f89a 3000 	ldrb.w	r3, [sl]
 8010262:	2b2a      	cmp	r3, #42	@ 0x2a
 8010264:	d015      	beq.n	8010292 <_svfiprintf_r+0xfa>
 8010266:	9a07      	ldr	r2, [sp, #28]
 8010268:	4654      	mov	r4, sl
 801026a:	2000      	movs	r0, #0
 801026c:	f04f 0c0a 	mov.w	ip, #10
 8010270:	4621      	mov	r1, r4
 8010272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010276:	3b30      	subs	r3, #48	@ 0x30
 8010278:	2b09      	cmp	r3, #9
 801027a:	d94b      	bls.n	8010314 <_svfiprintf_r+0x17c>
 801027c:	b1b0      	cbz	r0, 80102ac <_svfiprintf_r+0x114>
 801027e:	9207      	str	r2, [sp, #28]
 8010280:	e014      	b.n	80102ac <_svfiprintf_r+0x114>
 8010282:	eba0 0308 	sub.w	r3, r0, r8
 8010286:	fa09 f303 	lsl.w	r3, r9, r3
 801028a:	4313      	orrs	r3, r2
 801028c:	9304      	str	r3, [sp, #16]
 801028e:	46a2      	mov	sl, r4
 8010290:	e7d2      	b.n	8010238 <_svfiprintf_r+0xa0>
 8010292:	9b03      	ldr	r3, [sp, #12]
 8010294:	1d19      	adds	r1, r3, #4
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	9103      	str	r1, [sp, #12]
 801029a:	2b00      	cmp	r3, #0
 801029c:	bfbb      	ittet	lt
 801029e:	425b      	neglt	r3, r3
 80102a0:	f042 0202 	orrlt.w	r2, r2, #2
 80102a4:	9307      	strge	r3, [sp, #28]
 80102a6:	9307      	strlt	r3, [sp, #28]
 80102a8:	bfb8      	it	lt
 80102aa:	9204      	strlt	r2, [sp, #16]
 80102ac:	7823      	ldrb	r3, [r4, #0]
 80102ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80102b0:	d10a      	bne.n	80102c8 <_svfiprintf_r+0x130>
 80102b2:	7863      	ldrb	r3, [r4, #1]
 80102b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b6:	d132      	bne.n	801031e <_svfiprintf_r+0x186>
 80102b8:	9b03      	ldr	r3, [sp, #12]
 80102ba:	1d1a      	adds	r2, r3, #4
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	9203      	str	r2, [sp, #12]
 80102c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102c4:	3402      	adds	r4, #2
 80102c6:	9305      	str	r3, [sp, #20]
 80102c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801038c <_svfiprintf_r+0x1f4>
 80102cc:	7821      	ldrb	r1, [r4, #0]
 80102ce:	2203      	movs	r2, #3
 80102d0:	4650      	mov	r0, sl
 80102d2:	f7ef ff95 	bl	8000200 <memchr>
 80102d6:	b138      	cbz	r0, 80102e8 <_svfiprintf_r+0x150>
 80102d8:	9b04      	ldr	r3, [sp, #16]
 80102da:	eba0 000a 	sub.w	r0, r0, sl
 80102de:	2240      	movs	r2, #64	@ 0x40
 80102e0:	4082      	lsls	r2, r0
 80102e2:	4313      	orrs	r3, r2
 80102e4:	3401      	adds	r4, #1
 80102e6:	9304      	str	r3, [sp, #16]
 80102e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ec:	4824      	ldr	r0, [pc, #144]	@ (8010380 <_svfiprintf_r+0x1e8>)
 80102ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102f2:	2206      	movs	r2, #6
 80102f4:	f7ef ff84 	bl	8000200 <memchr>
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d036      	beq.n	801036a <_svfiprintf_r+0x1d2>
 80102fc:	4b21      	ldr	r3, [pc, #132]	@ (8010384 <_svfiprintf_r+0x1ec>)
 80102fe:	bb1b      	cbnz	r3, 8010348 <_svfiprintf_r+0x1b0>
 8010300:	9b03      	ldr	r3, [sp, #12]
 8010302:	3307      	adds	r3, #7
 8010304:	f023 0307 	bic.w	r3, r3, #7
 8010308:	3308      	adds	r3, #8
 801030a:	9303      	str	r3, [sp, #12]
 801030c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801030e:	4433      	add	r3, r6
 8010310:	9309      	str	r3, [sp, #36]	@ 0x24
 8010312:	e76a      	b.n	80101ea <_svfiprintf_r+0x52>
 8010314:	fb0c 3202 	mla	r2, ip, r2, r3
 8010318:	460c      	mov	r4, r1
 801031a:	2001      	movs	r0, #1
 801031c:	e7a8      	b.n	8010270 <_svfiprintf_r+0xd8>
 801031e:	2300      	movs	r3, #0
 8010320:	3401      	adds	r4, #1
 8010322:	9305      	str	r3, [sp, #20]
 8010324:	4619      	mov	r1, r3
 8010326:	f04f 0c0a 	mov.w	ip, #10
 801032a:	4620      	mov	r0, r4
 801032c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010330:	3a30      	subs	r2, #48	@ 0x30
 8010332:	2a09      	cmp	r2, #9
 8010334:	d903      	bls.n	801033e <_svfiprintf_r+0x1a6>
 8010336:	2b00      	cmp	r3, #0
 8010338:	d0c6      	beq.n	80102c8 <_svfiprintf_r+0x130>
 801033a:	9105      	str	r1, [sp, #20]
 801033c:	e7c4      	b.n	80102c8 <_svfiprintf_r+0x130>
 801033e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010342:	4604      	mov	r4, r0
 8010344:	2301      	movs	r3, #1
 8010346:	e7f0      	b.n	801032a <_svfiprintf_r+0x192>
 8010348:	ab03      	add	r3, sp, #12
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	462a      	mov	r2, r5
 801034e:	4b0e      	ldr	r3, [pc, #56]	@ (8010388 <_svfiprintf_r+0x1f0>)
 8010350:	a904      	add	r1, sp, #16
 8010352:	4638      	mov	r0, r7
 8010354:	f7fc feba 	bl	800d0cc <_printf_float>
 8010358:	1c42      	adds	r2, r0, #1
 801035a:	4606      	mov	r6, r0
 801035c:	d1d6      	bne.n	801030c <_svfiprintf_r+0x174>
 801035e:	89ab      	ldrh	r3, [r5, #12]
 8010360:	065b      	lsls	r3, r3, #25
 8010362:	f53f af2d 	bmi.w	80101c0 <_svfiprintf_r+0x28>
 8010366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010368:	e72c      	b.n	80101c4 <_svfiprintf_r+0x2c>
 801036a:	ab03      	add	r3, sp, #12
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	462a      	mov	r2, r5
 8010370:	4b05      	ldr	r3, [pc, #20]	@ (8010388 <_svfiprintf_r+0x1f0>)
 8010372:	a904      	add	r1, sp, #16
 8010374:	4638      	mov	r0, r7
 8010376:	f7fd f941 	bl	800d5fc <_printf_i>
 801037a:	e7ed      	b.n	8010358 <_svfiprintf_r+0x1c0>
 801037c:	08011820 	.word	0x08011820
 8010380:	0801182a 	.word	0x0801182a
 8010384:	0800d0cd 	.word	0x0800d0cd
 8010388:	080100e3 	.word	0x080100e3
 801038c:	08011826 	.word	0x08011826

08010390 <__sfputc_r>:
 8010390:	6893      	ldr	r3, [r2, #8]
 8010392:	3b01      	subs	r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	b410      	push	{r4}
 8010398:	6093      	str	r3, [r2, #8]
 801039a:	da08      	bge.n	80103ae <__sfputc_r+0x1e>
 801039c:	6994      	ldr	r4, [r2, #24]
 801039e:	42a3      	cmp	r3, r4
 80103a0:	db01      	blt.n	80103a6 <__sfputc_r+0x16>
 80103a2:	290a      	cmp	r1, #10
 80103a4:	d103      	bne.n	80103ae <__sfputc_r+0x1e>
 80103a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103aa:	f7fd bdf0 	b.w	800df8e <__swbuf_r>
 80103ae:	6813      	ldr	r3, [r2, #0]
 80103b0:	1c58      	adds	r0, r3, #1
 80103b2:	6010      	str	r0, [r2, #0]
 80103b4:	7019      	strb	r1, [r3, #0]
 80103b6:	4608      	mov	r0, r1
 80103b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103bc:	4770      	bx	lr

080103be <__sfputs_r>:
 80103be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c0:	4606      	mov	r6, r0
 80103c2:	460f      	mov	r7, r1
 80103c4:	4614      	mov	r4, r2
 80103c6:	18d5      	adds	r5, r2, r3
 80103c8:	42ac      	cmp	r4, r5
 80103ca:	d101      	bne.n	80103d0 <__sfputs_r+0x12>
 80103cc:	2000      	movs	r0, #0
 80103ce:	e007      	b.n	80103e0 <__sfputs_r+0x22>
 80103d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103d4:	463a      	mov	r2, r7
 80103d6:	4630      	mov	r0, r6
 80103d8:	f7ff ffda 	bl	8010390 <__sfputc_r>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d1f3      	bne.n	80103c8 <__sfputs_r+0xa>
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103e4 <_vfiprintf_r>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	460d      	mov	r5, r1
 80103ea:	b09d      	sub	sp, #116	@ 0x74
 80103ec:	4614      	mov	r4, r2
 80103ee:	4698      	mov	r8, r3
 80103f0:	4606      	mov	r6, r0
 80103f2:	b118      	cbz	r0, 80103fc <_vfiprintf_r+0x18>
 80103f4:	6a03      	ldr	r3, [r0, #32]
 80103f6:	b90b      	cbnz	r3, 80103fc <_vfiprintf_r+0x18>
 80103f8:	f7fd fcc0 	bl	800dd7c <__sinit>
 80103fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103fe:	07d9      	lsls	r1, r3, #31
 8010400:	d405      	bmi.n	801040e <_vfiprintf_r+0x2a>
 8010402:	89ab      	ldrh	r3, [r5, #12]
 8010404:	059a      	lsls	r2, r3, #22
 8010406:	d402      	bmi.n	801040e <_vfiprintf_r+0x2a>
 8010408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801040a:	f7fd ff8a 	bl	800e322 <__retarget_lock_acquire_recursive>
 801040e:	89ab      	ldrh	r3, [r5, #12]
 8010410:	071b      	lsls	r3, r3, #28
 8010412:	d501      	bpl.n	8010418 <_vfiprintf_r+0x34>
 8010414:	692b      	ldr	r3, [r5, #16]
 8010416:	b99b      	cbnz	r3, 8010440 <_vfiprintf_r+0x5c>
 8010418:	4629      	mov	r1, r5
 801041a:	4630      	mov	r0, r6
 801041c:	f7fd fdf6 	bl	800e00c <__swsetup_r>
 8010420:	b170      	cbz	r0, 8010440 <_vfiprintf_r+0x5c>
 8010422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010424:	07dc      	lsls	r4, r3, #31
 8010426:	d504      	bpl.n	8010432 <_vfiprintf_r+0x4e>
 8010428:	f04f 30ff 	mov.w	r0, #4294967295
 801042c:	b01d      	add	sp, #116	@ 0x74
 801042e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010432:	89ab      	ldrh	r3, [r5, #12]
 8010434:	0598      	lsls	r0, r3, #22
 8010436:	d4f7      	bmi.n	8010428 <_vfiprintf_r+0x44>
 8010438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801043a:	f7fd ff73 	bl	800e324 <__retarget_lock_release_recursive>
 801043e:	e7f3      	b.n	8010428 <_vfiprintf_r+0x44>
 8010440:	2300      	movs	r3, #0
 8010442:	9309      	str	r3, [sp, #36]	@ 0x24
 8010444:	2320      	movs	r3, #32
 8010446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801044a:	f8cd 800c 	str.w	r8, [sp, #12]
 801044e:	2330      	movs	r3, #48	@ 0x30
 8010450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010600 <_vfiprintf_r+0x21c>
 8010454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010458:	f04f 0901 	mov.w	r9, #1
 801045c:	4623      	mov	r3, r4
 801045e:	469a      	mov	sl, r3
 8010460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010464:	b10a      	cbz	r2, 801046a <_vfiprintf_r+0x86>
 8010466:	2a25      	cmp	r2, #37	@ 0x25
 8010468:	d1f9      	bne.n	801045e <_vfiprintf_r+0x7a>
 801046a:	ebba 0b04 	subs.w	fp, sl, r4
 801046e:	d00b      	beq.n	8010488 <_vfiprintf_r+0xa4>
 8010470:	465b      	mov	r3, fp
 8010472:	4622      	mov	r2, r4
 8010474:	4629      	mov	r1, r5
 8010476:	4630      	mov	r0, r6
 8010478:	f7ff ffa1 	bl	80103be <__sfputs_r>
 801047c:	3001      	adds	r0, #1
 801047e:	f000 80a7 	beq.w	80105d0 <_vfiprintf_r+0x1ec>
 8010482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010484:	445a      	add	r2, fp
 8010486:	9209      	str	r2, [sp, #36]	@ 0x24
 8010488:	f89a 3000 	ldrb.w	r3, [sl]
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 809f 	beq.w	80105d0 <_vfiprintf_r+0x1ec>
 8010492:	2300      	movs	r3, #0
 8010494:	f04f 32ff 	mov.w	r2, #4294967295
 8010498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801049c:	f10a 0a01 	add.w	sl, sl, #1
 80104a0:	9304      	str	r3, [sp, #16]
 80104a2:	9307      	str	r3, [sp, #28]
 80104a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80104a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80104aa:	4654      	mov	r4, sl
 80104ac:	2205      	movs	r2, #5
 80104ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104b2:	4853      	ldr	r0, [pc, #332]	@ (8010600 <_vfiprintf_r+0x21c>)
 80104b4:	f7ef fea4 	bl	8000200 <memchr>
 80104b8:	9a04      	ldr	r2, [sp, #16]
 80104ba:	b9d8      	cbnz	r0, 80104f4 <_vfiprintf_r+0x110>
 80104bc:	06d1      	lsls	r1, r2, #27
 80104be:	bf44      	itt	mi
 80104c0:	2320      	movmi	r3, #32
 80104c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104c6:	0713      	lsls	r3, r2, #28
 80104c8:	bf44      	itt	mi
 80104ca:	232b      	movmi	r3, #43	@ 0x2b
 80104cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80104d0:	f89a 3000 	ldrb.w	r3, [sl]
 80104d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80104d6:	d015      	beq.n	8010504 <_vfiprintf_r+0x120>
 80104d8:	9a07      	ldr	r2, [sp, #28]
 80104da:	4654      	mov	r4, sl
 80104dc:	2000      	movs	r0, #0
 80104de:	f04f 0c0a 	mov.w	ip, #10
 80104e2:	4621      	mov	r1, r4
 80104e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80104e8:	3b30      	subs	r3, #48	@ 0x30
 80104ea:	2b09      	cmp	r3, #9
 80104ec:	d94b      	bls.n	8010586 <_vfiprintf_r+0x1a2>
 80104ee:	b1b0      	cbz	r0, 801051e <_vfiprintf_r+0x13a>
 80104f0:	9207      	str	r2, [sp, #28]
 80104f2:	e014      	b.n	801051e <_vfiprintf_r+0x13a>
 80104f4:	eba0 0308 	sub.w	r3, r0, r8
 80104f8:	fa09 f303 	lsl.w	r3, r9, r3
 80104fc:	4313      	orrs	r3, r2
 80104fe:	9304      	str	r3, [sp, #16]
 8010500:	46a2      	mov	sl, r4
 8010502:	e7d2      	b.n	80104aa <_vfiprintf_r+0xc6>
 8010504:	9b03      	ldr	r3, [sp, #12]
 8010506:	1d19      	adds	r1, r3, #4
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	9103      	str	r1, [sp, #12]
 801050c:	2b00      	cmp	r3, #0
 801050e:	bfbb      	ittet	lt
 8010510:	425b      	neglt	r3, r3
 8010512:	f042 0202 	orrlt.w	r2, r2, #2
 8010516:	9307      	strge	r3, [sp, #28]
 8010518:	9307      	strlt	r3, [sp, #28]
 801051a:	bfb8      	it	lt
 801051c:	9204      	strlt	r2, [sp, #16]
 801051e:	7823      	ldrb	r3, [r4, #0]
 8010520:	2b2e      	cmp	r3, #46	@ 0x2e
 8010522:	d10a      	bne.n	801053a <_vfiprintf_r+0x156>
 8010524:	7863      	ldrb	r3, [r4, #1]
 8010526:	2b2a      	cmp	r3, #42	@ 0x2a
 8010528:	d132      	bne.n	8010590 <_vfiprintf_r+0x1ac>
 801052a:	9b03      	ldr	r3, [sp, #12]
 801052c:	1d1a      	adds	r2, r3, #4
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	9203      	str	r2, [sp, #12]
 8010532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010536:	3402      	adds	r4, #2
 8010538:	9305      	str	r3, [sp, #20]
 801053a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010610 <_vfiprintf_r+0x22c>
 801053e:	7821      	ldrb	r1, [r4, #0]
 8010540:	2203      	movs	r2, #3
 8010542:	4650      	mov	r0, sl
 8010544:	f7ef fe5c 	bl	8000200 <memchr>
 8010548:	b138      	cbz	r0, 801055a <_vfiprintf_r+0x176>
 801054a:	9b04      	ldr	r3, [sp, #16]
 801054c:	eba0 000a 	sub.w	r0, r0, sl
 8010550:	2240      	movs	r2, #64	@ 0x40
 8010552:	4082      	lsls	r2, r0
 8010554:	4313      	orrs	r3, r2
 8010556:	3401      	adds	r4, #1
 8010558:	9304      	str	r3, [sp, #16]
 801055a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801055e:	4829      	ldr	r0, [pc, #164]	@ (8010604 <_vfiprintf_r+0x220>)
 8010560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010564:	2206      	movs	r2, #6
 8010566:	f7ef fe4b 	bl	8000200 <memchr>
 801056a:	2800      	cmp	r0, #0
 801056c:	d03f      	beq.n	80105ee <_vfiprintf_r+0x20a>
 801056e:	4b26      	ldr	r3, [pc, #152]	@ (8010608 <_vfiprintf_r+0x224>)
 8010570:	bb1b      	cbnz	r3, 80105ba <_vfiprintf_r+0x1d6>
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	3307      	adds	r3, #7
 8010576:	f023 0307 	bic.w	r3, r3, #7
 801057a:	3308      	adds	r3, #8
 801057c:	9303      	str	r3, [sp, #12]
 801057e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010580:	443b      	add	r3, r7
 8010582:	9309      	str	r3, [sp, #36]	@ 0x24
 8010584:	e76a      	b.n	801045c <_vfiprintf_r+0x78>
 8010586:	fb0c 3202 	mla	r2, ip, r2, r3
 801058a:	460c      	mov	r4, r1
 801058c:	2001      	movs	r0, #1
 801058e:	e7a8      	b.n	80104e2 <_vfiprintf_r+0xfe>
 8010590:	2300      	movs	r3, #0
 8010592:	3401      	adds	r4, #1
 8010594:	9305      	str	r3, [sp, #20]
 8010596:	4619      	mov	r1, r3
 8010598:	f04f 0c0a 	mov.w	ip, #10
 801059c:	4620      	mov	r0, r4
 801059e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105a2:	3a30      	subs	r2, #48	@ 0x30
 80105a4:	2a09      	cmp	r2, #9
 80105a6:	d903      	bls.n	80105b0 <_vfiprintf_r+0x1cc>
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d0c6      	beq.n	801053a <_vfiprintf_r+0x156>
 80105ac:	9105      	str	r1, [sp, #20]
 80105ae:	e7c4      	b.n	801053a <_vfiprintf_r+0x156>
 80105b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80105b4:	4604      	mov	r4, r0
 80105b6:	2301      	movs	r3, #1
 80105b8:	e7f0      	b.n	801059c <_vfiprintf_r+0x1b8>
 80105ba:	ab03      	add	r3, sp, #12
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	462a      	mov	r2, r5
 80105c0:	4b12      	ldr	r3, [pc, #72]	@ (801060c <_vfiprintf_r+0x228>)
 80105c2:	a904      	add	r1, sp, #16
 80105c4:	4630      	mov	r0, r6
 80105c6:	f7fc fd81 	bl	800d0cc <_printf_float>
 80105ca:	4607      	mov	r7, r0
 80105cc:	1c78      	adds	r0, r7, #1
 80105ce:	d1d6      	bne.n	801057e <_vfiprintf_r+0x19a>
 80105d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105d2:	07d9      	lsls	r1, r3, #31
 80105d4:	d405      	bmi.n	80105e2 <_vfiprintf_r+0x1fe>
 80105d6:	89ab      	ldrh	r3, [r5, #12]
 80105d8:	059a      	lsls	r2, r3, #22
 80105da:	d402      	bmi.n	80105e2 <_vfiprintf_r+0x1fe>
 80105dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105de:	f7fd fea1 	bl	800e324 <__retarget_lock_release_recursive>
 80105e2:	89ab      	ldrh	r3, [r5, #12]
 80105e4:	065b      	lsls	r3, r3, #25
 80105e6:	f53f af1f 	bmi.w	8010428 <_vfiprintf_r+0x44>
 80105ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80105ec:	e71e      	b.n	801042c <_vfiprintf_r+0x48>
 80105ee:	ab03      	add	r3, sp, #12
 80105f0:	9300      	str	r3, [sp, #0]
 80105f2:	462a      	mov	r2, r5
 80105f4:	4b05      	ldr	r3, [pc, #20]	@ (801060c <_vfiprintf_r+0x228>)
 80105f6:	a904      	add	r1, sp, #16
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7fc ffff 	bl	800d5fc <_printf_i>
 80105fe:	e7e4      	b.n	80105ca <_vfiprintf_r+0x1e6>
 8010600:	08011820 	.word	0x08011820
 8010604:	0801182a 	.word	0x0801182a
 8010608:	0800d0cd 	.word	0x0800d0cd
 801060c:	080103bf 	.word	0x080103bf
 8010610:	08011826 	.word	0x08011826

08010614 <__sflush_r>:
 8010614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801061c:	0716      	lsls	r6, r2, #28
 801061e:	4605      	mov	r5, r0
 8010620:	460c      	mov	r4, r1
 8010622:	d454      	bmi.n	80106ce <__sflush_r+0xba>
 8010624:	684b      	ldr	r3, [r1, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	dc02      	bgt.n	8010630 <__sflush_r+0x1c>
 801062a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801062c:	2b00      	cmp	r3, #0
 801062e:	dd48      	ble.n	80106c2 <__sflush_r+0xae>
 8010630:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010632:	2e00      	cmp	r6, #0
 8010634:	d045      	beq.n	80106c2 <__sflush_r+0xae>
 8010636:	2300      	movs	r3, #0
 8010638:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801063c:	682f      	ldr	r7, [r5, #0]
 801063e:	6a21      	ldr	r1, [r4, #32]
 8010640:	602b      	str	r3, [r5, #0]
 8010642:	d030      	beq.n	80106a6 <__sflush_r+0x92>
 8010644:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	0759      	lsls	r1, r3, #29
 801064a:	d505      	bpl.n	8010658 <__sflush_r+0x44>
 801064c:	6863      	ldr	r3, [r4, #4]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010652:	b10b      	cbz	r3, 8010658 <__sflush_r+0x44>
 8010654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010656:	1ad2      	subs	r2, r2, r3
 8010658:	2300      	movs	r3, #0
 801065a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801065c:	6a21      	ldr	r1, [r4, #32]
 801065e:	4628      	mov	r0, r5
 8010660:	47b0      	blx	r6
 8010662:	1c43      	adds	r3, r0, #1
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	d106      	bne.n	8010676 <__sflush_r+0x62>
 8010668:	6829      	ldr	r1, [r5, #0]
 801066a:	291d      	cmp	r1, #29
 801066c:	d82b      	bhi.n	80106c6 <__sflush_r+0xb2>
 801066e:	4a2a      	ldr	r2, [pc, #168]	@ (8010718 <__sflush_r+0x104>)
 8010670:	410a      	asrs	r2, r1
 8010672:	07d6      	lsls	r6, r2, #31
 8010674:	d427      	bmi.n	80106c6 <__sflush_r+0xb2>
 8010676:	2200      	movs	r2, #0
 8010678:	6062      	str	r2, [r4, #4]
 801067a:	04d9      	lsls	r1, r3, #19
 801067c:	6922      	ldr	r2, [r4, #16]
 801067e:	6022      	str	r2, [r4, #0]
 8010680:	d504      	bpl.n	801068c <__sflush_r+0x78>
 8010682:	1c42      	adds	r2, r0, #1
 8010684:	d101      	bne.n	801068a <__sflush_r+0x76>
 8010686:	682b      	ldr	r3, [r5, #0]
 8010688:	b903      	cbnz	r3, 801068c <__sflush_r+0x78>
 801068a:	6560      	str	r0, [r4, #84]	@ 0x54
 801068c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801068e:	602f      	str	r7, [r5, #0]
 8010690:	b1b9      	cbz	r1, 80106c2 <__sflush_r+0xae>
 8010692:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010696:	4299      	cmp	r1, r3
 8010698:	d002      	beq.n	80106a0 <__sflush_r+0x8c>
 801069a:	4628      	mov	r0, r5
 801069c:	f7fe fccc 	bl	800f038 <_free_r>
 80106a0:	2300      	movs	r3, #0
 80106a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80106a4:	e00d      	b.n	80106c2 <__sflush_r+0xae>
 80106a6:	2301      	movs	r3, #1
 80106a8:	4628      	mov	r0, r5
 80106aa:	47b0      	blx	r6
 80106ac:	4602      	mov	r2, r0
 80106ae:	1c50      	adds	r0, r2, #1
 80106b0:	d1c9      	bne.n	8010646 <__sflush_r+0x32>
 80106b2:	682b      	ldr	r3, [r5, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d0c6      	beq.n	8010646 <__sflush_r+0x32>
 80106b8:	2b1d      	cmp	r3, #29
 80106ba:	d001      	beq.n	80106c0 <__sflush_r+0xac>
 80106bc:	2b16      	cmp	r3, #22
 80106be:	d11e      	bne.n	80106fe <__sflush_r+0xea>
 80106c0:	602f      	str	r7, [r5, #0]
 80106c2:	2000      	movs	r0, #0
 80106c4:	e022      	b.n	801070c <__sflush_r+0xf8>
 80106c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106ca:	b21b      	sxth	r3, r3
 80106cc:	e01b      	b.n	8010706 <__sflush_r+0xf2>
 80106ce:	690f      	ldr	r7, [r1, #16]
 80106d0:	2f00      	cmp	r7, #0
 80106d2:	d0f6      	beq.n	80106c2 <__sflush_r+0xae>
 80106d4:	0793      	lsls	r3, r2, #30
 80106d6:	680e      	ldr	r6, [r1, #0]
 80106d8:	bf08      	it	eq
 80106da:	694b      	ldreq	r3, [r1, #20]
 80106dc:	600f      	str	r7, [r1, #0]
 80106de:	bf18      	it	ne
 80106e0:	2300      	movne	r3, #0
 80106e2:	eba6 0807 	sub.w	r8, r6, r7
 80106e6:	608b      	str	r3, [r1, #8]
 80106e8:	f1b8 0f00 	cmp.w	r8, #0
 80106ec:	dde9      	ble.n	80106c2 <__sflush_r+0xae>
 80106ee:	6a21      	ldr	r1, [r4, #32]
 80106f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106f2:	4643      	mov	r3, r8
 80106f4:	463a      	mov	r2, r7
 80106f6:	4628      	mov	r0, r5
 80106f8:	47b0      	blx	r6
 80106fa:	2800      	cmp	r0, #0
 80106fc:	dc08      	bgt.n	8010710 <__sflush_r+0xfc>
 80106fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	f04f 30ff 	mov.w	r0, #4294967295
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	4407      	add	r7, r0
 8010712:	eba8 0800 	sub.w	r8, r8, r0
 8010716:	e7e7      	b.n	80106e8 <__sflush_r+0xd4>
 8010718:	dfbffffe 	.word	0xdfbffffe

0801071c <_fflush_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	690b      	ldr	r3, [r1, #16]
 8010720:	4605      	mov	r5, r0
 8010722:	460c      	mov	r4, r1
 8010724:	b913      	cbnz	r3, 801072c <_fflush_r+0x10>
 8010726:	2500      	movs	r5, #0
 8010728:	4628      	mov	r0, r5
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	b118      	cbz	r0, 8010736 <_fflush_r+0x1a>
 801072e:	6a03      	ldr	r3, [r0, #32]
 8010730:	b90b      	cbnz	r3, 8010736 <_fflush_r+0x1a>
 8010732:	f7fd fb23 	bl	800dd7c <__sinit>
 8010736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d0f3      	beq.n	8010726 <_fflush_r+0xa>
 801073e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010740:	07d0      	lsls	r0, r2, #31
 8010742:	d404      	bmi.n	801074e <_fflush_r+0x32>
 8010744:	0599      	lsls	r1, r3, #22
 8010746:	d402      	bmi.n	801074e <_fflush_r+0x32>
 8010748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801074a:	f7fd fdea 	bl	800e322 <__retarget_lock_acquire_recursive>
 801074e:	4628      	mov	r0, r5
 8010750:	4621      	mov	r1, r4
 8010752:	f7ff ff5f 	bl	8010614 <__sflush_r>
 8010756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010758:	07da      	lsls	r2, r3, #31
 801075a:	4605      	mov	r5, r0
 801075c:	d4e4      	bmi.n	8010728 <_fflush_r+0xc>
 801075e:	89a3      	ldrh	r3, [r4, #12]
 8010760:	059b      	lsls	r3, r3, #22
 8010762:	d4e1      	bmi.n	8010728 <_fflush_r+0xc>
 8010764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010766:	f7fd fddd 	bl	800e324 <__retarget_lock_release_recursive>
 801076a:	e7dd      	b.n	8010728 <_fflush_r+0xc>

0801076c <fiprintf>:
 801076c:	b40e      	push	{r1, r2, r3}
 801076e:	b503      	push	{r0, r1, lr}
 8010770:	4601      	mov	r1, r0
 8010772:	ab03      	add	r3, sp, #12
 8010774:	4805      	ldr	r0, [pc, #20]	@ (801078c <fiprintf+0x20>)
 8010776:	f853 2b04 	ldr.w	r2, [r3], #4
 801077a:	6800      	ldr	r0, [r0, #0]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	f7ff fe31 	bl	80103e4 <_vfiprintf_r>
 8010782:	b002      	add	sp, #8
 8010784:	f85d eb04 	ldr.w	lr, [sp], #4
 8010788:	b003      	add	sp, #12
 801078a:	4770      	bx	lr
 801078c:	200001b8 	.word	0x200001b8

08010790 <__swhatbuf_r>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	460c      	mov	r4, r1
 8010794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010798:	2900      	cmp	r1, #0
 801079a:	b096      	sub	sp, #88	@ 0x58
 801079c:	4615      	mov	r5, r2
 801079e:	461e      	mov	r6, r3
 80107a0:	da0d      	bge.n	80107be <__swhatbuf_r+0x2e>
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80107a8:	f04f 0100 	mov.w	r1, #0
 80107ac:	bf14      	ite	ne
 80107ae:	2340      	movne	r3, #64	@ 0x40
 80107b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80107b4:	2000      	movs	r0, #0
 80107b6:	6031      	str	r1, [r6, #0]
 80107b8:	602b      	str	r3, [r5, #0]
 80107ba:	b016      	add	sp, #88	@ 0x58
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
 80107be:	466a      	mov	r2, sp
 80107c0:	f000 f862 	bl	8010888 <_fstat_r>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	dbec      	blt.n	80107a2 <__swhatbuf_r+0x12>
 80107c8:	9901      	ldr	r1, [sp, #4]
 80107ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107d2:	4259      	negs	r1, r3
 80107d4:	4159      	adcs	r1, r3
 80107d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107da:	e7eb      	b.n	80107b4 <__swhatbuf_r+0x24>

080107dc <__smakebuf_r>:
 80107dc:	898b      	ldrh	r3, [r1, #12]
 80107de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107e0:	079d      	lsls	r5, r3, #30
 80107e2:	4606      	mov	r6, r0
 80107e4:	460c      	mov	r4, r1
 80107e6:	d507      	bpl.n	80107f8 <__smakebuf_r+0x1c>
 80107e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80107ec:	6023      	str	r3, [r4, #0]
 80107ee:	6123      	str	r3, [r4, #16]
 80107f0:	2301      	movs	r3, #1
 80107f2:	6163      	str	r3, [r4, #20]
 80107f4:	b003      	add	sp, #12
 80107f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f8:	ab01      	add	r3, sp, #4
 80107fa:	466a      	mov	r2, sp
 80107fc:	f7ff ffc8 	bl	8010790 <__swhatbuf_r>
 8010800:	9f00      	ldr	r7, [sp, #0]
 8010802:	4605      	mov	r5, r0
 8010804:	4639      	mov	r1, r7
 8010806:	4630      	mov	r0, r6
 8010808:	f7fb fcae 	bl	800c168 <_malloc_r>
 801080c:	b948      	cbnz	r0, 8010822 <__smakebuf_r+0x46>
 801080e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010812:	059a      	lsls	r2, r3, #22
 8010814:	d4ee      	bmi.n	80107f4 <__smakebuf_r+0x18>
 8010816:	f023 0303 	bic.w	r3, r3, #3
 801081a:	f043 0302 	orr.w	r3, r3, #2
 801081e:	81a3      	strh	r3, [r4, #12]
 8010820:	e7e2      	b.n	80107e8 <__smakebuf_r+0xc>
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	6020      	str	r0, [r4, #0]
 8010826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	9b01      	ldr	r3, [sp, #4]
 801082e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010832:	b15b      	cbz	r3, 801084c <__smakebuf_r+0x70>
 8010834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010838:	4630      	mov	r0, r6
 801083a:	f000 f837 	bl	80108ac <_isatty_r>
 801083e:	b128      	cbz	r0, 801084c <__smakebuf_r+0x70>
 8010840:	89a3      	ldrh	r3, [r4, #12]
 8010842:	f023 0303 	bic.w	r3, r3, #3
 8010846:	f043 0301 	orr.w	r3, r3, #1
 801084a:	81a3      	strh	r3, [r4, #12]
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	431d      	orrs	r5, r3
 8010850:	81a5      	strh	r5, [r4, #12]
 8010852:	e7cf      	b.n	80107f4 <__smakebuf_r+0x18>

08010854 <memmove>:
 8010854:	4288      	cmp	r0, r1
 8010856:	b510      	push	{r4, lr}
 8010858:	eb01 0402 	add.w	r4, r1, r2
 801085c:	d902      	bls.n	8010864 <memmove+0x10>
 801085e:	4284      	cmp	r4, r0
 8010860:	4623      	mov	r3, r4
 8010862:	d807      	bhi.n	8010874 <memmove+0x20>
 8010864:	1e43      	subs	r3, r0, #1
 8010866:	42a1      	cmp	r1, r4
 8010868:	d008      	beq.n	801087c <memmove+0x28>
 801086a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801086e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010872:	e7f8      	b.n	8010866 <memmove+0x12>
 8010874:	4402      	add	r2, r0
 8010876:	4601      	mov	r1, r0
 8010878:	428a      	cmp	r2, r1
 801087a:	d100      	bne.n	801087e <memmove+0x2a>
 801087c:	bd10      	pop	{r4, pc}
 801087e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010886:	e7f7      	b.n	8010878 <memmove+0x24>

08010888 <_fstat_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4d07      	ldr	r5, [pc, #28]	@ (80108a8 <_fstat_r+0x20>)
 801088c:	2300      	movs	r3, #0
 801088e:	4604      	mov	r4, r0
 8010890:	4608      	mov	r0, r1
 8010892:	4611      	mov	r1, r2
 8010894:	602b      	str	r3, [r5, #0]
 8010896:	f7f2 fd04 	bl	80032a2 <_fstat>
 801089a:	1c43      	adds	r3, r0, #1
 801089c:	d102      	bne.n	80108a4 <_fstat_r+0x1c>
 801089e:	682b      	ldr	r3, [r5, #0]
 80108a0:	b103      	cbz	r3, 80108a4 <_fstat_r+0x1c>
 80108a2:	6023      	str	r3, [r4, #0]
 80108a4:	bd38      	pop	{r3, r4, r5, pc}
 80108a6:	bf00      	nop
 80108a8:	20001298 	.word	0x20001298

080108ac <_isatty_r>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4d06      	ldr	r5, [pc, #24]	@ (80108c8 <_isatty_r+0x1c>)
 80108b0:	2300      	movs	r3, #0
 80108b2:	4604      	mov	r4, r0
 80108b4:	4608      	mov	r0, r1
 80108b6:	602b      	str	r3, [r5, #0]
 80108b8:	f7f2 fd03 	bl	80032c2 <_isatty>
 80108bc:	1c43      	adds	r3, r0, #1
 80108be:	d102      	bne.n	80108c6 <_isatty_r+0x1a>
 80108c0:	682b      	ldr	r3, [r5, #0]
 80108c2:	b103      	cbz	r3, 80108c6 <_isatty_r+0x1a>
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	bd38      	pop	{r3, r4, r5, pc}
 80108c8:	20001298 	.word	0x20001298

080108cc <abort>:
 80108cc:	b508      	push	{r3, lr}
 80108ce:	2006      	movs	r0, #6
 80108d0:	f000 f86e 	bl	80109b0 <raise>
 80108d4:	2001      	movs	r0, #1
 80108d6:	f7f2 fc94 	bl	8003202 <_exit>

080108da <_calloc_r>:
 80108da:	b570      	push	{r4, r5, r6, lr}
 80108dc:	fba1 5402 	umull	r5, r4, r1, r2
 80108e0:	b93c      	cbnz	r4, 80108f2 <_calloc_r+0x18>
 80108e2:	4629      	mov	r1, r5
 80108e4:	f7fb fc40 	bl	800c168 <_malloc_r>
 80108e8:	4606      	mov	r6, r0
 80108ea:	b928      	cbnz	r0, 80108f8 <_calloc_r+0x1e>
 80108ec:	2600      	movs	r6, #0
 80108ee:	4630      	mov	r0, r6
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	220c      	movs	r2, #12
 80108f4:	6002      	str	r2, [r0, #0]
 80108f6:	e7f9      	b.n	80108ec <_calloc_r+0x12>
 80108f8:	462a      	mov	r2, r5
 80108fa:	4621      	mov	r1, r4
 80108fc:	f7fd fbec 	bl	800e0d8 <memset>
 8010900:	e7f5      	b.n	80108ee <_calloc_r+0x14>

08010902 <_realloc_r>:
 8010902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010906:	4680      	mov	r8, r0
 8010908:	4615      	mov	r5, r2
 801090a:	460c      	mov	r4, r1
 801090c:	b921      	cbnz	r1, 8010918 <_realloc_r+0x16>
 801090e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010912:	4611      	mov	r1, r2
 8010914:	f7fb bc28 	b.w	800c168 <_malloc_r>
 8010918:	b92a      	cbnz	r2, 8010926 <_realloc_r+0x24>
 801091a:	f7fe fb8d 	bl	800f038 <_free_r>
 801091e:	2400      	movs	r4, #0
 8010920:	4620      	mov	r0, r4
 8010922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010926:	f000 f85f 	bl	80109e8 <_malloc_usable_size_r>
 801092a:	4285      	cmp	r5, r0
 801092c:	4606      	mov	r6, r0
 801092e:	d802      	bhi.n	8010936 <_realloc_r+0x34>
 8010930:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010934:	d8f4      	bhi.n	8010920 <_realloc_r+0x1e>
 8010936:	4629      	mov	r1, r5
 8010938:	4640      	mov	r0, r8
 801093a:	f7fb fc15 	bl	800c168 <_malloc_r>
 801093e:	4607      	mov	r7, r0
 8010940:	2800      	cmp	r0, #0
 8010942:	d0ec      	beq.n	801091e <_realloc_r+0x1c>
 8010944:	42b5      	cmp	r5, r6
 8010946:	462a      	mov	r2, r5
 8010948:	4621      	mov	r1, r4
 801094a:	bf28      	it	cs
 801094c:	4632      	movcs	r2, r6
 801094e:	f7fd fcea 	bl	800e326 <memcpy>
 8010952:	4621      	mov	r1, r4
 8010954:	4640      	mov	r0, r8
 8010956:	f7fe fb6f 	bl	800f038 <_free_r>
 801095a:	463c      	mov	r4, r7
 801095c:	e7e0      	b.n	8010920 <_realloc_r+0x1e>

0801095e <_raise_r>:
 801095e:	291f      	cmp	r1, #31
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4605      	mov	r5, r0
 8010964:	460c      	mov	r4, r1
 8010966:	d904      	bls.n	8010972 <_raise_r+0x14>
 8010968:	2316      	movs	r3, #22
 801096a:	6003      	str	r3, [r0, #0]
 801096c:	f04f 30ff 	mov.w	r0, #4294967295
 8010970:	bd38      	pop	{r3, r4, r5, pc}
 8010972:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010974:	b112      	cbz	r2, 801097c <_raise_r+0x1e>
 8010976:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801097a:	b94b      	cbnz	r3, 8010990 <_raise_r+0x32>
 801097c:	4628      	mov	r0, r5
 801097e:	f000 f831 	bl	80109e4 <_getpid_r>
 8010982:	4622      	mov	r2, r4
 8010984:	4601      	mov	r1, r0
 8010986:	4628      	mov	r0, r5
 8010988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801098c:	f000 b818 	b.w	80109c0 <_kill_r>
 8010990:	2b01      	cmp	r3, #1
 8010992:	d00a      	beq.n	80109aa <_raise_r+0x4c>
 8010994:	1c59      	adds	r1, r3, #1
 8010996:	d103      	bne.n	80109a0 <_raise_r+0x42>
 8010998:	2316      	movs	r3, #22
 801099a:	6003      	str	r3, [r0, #0]
 801099c:	2001      	movs	r0, #1
 801099e:	e7e7      	b.n	8010970 <_raise_r+0x12>
 80109a0:	2100      	movs	r1, #0
 80109a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109a6:	4620      	mov	r0, r4
 80109a8:	4798      	blx	r3
 80109aa:	2000      	movs	r0, #0
 80109ac:	e7e0      	b.n	8010970 <_raise_r+0x12>
	...

080109b0 <raise>:
 80109b0:	4b02      	ldr	r3, [pc, #8]	@ (80109bc <raise+0xc>)
 80109b2:	4601      	mov	r1, r0
 80109b4:	6818      	ldr	r0, [r3, #0]
 80109b6:	f7ff bfd2 	b.w	801095e <_raise_r>
 80109ba:	bf00      	nop
 80109bc:	200001b8 	.word	0x200001b8

080109c0 <_kill_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d07      	ldr	r5, [pc, #28]	@ (80109e0 <_kill_r+0x20>)
 80109c4:	2300      	movs	r3, #0
 80109c6:	4604      	mov	r4, r0
 80109c8:	4608      	mov	r0, r1
 80109ca:	4611      	mov	r1, r2
 80109cc:	602b      	str	r3, [r5, #0]
 80109ce:	f7f2 fc08 	bl	80031e2 <_kill>
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	d102      	bne.n	80109dc <_kill_r+0x1c>
 80109d6:	682b      	ldr	r3, [r5, #0]
 80109d8:	b103      	cbz	r3, 80109dc <_kill_r+0x1c>
 80109da:	6023      	str	r3, [r4, #0]
 80109dc:	bd38      	pop	{r3, r4, r5, pc}
 80109de:	bf00      	nop
 80109e0:	20001298 	.word	0x20001298

080109e4 <_getpid_r>:
 80109e4:	f7f2 bbf5 	b.w	80031d2 <_getpid>

080109e8 <_malloc_usable_size_r>:
 80109e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109ec:	1f18      	subs	r0, r3, #4
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	bfbc      	itt	lt
 80109f2:	580b      	ldrlt	r3, [r1, r0]
 80109f4:	18c0      	addlt	r0, r0, r3
 80109f6:	4770      	bx	lr

080109f8 <_init>:
 80109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fa:	bf00      	nop
 80109fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fe:	bc08      	pop	{r3}
 8010a00:	469e      	mov	lr, r3
 8010a02:	4770      	bx	lr

08010a04 <_fini>:
 8010a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a06:	bf00      	nop
 8010a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a0a:	bc08      	pop	{r3}
 8010a0c:	469e      	mov	lr, r3
 8010a0e:	4770      	bx	lr
